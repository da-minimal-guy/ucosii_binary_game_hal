
ucosii_binary_game_hal_part1.elf:     file format elf32-littlenios2
ucosii_binary_game_hal_part1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000023c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001c17c memsz 0x0001c17c flags r-x
    LOAD off    0x0001d19c vaddr 0x0001c19c paddr 0x0001e110 align 2**12
         filesz 0x00001f74 memsz 0x00001f74 flags rw-
    LOAD off    0x00020084 vaddr 0x00020084 paddr 0x00020084 align 2**12
         filesz 0x00000000 memsz 0x0000f478 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b53c  0000023c  0000023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a24  0001b778  0001b778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f74  0001c19c  0001e110  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f478  00020084  00020084  00020084  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0002f4fc  0002f4fc  0001f110  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0001f110  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  0001f110  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000012a0  00000000  00000000  0001f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0003ac19  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000dcc4  00000000  00000000  0005aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0001c204  00000000  00000000  00068cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00003e40  00000000  00000000  00084ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00005e8c  00000000  00000000  00088d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001dedd  00000000  00000000  0008eb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000020  00000000  00000000  000aca70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002478  00000000  00000000  000aca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000006  00000000  00000000  000b4b49  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000b4b4f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b4b54  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b4b55  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b4b56  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b4b5a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b4b5e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000b4b62  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000b4b6b  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000b4b74  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  000b4b7d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000015  00000000  00000000  000b4b8c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d2080  00000000  00000000  000b4ba1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000023c l    d  .text	00000000 .text
0001b778 l    d  .rodata	00000000 .rodata
0001c19c l    d  .rwdata	00000000 .rwdata
00020084 l    d  .bss	00000000 .bss
0002f4fc l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucosii_binary_game_hal_part1_bsp//obj/HAL/src/crt0.o
00000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00003534 l     F .text	000000c0 __sbprintf
0001b938 l     O .rodata	00000010 blanks.1
0001b928 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003758 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000053a8 l     F .text	00000008 __fp_lock
000053bc l     F .text	00000008 __fp_unlock
000053c4 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0001c19c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001b9ec l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007c94 l     F .text	000000f4 __sprint_r.part.0
000090f0 l     F .text	000000c0 __sbprintf
0001bb20 l     O .rodata	00000010 blanks.1
0001bb10 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00009398 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000dffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e108 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e16c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e4d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0000e5b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000e720 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000e80c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e9dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001e084 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0000edd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001e090 l     O .rwdata	00000004 lockid
00020108 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001e094 l     O .rwdata	00000004 lockid
00020110 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00010834 l     F .text	00000048 OS_InitMisc
0001087c l     F .text	0000006c OS_InitRdyList
000109f0 l     F .text	000000e4 OS_InitTCBList
00010754 l     F .text	000000e0 OS_InitEventList
000108e8 l     F .text	00000084 OS_InitTaskIdle
0001096c l     F .text	00000084 OS_InitTaskStat
00010c64 l     F .text	0000006c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00012a1c l     F .text	000000f4 OS_FlagTaskRdy
000127d8 l     F .text	00000164 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
000142ac l     F .text	00000188 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00017c78 l     F .text	00000034 alt_dev_reg
0001ccdc l     O .rwdata	0000106c JTAG_UART
0001dd48 l     O .rwdata	00000030 AV_Config
0001dd78 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001dda8 l     O .rwdata	0000002c Char_LCD_16x2
0001ddd4 l     O .rwdata	0000002c IrDA
0001de00 l     O .rwdata	00000038 PS2_Port
0001de38 l     O .rwdata	00000038 PS2_Port_Dual
0001de70 l     O .rwdata	0000002c Serial_Port
0001de9c l     O .rwdata	00000034 USB
0001ded0 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001df2c l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001df88 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001dfe4 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001e028 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00018764 l     F .text	000002b0 altera_avalon_jtag_uart_irq
00018a14 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00019214 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001a730 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001a9a0 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001ac4c l     F .text	0000003c alt_get_errno
0001ac88 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00020160 g     O .bss	00000004 alt_instruction_exception_handler
000281a4 g     O .bss	00002000 game_task_stk
0001e054 g     O .rwdata	00000004 user_answer
00007918 g     F .text	00000070 _mprec_log10
0001e0e2 g     O .rwdata	00000002 OSTaskNameSize
00000278 g     F .text	00000070 LCD_TEXT
00007a04 g     F .text	00000060 __any_on
00009ca8 g     F .text	00000058 _isatty_r
0001b9f8 g     O .rodata	00000028 __mprec_tinytens
0000e91c g     F .text	000000c0 alt_main
0002f3fc g     O .bss	00000100 alt_irq
00019de4 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00009df4 g     F .text	00000064 _lseek_r
00013260 g     F .text	000000cc OS_MemInit
0001e110 g       *ABS*	00000000 __flash_rwdata_start
00017c14 g     F .text	00000064 OSTimeSet
00019384 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000cc14 g     F .text	00000080 .hidden __eqdf2
00000660 g     F .text	000001f4 keys_task
00005c9c g     F .text	00000060 _gettimeofday_r
000200c4 g     O .bss	00000004 huns_place
000200b8 g     O .bss	00000004 elapsed_timer_value
0000f48c g     F .text	00000638 OSEventPendMulti
00020098 g     O .bss	00000004 SemRandom
0002f4fc g       *ABS*	00000000 __alt_heap_start
0001b0d4 g     F .text	00000024 OSTaskCreateHook
0000adec g     F .text	00000060 _kill_r
00001324 g     F .text	00000038 printf
0001e0ba g     O .rwdata	00000002 OSMboxEn
0000fb1c g     F .text	0000004c OSIntEnter
0000a7b8 g     F .text	0000006c _wcrtomb_r
0000a95c g     F .text	00000098 _signal_r
00007b98 g     F .text	0000005c __sseek
000056fc g     F .text	00000010 __sinit
0000a658 g     F .text	00000148 __swbuf_r
00019bfc g     F .text	00000034 read_CE_bit
00000920 g     F .text	00000264 game_task
0001e0ca g     O .rwdata	00000002 OSQEn
00009d00 g     F .text	00000074 _setlocale_r
0000552c g     F .text	00000068 __sfmoreglue
0000f14c g     F .text	000000d4 __malloc_unlock
0001b13c g     F .text	00000020 OSTaskStatHook
00019f84 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001a47c g     F .text	00000090 alt_up_rs232_read_fd
0002012e g     O .bss	00000001 OSLockNesting
0001e108 g     O .rwdata	00000002 OSDataSize
00020135 g     O .bss	00000001 OSRunning
00009ea8 g     F .text	0000012c memmove
0001b17c g     F .text	00000020 OSInitHookBegin
0001e100 g     O .rwdata	00000002 OSTmrSize
000056e8 g     F .text	00000014 _cleanup
00000854 g     F .text	000000cc timer_counter_task
00006904 g     F .text	000000a4 _Balloc
0001e058 g     O .rwdata	00000004 countdown_timer_value
00020138 g     O .bss	00000004 OSIdleCtr
0000cc94 g     F .text	000000e8 .hidden __gtdf2
0001ae94 g     F .text	00000024 altera_nios2_gen2_irq_init
0001af64 g       .text	00000000 OSStartTsk
00019310 g     F .text	00000074 get_DDRAM_addr
00010f80 g     F .text	000002e0 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00005cfc g     F .text	00000008 __localeconv_l
0001e106 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001e0a6 g     O .rwdata	00000002 OSEventSize
00020130 g     O .bss	00000001 OSPrioHighRdy
00009790 g     F .text	00000060 _fstat_r
0001b0f8 g     F .text	00000024 OSTaskDelHook
000200d0 g     O .bss	00000004 errno
00007b10 g     F .text	00000008 __seofread
0001af44 g       .text	00000000 OSStartHighRdy
00016690 g     F .text	000001dc OSTaskCreateExt
00012300 g     F .text	00000064 OSFlagPendGetFlagsRdy
0001e0e6 g     O .rwdata	00000002 OSTaskStatStkSize
0002a1a4 g     O .bss	00002000 lcdhex_display_task_stk
000113f0 g     F .text	00000324 OSFlagAccept
000149b8 g     F .text	000000bc OSQFlush
00014434 g     F .text	00000144 OSQAccept
000200f4 g     O .bss	00000004 alt_argv
00026054 g       *ABS*	00000000 _gp
000164ec g     F .text	000001a4 OSTaskCreate
00016028 g     F .text	000004c4 OSTaskChangePrio
0002010c g     O .bss	00000004 alt_heapsem
0000e258 g     F .text	00000020 getpid
00011260 g     F .text	00000190 OSDebugInit
0001686c g     F .text	00000344 OSTaskDel
0001332c g     F .text	000001b0 OSMutexAccept
0001cb5c g     O .rwdata	00000180 alt_fd_list
0002cd18 g     O .bss	00000370 OSFlagTbl
0001053c g     F .text	000000b0 OS_EventTaskRemove
0001a8dc g     F .text	00000090 alt_find_dev
000011f4 g     F .text	00000100 memcpy
0001e0d0 g     O .rwdata	00000002 OSRdyTblSize
00019534 g     F .text	00000050 alt_up_character_lcd_write_fd
000053b0 g     F .text	0000000c _cleanup_r
0000de60 g     F .text	000000b8 .hidden __floatsidf
0001aa50 g     F .text	0000007c alt_io_redirect
0000cd7c g     F .text	000000e8 .hidden __ltdf2
0001b778 g       *ABS*	00000000 __DTOR_END__
00019acc g     F .text	00000090 alt_up_irda_write_fd
0001a408 g     F .text	00000074 alt_up_rs232_read_data
0001b470 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0000f220 g     F .text	00000124 OSEventNameGet
0001e0b4 g     O .rwdata	00000002 OSFlagMax
000200a8 g     O .bss	00000004 system_answer
00013994 g     F .text	00000590 OSMutexPend
00007870 g     F .text	000000a8 __ratio
0000fb68 g     F .text	000000f4 OSIntExit
000090d4 g     F .text	0000001c __vfiprintf_internal
0001e0ee g     O .rwdata	00000002 OSTCBSize
0002012f g     O .bss	00000001 OSPrioCur
000198c8 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00018c7c g     F .text	000002c8 altera_avalon_jtag_uart_read
0002008c g     O .bss	00000004 GameMutex
000012f4 g     F .text	00000030 _printf_r
0000ba08 g     F .text	00000064 .hidden __udivsi3
0000e514 g     F .text	000000a4 isatty
0000a9f4 g     F .text	000000c4 _raise_r
0001e0d4 g     O .rwdata	00000002 OSStkWidth
0000926c g     F .text	00000064 __assert_func
0001ba48 g     O .rodata	000000c8 __mprec_tens
0001e0c8 g     O .rwdata	00000002 OSPtrSize
0001e0a8 g     O .rwdata	00000002 OSEventTblSize
00019868 g     F .text	00000060 alt_up_irda_disable_read_interrupt
000200e8 g     O .bss	00000008 alt_timezone
0001aeb8 g       .text	00000000 OSCtxSw
0001b3e0 g     F .text	00000090 alt_icache_flush
000200dc g     O .bss	00000004 __malloc_top_pad
00020148 g     O .bss	00000004 OSTCBList
0000ae4c g     F .text	00000004 _getpid_r
000200e4 g     O .bss	00000004 alt_fd_list_lock
000200a4 g     O .bss	00000004 question_count
00005d04 g     F .text	0000000c _localeconv_r
000097f0 g     F .text	000004b8 __sfvwrite_r
00006d50 g     F .text	000000b0 __i2b
0000aab8 g     F .text	000000bc __sigtramp_r
0002e5ec g     O .bss	00000c30 OSMemTbl
0002014c g     O .bss	00000001 OSTickStepState
00007a64 g     F .text	00000058 _sbrk_r
00020090 g     O .bss	00000004 stateFlag
0001e0cc g     O .rwdata	00000002 OSQMax
00013698 g     F .text	000002fc OSMutexDel
0002d088 g     O .bss	00000800 OSTaskStatStk
00012e84 g     F .text	000000f4 OSMemNameGet
0001e0ac g     O .rwdata	00000002 OSFlagEn
00009fd4 g     F .text	00000064 _read_r
0001e0f2 g     O .rwdata	00000002 OSTimeTickHookEn
00012b10 g     F .text	000000a4 OS_FlagUnlink
00014e80 g     F .text	00000174 OSQPost
0001e07c g     O .rwdata	00000004 alt_max_fd
0001a384 g     F .text	00000044 alt_up_rs232_check_parity
00010b2c g     F .text	0000006c OS_MemCopy
00010b98 g     F .text	000000cc OS_Sched
00009458 g     F .text	00000070 _fclose_r
00012d8c g     F .text	000000f8 OSMemGet
00016ea4 g     F .text	000001bc OSTaskNameSet
00019c30 g     F .text	00000030 read_num_bytes_available
00005324 g     F .text	00000084 fflush
000200d8 g     O .bss	00000004 __malloc_max_sbrked_mem
00020114 g     O .bss	00000004 OSCtxSwCtr
0001b15c g     F .text	00000020 OSTimeTickHook
0001aacc g     F .text	00000180 alt_irq_register
0001e0b6 g     O .rwdata	00000002 OSFlagNameSize
00019b98 g     F .text	00000034 read_RI_bit
000105ec g     F .text	000000fc OS_EventTaskRemoveMulti
0000bac8 g     F .text	000008f0 .hidden __adddf3
000103f4 g     F .text	00000148 OS_EventTaskWaitMulti
00007604 g     F .text	00000108 __b2d
0001e0ce g     O .rwdata	00000002 OSQSize
0000b3e0 g     F .text	00000534 .hidden __umoddi3
0000e848 g     F .text	000000d4 lseek
00015970 g     F .text	00000214 OSSemPend
0001e05c g     O .rwdata	00000004 _global_impure_ptr
0000a038 g     F .text	00000564 _realloc_r
0001e0b8 g     O .rwdata	00000002 OSLowestPrio
0002f4fc g       *ABS*	00000000 __bss_end
0001b1dc g     F .text	00000024 OSTCBInitHook
0001e0fe g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000ecc8 g     F .text	00000108 alt_tick
0000ae50 g     F .text	00000590 .hidden __udivdi3
000096f4 g     F .text	00000024 _fputwc_r
0001e0a0 g     O .rwdata	00000002 OSEventEn
0001ba20 g     O .rodata	00000028 __mprec_bigtens
00006b04 g     F .text	00000138 __s2b
0001e0fa g     O .rwdata	00000002 OSTmrCfgNameSize
0000a8e8 g     F .text	00000018 abort
0000df18 g     F .text	00000090 .hidden __floatunsidf
00007324 g     F .text	00000058 __mcmp
000200c8 g     O .bss	00000004 thos_place
00019c94 g     F .text	0000002c read_data_byte
0000571c g     F .text	00000014 __fp_lock_all
0001293c g     F .text	000000e0 OS_FlagInit
000200cc g     O .bss	00000004 state
0000ec24 g     F .text	000000a4 alt_alarm_stop
00019bcc g     F .text	00000030 read_RE_bit
0001e0dc g     O .rwdata	00000002 OSTaskIdleStkSize
0002015c g     O .bss	00000004 alt_irq_active
00015590 g     F .text	000000b4 OSSemAccept
00013094 g     F .text	000000e0 OSMemPut
000201a4 g     O .bss	00002000 power_switch_task_stk
00012bb4 g     F .text	000001d8 OSMemCreate
00020124 g     O .bss	00000004 OSIdleCtrMax
00019908 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000cc alt_irq_handler
0001cb34 g     O .rwdata	00000028 alt_dev_null
0001e0f0 g     O .rwdata	00000002 OSTicksPerSec
000197d4 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001aeb8 g       .text	00000000 OSIntCtxSw
00019e44 g     F .text	00000074 alt_up_ps2_write_data_byte
0001a710 g     F .text	00000020 alt_dcache_flush_all
00006c3c g     F .text	00000064 __hi0bits
0000dde0 g     F .text	00000080 .hidden __fixdfsi
00020140 g     O .bss	00000004 OSTCBFreeList
0001e110 g       *ABS*	00000000 __ram_rwdata_end
00015b84 g     F .text	00000174 OSSemPendAbort
0001e074 g     O .rwdata	00000008 alt_dev_list
0000ee0c g     F .text	000000f8 write
0001e0f4 g     O .rwdata	00000002 OSVersionNbr
0001c19c g       *ABS*	00000000 __ram_rodata_end
0000e1a8 g     F .text	000000b0 fstat
0001a50c g     F .text	00000094 alt_up_rs232_write_fd
0000e5f4 g     F .text	0000012c kill
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000cd7c g     F .text	000000e8 .hidden __ledf2
0001e09c g     O .rwdata	00000004 OSEndiannessTest
00007054 g     F .text	00000148 __pow5mult
00007da0 g     F .text	00001334 ___vfiprintf_internal_r
0000ba6c g     F .text	0000005c .hidden __umodsi3
000221a4 g     O .bss	00002000 pushbutton_task_stk
0001e0ae g     O .rwdata	00000002 OSFlagGrpSize
0002f4fc g       *ABS*	00000000 end
0001a178 g     F .text	00000098 alt_up_ps2_write_fd
00019944 g     F .text	00000044 alt_up_irda_check_parity
00000b84 g     F .text	00000448 lcdhex_display_task
00018620 g     F .text	00000144 altera_avalon_jtag_uart_init
00010df8 g     F .text	000000c4 OS_TaskStat
000001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
0001b778 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00019294 g     F .text	0000007c alt_avalon_timer_sc_init
0000dfa8 g     F .text	00000054 .hidden __clzsi2
000200a0 g     O .bss	00000004 attempt_count
00018f44 g     F .text	000002d0 altera_avalon_jtag_uart_write
0000570c g     F .text	00000004 __sfp_lock_acquire
00006744 g     F .text	000000d0 memchr
00010ad4 g     F .text	00000058 OS_MemClr
00019438 g     F .text	00000080 alt_up_character_lcd_write
00001424 g     F .text	000020f4 ___vfprintf_internal_r
0001af88 g     F .text	0000014c OSTaskStkInit
00005860 g     F .text	000002fc _free_r
0001bc84 g     O .rodata	00000180 _ctype_b
00009d74 g     F .text	0000000c __locale_mb_cur_max
00010164 g     F .text	00000188 OS_EventTaskRdy
0001b658 g     F .text	00000120 __call_exitprocs
00020120 g     O .bss	00000001 OSCPUUsage
0001e064 g     O .rwdata	00000004 __malloc_sbrk_base
0000023c g     F .text	0000003c _start
000200fc g     O .bss	00000004 _alt_tick_rate
00014a74 g     F .text	00000298 OSQPend
00017778 g     F .text	00000108 OSTimeDly
00001370 g     F .text	0000005c rand
0000719c g     F .text	00000188 __lshift
00020100 g     O .bss	00000004 _alt_nticks
0000ac30 g     F .text	000000a0 signal
0000ea18 g     F .text	000000fc read
00017ce8 g     F .text	000007d4 alt_sys_init
00019684 g     F .text	0000008c alt_up_character_lcd_shift_display
0001b5c8 g     F .text	00000090 __register_exitproc
00020136 g     O .bss	00000001 OSTaskCtr
000200bc g     O .bss	00000004 ones_place
0001a090 g     F .text	0000005c alt_up_ps2_clear_fifo
0001a348 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
00017880 g     F .text	00000154 OSTimeDlyHMSM
00006e00 g     F .text	00000254 __multiply
00019710 g     F .text	0000008c alt_up_character_lcd_erase_pos
00018b20 g     F .text	00000068 altera_avalon_jtag_uart_close
0001c19c g       *ABS*	00000000 __ram_rwdata_start
0001b778 g       *ABS*	00000000 __ram_rodata_start
0002c1a4 g     O .bss	00000028 __malloc_current_mallinfo
0001e0a2 g     O .rwdata	00000002 OSEventMax
0000770c g     F .text	00000164 __d2b
00015cf8 g     F .text	0000011c OSSemPost
0000fcec g     F .text	000000e4 OSSchedUnlock
000184bc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001b308 g     F .text	000000d8 alt_get_fd
00020150 g     O .bss	00000004 OSMemFreeList
0000fe38 g     F .text	000000b8 OSStatInit
000261a4 g     O .bss	00002000 timer_counter_task_stk
00012710 g     F .text	000000c8 OSFlagQuery
0001e0d8 g     O .rwdata	00000002 OSTaskCreateExtEn
00009214 g     F .text	00000058 _close_r
0001b550 g     F .text	00000078 memcmp
00010144 g     F .text	00000020 OS_Dummy
0001857c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002f4fc g       *ABS*	00000000 __alt_stack_base
000185cc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001980c g     F .text	0000005c alt_up_irda_enable_read_interrupt
000035f4 g     F .text	00000164 __swsetup_r
0002f21c g     O .bss	000001e0 OSQTbl
0000c3b8 g     F .text	0000085c .hidden __divdf3
00005594 g     F .text	00000154 __sfp
00007988 g     F .text	0000007c __copybits
0001c5c0 g     O .rwdata	00000408 __malloc_av_
00005718 g     F .text	00000004 __sinit_lock_release
00020144 g     O .bss	00000004 OSTCBHighRdy
0000ce64 g     F .text	00000674 .hidden __muldf3
00007abc g     F .text	00000054 __sread
00020154 g     O .bss	00000004 OSQFreeList
0001a2a8 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001b200 g     F .text	00000108 alt_find_file
0001a76c g     F .text	000000a8 alt_dev_llist_insert
0000f024 g     F .text	00000128 __malloc_lock
0000eb6c g     F .text	000000b8 sbrk
0000f344 g     F .text	00000148 OSEventNameSet
000052c4 g     F .text	00000060 _fflush_r
000092e4 g     F .text	000000b4 _calloc_r
00020131 g     O .bss	00000001 OSRdyGrp
0000e278 g     F .text	00000260 gettimeofday
00020084 g       *ABS*	00000000 __bss_start
00006814 g     F .text	000000f0 memset
00000fcc g     F .text	00000228 main
000200f8 g     O .bss	00000004 alt_envp
000200d4 g     O .bss	00000004 __malloc_max_total_mem
0001851c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a7a0 g     F .text	00000018 __swbuf
0000135c g     F .text	00000014 srand
0001bf20 g     O .rodata	00000100 OSUnMapTbl
0001e0d2 g     O .rwdata	00000002 OSSemEn
000195f8 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00012364 g     F .text	000003ac OSFlagPost
00007bf4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
000094c8 g     F .text	00000070 fclose
000102ec g     F .text	00000108 OS_EventTaskWait
0001a020 g     F .text	00000070 alt_up_ps2_read_data_byte
00010ebc g     F .text	000000c4 OS_TaskStatStkChk
00016bb0 g     F .text	00000158 OSTaskDelReq
00003954 g     F .text	00001748 _dtoa_r
000200ac g     O .bss	00000004 current_score
00005f64 g     F .text	000007e0 _malloc_r
0000a8b8 g     F .text	00000030 __ascii_wctomb
000013cc g     F .text	00000058 time
000134dc g     F .text	000001bc OSMutexCreate
000004fc g     F .text	00000164 pushbutton_task
0001e080 g     O .rwdata	00000004 alt_errno
0000fdd0 g     F .text	00000068 OSStart
00009538 g     F .text	00000020 _fiprintf_r
00020084 g     O .bss	00000004 StateMutex
0000acd0 g     F .text	00000060 _init_signal
000200b0 g     O .bss	00000004 seconds
0000efc4 g     F .text	00000060 __env_unlock
00005b5c g     F .text	00000098 _fwalk
00017060 g     F .text	000001e0 OSTaskResume
00013174 g     F .text	000000ec OSMemQuery
0001e0e4 g     O .rwdata	00000002 OSTaskStatEn
00019988 g     F .text	00000040 alt_up_irda_write_data
00009e58 g     F .text	0000000c _mbtowc_r
0001e0be g     O .rwdata	00000002 OSMemMax
00014ff4 g     F .text	0000017c OSQPostFront
0001a210 g     F .text	0000003c alt_up_ps2_open_dev
0000b914 g     F .text	00000080 .hidden __divsi3
00020132 g     O .bss	00000003 OSRdyTbl
0001e098 g     O .rwdata	00000002 OSDebugEn
000193fc g     F .text	0000003c alt_up_character_lcd_open_dev
00005744 g     F .text	0000011c _malloc_trim_r
00019d88 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001b778 g       *ABS*	00000000 __CTOR_END__
0001e0b0 g     O .rwdata	00000002 OSFlagNodeSize
0001e0f8 g     O .rwdata	00000002 OSTmrCfgMax
000193c4 g     F .text	00000038 alt_up_character_lcd_init
0000a59c g     F .text	000000b8 strcmp
00014578 g     F .text	000001b0 OSQCreate
00016d08 g     F .text	0000019c OSTaskNameGet
0001b778 g       *ABS*	00000000 __flash_rodata_start
00015170 g     F .text	00000218 OSQPostOpt
0000fef0 g     F .text	00000234 OSTimeTick
0001e0e0 g     O .rwdata	00000002 OSTaskMax
0001b778 g       *ABS*	00000000 __DTOR_LIST__
00015644 g     F .text	000000dc OSSemCreate
0001e104 g     O .rwdata	00000002 OSTmrWheelSize
0001413c g     F .text	00000170 OSMutexQuery
0001a5a0 g     F .text	0000003c alt_up_rs232_open_dev
0000cc14 g     F .text	00000080 .hidden __nedf2
0001e0da g     O .rwdata	00000002 OSTaskDelEn
00015e14 g     F .text	00000114 OSSemQuery
00014728 g     F .text	00000290 OSQDel
00014d0c g     F .text	00000174 OSQPendAbort
00017cac g     F .text	0000003c alt_irq_init
0000eb14 g     F .text	00000058 alt_release_fd
00019c60 g     F .text	00000034 read_data_valid
0001979c g     F .text	00000038 alt_up_character_lcd_cursor_off
0001be04 g     O .rodata	00000100 .hidden __clz_tab
000004ac g     F .text	00000050 power_switch_task
000200c0 g     O .bss	00000004 tens_place
000200e0 g     O .bss	00000004 _PathLocale
00019f20 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001b508 g     F .text	00000014 atexit
000091b0 g     F .text	00000064 _write_r
0000fc5c g     F .text	00000090 OSSchedLock
00009d80 g     F .text	00000074 setlocale
00011714 g     F .text	00000110 OSFlagCreate
0001e060 g     O .rwdata	00000004 _impure_ptr
000200f0 g     O .bss	00000004 alt_argc
0000509c g     F .text	00000228 __sflush_r
0001a878 g     F .text	00000064 _do_dtors
0001e0aa g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
0002009c g     O .bss	00000004 SemPower
00020164 g     O .bss	00000040 Msg1Storage
00011824 g     F .text	00000258 OSFlagDel
00020118 g     O .bss	00000004 OSEventFreeList
00020088 g     O .bss	00000004 TimerMutex
00000020 g       .exceptions	00000000 alt_irq_entry
00009e64 g     F .text	00000044 __ascii_mbtowc
000075a8 g     F .text	0000005c __ulp
00011d00 g     F .text	00000600 OSFlagPend
0001e0f6 g     O .rwdata	00000002 OSTmrEn
00005730 g     F .text	00000014 __fp_unlock_all
0001e06c g     O .rwdata	00000008 alt_fs_list
00010cd0 g     F .text	00000074 OS_StrCopy
0001a24c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001a3c8 g     F .text	00000040 alt_up_rs232_write_data
0002c1cc g     O .bss	0000000c alt_resettime
0001e0c0 g     O .rwdata	00000002 OSMemNameSize
0001b19c g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001e0ec g     O .rwdata	00000002 OSTCBPrioTblMax
00005d10 g     F .text	0000000c localeconv
00005ecc g     F .text	00000098 __swhatbuf_r
0001e0e8 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001e0bc g     O .rwdata	00000002 OSMemEn
0001e0c6 g     O .rwdata	00000002 OSMutexEn
0001e110 g       *ABS*	00000000 _edata
0002f4fc g       *ABS*	00000000 _end
0002012d g     O .bss	00000001 OSIntNesting
00009590 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
00018b88 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000179d4 g     F .text	000001e0 OSTimeDlyResume
00011bac g     F .text	00000154 OSFlagNameSet
000003d8 g     F .text	000000d4 POWER_OFF_RESET
00017240 g     F .text	000001b8 OSTaskStkChk
0001e0c2 g     O .rwdata	00000002 OSMemSize
00007b18 g     F .text	00000080 __swrite
0001e068 g     O .rwdata	00000004 __malloc_trim_threshold
00020094 g     O .bss	00000004 MsgQ
0002013c g     O .bss	00000004 OSTCBCur
0001b51c g     F .text	00000034 exit
00009558 g     F .text	00000038 fiprintf
000199c8 g     F .text	00000074 alt_up_irda_read_data
0000a654 g     F .text	00000004 _vfiprintf_r
00013f24 g     F .text	00000218 OSMutexPost
0001e0c4 g     O .rwdata	00000002 OSMemTblSize
00005bf4 g     F .text	000000a8 _fwalk_reent
00019cc0 g     F .text	000000c8 alt_up_ps2_init
0000737c g     F .text	0000022c __mdiff
0000b994 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005710 g     F .text	00000004 __sfp_lock_release
0000fac4 g     F .text	00000058 OSInit
000175e0 g     F .text	00000128 OSTaskQuery
000194b8 g     F .text	0000007c alt_up_character_lcd_string
000154e8 g     F .text	000000a8 OS_QInit
00010d44 g     F .text	00000054 OS_StrLen
00019b5c g     F .text	0000003c alt_up_irda_open_dev
00012f78 g     F .text	0000011c OSMemNameSet
0001bb80 g     O .rodata	00000101 _ctype_
0000dd8c g     F .text	00000054 .hidden __unorddf2
0001e0de g     O .rwdata	00000002 OSTaskProfileEn
00020158 g     O .bss	00000004 OSTime
0002d888 g     O .bss	00000800 OSTaskIdleStk
0000e134 g     F .text	00000038 _exit
0001a5dc g     F .text	00000134 alt_alarm_start
00011a7c g     F .text	00000130 OSFlagNameGet
00017bb4 g     F .text	00000060 OSTimeGet
000200b4 g     O .bss	00000004 minutes
00005d1c g     F .text	000001b0 __smakebuf_r
00019eb8 g     F .text	00000068 alt_up_ps2_wait_for_ack
00007bfc g     F .text	00000098 strlen
0000a900 g     F .text	0000005c _init_signal_r
0001b11c g     F .text	00000020 OSTaskSwHook
0001ad40 g     F .text	00000154 open
0002c1d8 g     O .bss	00000b40 OSEventTbl
0000cc94 g     F .text	000000e8 .hidden __gedf2
000002e8 g     F .text	000000f0 DEC_TO_HEX
0002e0dc g     O .bss	00000510 OSTCBTbl
00015f28 g     F .text	00000100 OSSemSet
000092d0 g     F .text	00000014 __assert
00007d88 g     F .text	00000018 __sprint_r
0001a96c g     F .text	00000034 alt_icache_flush_all
00019584 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001e10c g     O .rwdata	00000004 alt_priority_mask
00015720 g     F .text	00000250 OSSemDel
0002011c g     O .bss	00000004 OSFlagFreeList
0001e0a4 g     O .rwdata	00000002 OSEventNameSize
00003518 g     F .text	0000001c __vfprintf_internal
0002012c g     O .bss	00000001 OSStatRdy
0002e088 g     O .bss	00000054 OSTCBPrioTbl
0000a8ac g     F .text	0000000c _wctomb_r
0000ef04 g     F .text	000000c0 __env_lock
0001a0ec g     F .text	0000008c alt_up_ps2_read_fd
0001e0ea g     O .rwdata	00000002 OSTaskSwHookEn
0000d4d8 g     F .text	000008b4 .hidden __subdf3
00019a3c g     F .text	00000090 alt_up_irda_read_fd
00006ca0 g     F .text	000000b0 __lo0bits
0001e088 g     O .rwdata	00000008 alt_alarm_list
0001e0b2 g     O .rwdata	00000002 OSFlagWidth
0001a814 g     F .text	00000064 _do_ctors
0000ad30 g     F .text	000000bc __sigtramp
0001a308 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a824 g     F .text	00000088 wcrtomb
0000e038 g     F .text	000000d0 close
00020104 g     O .bss	00000004 alt_envsem
00020128 g     O .bss	00000004 OSIdleCtrRun
0001c9c8 g     O .rwdata	0000016c __global_locale
00010124 g     F .text	00000020 OSVersion
0001e0fc g     O .rwdata	00000002 OSTmrCfgWheelSize
0000e788 g     F .text	00000084 alt_load
00017708 g     F .text	00000070 OS_TaskStkClr
0001e0d6 g     O .rwdata	00000002 OSTaskCreateEn
000106e8 g     F .text	0000006c OS_EventWaitListInit
00009718 g     F .text	00000078 fputwc
0000ab74 g     F .text	000000bc raise
0001b1bc g     F .text	00000020 OSTaskIdleHook
00005714 g     F .text	00000004 __sinit_lock_acquire
000069cc g     F .text	00000138 __multadd
000241a4 g     O .bss	00002000 keys_task_stk
000173f8 g     F .text	000001e8 OSTaskSuspend
000069a8 g     F .text	00000024 _Bfree
00010d98 g     F .text	00000060 OS_TaskIdle
0001e102 g     O .rwdata	00000002 OSTmrTblSize
00015388 g     F .text	00000160 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08408f14 	ori	at,at,572
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c80 	call	1c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000fb1c0 	call	fb1c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001226 	beq	r2,zero,184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	008000f4 	movhi	r2,3
 148:	1885883a 	add	r2,r3,r2
 14c:	10fcff17 	ldw	r3,-3076(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	008000f4 	movhi	r2,3
 15c:	2085883a 	add	r2,r4,r2
 160:	10bd0017 	ldw	r2,-3072(r2)
 164:	e17ffd17 	ldw	r5,-12(fp)
 168:	1009883a 	mov	r4,r2
 16c:	183ee83a 	callr	r3
#endif
        break;
 170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 174:	0005313a 	rdctl	r2,ipending
 178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	00000706 	br	1a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 19c:	003fe306 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 1a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a4:	e0bfff17 	ldw	r2,-4(fp)
 1a8:	103fdd1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1ac:	000fb680 	call	fb68 <OSIntExit>
}
 1b0:	0001883a 	nop
 1b4:	e037883a 	mov	sp,fp
 1b8:	dfc00117 	ldw	ra,4(sp)
 1bc:	df000017 	ldw	fp,0(sp)
 1c0:	dec00204 	addi	sp,sp,8
 1c4:	f800283a 	ret

000001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c8:	defffb04 	addi	sp,sp,-20
 1cc:	dfc00415 	stw	ra,16(sp)
 1d0:	df000315 	stw	fp,12(sp)
 1d4:	df000304 	addi	fp,sp,12
 1d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1dc:	000531fa 	rdctl	r2,exception
 1e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e4:	e0bfff17 	ldw	r2,-4(fp)
 1e8:	1004d0ba 	srli	r2,r2,2
 1ec:	108007cc 	andi	r2,r2,31
 1f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f4:	0005333a 	rdctl	r2,badaddr
 1f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a84317 	ldw	r2,-24308(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a84317 	ldw	r2,-24308(gp)
 208:	e0ffff17 	ldw	r3,-4(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17ffd17 	ldw	r5,-12(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

0000023c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     23c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     240:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     244:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     248:	d6981514 	ori	gp,gp,24660
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     24c:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     250:	10802114 	ori	r2,r2,132

    movhi r3, %hi(__bss_end)
     254:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     258:	18fd3f14 	ori	r3,r3,62716

    beq r2, r3, 1f
     25c:	10c00326 	beq	r2,r3,26c <_start+0x30>

0:
    stw zero, (r2)
     260:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     264:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     268:	10fffd36 	bltu	r2,r3,260 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     26c:	000e7880 	call	e788 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     270:	000e91c0 	call	e91c <alt_main>

00000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     274:	003fff06 	br	274 <alt_after_alt_main>

00000278 <LCD_TEXT>:
volatile int ones_place = 0, tens_place = 0, huns_place = 0, thos_place = 0; // Guarded by nothing
volatile int state = IDLE; // Guarded by StateMutex

// MY GLOBAL FNCs
void LCD_TEXT(char * text_ptr)
{
     278:	defffd04 	addi	sp,sp,-12
     27c:	df000215 	stw	fp,8(sp)
     280:	df000204 	addi	fp,sp,8
     284:	e13ffe15 	stw	r4,-8(fp)
	volatile char *LCD_pointer = (char *)0xFF203050;
     288:	00bfc834 	movhi	r2,65312
     28c:	108c1404 	addi	r2,r2,12368
     290:	e0bfff15 	stw	r2,-4(fp)

    while (*(text_ptr))
     294:	00000806 	br	2b8 <LCD_TEXT+0x40>
    {
        *(LCD_pointer + 1) = *(text_ptr);
     298:	e0bfff17 	ldw	r2,-4(fp)
     29c:	10800044 	addi	r2,r2,1
     2a0:	e0fffe17 	ldw	r3,-8(fp)
     2a4:	18c00003 	ldbu	r3,0(r3)
     2a8:	10c00005 	stb	r3,0(r2)
        ++text_ptr;
     2ac:	e0bffe17 	ldw	r2,-8(fp)
     2b0:	10800044 	addi	r2,r2,1
     2b4:	e0bffe15 	stw	r2,-8(fp)
    while (*(text_ptr))
     2b8:	e0bffe17 	ldw	r2,-8(fp)
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10803fcc 	andi	r2,r2,255
     2c4:	1080201c 	xori	r2,r2,128
     2c8:	10bfe004 	addi	r2,r2,-128
     2cc:	103ff21e 	bne	r2,zero,298 <LCD_TEXT+0x20>
    }
}
     2d0:	0001883a 	nop
     2d4:	0001883a 	nop
     2d8:	e037883a 	mov	sp,fp
     2dc:	df000017 	ldw	fp,0(sp)
     2e0:	dec00104 	addi	sp,sp,4
     2e4:	f800283a 	ret

000002e8 <DEC_TO_HEX>:
int  DEC_TO_HEX(int IN_value)
{
     2e8:	defffd04 	addi	sp,sp,-12
     2ec:	df000215 	stw	fp,8(sp)
     2f0:	df000204 	addi	fp,sp,8
     2f4:	e13ffe15 	stw	r4,-8(fp)
    int converted_HEX = 0;
     2f8:	e03fff15 	stw	zero,-4(fp)
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	108002a8 	cmpgeui	r2,r2,10
     304:	10002e1e 	bne	r2,zero,3c0 <DEC_TO_HEX+0xd8>
     308:	e0bffe17 	ldw	r2,-8(fp)
     30c:	100690ba 	slli	r3,r2,2
     310:	00800034 	movhi	r2,0
     314:	1885883a 	add	r2,r3,r2
     318:	1080c817 	ldw	r2,800(r2)
     31c:	1000683a 	jmp	r2
     320:	00000348 	cmpgei	zero,zero,13
     324:	00000354 	movui	zero,13
     328:	00000360 	cmpeqi	zero,zero,13
     32c:	0000036c 	andhi	zero,zero,13
     330:	00000378 	rdprs	zero,zero,13
     334:	00000384 	movi	zero,14
     338:	00000390 	cmplti	zero,zero,14
     33c:	0000039c 	xori	zero,zero,14
     340:	000003a8 	cmpgeui	zero,zero,14
     344:	000003b4 	movhi	zero,14

    switch (IN_value)
    {
        case 0x0: converted_HEX = 0x3F; break;
     348:	00800fc4 	movi	r2,63
     34c:	e0bfff15 	stw	r2,-4(fp)
     350:	00001c06 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x1: converted_HEX = 0x06; break;
     354:	00800184 	movi	r2,6
     358:	e0bfff15 	stw	r2,-4(fp)
     35c:	00001906 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x2: converted_HEX = 0x5B; break;
     360:	008016c4 	movi	r2,91
     364:	e0bfff15 	stw	r2,-4(fp)
     368:	00001606 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x3: converted_HEX = 0x4F; break;
     36c:	008013c4 	movi	r2,79
     370:	e0bfff15 	stw	r2,-4(fp)
     374:	00001306 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x4: converted_HEX = 0x66; break;
     378:	00801984 	movi	r2,102
     37c:	e0bfff15 	stw	r2,-4(fp)
     380:	00001006 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x5: converted_HEX = 0x6D; break;
     384:	00801b44 	movi	r2,109
     388:	e0bfff15 	stw	r2,-4(fp)
     38c:	00000d06 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x6: converted_HEX = 0x7D; break;
     390:	00801f44 	movi	r2,125
     394:	e0bfff15 	stw	r2,-4(fp)
     398:	00000a06 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x7: converted_HEX = 0x07; break;
     39c:	008001c4 	movi	r2,7
     3a0:	e0bfff15 	stw	r2,-4(fp)
     3a4:	00000706 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x8: converted_HEX = 0x7F; break;
     3a8:	00801fc4 	movi	r2,127
     3ac:	e0bfff15 	stw	r2,-4(fp)
     3b0:	00000406 	br	3c4 <DEC_TO_HEX+0xdc>
        case 0x9: converted_HEX = 0x6F; break;
     3b4:	00801bc4 	movi	r2,111
     3b8:	e0bfff15 	stw	r2,-4(fp)
     3bc:	00000106 	br	3c4 <DEC_TO_HEX+0xdc>
        default: break;
     3c0:	0001883a 	nop
    }

    return converted_HEX;
     3c4:	e0bfff17 	ldw	r2,-4(fp)
}
     3c8:	e037883a 	mov	sp,fp
     3cc:	df000017 	ldw	fp,0(sp)
     3d0:	dec00104 	addi	sp,sp,4
     3d4:	f800283a 	ret

000003d8 <POWER_OFF_RESET>:
void POWER_OFF_RESET()
{
     3d8:	defffd04 	addi	sp,sp,-12
     3dc:	dfc00215 	stw	ra,8(sp)
     3e0:	df000115 	stw	fp,4(sp)
     3e4:	df000104 	addi	fp,sp,4
	INT8U err;

    ones_place = 0;
     3e8:	d0281a15 	stw	zero,-24472(gp)
    tens_place = 0;
     3ec:	d0281b15 	stw	zero,-24468(gp)
    huns_place = 0;
     3f0:	d0281c15 	stw	zero,-24464(gp)
    thos_place = 0;
     3f4:	d0281d15 	stw	zero,-24460(gp)

    // State
	OSMutexPend(StateMutex, 0, &err);
     3f8:	d0a80c17 	ldw	r2,-24528(gp)
     3fc:	e0ffffc4 	addi	r3,fp,-1
     400:	180d883a 	mov	r6,r3
     404:	000b883a 	mov	r5,zero
     408:	1009883a 	mov	r4,r2
     40c:	00139940 	call	13994 <OSMutexPend>
	state = IDLE;
     410:	d0281e15 	stw	zero,-24456(gp)
	OSMutexPost(StateMutex);
     414:	d0a80c17 	ldw	r2,-24528(gp)
     418:	1009883a 	mov	r4,r2
     41c:	0013f240 	call	13f24 <OSMutexPost>

	// Timer Values
	OSMutexPend(TimerMutex, 0, &err);
     420:	d0a80d17 	ldw	r2,-24524(gp)
     424:	e0ffffc4 	addi	r3,fp,-1
     428:	180d883a 	mov	r6,r3
     42c:	000b883a 	mov	r5,zero
     430:	1009883a 	mov	r4,r2
     434:	00139940 	call	13994 <OSMutexPend>
	elapsed_timer_value = 0;
     438:	d0281915 	stw	zero,-24476(gp)
	countdown_timer_value = 10;
     43c:	00800284 	movi	r2,10
     440:	d0a00115 	stw	r2,-32764(gp)
	seconds = 0;
     444:	d0281715 	stw	zero,-24484(gp)
	minutes = 0;
     448:	d0281815 	stw	zero,-24480(gp)
	OSMutexPost(TimerMutex);
     44c:	d0a80d17 	ldw	r2,-24524(gp)
     450:	1009883a 	mov	r4,r2
     454:	0013f240 	call	13f24 <OSMutexPost>

	// Game Variables
	OSMutexPend(GameMutex, 0, &err);
     458:	d0a80e17 	ldw	r2,-24520(gp)
     45c:	e0ffffc4 	addi	r3,fp,-1
     460:	180d883a 	mov	r6,r3
     464:	000b883a 	mov	r5,zero
     468:	1009883a 	mov	r4,r2
     46c:	00139940 	call	13994 <OSMutexPend>
	current_score = 0;
     470:	d0281615 	stw	zero,-24488(gp)
	attempt_count = 0;
     474:	d0281315 	stw	zero,-24500(gp)
	question_count = 0;
     478:	d0281415 	stw	zero,-24496(gp)
	OSMutexPost(GameMutex);
     47c:	d0a80e17 	ldw	r2,-24520(gp)
     480:	1009883a 	mov	r4,r2
     484:	0013f240 	call	13f24 <OSMutexPost>

	// Calling Game Task
    OSSemPost(SemRandom);
     488:	d0a81117 	ldw	r2,-24508(gp)
     48c:	1009883a 	mov	r4,r2
     490:	0015cf80 	call	15cf8 <OSSemPost>
}
     494:	0001883a 	nop
     498:	e037883a 	mov	sp,fp
     49c:	dfc00117 	ldw	ra,4(sp)
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00204 	addi	sp,sp,8
     4a8:	f800283a 	ret

000004ac <power_switch_task>:

// MY TASKs
void power_switch_task(void * pdata)
{
     4ac:	defffc04 	addi	sp,sp,-16
     4b0:	dfc00315 	stw	ra,12(sp)
     4b4:	df000215 	stw	fp,8(sp)
     4b8:	df000204 	addi	fp,sp,8
     4bc:	e13ffe15 	stw	r4,-8(fp)
	int SW_value = 0;
     4c0:	e03fff15 	stw	zero,-4(fp)

	while (1)
    {
    	SW_value = IORD_ALTERA_AVALON_PIO_DATA(SLIDER_SWITCHES_BASE);
     4c4:	00bfc834 	movhi	r2,65312
     4c8:	10801037 	ldwio	r2,64(r2)
     4cc:	e0bfff15 	stw	r2,-4(fp)

        if ((SW_value & 0x20000) == 131072)
     4d0:	e0bfff17 	ldw	r2,-4(fp)
     4d4:	108000ac 	andhi	r2,r2,2
     4d8:	10000426 	beq	r2,zero,4ec <power_switch_task+0x40>
        {
        	OSSemPost(SemPower);
     4dc:	d0a81217 	ldw	r2,-24504(gp)
     4e0:	1009883a 	mov	r4,r2
     4e4:	0015cf80 	call	15cf8 <OSSemPost>
     4e8:	00000106 	br	4f0 <power_switch_task+0x44>
//        	printf("\nONN");
        }
        else
        {
        	POWER_OFF_RESET();
     4ec:	00003d80 	call	3d8 <POWER_OFF_RESET>
//        	printf("\nOFF");
        }

		OSTimeDly(1);
     4f0:	01000044 	movi	r4,1
     4f4:	00177780 	call	17778 <OSTimeDly>
    	SW_value = IORD_ALTERA_AVALON_PIO_DATA(SLIDER_SWITCHES_BASE);
     4f8:	003ff206 	br	4c4 <power_switch_task+0x18>

000004fc <pushbutton_task>:
    }
}

void pushbutton_task(void * pdata)
{
     4fc:	defff904 	addi	sp,sp,-28
     500:	dfc00615 	stw	ra,24(sp)
     504:	df000515 	stw	fp,20(sp)
     508:	df000504 	addi	fp,sp,20
     50c:	e13ffb15 	stw	r4,-20(fp)
	volatile int * KEY_pointer = (int *)0xFF200050;
     510:	00bfc834 	movhi	r2,65312
     514:	10801404 	addi	r2,r2,80
     518:	e0bffe15 	stw	r2,-8(fp)

	int KEY_value = 0, KEY_take_in = 0;
     51c:	e03ffd15 	stw	zero,-12(fp)
     520:	e03fff15 	stw	zero,-4(fp)

	INT8U err;

    while (1)
    {
    	KEY_value = *(KEY_pointer);
     524:	e0bffe17 	ldw	r2,-8(fp)
     528:	10800017 	ldw	r2,0(r2)
     52c:	e0bffd15 	stw	r2,-12(fp)

    	OSSemPend(SemPower, 0, &err);
     530:	d0a81217 	ldw	r2,-24504(gp)
     534:	e0fffcc4 	addi	r3,fp,-13
     538:	180d883a 	mov	r6,r3
     53c:	000b883a 	mov	r5,zero
     540:	1009883a 	mov	r4,r2
     544:	00159700 	call	15970 <OSSemPend>

	    if ((KEY_value & 0b001) && ((KEY_value & 0b001) != (KEY_take_in & 0b001)) && (state != PLAY))
     548:	e0bffd17 	ldw	r2,-12(fp)
     54c:	1080004c 	andi	r2,r2,1
     550:	10001226 	beq	r2,zero,59c <pushbutton_task+0xa0>
     554:	e0fffd17 	ldw	r3,-12(fp)
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	1884f03a 	xor	r2,r3,r2
     560:	1080004c 	andi	r2,r2,1
     564:	10000d26 	beq	r2,zero,59c <pushbutton_task+0xa0>
     568:	d0a81e17 	ldw	r2,-24456(gp)
     56c:	10800060 	cmpeqi	r2,r2,1
     570:	10000a1e 	bne	r2,zero,59c <pushbutton_task+0xa0>
	    {
	    	OSFlagPost(stateFlag, 0x01, OS_FLAG_SET, &err);
     574:	d0a80f17 	ldw	r2,-24516(gp)
     578:	e0fffcc4 	addi	r3,fp,-13
     57c:	180f883a 	mov	r7,r3
     580:	01800044 	movi	r6,1
     584:	01400044 	movi	r5,1
     588:	1009883a 	mov	r4,r2
     58c:	00123640 	call	12364 <OSFlagPost>
	    	printf("\nKEY0");
     590:	010000b4 	movhi	r4,2
     594:	212dfe04 	addi	r4,r4,-18440
     598:	00013240 	call	1324 <printf>
	    }

	    if ((KEY_value & 0b010) && ((KEY_value & 0b010) != (KEY_take_in & 0b010)))
     59c:	e0bffd17 	ldw	r2,-12(fp)
     5a0:	1080008c 	andi	r2,r2,2
     5a4:	10001226 	beq	r2,zero,5f0 <pushbutton_task+0xf4>
     5a8:	e0fffd17 	ldw	r3,-12(fp)
     5ac:	e0bfff17 	ldw	r2,-4(fp)
     5b0:	1884f03a 	xor	r2,r3,r2
     5b4:	1080008c 	andi	r2,r2,2
     5b8:	10000d26 	beq	r2,zero,5f0 <pushbutton_task+0xf4>
	    {
	    	OSFlagPost(stateFlag, 0x02, OS_FLAG_SET, &err);
     5bc:	d0a80f17 	ldw	r2,-24516(gp)
     5c0:	e0fffcc4 	addi	r3,fp,-13
     5c4:	180f883a 	mov	r7,r3
     5c8:	01800044 	movi	r6,1
     5cc:	01400084 	movi	r5,2
     5d0:	1009883a 	mov	r4,r2
     5d4:	00123640 	call	12364 <OSFlagPost>
	    	OSMutexPost(StateMutex);
     5d8:	d0a80c17 	ldw	r2,-24528(gp)
     5dc:	1009883a 	mov	r4,r2
     5e0:	0013f240 	call	13f24 <OSMutexPost>
	    	printf("\nKEY1");
     5e4:	010000b4 	movhi	r4,2
     5e8:	212e0004 	addi	r4,r4,-18432
     5ec:	00013240 	call	1324 <printf>
	    }

	    if ((KEY_value & 0b100) && ((KEY_value & 0b100) != (KEY_take_in & 0b100)) && (state != IDLE))
     5f0:	e0bffd17 	ldw	r2,-12(fp)
     5f4:	1080010c 	andi	r2,r2,4
     5f8:	10001126 	beq	r2,zero,640 <pushbutton_task+0x144>
     5fc:	e0fffd17 	ldw	r3,-12(fp)
     600:	e0bfff17 	ldw	r2,-4(fp)
     604:	1884f03a 	xor	r2,r3,r2
     608:	1080010c 	andi	r2,r2,4
     60c:	10000c26 	beq	r2,zero,640 <pushbutton_task+0x144>
     610:	d0a81e17 	ldw	r2,-24456(gp)
     614:	10000a26 	beq	r2,zero,640 <pushbutton_task+0x144>
	    {
	    	OSFlagPost(stateFlag, 0x04, OS_FLAG_SET, &err);
     618:	d0a80f17 	ldw	r2,-24516(gp)
     61c:	e0fffcc4 	addi	r3,fp,-13
     620:	180f883a 	mov	r7,r3
     624:	01800044 	movi	r6,1
     628:	01400104 	movi	r5,4
     62c:	1009883a 	mov	r4,r2
     630:	00123640 	call	12364 <OSFlagPost>
	    	printf("\nKEY2");
     634:	010000b4 	movhi	r4,2
     638:	212e0204 	addi	r4,r4,-18424
     63c:	00013240 	call	1324 <printf>
	    }
	    KEY_take_in = KEY_value;
     640:	e0bffd17 	ldw	r2,-12(fp)
     644:	e0bfff15 	stw	r2,-4(fp)

	    OSSemPost(SemPower);
     648:	d0a81217 	ldw	r2,-24504(gp)
     64c:	1009883a 	mov	r4,r2
     650:	0015cf80 	call	15cf8 <OSSemPost>

	    OSTimeDly(1);
     654:	01000044 	movi	r4,1
     658:	00177780 	call	17778 <OSTimeDly>
    	KEY_value = *(KEY_pointer);
     65c:	003fb106 	br	524 <pushbutton_task+0x28>

00000660 <keys_task>:
    }
}

void keys_task(void * pdata) // state machine task
{
     660:	defffa04 	addi	sp,sp,-24
     664:	dfc00515 	stw	ra,20(sp)
     668:	df000415 	stw	fp,16(sp)
     66c:	df000404 	addi	fp,sp,16
     670:	e13ffc15 	stw	r4,-16(fp)

	int user_answer;

	while (1)
	{
		value = OSFlagAccept(stateFlag, 0x04 + 0x02 + 0x01, OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME, &err);
     674:	d0a80f17 	ldw	r2,-24516(gp)
     678:	e0fffdc4 	addi	r3,fp,-9
     67c:	180f883a 	mov	r7,r3
     680:	018020c4 	movi	r6,131
     684:	014001c4 	movi	r5,7
     688:	1009883a 	mov	r4,r2
     68c:	00113f00 	call	113f0 <OSFlagAccept>
     690:	e0bfff8d 	sth	r2,-2(fp)

		if ((value & 0x01) == 0x01)
     694:	e0bfff8b 	ldhu	r2,-2(fp)
     698:	1080004c 	andi	r2,r2,1
     69c:	10000126 	beq	r2,zero,6a4 <keys_task+0x44>
		{
			POWER_OFF_RESET();
     6a0:	00003d80 	call	3d8 <POWER_OFF_RESET>
		}

		if ((value & 0x02) == 0x02)
     6a4:	e0bfff8b 	ldhu	r2,-2(fp)
     6a8:	1080008c 	andi	r2,r2,2
     6ac:	10001526 	beq	r2,zero,704 <keys_task+0xa4>
		{
			if (question_count < 11)
     6b0:	d0a81417 	ldw	r2,-24496(gp)
     6b4:	108002c8 	cmpgei	r2,r2,11
     6b8:	1000121e 	bne	r2,zero,704 <keys_task+0xa4>
			{
				OSMutexPend(StateMutex, 0, &err);
     6bc:	d0a80c17 	ldw	r2,-24528(gp)
     6c0:	e0fffdc4 	addi	r3,fp,-9
     6c4:	180d883a 	mov	r6,r3
     6c8:	000b883a 	mov	r5,zero
     6cc:	1009883a 	mov	r4,r2
     6d0:	00139940 	call	13994 <OSMutexPend>
				if (state == IDLE) { state = PLAY; }
     6d4:	d0a81e17 	ldw	r2,-24456(gp)
     6d8:	1000031e 	bne	r2,zero,6e8 <keys_task+0x88>
     6dc:	00800044 	movi	r2,1
     6e0:	d0a81e15 	stw	r2,-24456(gp)
     6e4:	00000406 	br	6f8 <keys_task+0x98>
				else if (state == PLAY) { state = IDLE; }
     6e8:	d0a81e17 	ldw	r2,-24456(gp)
     6ec:	10800058 	cmpnei	r2,r2,1
     6f0:	1000011e 	bne	r2,zero,6f8 <keys_task+0x98>
     6f4:	d0281e15 	stw	zero,-24456(gp)
				OSMutexPost(StateMutex);
     6f8:	d0a80c17 	ldw	r2,-24528(gp)
     6fc:	1009883a 	mov	r4,r2
     700:	0013f240 	call	13f24 <OSMutexPost>
			}
		}

		if ((value & 0x04) == 0x04)
     704:	e0bfff8b 	ldhu	r2,-2(fp)
     708:	1080010c 	andi	r2,r2,4
     70c:	10004426 	beq	r2,zero,820 <keys_task+0x1c0>
		{
			OSMutexPend(GameMutex, 0, &err);
     710:	d0a80e17 	ldw	r2,-24520(gp)
     714:	e0fffdc4 	addi	r3,fp,-9
     718:	180d883a 	mov	r6,r3
     71c:	000b883a 	mov	r5,zero
     720:	1009883a 	mov	r4,r2
     724:	00139940 	call	13994 <OSMutexPend>
			attempt_count += 1;
     728:	d0a81317 	ldw	r2,-24500(gp)
     72c:	10800044 	addi	r2,r2,1
     730:	d0a81315 	stw	r2,-24500(gp)
			user_answer = IORD_ALTERA_AVALON_PIO_DATA(SLIDER_SWITCHES_BASE) & 0xF;
     734:	00bfc834 	movhi	r2,65312
     738:	10801037 	ldwio	r2,64(r2)
     73c:	108003cc 	andi	r2,r2,15
     740:	e0bffe15 	stw	r2,-8(fp)

			// CHECK ANSWER
			if ((user_answer == system_answer) && (attempt_count == 1))
     744:	d0a81517 	ldw	r2,-24492(gp)
     748:	e0fffe17 	ldw	r3,-8(fp)
     74c:	1880191e 	bne	r3,r2,7b4 <keys_task+0x154>
     750:	d0a81317 	ldw	r2,-24500(gp)
     754:	10800058 	cmpnei	r2,r2,1
     758:	1000161e 	bne	r2,zero,7b4 <keys_task+0x154>
			{
				current_score += 1;
     75c:	d0a81617 	ldw	r2,-24488(gp)
     760:	10800044 	addi	r2,r2,1
     764:	d0a81615 	stw	r2,-24488(gp)
				attempt_count = 0;
     768:	d0281315 	stw	zero,-24500(gp)

				OSMutexPend(TimerMutex, 0, &err);
     76c:	d0a80d17 	ldw	r2,-24524(gp)
     770:	e0fffdc4 	addi	r3,fp,-9
     774:	180d883a 	mov	r6,r3
     778:	000b883a 	mov	r5,zero
     77c:	1009883a 	mov	r4,r2
     780:	00139940 	call	13994 <OSMutexPend>
				countdown_timer_value = 10;
     784:	00800284 	movi	r2,10
     788:	d0a00115 	stw	r2,-32764(gp)
				OSMutexPost(TimerMutex);
     78c:	d0a80d17 	ldw	r2,-24524(gp)
     790:	1009883a 	mov	r4,r2
     794:	0013f240 	call	13f24 <OSMutexPost>

				user_answer = ~user_answer;
     798:	e0bffe17 	ldw	r2,-8(fp)
     79c:	0084303a 	nor	r2,zero,r2
     7a0:	e0bffe15 	stw	r2,-8(fp)
			    OSSemPost(SemRandom);
     7a4:	d0a81117 	ldw	r2,-24508(gp)
     7a8:	1009883a 	mov	r4,r2
     7ac:	0015cf80 	call	15cf8 <OSSemPost>
     7b0:	00001806 	br	814 <keys_task+0x1b4>
			}
			else if ((user_answer != system_answer) && (attempt_count == 1))
     7b4:	d0a81517 	ldw	r2,-24492(gp)
     7b8:	e0fffe17 	ldw	r3,-8(fp)
     7bc:	18801526 	beq	r3,r2,814 <keys_task+0x1b4>
     7c0:	d0a81317 	ldw	r2,-24500(gp)
     7c4:	10800058 	cmpnei	r2,r2,1
     7c8:	1000121e 	bne	r2,zero,814 <keys_task+0x1b4>
			{
				attempt_count = 0;
     7cc:	d0281315 	stw	zero,-24500(gp)

				OSMutexPend(TimerMutex, 0, &err);
     7d0:	d0a80d17 	ldw	r2,-24524(gp)
     7d4:	e0fffdc4 	addi	r3,fp,-9
     7d8:	180d883a 	mov	r6,r3
     7dc:	000b883a 	mov	r5,zero
     7e0:	1009883a 	mov	r4,r2
     7e4:	00139940 	call	13994 <OSMutexPend>
				countdown_timer_value = 10;
     7e8:	00800284 	movi	r2,10
     7ec:	d0a00115 	stw	r2,-32764(gp)
				OSMutexPost(TimerMutex);
     7f0:	d0a80d17 	ldw	r2,-24524(gp)
     7f4:	1009883a 	mov	r4,r2
     7f8:	0013f240 	call	13f24 <OSMutexPost>

				user_answer = ~user_answer;
     7fc:	e0bffe17 	ldw	r2,-8(fp)
     800:	0084303a 	nor	r2,zero,r2
     804:	e0bffe15 	stw	r2,-8(fp)
			    OSSemPost(SemRandom);
     808:	d0a81117 	ldw	r2,-24508(gp)
     80c:	1009883a 	mov	r4,r2
     810:	0015cf80 	call	15cf8 <OSSemPost>
			}

			OSMutexPost(GameMutex);
     814:	d0a80e17 	ldw	r2,-24520(gp)
     818:	1009883a 	mov	r4,r2
     81c:	0013f240 	call	13f24 <OSMutexPost>
		}

		printf("\n            Question: %d", question_count);
     820:	d0a81417 	ldw	r2,-24496(gp)
     824:	100b883a 	mov	r5,r2
     828:	010000b4 	movhi	r4,2
     82c:	212e0404 	addi	r4,r4,-18416
     830:	00013240 	call	1324 <printf>
		printf("\n                      %d", system_answer);
     834:	d0a81517 	ldw	r2,-24492(gp)
     838:	100b883a 	mov	r5,r2
     83c:	010000b4 	movhi	r4,2
     840:	212e0b04 	addi	r4,r4,-18388
     844:	00013240 	call	1324 <printf>

		OSTimeDly(2);
     848:	01000084 	movi	r4,2
     84c:	00177780 	call	17778 <OSTimeDly>
		value = OSFlagAccept(stateFlag, 0x04 + 0x02 + 0x01, OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME, &err);
     850:	003f8806 	br	674 <keys_task+0x14>

00000854 <timer_counter_task>:
	}
}

void timer_counter_task(void * pdata)
{
     854:	defffc04 	addi	sp,sp,-16
     858:	dfc00315 	stw	ra,12(sp)
     85c:	df000215 	stw	fp,8(sp)
     860:	df000204 	addi	fp,sp,8
     864:	e13ffe15 	stw	r4,-8(fp)
	INT8U err;

	while (1)
	{
		if (state == PLAY)
     868:	d0a81e17 	ldw	r2,-24456(gp)
     86c:	10800058 	cmpnei	r2,r2,1
     870:	1000281e 	bne	r2,zero,914 <timer_counter_task+0xc0>
		{
			OSMutexPend(TimerMutex, 0, &err);
     874:	d0a80d17 	ldw	r2,-24524(gp)
     878:	e0ffffc4 	addi	r3,fp,-1
     87c:	180d883a 	mov	r6,r3
     880:	000b883a 	mov	r5,zero
     884:	1009883a 	mov	r4,r2
     888:	00139940 	call	13994 <OSMutexPend>
		    countdown_timer_value -= 1;
     88c:	d0a00117 	ldw	r2,-32764(gp)
     890:	10bfffc4 	addi	r2,r2,-1
     894:	d0a00115 	stw	r2,-32764(gp)
		    if (countdown_timer_value == 0)
     898:	d0a00117 	ldw	r2,-32764(gp)
     89c:	1000051e 	bne	r2,zero,8b4 <timer_counter_task+0x60>
		    {
		        countdown_timer_value = 10;
     8a0:	00800284 	movi	r2,10
     8a4:	d0a00115 	stw	r2,-32764(gp)
		        OSSemPost(SemRandom);
     8a8:	d0a81117 	ldw	r2,-24508(gp)
     8ac:	1009883a 	mov	r4,r2
     8b0:	0015cf80 	call	15cf8 <OSSemPost>
		    }

		    elapsed_timer_value += 1;
     8b4:	d0a81917 	ldw	r2,-24476(gp)
     8b8:	10800044 	addi	r2,r2,1
     8bc:	d0a81915 	stw	r2,-24476(gp)
		    seconds += 1;
     8c0:	d0a81717 	ldw	r2,-24484(gp)
     8c4:	10800044 	addi	r2,r2,1
     8c8:	d0a81715 	stw	r2,-24484(gp)
		    if ((elapsed_timer_value%60) == 0 && elapsed_timer_value != 0)
     8cc:	d0a81917 	ldw	r2,-24476(gp)
     8d0:	00c00f04 	movi	r3,60
     8d4:	10c7283a 	div	r3,r2,r3
     8d8:	18c00f24 	muli	r3,r3,60
     8dc:	10c5c83a 	sub	r2,r2,r3
     8e0:	1000061e 	bne	r2,zero,8fc <timer_counter_task+0xa8>
     8e4:	d0a81917 	ldw	r2,-24476(gp)
     8e8:	10000426 	beq	r2,zero,8fc <timer_counter_task+0xa8>
		    {
		        minutes += 1;
     8ec:	d0a81817 	ldw	r2,-24480(gp)
     8f0:	10800044 	addi	r2,r2,1
     8f4:	d0a81815 	stw	r2,-24480(gp)
		        seconds = 0;
     8f8:	d0281715 	stw	zero,-24484(gp)
		    }

			printf("\nTimer Task");
     8fc:	010000b4 	movhi	r4,2
     900:	212e1204 	addi	r4,r4,-18360
     904:	00013240 	call	1324 <printf>
			OSMutexPost(TimerMutex);
     908:	d0a80d17 	ldw	r2,-24524(gp)
     90c:	1009883a 	mov	r4,r2
     910:	0013f240 	call	13f24 <OSMutexPost>
		}

		OSTimeDly(8);
     914:	01000204 	movi	r4,8
     918:	00177780 	call	17778 <OSTimeDly>
		if (state == PLAY)
     91c:	003fd206 	br	868 <timer_counter_task+0x14>

00000920 <game_task>:
	}
}

void game_task(void * pdata)
{
     920:	defffb04 	addi	sp,sp,-20
     924:	dfc00415 	stw	ra,16(sp)
     928:	df000315 	stw	fp,12(sp)
     92c:	df000304 	addi	fp,sp,12
     930:	e13ffd15 	stw	r4,-12(fp)
	INT16U random_2;
	INT16U random_3;

    while (1)
    {
    	srand(time(0));
     934:	0009883a 	mov	r4,zero
     938:	00013cc0 	call	13cc <time>
     93c:	1009883a 	mov	r4,r2
     940:	180b883a 	mov	r5,r3
     944:	2005883a 	mov	r2,r4
     948:	1009883a 	mov	r4,r2
     94c:	000135c0 	call	135c <srand>

		OSSemPend(SemRandom, 0, &err);
     950:	d0a81117 	ldw	r2,-24508(gp)
     954:	e0ffffc4 	addi	r3,fp,-1
     958:	180d883a 	mov	r6,r3
     95c:	000b883a 	mov	r5,zero
     960:	1009883a 	mov	r4,r2
     964:	00159700 	call	15970 <OSSemPend>
		random_1 = rand() % 16;
     968:	00013700 	call	1370 <rand>
     96c:	1007883a 	mov	r3,r2
     970:	00a00034 	movhi	r2,32768
     974:	108003c4 	addi	r2,r2,15
     978:	1884703a 	and	r2,r3,r2
     97c:	1000040e 	bge	r2,zero,990 <game_task+0x70>
     980:	10bfffc4 	addi	r2,r2,-1
     984:	00fffc04 	movi	r3,-16
     988:	10c4b03a 	or	r2,r2,r3
     98c:	10800044 	addi	r2,r2,1
     990:	e0bfff0d 	sth	r2,-4(fp)
		random_2 = rand() % 16;
     994:	00013700 	call	1370 <rand>
     998:	1007883a 	mov	r3,r2
     99c:	00a00034 	movhi	r2,32768
     9a0:	108003c4 	addi	r2,r2,15
     9a4:	1884703a 	and	r2,r3,r2
     9a8:	1000040e 	bge	r2,zero,9bc <game_task+0x9c>
     9ac:	10bfffc4 	addi	r2,r2,-1
     9b0:	00fffc04 	movi	r3,-16
     9b4:	10c4b03a 	or	r2,r2,r3
     9b8:	10800044 	addi	r2,r2,1
     9bc:	e0bffe8d 	sth	r2,-6(fp)
		random_3 = rand() % 6;
     9c0:	00013700 	call	1370 <rand>
     9c4:	00c00184 	movi	r3,6
     9c8:	10c7283a 	div	r3,r2,r3
     9cc:	18c001a4 	muli	r3,r3,6
     9d0:	10c5c83a 	sub	r2,r2,r3
     9d4:	e0bffe0d 	sth	r2,-8(fp)

    	OSQPost(MsgQ , (void *)&random_1);
     9d8:	d0a81017 	ldw	r2,-24512(gp)
     9dc:	e0ffff04 	addi	r3,fp,-4
     9e0:	180b883a 	mov	r5,r3
     9e4:	1009883a 	mov	r4,r2
     9e8:	0014e800 	call	14e80 <OSQPost>
    	OSQPost(MsgQ , (void *)&random_2);
     9ec:	d0a81017 	ldw	r2,-24512(gp)
     9f0:	e0fffe84 	addi	r3,fp,-6
     9f4:	180b883a 	mov	r5,r3
     9f8:	1009883a 	mov	r4,r2
     9fc:	0014e800 	call	14e80 <OSQPost>
    	OSQPost(MsgQ , (void *)&random_3);
     a00:	d0a81017 	ldw	r2,-24512(gp)
     a04:	e0fffe04 	addi	r3,fp,-8
     a08:	180b883a 	mov	r5,r3
     a0c:	1009883a 	mov	r4,r2
     a10:	0014e800 	call	14e80 <OSQPost>

		if (state == PLAY)
     a14:	d0a81e17 	ldw	r2,-24456(gp)
     a18:	10800058 	cmpnei	r2,r2,1
     a1c:	10004a1e 	bne	r2,zero,b48 <game_task+0x228>
		{
			if      (random_3 == 0) { system_answer = abs(random_1 & random_2);    }
     a20:	e0bffe0b 	ldhu	r2,-8(fp)
     a24:	10bfffcc 	andi	r2,r2,65535
     a28:	1000061e 	bne	r2,zero,a44 <game_task+0x124>
     a2c:	e0ffff0b 	ldhu	r3,-4(fp)
     a30:	e0bffe8b 	ldhu	r2,-6(fp)
     a34:	1884703a 	and	r2,r3,r2
     a38:	10bfffcc 	andi	r2,r2,65535
     a3c:	d0a81515 	stw	r2,-24492(gp)
     a40:	00003a06 	br	b2c <game_task+0x20c>
			else if (random_3 == 1) { system_answer = abs(~(random_1 & random_2)); }
     a44:	e0bffe0b 	ldhu	r2,-8(fp)
     a48:	10bfffcc 	andi	r2,r2,65535
     a4c:	10800058 	cmpnei	r2,r2,1
     a50:	1000091e 	bne	r2,zero,a78 <game_task+0x158>
     a54:	e0ffff0b 	ldhu	r3,-4(fp)
     a58:	e0bffe8b 	ldhu	r2,-6(fp)
     a5c:	1884703a 	and	r2,r3,r2
     a60:	10bfffcc 	andi	r2,r2,65535
     a64:	0084303a 	nor	r2,zero,r2
     a68:	1000010e 	bge	r2,zero,a70 <game_task+0x150>
     a6c:	0085c83a 	sub	r2,zero,r2
     a70:	d0a81515 	stw	r2,-24492(gp)
     a74:	00002d06 	br	b2c <game_task+0x20c>
			else if (random_3 == 2) { system_answer = abs(random_1 | random_2);    }
     a78:	e0bffe0b 	ldhu	r2,-8(fp)
     a7c:	10bfffcc 	andi	r2,r2,65535
     a80:	10800098 	cmpnei	r2,r2,2
     a84:	1000061e 	bne	r2,zero,aa0 <game_task+0x180>
     a88:	e0ffff0b 	ldhu	r3,-4(fp)
     a8c:	e0bffe8b 	ldhu	r2,-6(fp)
     a90:	1884b03a 	or	r2,r3,r2
     a94:	10bfffcc 	andi	r2,r2,65535
     a98:	d0a81515 	stw	r2,-24492(gp)
     a9c:	00002306 	br	b2c <game_task+0x20c>
			else if (random_3 == 3) { system_answer = abs(~(random_1 | random_2)); }
     aa0:	e0bffe0b 	ldhu	r2,-8(fp)
     aa4:	10bfffcc 	andi	r2,r2,65535
     aa8:	108000d8 	cmpnei	r2,r2,3
     aac:	1000091e 	bne	r2,zero,ad4 <game_task+0x1b4>
     ab0:	e0ffff0b 	ldhu	r3,-4(fp)
     ab4:	e0bffe8b 	ldhu	r2,-6(fp)
     ab8:	1884b03a 	or	r2,r3,r2
     abc:	10bfffcc 	andi	r2,r2,65535
     ac0:	0084303a 	nor	r2,zero,r2
     ac4:	1000010e 	bge	r2,zero,acc <game_task+0x1ac>
     ac8:	0085c83a 	sub	r2,zero,r2
     acc:	d0a81515 	stw	r2,-24492(gp)
     ad0:	00001606 	br	b2c <game_task+0x20c>
			else if (random_3 == 4) { system_answer = abs(random_1 ^ random_2);    }
     ad4:	e0bffe0b 	ldhu	r2,-8(fp)
     ad8:	10bfffcc 	andi	r2,r2,65535
     adc:	10800118 	cmpnei	r2,r2,4
     ae0:	1000061e 	bne	r2,zero,afc <game_task+0x1dc>
     ae4:	e0ffff0b 	ldhu	r3,-4(fp)
     ae8:	e0bffe8b 	ldhu	r2,-6(fp)
     aec:	1884f03a 	xor	r2,r3,r2
     af0:	10bfffcc 	andi	r2,r2,65535
     af4:	d0a81515 	stw	r2,-24492(gp)
     af8:	00000c06 	br	b2c <game_task+0x20c>
			else if (random_3 == 5) { system_answer = abs(~(random_1 ^ random_2)); }
     afc:	e0bffe0b 	ldhu	r2,-8(fp)
     b00:	10bfffcc 	andi	r2,r2,65535
     b04:	10800158 	cmpnei	r2,r2,5
     b08:	1000081e 	bne	r2,zero,b2c <game_task+0x20c>
     b0c:	e0ffff0b 	ldhu	r3,-4(fp)
     b10:	e0bffe8b 	ldhu	r2,-6(fp)
     b14:	1884f03a 	xor	r2,r3,r2
     b18:	10bfffcc 	andi	r2,r2,65535
     b1c:	0084303a 	nor	r2,zero,r2
     b20:	1000010e 	bge	r2,zero,b28 <game_task+0x208>
     b24:	0085c83a 	sub	r2,zero,r2
     b28:	d0a81515 	stw	r2,-24492(gp)

			if (system_answer == 16) { system_answer = 0; } // 16 is basically 4-bit zero with a carry forwarded 1
     b2c:	d0a81517 	ldw	r2,-24492(gp)
     b30:	10800418 	cmpnei	r2,r2,16
     b34:	1000011e 	bne	r2,zero,b3c <game_task+0x21c>
     b38:	d0281515 	stw	zero,-24492(gp)

			printf("\nGame Task");
     b3c:	010000b4 	movhi	r4,2
     b40:	212e1504 	addi	r4,r4,-18348
     b44:	00013240 	call	1324 <printf>
		}

		OSMutexPend(GameMutex, 0, &err);
     b48:	d0a80e17 	ldw	r2,-24520(gp)
     b4c:	e0ffffc4 	addi	r3,fp,-1
     b50:	180d883a 	mov	r6,r3
     b54:	000b883a 	mov	r5,zero
     b58:	1009883a 	mov	r4,r2
     b5c:	00139940 	call	13994 <OSMutexPend>
		question_count += 1;
     b60:	d0a81417 	ldw	r2,-24496(gp)
     b64:	10800044 	addi	r2,r2,1
     b68:	d0a81415 	stw	r2,-24496(gp)
		OSMutexPost(GameMutex);
     b6c:	d0a80e17 	ldw	r2,-24520(gp)
     b70:	1009883a 	mov	r4,r2
     b74:	0013f240 	call	13f24 <OSMutexPost>

		OSTimeDly(1);
     b78:	01000044 	movi	r4,1
     b7c:	00177780 	call	17778 <OSTimeDly>
    	srand(time(0));
     b80:	003f6c06 	br	934 <game_task+0x14>

00000b84 <lcdhex_display_task>:
    }
}

void lcdhex_display_task(void * pdata)
{
     b84:	deffdd04 	addi	sp,sp,-140
     b88:	dfc02215 	stw	ra,136(sp)
     b8c:	df002115 	stw	fp,132(sp)
     b90:	df002104 	addi	fp,sp,132
     b94:	e13fdf15 	stw	r4,-132(fp)
	volatile char *LCD_pointer = (char *)0xFF203050;
     b98:	00bfc834 	movhi	r2,65312
     b9c:	108c1404 	addi	r2,r2,12368
     ba0:	e0bffd15 	stw	r2,-12(fp)

	char * numbers[16] = { "0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111" };
     ba4:	e0ffe704 	addi	r3,fp,-100
     ba8:	008000b4 	movhi	r2,2
     bac:	10ae2904 	addi	r2,r2,-18268
     bb0:	01001004 	movi	r4,64
     bb4:	200d883a 	mov	r6,r4
     bb8:	100b883a 	mov	r5,r2
     bbc:	1809883a 	mov	r4,r3
     bc0:	00011f40 	call	11f4 <memcpy>
	char * operator[6] = { "AND ", "NAND", "OR  ", "NOR ", "XOR ", "XNOR" };
     bc4:	008000b4 	movhi	r2,2
     bc8:	10ae1804 	addi	r2,r2,-18336
     bcc:	e0bfe115 	stw	r2,-124(fp)
     bd0:	008000b4 	movhi	r2,2
     bd4:	10ae1a04 	addi	r2,r2,-18328
     bd8:	e0bfe215 	stw	r2,-120(fp)
     bdc:	008000b4 	movhi	r2,2
     be0:	10ae1c04 	addi	r2,r2,-18320
     be4:	e0bfe315 	stw	r2,-116(fp)
     be8:	008000b4 	movhi	r2,2
     bec:	10ae1e04 	addi	r2,r2,-18312
     bf0:	e0bfe415 	stw	r2,-112(fp)
     bf4:	008000b4 	movhi	r2,2
     bf8:	10ae2004 	addi	r2,r2,-18304
     bfc:	e0bfe515 	stw	r2,-108(fp)
     c00:	008000b4 	movhi	r2,2
     c04:	10ae2204 	addi	r2,r2,-18296
     c08:	e0bfe615 	stw	r2,-104(fp)

	char * random_number_1 = "";
     c0c:	008000b4 	movhi	r2,2
     c10:	10ae2404 	addi	r2,r2,-18288
     c14:	e0bffc15 	stw	r2,-16(fp)
	char * random_number_2 = "";
     c18:	008000b4 	movhi	r2,2
     c1c:	10ae2404 	addi	r2,r2,-18288
     c20:	e0bffb15 	stw	r2,-20(fp)
	char * random_operator = "";
     c24:	008000b4 	movhi	r2,2
     c28:	10ae2404 	addi	r2,r2,-18288
     c2c:	e0bffa15 	stw	r2,-24(fp)
	INT16U random_2_from_msgq;
	INT16U random_3_from_msgq;

	while (1)
	{
		if (OSSemAccept(SemPower) > 0)
     c30:	d0a81217 	ldw	r2,-24504(gp)
     c34:	1009883a 	mov	r4,r2
     c38:	00155900 	call	15590 <OSSemAccept>
     c3c:	10bfffcc 	andi	r2,r2,65535
     c40:	1000d726 	beq	r2,zero,fa0 <lcdhex_display_task+0x41c>
		{
			// CURRENT SCORE DISPLAY (HEX)
			OSMutexPend(GameMutex, 0, &err);
     c44:	d0a80e17 	ldw	r2,-24520(gp)
     c48:	e0ffe0c4 	addi	r3,fp,-125
     c4c:	180d883a 	mov	r6,r3
     c50:	000b883a 	mov	r5,zero
     c54:	1009883a 	mov	r4,r2
     c58:	00139940 	call	13994 <OSMutexPend>
			huns_place = DEC_TO_HEX(current_score%10);
     c5c:	d0a81617 	ldw	r2,-24488(gp)
     c60:	00c00284 	movi	r3,10
     c64:	10c7283a 	div	r3,r2,r3
     c68:	18c002a4 	muli	r3,r3,10
     c6c:	10c5c83a 	sub	r2,r2,r3
     c70:	1009883a 	mov	r4,r2
     c74:	00002e80 	call	2e8 <DEC_TO_HEX>
     c78:	d0a81c15 	stw	r2,-24464(gp)
			thos_place = DEC_TO_HEX((current_score/10)%10);
     c7c:	d0e81617 	ldw	r3,-24488(gp)
     c80:	00800284 	movi	r2,10
     c84:	1885283a 	div	r2,r3,r2
     c88:	00c00284 	movi	r3,10
     c8c:	10c7283a 	div	r3,r2,r3
     c90:	18c002a4 	muli	r3,r3,10
     c94:	10c5c83a 	sub	r2,r2,r3
     c98:	1009883a 	mov	r4,r2
     c9c:	00002e80 	call	2e8 <DEC_TO_HEX>
     ca0:	d0a81d15 	stw	r2,-24460(gp)
			OSMutexPost(GameMutex);
     ca4:	d0a80e17 	ldw	r2,-24520(gp)
     ca8:	1009883a 	mov	r4,r2
     cac:	0013f240 	call	13f24 <OSMutexPost>

			OSMutexPend(TimerMutex, 0, &err);
     cb0:	d0a80d17 	ldw	r2,-24524(gp)
     cb4:	e0ffe0c4 	addi	r3,fp,-125
     cb8:	180d883a 	mov	r6,r3
     cbc:	000b883a 	mov	r5,zero
     cc0:	1009883a 	mov	r4,r2
     cc4:	00139940 	call	13994 <OSMutexPend>
			// COUNTDOWN TIMER DISPLAY (HEX)
			if ((question_count == 11) || (current_score == 10))
     cc8:	d0a81417 	ldw	r2,-24496(gp)
     ccc:	108002e0 	cmpeqi	r2,r2,11
     cd0:	1000031e 	bne	r2,zero,ce0 <lcdhex_display_task+0x15c>
     cd4:	d0a81617 	ldw	r2,-24488(gp)
     cd8:	10800298 	cmpnei	r2,r2,10
     cdc:	1000031e 	bne	r2,zero,cec <lcdhex_display_task+0x168>
			{
				ones_place = 0x0000000;
     ce0:	d0281a15 	stw	zero,-24472(gp)
				tens_place = 0x0000000;
     ce4:	d0281b15 	stw	zero,-24468(gp)
     ce8:	00001206 	br	d34 <lcdhex_display_task+0x1b0>
			}
			else
			{
				ones_place = DEC_TO_HEX(countdown_timer_value%10);
     cec:	d0a00117 	ldw	r2,-32764(gp)
     cf0:	00c00284 	movi	r3,10
     cf4:	10c7283a 	div	r3,r2,r3
     cf8:	18c002a4 	muli	r3,r3,10
     cfc:	10c5c83a 	sub	r2,r2,r3
     d00:	1009883a 	mov	r4,r2
     d04:	00002e80 	call	2e8 <DEC_TO_HEX>
     d08:	d0a81a15 	stw	r2,-24472(gp)
				tens_place = DEC_TO_HEX((countdown_timer_value/10)%10);
     d0c:	d0e00117 	ldw	r3,-32764(gp)
     d10:	00800284 	movi	r2,10
     d14:	1885283a 	div	r2,r3,r2
     d18:	00c00284 	movi	r3,10
     d1c:	10c7283a 	div	r3,r2,r3
     d20:	18c002a4 	muli	r3,r3,10
     d24:	10c5c83a 	sub	r2,r2,r3
     d28:	1009883a 	mov	r4,r2
     d2c:	00002e80 	call	2e8 <DEC_TO_HEX>
     d30:	d0a81b15 	stw	r2,-24468(gp)
			}

			// *(HEX74_pointer) = ones_place | (tens_place << 8) | (huns_place << 16) | (thos_place << 24);
			IOWR_ALTERA_AVALON_PIO_DATA(HEX7_HEX4_BASE, ones_place | (tens_place << 8) | (huns_place << 16) | (thos_place << 24));
     d34:	d0a81b17 	ldw	r2,-24468(gp)
     d38:	1006923a 	slli	r3,r2,8
     d3c:	d0a81a17 	ldw	r2,-24472(gp)
     d40:	1886b03a 	or	r3,r3,r2
     d44:	d0a81c17 	ldw	r2,-24464(gp)
     d48:	1004943a 	slli	r2,r2,16
     d4c:	1886b03a 	or	r3,r3,r2
     d50:	d0a81d17 	ldw	r2,-24460(gp)
     d54:	1004963a 	slli	r2,r2,24
     d58:	1886b03a 	or	r3,r3,r2
     d5c:	00bfc834 	movhi	r2,65312
     d60:	10c00c35 	stwio	r3,48(r2)

			// ELAPSED TIMER DISPLAY (HEX)
			ones_place = DEC_TO_HEX(seconds%10);
     d64:	d0a81717 	ldw	r2,-24484(gp)
     d68:	00c00284 	movi	r3,10
     d6c:	10c7283a 	div	r3,r2,r3
     d70:	18c002a4 	muli	r3,r3,10
     d74:	10c5c83a 	sub	r2,r2,r3
     d78:	1009883a 	mov	r4,r2
     d7c:	00002e80 	call	2e8 <DEC_TO_HEX>
     d80:	d0a81a15 	stw	r2,-24472(gp)
			tens_place = DEC_TO_HEX((seconds/10)%10);
     d84:	d0e81717 	ldw	r3,-24484(gp)
     d88:	00800284 	movi	r2,10
     d8c:	1885283a 	div	r2,r3,r2
     d90:	00c00284 	movi	r3,10
     d94:	10c7283a 	div	r3,r2,r3
     d98:	18c002a4 	muli	r3,r3,10
     d9c:	10c5c83a 	sub	r2,r2,r3
     da0:	1009883a 	mov	r4,r2
     da4:	00002e80 	call	2e8 <DEC_TO_HEX>
     da8:	d0a81b15 	stw	r2,-24468(gp)
			huns_place = DEC_TO_HEX(minutes%10);
     dac:	d0a81817 	ldw	r2,-24480(gp)
     db0:	00c00284 	movi	r3,10
     db4:	10c7283a 	div	r3,r2,r3
     db8:	18c002a4 	muli	r3,r3,10
     dbc:	10c5c83a 	sub	r2,r2,r3
     dc0:	1009883a 	mov	r4,r2
     dc4:	00002e80 	call	2e8 <DEC_TO_HEX>
     dc8:	d0a81c15 	stw	r2,-24464(gp)
			thos_place = DEC_TO_HEX((minutes/10)%10);
     dcc:	d0e81817 	ldw	r3,-24480(gp)
     dd0:	00800284 	movi	r2,10
     dd4:	1885283a 	div	r2,r3,r2
     dd8:	00c00284 	movi	r3,10
     ddc:	10c7283a 	div	r3,r2,r3
     de0:	18c002a4 	muli	r3,r3,10
     de4:	10c5c83a 	sub	r2,r2,r3
     de8:	1009883a 	mov	r4,r2
     dec:	00002e80 	call	2e8 <DEC_TO_HEX>
     df0:	d0a81d15 	stw	r2,-24460(gp)

			// *(HEX30_pointer) = ones_place | (tens_place << 8) | (huns_place << 16) | (thos_place << 24);
			IOWR_ALTERA_AVALON_PIO_DATA(HEX3_HEX0_BASE, ones_place | (tens_place << 8) | (huns_place << 16) | (thos_place << 24));
     df4:	d0a81b17 	ldw	r2,-24468(gp)
     df8:	1006923a 	slli	r3,r2,8
     dfc:	d0a81a17 	ldw	r2,-24472(gp)
     e00:	1886b03a 	or	r3,r3,r2
     e04:	d0a81c17 	ldw	r2,-24464(gp)
     e08:	1004943a 	slli	r2,r2,16
     e0c:	1886b03a 	or	r3,r3,r2
     e10:	d0a81d17 	ldw	r2,-24460(gp)
     e14:	1004963a 	slli	r2,r2,24
     e18:	1886b03a 	or	r3,r3,r2
     e1c:	00bfc834 	movhi	r2,65312
     e20:	10c00835 	stwio	r3,32(r2)
			OSMutexPost(TimerMutex);
     e24:	d0a80d17 	ldw	r2,-24524(gp)
     e28:	1009883a 	mov	r4,r2
     e2c:	0013f240 	call	13f24 <OSMutexPost>

			// QUESTION DISPLAY (LCD)
			if ((state == IDLE) || ((question_count == 11) || (current_score == 10))) // Hide the question when in PAUSE state
     e30:	d0a81e17 	ldw	r2,-24456(gp)
     e34:	10000626 	beq	r2,zero,e50 <lcdhex_display_task+0x2cc>
     e38:	d0a81417 	ldw	r2,-24496(gp)
     e3c:	108002e0 	cmpeqi	r2,r2,11
     e40:	1000031e 	bne	r2,zero,e50 <lcdhex_display_task+0x2cc>
     e44:	d0a81617 	ldw	r2,-24488(gp)
     e48:	10800298 	cmpnei	r2,r2,10
     e4c:	10000e1e 	bne	r2,zero,e88 <lcdhex_display_task+0x304>
			{
				*(LCD_pointer) = 0x01;
     e50:	e0bffd17 	ldw	r2,-12(fp)
     e54:	00c00044 	movi	r3,1
     e58:	10c00005 	stb	r3,0(r2)

				OSMutexPend(StateMutex, 0, &err);
     e5c:	d0a80c17 	ldw	r2,-24528(gp)
     e60:	e0ffe0c4 	addi	r3,fp,-125
     e64:	180d883a 	mov	r6,r3
     e68:	000b883a 	mov	r5,zero
     e6c:	1009883a 	mov	r4,r2
     e70:	00139940 	call	13994 <OSMutexPend>
				state = IDLE;
     e74:	d0281e15 	stw	zero,-24456(gp)
				OSMutexPost(StateMutex);
     e78:	d0a80c17 	ldw	r2,-24528(gp)
     e7c:	1009883a 	mov	r4,r2
     e80:	0013f240 	call	13f24 <OSMutexPost>
     e84:	00004206 	br	f90 <lcdhex_display_task+0x40c>
			}
			else
			{
				if (question_count < 11)
     e88:	d0a81417 	ldw	r2,-24496(gp)
     e8c:	108002c8 	cmpgei	r2,r2,11
     e90:	10003f1e 	bne	r2,zero,f90 <lcdhex_display_task+0x40c>
				{
					msg1 = OSQAccept(MsgQ,&err);
     e94:	d0a81017 	ldw	r2,-24512(gp)
     e98:	e0ffe0c4 	addi	r3,fp,-125
     e9c:	180b883a 	mov	r5,r3
     ea0:	1009883a 	mov	r4,r2
     ea4:	00144340 	call	14434 <OSQAccept>
     ea8:	e0bff915 	stw	r2,-28(fp)
					msg2 = OSQAccept(MsgQ,&err);
     eac:	d0a81017 	ldw	r2,-24512(gp)
     eb0:	e0ffe0c4 	addi	r3,fp,-125
     eb4:	180b883a 	mov	r5,r3
     eb8:	1009883a 	mov	r4,r2
     ebc:	00144340 	call	14434 <OSQAccept>
     ec0:	e0bff815 	stw	r2,-32(fp)
					msg3 = OSQAccept(MsgQ,&err);
     ec4:	d0a81017 	ldw	r2,-24512(gp)
     ec8:	e0ffe0c4 	addi	r3,fp,-125
     ecc:	180b883a 	mov	r5,r3
     ed0:	1009883a 	mov	r4,r2
     ed4:	00144340 	call	14434 <OSQAccept>
     ed8:	e0bff715 	stw	r2,-36(fp)

					if (err == OS_ERR_NONE)
     edc:	e0bfe0c3 	ldbu	r2,-125(fp)
     ee0:	10803fcc 	andi	r2,r2,255
     ee4:	1000091e 	bne	r2,zero,f0c <lcdhex_display_task+0x388>
					{
						random_1_from_msgq = *msg1;
     ee8:	e0bff917 	ldw	r2,-28(fp)
     eec:	1080000b 	ldhu	r2,0(r2)
     ef0:	e0bfff8d 	sth	r2,-2(fp)
						random_2_from_msgq = *msg2;
     ef4:	e0bff817 	ldw	r2,-32(fp)
     ef8:	1080000b 	ldhu	r2,0(r2)
     efc:	e0bfff0d 	sth	r2,-4(fp)
						random_3_from_msgq = *msg3;
     f00:	e0bff717 	ldw	r2,-36(fp)
     f04:	1080000b 	ldhu	r2,0(r2)
     f08:	e0bffe8d 	sth	r2,-6(fp)
					}

					random_number_1 = numbers[random_1_from_msgq];
     f0c:	e0bfff8b 	ldhu	r2,-2(fp)
     f10:	100490ba 	slli	r2,r2,2
     f14:	e085883a 	add	r2,fp,r2
     f18:	10bfe717 	ldw	r2,-100(r2)
     f1c:	e0bffc15 	stw	r2,-16(fp)
					random_number_2 = numbers[random_2_from_msgq];
     f20:	e0bfff0b 	ldhu	r2,-4(fp)
     f24:	100490ba 	slli	r2,r2,2
     f28:	e085883a 	add	r2,fp,r2
     f2c:	10bfe717 	ldw	r2,-100(r2)
     f30:	e0bffb15 	stw	r2,-20(fp)
					random_operator = operator[random_3_from_msgq];
     f34:	e0bffe8b 	ldhu	r2,-6(fp)
     f38:	100490ba 	slli	r2,r2,2
     f3c:	e085883a 	add	r2,fp,r2
     f40:	10bfe117 	ldw	r2,-124(r2)
     f44:	e0bffa15 	stw	r2,-24(fp)

					// Number 1: LCD 3-0
					*(LCD_pointer) = 0x0C;
     f48:	e0bffd17 	ldw	r2,-12(fp)
     f4c:	00c00304 	movi	r3,12
     f50:	10c00005 	stb	r3,0(r2)
					*(LCD_pointer) = 0x80;
     f54:	e0bffd17 	ldw	r2,-12(fp)
     f58:	00ffe004 	movi	r3,-128
     f5c:	10c00005 	stb	r3,0(r2)
					LCD_TEXT(random_number_1);
     f60:	e13ffc17 	ldw	r4,-16(fp)
     f64:	00002780 	call	278 <LCD_TEXT>

					// Number 2: LCD 2nd row 43-40
					*(LCD_pointer) = 0xC0;
     f68:	e0bffd17 	ldw	r2,-12(fp)
     f6c:	00fff004 	movi	r3,-64
     f70:	10c00005 	stb	r3,0(r2)
					LCD_TEXT(random_number_2);
     f74:	e13ffb17 	ldw	r4,-20(fp)
     f78:	00002780 	call	278 <LCD_TEXT>

					// Operator: LCD 2nd row 4F-4C
					*(LCD_pointer) = 0xCC;
     f7c:	e0bffd17 	ldw	r2,-12(fp)
     f80:	00fff304 	movi	r3,-52
     f84:	10c00005 	stb	r3,0(r2)
					LCD_TEXT(random_operator);
     f88:	e13ffa17 	ldw	r4,-24(fp)
     f8c:	00002780 	call	278 <LCD_TEXT>
				}
			}

			printf("\nDisplay Task");
     f90:	010000b4 	movhi	r4,2
     f94:	212e2504 	addi	r4,r4,-18284
     f98:	00013240 	call	1324 <printf>
     f9c:	00000806 	br	fc0 <lcdhex_display_task+0x43c>
		}
		else
		{
			IOWR_ALTERA_AVALON_PIO_DATA(HEX7_HEX4_BASE, 0);
     fa0:	0007883a 	mov	r3,zero
     fa4:	00bfc834 	movhi	r2,65312
     fa8:	10c00c35 	stwio	r3,48(r2)
			IOWR_ALTERA_AVALON_PIO_DATA(HEX3_HEX0_BASE, 0);
     fac:	0007883a 	mov	r3,zero
     fb0:	00bfc834 	movhi	r2,65312
     fb4:	10c00835 	stwio	r3,32(r2)
			*(LCD_pointer) = 0x0;
     fb8:	e0bffd17 	ldw	r2,-12(fp)
     fbc:	10000005 	stb	zero,0(r2)
		}

		OSTimeDly(1);
     fc0:	01000044 	movi	r4,1
     fc4:	00177780 	call	17778 <OSTimeDly>
		if (OSSemAccept(SemPower) > 0)
     fc8:	003f1906 	br	c30 <lcdhex_display_task+0xac>

00000fcc <main>:
	}
}

// MY MAIN
int main(void)
{
     fcc:	defff804 	addi	sp,sp,-32
     fd0:	dfc00715 	stw	ra,28(sp)
     fd4:	df000615 	stw	fp,24(sp)
     fd8:	df000604 	addi	fp,sp,24
	OSTaskCreateExt
     fdc:	d8000415 	stw	zero,16(sp)
     fe0:	d8000315 	stw	zero,12(sp)
     fe4:	00820004 	movi	r2,2048
     fe8:	d8800215 	stw	r2,8(sp)
     fec:	008000b4 	movhi	r2,2
     ff0:	10806904 	addi	r2,r2,420
     ff4:	d8800115 	stw	r2,4(sp)
     ff8:	00800044 	movi	r2,1
     ffc:	d8800015 	stw	r2,0(sp)
    1000:	01c00044 	movi	r7,1
    1004:	018000b4 	movhi	r6,2
    1008:	31886804 	addi	r6,r6,8608
    100c:	000b883a 	mov	r5,zero
    1010:	01000034 	movhi	r4,0
    1014:	21012b04 	addi	r4,r4,1196
    1018:	00166900 	call	16690 <OSTaskCreateExt>
        TASK_STACKSIZE,
        NULL,
        0
	);

	OSTaskCreateExt
    101c:	d8000415 	stw	zero,16(sp)
    1020:	d8000315 	stw	zero,12(sp)
    1024:	00820004 	movi	r2,2048
    1028:	d8800215 	stw	r2,8(sp)
    102c:	008000b4 	movhi	r2,2
    1030:	10886904 	addi	r2,r2,8612
    1034:	d8800115 	stw	r2,4(sp)
    1038:	00800144 	movi	r2,5
    103c:	d8800015 	stw	r2,0(sp)
    1040:	01c00144 	movi	r7,5
    1044:	018000b4 	movhi	r6,2
    1048:	31906804 	addi	r6,r6,16800
    104c:	000b883a 	mov	r5,zero
    1050:	01000034 	movhi	r4,0
    1054:	21013f04 	addi	r4,r4,1276
    1058:	00166900 	call	16690 <OSTaskCreateExt>
        TASK_STACKSIZE,
        NULL,
        0
	);

	OSTaskCreateExt
    105c:	d8000415 	stw	zero,16(sp)
    1060:	d8000315 	stw	zero,12(sp)
    1064:	00820004 	movi	r2,2048
    1068:	d8800215 	stw	r2,8(sp)
    106c:	008000b4 	movhi	r2,2
    1070:	10906904 	addi	r2,r2,16804
    1074:	d8800115 	stw	r2,4(sp)
    1078:	00800184 	movi	r2,6
    107c:	d8800015 	stw	r2,0(sp)
    1080:	01c00184 	movi	r7,6
    1084:	018000b4 	movhi	r6,2
    1088:	31986804 	addi	r6,r6,24992
    108c:	000b883a 	mov	r5,zero
    1090:	01000034 	movhi	r4,0
    1094:	21019804 	addi	r4,r4,1632
    1098:	00166900 	call	16690 <OSTaskCreateExt>
        TASK_STACKSIZE,
        NULL,
        0
	);

	OSTaskCreateExt
    109c:	d8000415 	stw	zero,16(sp)
    10a0:	d8000315 	stw	zero,12(sp)
    10a4:	00820004 	movi	r2,2048
    10a8:	d8800215 	stw	r2,8(sp)
    10ac:	008000b4 	movhi	r2,2
    10b0:	10986904 	addi	r2,r2,24996
    10b4:	d8800115 	stw	r2,4(sp)
    10b8:	008001c4 	movi	r2,7
    10bc:	d8800015 	stw	r2,0(sp)
    10c0:	01c001c4 	movi	r7,7
    10c4:	018000f4 	movhi	r6,3
    10c8:	31a06804 	addi	r6,r6,-32352
    10cc:	000b883a 	mov	r5,zero
    10d0:	01000034 	movhi	r4,0
    10d4:	21021504 	addi	r4,r4,2132
    10d8:	00166900 	call	16690 <OSTaskCreateExt>
        TASK_STACKSIZE,
        NULL,
        0
	);

	OSTaskCreateExt
    10dc:	d8000415 	stw	zero,16(sp)
    10e0:	d8000315 	stw	zero,12(sp)
    10e4:	00820004 	movi	r2,2048
    10e8:	d8800215 	stw	r2,8(sp)
    10ec:	008000f4 	movhi	r2,3
    10f0:	10a06904 	addi	r2,r2,-32348
    10f4:	d8800115 	stw	r2,4(sp)
    10f8:	00800204 	movi	r2,8
    10fc:	d8800015 	stw	r2,0(sp)
    1100:	01c00204 	movi	r7,8
    1104:	018000f4 	movhi	r6,3
    1108:	31a86804 	addi	r6,r6,-24160
    110c:	000b883a 	mov	r5,zero
    1110:	01000034 	movhi	r4,0
    1114:	21024804 	addi	r4,r4,2336
    1118:	00166900 	call	16690 <OSTaskCreateExt>
        TASK_STACKSIZE,
        NULL,
        0
	);

	OSTaskCreateExt
    111c:	d8000415 	stw	zero,16(sp)
    1120:	d8000315 	stw	zero,12(sp)
    1124:	00820004 	movi	r2,2048
    1128:	d8800215 	stw	r2,8(sp)
    112c:	008000f4 	movhi	r2,3
    1130:	10a86904 	addi	r2,r2,-24156
    1134:	d8800115 	stw	r2,4(sp)
    1138:	00800244 	movi	r2,9
    113c:	d8800015 	stw	r2,0(sp)
    1140:	01c00244 	movi	r7,9
    1144:	018000f4 	movhi	r6,3
    1148:	31b06804 	addi	r6,r6,-15968
    114c:	000b883a 	mov	r5,zero
    1150:	01000034 	movhi	r4,0
    1154:	2102e104 	addi	r4,r4,2948
    1158:	00166900 	call	16690 <OSTaskCreateExt>
	);

	INT8U err;

	// My Mutex Create 							// Here, it means the resource mutex will get highest priority of 2 or 3 or 4
	StateMutex = OSMutexCreate(2, &err);
    115c:	e0bfffc4 	addi	r2,fp,-1
    1160:	100b883a 	mov	r5,r2
    1164:	01000084 	movi	r4,2
    1168:	00134dc0 	call	134dc <OSMutexCreate>
    116c:	d0a80c15 	stw	r2,-24528(gp)
	TimerMutex = OSMutexCreate(3, &err);
    1170:	e0bfffc4 	addi	r2,fp,-1
    1174:	100b883a 	mov	r5,r2
    1178:	010000c4 	movi	r4,3
    117c:	00134dc0 	call	134dc <OSMutexCreate>
    1180:	d0a80d15 	stw	r2,-24524(gp)
	GameMutex = OSMutexCreate(4, &err);
    1184:	e0bfffc4 	addi	r2,fp,-1
    1188:	100b883a 	mov	r5,r2
    118c:	01000104 	movi	r4,4
    1190:	00134dc0 	call	134dc <OSMutexCreate>
    1194:	d0a80e15 	stw	r2,-24520(gp)

	// My Event Flags
	stateFlag = OSFlagCreate(0x00, &err);
    1198:	e0bfffc4 	addi	r2,fp,-1
    119c:	100b883a 	mov	r5,r2
    11a0:	0009883a 	mov	r4,zero
    11a4:	00117140 	call	11714 <OSFlagCreate>
    11a8:	d0a80f15 	stw	r2,-24516(gp)

	// My Message Creates
	MsgQ = OSQCreate(&Msg1Storage[0], SIZE);
    11ac:	01400404 	movi	r5,16
    11b0:	010000b4 	movhi	r4,2
    11b4:	21005904 	addi	r4,r4,356
    11b8:	00145780 	call	14578 <OSQCreate>
    11bc:	d0a81015 	stw	r2,-24512(gp)

	// My Semaphore Creates
	SemRandom = OSSemCreate(1);
    11c0:	01000044 	movi	r4,1
    11c4:	00156440 	call	15644 <OSSemCreate>
    11c8:	d0a81115 	stw	r2,-24508(gp)
	SemPower = OSSemCreate(0);
    11cc:	0009883a 	mov	r4,zero
    11d0:	00156440 	call	15644 <OSSemCreate>
    11d4:	d0a81215 	stw	r2,-24504(gp)

	OSStart();
    11d8:	000fdd00 	call	fdd0 <OSStart>
	return 0;
    11dc:	0005883a 	mov	r2,zero
}
    11e0:	e037883a 	mov	sp,fp
    11e4:	dfc00117 	ldw	ra,4(sp)
    11e8:	df000017 	ldw	fp,0(sp)
    11ec:	dec00204 	addi	sp,sp,8
    11f0:	f800283a 	ret

000011f4 <memcpy>:
    11f4:	30c00430 	cmpltui	r3,r6,16
    11f8:	2005883a 	mov	r2,r4
    11fc:	18002d1e 	bne	r3,zero,12b4 <memcpy+0xc0>
    1200:	2906b03a 	or	r3,r5,r4
    1204:	18c000cc 	andi	r3,r3,3
    1208:	1800351e 	bne	r3,zero,12e0 <memcpy+0xec>
    120c:	32fffc04 	addi	r11,r6,-16
    1210:	5816d13a 	srli	r11,r11,4
    1214:	280f883a 	mov	r7,r5
    1218:	2007883a 	mov	r3,r4
    121c:	5ac00044 	addi	r11,r11,1
    1220:	5816913a 	slli	r11,r11,4
    1224:	22d5883a 	add	r10,r4,r11
    1228:	39000117 	ldw	r4,4(r7)
    122c:	3a400017 	ldw	r9,0(r7)
    1230:	3a000217 	ldw	r8,8(r7)
    1234:	19000115 	stw	r4,4(r3)
    1238:	39000317 	ldw	r4,12(r7)
    123c:	1a400015 	stw	r9,0(r3)
    1240:	1a000215 	stw	r8,8(r3)
    1244:	19000315 	stw	r4,12(r3)
    1248:	18c00404 	addi	r3,r3,16
    124c:	39c00404 	addi	r7,r7,16
    1250:	50fff51e 	bne	r10,r3,1228 <memcpy+0x34>
    1254:	3100030c 	andi	r4,r6,12
    1258:	2acb883a 	add	r5,r5,r11
    125c:	320003cc 	andi	r8,r6,15
    1260:	20002226 	beq	r4,zero,12ec <memcpy+0xf8>
    1264:	280f883a 	mov	r7,r5
    1268:	1813883a 	mov	r9,r3
    126c:	39c00104 	addi	r7,r7,4
    1270:	3abfff17 	ldw	r10,-4(r7)
    1274:	41c9c83a 	sub	r4,r8,r7
    1278:	2909883a 	add	r4,r5,r4
    127c:	4a800015 	stw	r10,0(r9)
    1280:	21000128 	cmpgeui	r4,r4,4
    1284:	4a400104 	addi	r9,r9,4
    1288:	203ff81e 	bne	r4,zero,126c <memcpy+0x78>
    128c:	413fff04 	addi	r4,r8,-4
    1290:	2008d0ba 	srli	r4,r4,2
    1294:	318000cc 	andi	r6,r6,3
    1298:	31ffffc4 	addi	r7,r6,-1
    129c:	21000044 	addi	r4,r4,1
    12a0:	200890ba 	slli	r4,r4,2
    12a4:	1907883a 	add	r3,r3,r4
    12a8:	290b883a 	add	r5,r5,r4
    12ac:	3000041e 	bne	r6,zero,12c0 <memcpy+0xcc>
    12b0:	f800283a 	ret
    12b4:	2007883a 	mov	r3,r4
    12b8:	31ffffc4 	addi	r7,r6,-1
    12bc:	303ffc26 	beq	r6,zero,12b0 <memcpy+0xbc>
    12c0:	39c00044 	addi	r7,r7,1
    12c4:	19cf883a 	add	r7,r3,r7
    12c8:	29800003 	ldbu	r6,0(r5)
    12cc:	18c00044 	addi	r3,r3,1
    12d0:	29400044 	addi	r5,r5,1
    12d4:	19bfffc5 	stb	r6,-1(r3)
    12d8:	38fffb1e 	bne	r7,r3,12c8 <memcpy+0xd4>
    12dc:	f800283a 	ret
    12e0:	31ffffc4 	addi	r7,r6,-1
    12e4:	2007883a 	mov	r3,r4
    12e8:	003ff506 	br	12c0 <memcpy+0xcc>
    12ec:	400d883a 	mov	r6,r8
    12f0:	003ff106 	br	12b8 <memcpy+0xc4>

000012f4 <_printf_r>:
    12f4:	defffd04 	addi	sp,sp,-12
    12f8:	2805883a 	mov	r2,r5
    12fc:	dfc00015 	stw	ra,0(sp)
    1300:	d9800115 	stw	r6,4(sp)
    1304:	d9c00215 	stw	r7,8(sp)
    1308:	21400217 	ldw	r5,8(r4)
    130c:	d9c00104 	addi	r7,sp,4
    1310:	100d883a 	mov	r6,r2
    1314:	00014240 	call	1424 <___vfprintf_internal_r>
    1318:	dfc00017 	ldw	ra,0(sp)
    131c:	dec00304 	addi	sp,sp,12
    1320:	f800283a 	ret

00001324 <printf>:
    1324:	defffc04 	addi	sp,sp,-16
    1328:	dfc00015 	stw	ra,0(sp)
    132c:	d9400115 	stw	r5,4(sp)
    1330:	d9800215 	stw	r6,8(sp)
    1334:	d9c00315 	stw	r7,12(sp)
    1338:	008000b4 	movhi	r2,2
    133c:	10b81817 	ldw	r2,-8096(r2)
    1340:	200b883a 	mov	r5,r4
    1344:	d9800104 	addi	r6,sp,4
    1348:	11000217 	ldw	r4,8(r2)
    134c:	00035180 	call	3518 <__vfprintf_internal>
    1350:	dfc00017 	ldw	ra,0(sp)
    1354:	dec00404 	addi	sp,sp,16
    1358:	f800283a 	ret

0000135c <srand>:
    135c:	008000b4 	movhi	r2,2
    1360:	10b81817 	ldw	r2,-8096(r2)
    1364:	11002915 	stw	r4,164(r2)
    1368:	10002a15 	stw	zero,168(r2)
    136c:	f800283a 	ret

00001370 <rand>:
    1370:	008000b4 	movhi	r2,2
    1374:	11f81817 	ldw	r7,-8096(r2)
    1378:	01932574 	movhi	r6,19605
    137c:	015614b4 	movhi	r5,22610
    1380:	39002917 	ldw	r4,164(r7)
    1384:	38802a17 	ldw	r2,168(r7)
    1388:	319fcb44 	addi	r6,r6,32557
    138c:	297d0b44 	addi	r5,r5,-3027
    1390:	2187383a 	mul	r3,r4,r6
    1394:	214b383a 	mul	r5,r4,r5
    1398:	1185383a 	mul	r2,r2,r6
    139c:	2188383a 	mulxuu	r4,r4,r6
    13a0:	19800044 	addi	r6,r3,1
    13a4:	1145883a 	add	r2,r2,r5
    13a8:	1105883a 	add	r2,r2,r4
    13ac:	30c7803a 	cmpltu	r3,r6,r3
    13b0:	01200034 	movhi	r4,32768
    13b4:	1885883a 	add	r2,r3,r2
    13b8:	213fffc4 	addi	r4,r4,-1
    13bc:	38802a15 	stw	r2,168(r7)
    13c0:	39802915 	stw	r6,164(r7)
    13c4:	1104703a 	and	r2,r2,r4
    13c8:	f800283a 	ret

000013cc <time>:
    13cc:	defffb04 	addi	sp,sp,-20
    13d0:	008000b4 	movhi	r2,2
    13d4:	dc000315 	stw	r16,12(sp)
    13d8:	2021883a 	mov	r16,r4
    13dc:	11381817 	ldw	r4,-8096(r2)
    13e0:	000d883a 	mov	r6,zero
    13e4:	d80b883a 	mov	r5,sp
    13e8:	dfc00415 	stw	ra,16(sp)
    13ec:	0005c9c0 	call	5c9c <_gettimeofday_r>
    13f0:	10000916 	blt	r2,zero,1418 <time+0x4c>
    13f4:	d8800017 	ldw	r2,0(sp)
    13f8:	d8c00117 	ldw	r3,4(sp)
    13fc:	80000226 	beq	r16,zero,1408 <time+0x3c>
    1400:	80800015 	stw	r2,0(r16)
    1404:	80c00115 	stw	r3,4(r16)
    1408:	dfc00417 	ldw	ra,16(sp)
    140c:	dc000317 	ldw	r16,12(sp)
    1410:	dec00504 	addi	sp,sp,20
    1414:	f800283a 	ret
    1418:	00bfffc4 	movi	r2,-1
    141c:	00ffffc4 	movi	r3,-1
    1420:	003ff606 	br	13fc <time+0x30>

00001424 <___vfprintf_internal_r>:
    1424:	deffbf04 	addi	sp,sp,-260
    1428:	dfc04015 	stw	ra,256(sp)
    142c:	dd803d15 	stw	r22,244(sp)
    1430:	dcc03a15 	stw	r19,232(sp)
    1434:	dc803915 	stw	r18,228(sp)
    1438:	2027883a 	mov	r19,r4
    143c:	2825883a 	mov	r18,r5
    1440:	302d883a 	mov	r22,r6
    1444:	d9c00615 	stw	r7,24(sp)
    1448:	df003f15 	stw	fp,252(sp)
    144c:	ddc03e15 	stw	r23,248(sp)
    1450:	dd403c15 	stw	r21,240(sp)
    1454:	dd003b15 	stw	r20,236(sp)
    1458:	dc403815 	stw	r17,224(sp)
    145c:	dc003715 	stw	r16,220(sp)
    1460:	0005d040 	call	5d04 <_localeconv_r>
    1464:	10800017 	ldw	r2,0(r2)
    1468:	1009883a 	mov	r4,r2
    146c:	d8800d15 	stw	r2,52(sp)
    1470:	0007bfc0 	call	7bfc <strlen>
    1474:	d8800b15 	stw	r2,44(sp)
    1478:	98000226 	beq	r19,zero,1484 <___vfprintf_internal_r+0x60>
    147c:	98800e17 	ldw	r2,56(r19)
    1480:	1001de26 	beq	r2,zero,1bfc <___vfprintf_internal_r+0x7d8>
    1484:	9080030b 	ldhu	r2,12(r18)
    1488:	10c8000c 	andi	r3,r2,8192
    148c:	1800061e 	bne	r3,zero,14a8 <___vfprintf_internal_r+0x84>
    1490:	90c01917 	ldw	r3,100(r18)
    1494:	0137ffc4 	movi	r4,-8193
    1498:	10880014 	ori	r2,r2,8192
    149c:	1906703a 	and	r3,r3,r4
    14a0:	9080030d 	sth	r2,12(r18)
    14a4:	90c01915 	stw	r3,100(r18)
    14a8:	10c0020c 	andi	r3,r2,8
    14ac:	1800fa26 	beq	r3,zero,1898 <___vfprintf_internal_r+0x474>
    14b0:	90c00417 	ldw	r3,16(r18)
    14b4:	1800f826 	beq	r3,zero,1898 <___vfprintf_internal_r+0x474>
    14b8:	1080068c 	andi	r2,r2,26
    14bc:	10800298 	cmpnei	r2,r2,10
    14c0:	1000fd26 	beq	r2,zero,18b8 <___vfprintf_internal_r+0x494>
    14c4:	d8802704 	addi	r2,sp,156
    14c8:	b02f883a 	mov	r23,r22
    14cc:	d8801a15 	stw	r2,104(sp)
    14d0:	d8001c15 	stw	zero,112(sp)
    14d4:	d8001b15 	stw	zero,108(sp)
    14d8:	d8000815 	stw	zero,32(sp)
    14dc:	d8000915 	stw	zero,36(sp)
    14e0:	d8000a15 	stw	zero,40(sp)
    14e4:	d8000c15 	stw	zero,48(sp)
    14e8:	d8001015 	stw	zero,64(sp)
    14ec:	d8000515 	stw	zero,20(sp)
    14f0:	102d883a 	mov	r22,r2
    14f4:	b8800007 	ldb	r2,0(r23)
    14f8:	1000d526 	beq	r2,zero,1850 <___vfprintf_internal_r+0x42c>
    14fc:	b821883a 	mov	r16,r23
    1500:	00000306 	br	1510 <___vfprintf_internal_r+0xec>
    1504:	80800047 	ldb	r2,1(r16)
    1508:	84000044 	addi	r16,r16,1
    150c:	10012026 	beq	r2,zero,1990 <___vfprintf_internal_r+0x56c>
    1510:	10800958 	cmpnei	r2,r2,37
    1514:	103ffb1e 	bne	r2,zero,1504 <___vfprintf_internal_r+0xe0>
    1518:	85e3c83a 	sub	r17,r16,r23
    151c:	85c11e1e 	bne	r16,r23,1998 <___vfprintf_internal_r+0x574>
    1520:	80800003 	ldbu	r2,0(r16)
    1524:	10803fcc 	andi	r2,r2,255
    1528:	1080201c 	xori	r2,r2,128
    152c:	10bfe004 	addi	r2,r2,-128
    1530:	1000c726 	beq	r2,zero,1850 <___vfprintf_internal_r+0x42c>
    1534:	82c00047 	ldb	r11,1(r16)
    1538:	85c00044 	addi	r23,r16,1
    153c:	d8001345 	stb	zero,77(sp)
    1540:	0009883a 	mov	r4,zero
    1544:	000b883a 	mov	r5,zero
    1548:	023fffc4 	movi	r8,-1
    154c:	0021883a 	mov	r16,zero
    1550:	0019883a 	mov	r12,zero
    1554:	bdc00044 	addi	r23,r23,1
    1558:	5839883a 	mov	fp,r11
    155c:	e0bff804 	addi	r2,fp,-32
    1560:	10c01668 	cmpgeui	r3,r2,89
    1564:	18006a1e 	bne	r3,zero,1710 <___vfprintf_internal_r+0x2ec>
    1568:	100490ba 	slli	r2,r2,2
    156c:	00c00034 	movhi	r3,0
    1570:	10c7883a 	add	r3,r2,r3
    1574:	18855f17 	ldw	r2,5500(r3)
    1578:	1000683a 	jmp	r2
    157c:	00001ebc 	xorhi	zero,zero,122
    1580:	00001710 	cmplti	zero,zero,92
    1584:	00001710 	cmplti	zero,zero,92
    1588:	00001eb0 	cmpltui	zero,zero,122
    158c:	00001710 	cmplti	zero,zero,92
    1590:	00001710 	cmplti	zero,zero,92
    1594:	00001710 	cmplti	zero,zero,92
    1598:	00001710 	cmplti	zero,zero,92
    159c:	00001710 	cmplti	zero,zero,92
    15a0:	00001710 	cmplti	zero,zero,92
    15a4:	00001e88 	cmpgei	zero,zero,122
    15a8:	00001e78 	rdprs	zero,zero,121
    15ac:	00001710 	cmplti	zero,zero,92
    15b0:	00001e60 	cmpeqi	zero,zero,121
    15b4:	00001e1c 	xori	zero,zero,120
    15b8:	00001710 	cmplti	zero,zero,92
    15bc:	00001e10 	cmplti	zero,zero,120
    15c0:	000016e0 	cmpeqi	zero,zero,91
    15c4:	000016e0 	cmpeqi	zero,zero,91
    15c8:	000016e0 	cmpeqi	zero,zero,91
    15cc:	000016e0 	cmpeqi	zero,zero,91
    15d0:	000016e0 	cmpeqi	zero,zero,91
    15d4:	000016e0 	cmpeqi	zero,zero,91
    15d8:	000016e0 	cmpeqi	zero,zero,91
    15dc:	000016e0 	cmpeqi	zero,zero,91
    15e0:	000016e0 	cmpeqi	zero,zero,91
    15e4:	00001710 	cmplti	zero,zero,92
    15e8:	00001710 	cmplti	zero,zero,92
    15ec:	00001710 	cmplti	zero,zero,92
    15f0:	00001710 	cmplti	zero,zero,92
    15f4:	00001710 	cmplti	zero,zero,92
    15f8:	00001710 	cmplti	zero,zero,92
    15fc:	00001710 	cmplti	zero,zero,92
    1600:	00001710 	cmplti	zero,zero,92
    1604:	00001710 	cmplti	zero,zero,92
    1608:	00001710 	cmplti	zero,zero,92
    160c:	00001d28 	cmpgeui	zero,zero,116
    1610:	000019f4 	movhi	zero,103
    1614:	00001710 	cmplti	zero,zero,92
    1618:	000019f4 	movhi	zero,103
    161c:	00001710 	cmplti	zero,zero,92
    1620:	00001710 	cmplti	zero,zero,92
    1624:	00001710 	cmplti	zero,zero,92
    1628:	00001710 	cmplti	zero,zero,92
    162c:	00001d1c 	xori	zero,zero,116
    1630:	00001710 	cmplti	zero,zero,92
    1634:	00001710 	cmplti	zero,zero,92
    1638:	00001928 	cmpgeui	zero,zero,100
    163c:	00001710 	cmplti	zero,zero,92
    1640:	00001710 	cmplti	zero,zero,92
    1644:	00001710 	cmplti	zero,zero,92
    1648:	00001710 	cmplti	zero,zero,92
    164c:	00001710 	cmplti	zero,zero,92
    1650:	00001900 	call	190 <alt_irq_handler+0x94>
    1654:	00001710 	cmplti	zero,zero,92
    1658:	00001710 	cmplti	zero,zero,92
    165c:	00001cd4 	movui	zero,115
    1660:	00001710 	cmplti	zero,zero,92
    1664:	00001710 	cmplti	zero,zero,92
    1668:	00001710 	cmplti	zero,zero,92
    166c:	00001710 	cmplti	zero,zero,92
    1670:	00001710 	cmplti	zero,zero,92
    1674:	00001710 	cmplti	zero,zero,92
    1678:	00001710 	cmplti	zero,zero,92
    167c:	00001710 	cmplti	zero,zero,92
    1680:	00001710 	cmplti	zero,zero,92
    1684:	00001710 	cmplti	zero,zero,92
    1688:	00001cac 	andhi	zero,zero,114
    168c:	00001c08 	cmpgei	zero,zero,112
    1690:	000019f4 	movhi	zero,103
    1694:	000019f4 	movhi	zero,103
    1698:	000019f4 	movhi	zero,103
    169c:	00001ca0 	cmpeqi	zero,zero,114
    16a0:	00001c08 	cmpgei	zero,zero,112
    16a4:	00001710 	cmplti	zero,zero,92
    16a8:	00001710 	cmplti	zero,zero,92
    16ac:	00002010 	cmplti	zero,zero,128
    16b0:	00001710 	cmplti	zero,zero,92
    16b4:	00001fd4 	movui	zero,127
    16b8:	0000192c 	andhi	zero,zero,100
    16bc:	00001f94 	movui	zero,126
    16c0:	00001f88 	cmpgei	zero,zero,126
    16c4:	00001710 	cmplti	zero,zero,92
    16c8:	00001f30 	cmpltui	zero,zero,124
    16cc:	00001710 	cmplti	zero,zero,92
    16d0:	00001904 	movi	zero,100
    16d4:	00001710 	cmplti	zero,zero,92
    16d8:	00001710 	cmplti	zero,zero,92
    16dc:	00001ee8 	cmpgeui	zero,zero,123
    16e0:	0021883a 	mov	r16,zero
    16e4:	e0bff404 	addi	r2,fp,-48
    16e8:	bf000007 	ldb	fp,0(r23)
    16ec:	840002a4 	muli	r16,r16,10
    16f0:	bdc00044 	addi	r23,r23,1
    16f4:	1421883a 	add	r16,r2,r16
    16f8:	e0bff404 	addi	r2,fp,-48
    16fc:	10c002b0 	cmpltui	r3,r2,10
    1700:	183ff91e 	bne	r3,zero,16e8 <___vfprintf_internal_r+0x2c4>
    1704:	e0bff804 	addi	r2,fp,-32
    1708:	10c01668 	cmpgeui	r3,r2,89
    170c:	183f9626 	beq	r3,zero,1568 <___vfprintf_internal_r+0x144>
    1710:	21003fcc 	andi	r4,r4,255
    1714:	2006851e 	bne	r4,zero,312c <___vfprintf_internal_r+0x1d08>
    1718:	e0004d26 	beq	fp,zero,1850 <___vfprintf_internal_r+0x42c>
    171c:	df001d05 	stb	fp,116(sp)
    1720:	d8001345 	stb	zero,77(sp)
    1724:	05000044 	movi	r20,1
    1728:	05400044 	movi	r21,1
    172c:	dc401d04 	addi	r17,sp,116
    1730:	db000415 	stw	r12,16(sp)
    1734:	0011883a 	mov	r8,zero
    1738:	d8000715 	stw	zero,28(sp)
    173c:	d8800417 	ldw	r2,16(sp)
    1740:	1380008c 	andi	r14,r2,2
    1744:	70000126 	beq	r14,zero,174c <___vfprintf_internal_r+0x328>
    1748:	a5000084 	addi	r20,r20,2
    174c:	d8800417 	ldw	r2,16(sp)
    1750:	d8c01c17 	ldw	r3,112(sp)
    1754:	1340210c 	andi	r13,r2,132
    1758:	6800021e 	bne	r13,zero,1764 <___vfprintf_internal_r+0x340>
    175c:	850fc83a 	sub	r7,r16,r20
    1760:	01c34316 	blt	zero,r7,2470 <___vfprintf_internal_r+0x104c>
    1764:	d8801347 	ldb	r2,77(sp)
    1768:	10000c26 	beq	r2,zero,179c <___vfprintf_internal_r+0x378>
    176c:	d8801b17 	ldw	r2,108(sp)
    1770:	d9001344 	addi	r4,sp,77
    1774:	18c00044 	addi	r3,r3,1
    1778:	10800044 	addi	r2,r2,1
    177c:	b1000015 	stw	r4,0(r22)
    1780:	01000044 	movi	r4,1
    1784:	d8801b15 	stw	r2,108(sp)
    1788:	b1000115 	stw	r4,4(r22)
    178c:	d8c01c15 	stw	r3,112(sp)
    1790:	10800208 	cmpgei	r2,r2,8
    1794:	1003771e 	bne	r2,zero,2574 <___vfprintf_internal_r+0x1150>
    1798:	b5800204 	addi	r22,r22,8
    179c:	70000c26 	beq	r14,zero,17d0 <___vfprintf_internal_r+0x3ac>
    17a0:	d8801b17 	ldw	r2,108(sp)
    17a4:	d9001384 	addi	r4,sp,78
    17a8:	18c00084 	addi	r3,r3,2
    17ac:	10800044 	addi	r2,r2,1
    17b0:	b1000015 	stw	r4,0(r22)
    17b4:	01000084 	movi	r4,2
    17b8:	d8801b15 	stw	r2,108(sp)
    17bc:	b1000115 	stw	r4,4(r22)
    17c0:	d8c01c15 	stw	r3,112(sp)
    17c4:	10800208 	cmpgei	r2,r2,8
    17c8:	1003781e 	bne	r2,zero,25ac <___vfprintf_internal_r+0x1188>
    17cc:	b5800204 	addi	r22,r22,8
    17d0:	6b402018 	cmpnei	r13,r13,128
    17d4:	68025926 	beq	r13,zero,213c <___vfprintf_internal_r+0xd18>
    17d8:	4551c83a 	sub	r8,r8,r21
    17dc:	02029116 	blt	zero,r8,2224 <___vfprintf_internal_r+0xe00>
    17e0:	d8800417 	ldw	r2,16(sp)
    17e4:	1080400c 	andi	r2,r2,256
    17e8:	10020e1e 	bne	r2,zero,2024 <___vfprintf_internal_r+0xc00>
    17ec:	d8801b17 	ldw	r2,108(sp)
    17f0:	1d47883a 	add	r3,r3,r21
    17f4:	b4400015 	stw	r17,0(r22)
    17f8:	10800044 	addi	r2,r2,1
    17fc:	b5400115 	stw	r21,4(r22)
    1800:	d8801b15 	stw	r2,108(sp)
    1804:	d8c01c15 	stw	r3,112(sp)
    1808:	10800208 	cmpgei	r2,r2,8
    180c:	10030e1e 	bne	r2,zero,2448 <___vfprintf_internal_r+0x1024>
    1810:	b5800204 	addi	r22,r22,8
    1814:	d8800417 	ldw	r2,16(sp)
    1818:	1440010c 	andi	r17,r2,4
    181c:	88000226 	beq	r17,zero,1828 <___vfprintf_internal_r+0x404>
    1820:	8523c83a 	sub	r17,r16,r20
    1824:	0440c616 	blt	zero,r17,1b40 <___vfprintf_internal_r+0x71c>
    1828:	8500010e 	bge	r16,r20,1830 <___vfprintf_internal_r+0x40c>
    182c:	a021883a 	mov	r16,r20
    1830:	d8800517 	ldw	r2,20(sp)
    1834:	1405883a 	add	r2,r2,r16
    1838:	d8800515 	stw	r2,20(sp)
    183c:	1802c01e 	bne	r3,zero,2340 <___vfprintf_internal_r+0xf1c>
    1840:	b8800007 	ldb	r2,0(r23)
    1844:	d8001b15 	stw	zero,108(sp)
    1848:	dd802704 	addi	r22,sp,156
    184c:	103f2b1e 	bne	r2,zero,14fc <___vfprintf_internal_r+0xd8>
    1850:	d8801c17 	ldw	r2,112(sp)
    1854:	1006371e 	bne	r2,zero,3134 <___vfprintf_internal_r+0x1d10>
    1858:	9080030b 	ldhu	r2,12(r18)
    185c:	1080100c 	andi	r2,r2,64
    1860:	1006cd1e 	bne	r2,zero,3398 <___vfprintf_internal_r+0x1f74>
    1864:	d8800517 	ldw	r2,20(sp)
    1868:	dfc04017 	ldw	ra,256(sp)
    186c:	df003f17 	ldw	fp,252(sp)
    1870:	ddc03e17 	ldw	r23,248(sp)
    1874:	dd803d17 	ldw	r22,244(sp)
    1878:	dd403c17 	ldw	r21,240(sp)
    187c:	dd003b17 	ldw	r20,236(sp)
    1880:	dcc03a17 	ldw	r19,232(sp)
    1884:	dc803917 	ldw	r18,228(sp)
    1888:	dc403817 	ldw	r17,224(sp)
    188c:	dc003717 	ldw	r16,220(sp)
    1890:	dec04104 	addi	sp,sp,260
    1894:	f800283a 	ret
    1898:	900b883a 	mov	r5,r18
    189c:	9809883a 	mov	r4,r19
    18a0:	00035f40 	call	35f4 <__swsetup_r>
    18a4:	1006bc1e 	bne	r2,zero,3398 <___vfprintf_internal_r+0x1f74>
    18a8:	9080030b 	ldhu	r2,12(r18)
    18ac:	1080068c 	andi	r2,r2,26
    18b0:	10800298 	cmpnei	r2,r2,10
    18b4:	103f031e 	bne	r2,zero,14c4 <___vfprintf_internal_r+0xa0>
    18b8:	9080038f 	ldh	r2,14(r18)
    18bc:	103f0116 	blt	r2,zero,14c4 <___vfprintf_internal_r+0xa0>
    18c0:	d9c00617 	ldw	r7,24(sp)
    18c4:	b00d883a 	mov	r6,r22
    18c8:	900b883a 	mov	r5,r18
    18cc:	9809883a 	mov	r4,r19
    18d0:	dfc04017 	ldw	ra,256(sp)
    18d4:	df003f17 	ldw	fp,252(sp)
    18d8:	ddc03e17 	ldw	r23,248(sp)
    18dc:	dd803d17 	ldw	r22,244(sp)
    18e0:	dd403c17 	ldw	r21,240(sp)
    18e4:	dd003b17 	ldw	r20,236(sp)
    18e8:	dcc03a17 	ldw	r19,232(sp)
    18ec:	dc803917 	ldw	r18,228(sp)
    18f0:	dc403817 	ldw	r17,224(sp)
    18f4:	dc003717 	ldw	r16,220(sp)
    18f8:	dec04104 	addi	sp,sp,260
    18fc:	00035341 	jmpi	3534 <__sbprintf>
    1900:	63000414 	ori	r12,r12,16
    1904:	6080080c 	andi	r2,r12,32
    1908:	10008126 	beq	r2,zero,1b10 <___vfprintf_internal_r+0x6ec>
    190c:	d8c00617 	ldw	r3,24(sp)
    1910:	00800044 	movi	r2,1
    1914:	1d000017 	ldw	r20,0(r3)
    1918:	1d400117 	ldw	r21,4(r3)
    191c:	18c00204 	addi	r3,r3,8
    1920:	d8c00615 	stw	r3,24(sp)
    1924:	00000906 	br	194c <___vfprintf_internal_r+0x528>
    1928:	63000414 	ori	r12,r12,16
    192c:	6080080c 	andi	r2,r12,32
    1930:	10006b26 	beq	r2,zero,1ae0 <___vfprintf_internal_r+0x6bc>
    1934:	d8c00617 	ldw	r3,24(sp)
    1938:	0005883a 	mov	r2,zero
    193c:	1d000017 	ldw	r20,0(r3)
    1940:	1d400117 	ldw	r21,4(r3)
    1944:	18c00204 	addi	r3,r3,8
    1948:	d8c00615 	stw	r3,24(sp)
    194c:	d8001345 	stb	zero,77(sp)
    1950:	40ffffe0 	cmpeqi	r3,r8,-1
    1954:	001b883a 	mov	r13,zero
    1958:	18010e1e 	bne	r3,zero,1d94 <___vfprintf_internal_r+0x970>
    195c:	047fdfc4 	movi	r17,-129
    1960:	6448703a 	and	r4,r12,r17
    1964:	a546b03a 	or	r3,r20,r21
    1968:	d9000415 	stw	r4,16(sp)
    196c:	1802be1e 	bne	r3,zero,2468 <___vfprintf_internal_r+0x1044>
    1970:	40025d1e 	bne	r8,zero,22e8 <___vfprintf_internal_r+0xec4>
    1974:	1003731e 	bne	r2,zero,2744 <___vfprintf_internal_r+0x1320>
    1978:	6540004c 	andi	r21,r12,1
    197c:	a803ae26 	beq	r21,zero,2838 <___vfprintf_internal_r+0x1414>
    1980:	00800c04 	movi	r2,48
    1984:	d88026c5 	stb	r2,155(sp)
    1988:	dc4026c4 	addi	r17,sp,155
    198c:	0000ba06 	br	1c78 <___vfprintf_internal_r+0x854>
    1990:	85e3c83a 	sub	r17,r16,r23
    1994:	85ffae26 	beq	r16,r23,1850 <___vfprintf_internal_r+0x42c>
    1998:	d8c01c17 	ldw	r3,112(sp)
    199c:	d8801b17 	ldw	r2,108(sp)
    19a0:	b5c00015 	stw	r23,0(r22)
    19a4:	1c47883a 	add	r3,r3,r17
    19a8:	10800044 	addi	r2,r2,1
    19ac:	d8801b15 	stw	r2,108(sp)
    19b0:	b4400115 	stw	r17,4(r22)
    19b4:	d8c01c15 	stw	r3,112(sp)
    19b8:	10800208 	cmpgei	r2,r2,8
    19bc:	1000061e 	bne	r2,zero,19d8 <___vfprintf_internal_r+0x5b4>
    19c0:	b5800204 	addi	r22,r22,8
    19c4:	d8c00517 	ldw	r3,20(sp)
    19c8:	80800003 	ldbu	r2,0(r16)
    19cc:	1c47883a 	add	r3,r3,r17
    19d0:	d8c00515 	stw	r3,20(sp)
    19d4:	003ed306 	br	1524 <___vfprintf_internal_r+0x100>
    19d8:	d9801a04 	addi	r6,sp,104
    19dc:	900b883a 	mov	r5,r18
    19e0:	9809883a 	mov	r4,r19
    19e4:	0007d880 	call	7d88 <__sprint_r>
    19e8:	103f9b1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    19ec:	dd802704 	addi	r22,sp,156
    19f0:	003ff406 	br	19c4 <___vfprintf_internal_r+0x5a0>
    19f4:	21003fcc 	andi	r4,r4,255
    19f8:	2006651e 	bne	r4,zero,3390 <___vfprintf_internal_r+0x1f6c>
    19fc:	d8c00617 	ldw	r3,24(sp)
    1a00:	6080020c 	andi	r2,r12,8
    1a04:	19000204 	addi	r4,r3,8
    1a08:	d9000e15 	stw	r4,56(sp)
    1a0c:	1003a51e 	bne	r2,zero,28a4 <___vfprintf_internal_r+0x1480>
    1a10:	d8800617 	ldw	r2,24(sp)
    1a14:	10c00017 	ldw	r3,0(r2)
    1a18:	10800117 	ldw	r2,4(r2)
    1a1c:	d8c00915 	stw	r3,36(sp)
    1a20:	d8800a15 	stw	r2,40(sp)
    1a24:	dd400a17 	ldw	r21,40(sp)
    1a28:	dd000917 	ldw	r20,36(sp)
    1a2c:	00a00034 	movhi	r2,32768
    1a30:	10bfffc4 	addi	r2,r2,-1
    1a34:	a8a2703a 	and	r17,r21,r2
    1a38:	01dffc34 	movhi	r7,32752
    1a3c:	01bfffc4 	movi	r6,-1
    1a40:	39ffffc4 	addi	r7,r7,-1
    1a44:	a009883a 	mov	r4,r20
    1a48:	880b883a 	mov	r5,r17
    1a4c:	da000615 	stw	r8,24(sp)
    1a50:	db000415 	stw	r12,16(sp)
    1a54:	000dd8c0 	call	dd8c <__unorddf2>
    1a58:	db000417 	ldw	r12,16(sp)
    1a5c:	da000617 	ldw	r8,24(sp)
    1a60:	1004621e 	bne	r2,zero,2bec <___vfprintf_internal_r+0x17c8>
    1a64:	01dffc34 	movhi	r7,32752
    1a68:	01bfffc4 	movi	r6,-1
    1a6c:	39ffffc4 	addi	r7,r7,-1
    1a70:	a009883a 	mov	r4,r20
    1a74:	880b883a 	mov	r5,r17
    1a78:	000cd7c0 	call	cd7c <__ledf2>
    1a7c:	db000417 	ldw	r12,16(sp)
    1a80:	da000617 	ldw	r8,24(sp)
    1a84:	0084590e 	bge	zero,r2,2bec <___vfprintf_internal_r+0x17c8>
    1a88:	000d883a 	mov	r6,zero
    1a8c:	000f883a 	mov	r7,zero
    1a90:	a009883a 	mov	r4,r20
    1a94:	a80b883a 	mov	r5,r21
    1a98:	000cd7c0 	call	cd7c <__ledf2>
    1a9c:	db000417 	ldw	r12,16(sp)
    1aa0:	10058f16 	blt	r2,zero,30e0 <___vfprintf_internal_r+0x1cbc>
    1aa4:	db401343 	ldbu	r13,77(sp)
    1aa8:	e0801210 	cmplti	r2,fp,72
    1aac:	1005371e 	bne	r2,zero,2f8c <___vfprintf_internal_r+0x1b68>
    1ab0:	044000b4 	movhi	r17,2
    1ab4:	8c6e3a04 	addi	r17,r17,-18200
    1ab8:	00bfdfc4 	movi	r2,-129
    1abc:	6084703a 	and	r2,r12,r2
    1ac0:	d8800415 	stw	r2,16(sp)
    1ac4:	d8800e17 	ldw	r2,56(sp)
    1ac8:	050000c4 	movi	r20,3
    1acc:	054000c4 	movi	r21,3
    1ad0:	d8800615 	stw	r2,24(sp)
    1ad4:	0011883a 	mov	r8,zero
    1ad8:	d8000715 	stw	zero,28(sp)
    1adc:	00006a06 	br	1c88 <___vfprintf_internal_r+0x864>
    1ae0:	d9000617 	ldw	r4,24(sp)
    1ae4:	6080040c 	andi	r2,r12,16
    1ae8:	20c00104 	addi	r3,r4,4
    1aec:	1003681e 	bne	r2,zero,2890 <___vfprintf_internal_r+0x146c>
    1af0:	6080100c 	andi	r2,r12,64
    1af4:	10051f26 	beq	r2,zero,2f74 <___vfprintf_internal_r+0x1b50>
    1af8:	d8800617 	ldw	r2,24(sp)
    1afc:	002b883a 	mov	r21,zero
    1b00:	d8c00615 	stw	r3,24(sp)
    1b04:	1500000b 	ldhu	r20,0(r2)
    1b08:	0005883a 	mov	r2,zero
    1b0c:	003f8f06 	br	194c <___vfprintf_internal_r+0x528>
    1b10:	d9000617 	ldw	r4,24(sp)
    1b14:	6080040c 	andi	r2,r12,16
    1b18:	20c00104 	addi	r3,r4,4
    1b1c:	10034e1e 	bne	r2,zero,2858 <___vfprintf_internal_r+0x1434>
    1b20:	6080100c 	andi	r2,r12,64
    1b24:	10055726 	beq	r2,zero,3084 <___vfprintf_internal_r+0x1c60>
    1b28:	d8800617 	ldw	r2,24(sp)
    1b2c:	002b883a 	mov	r21,zero
    1b30:	d8c00615 	stw	r3,24(sp)
    1b34:	1500000b 	ldhu	r20,0(r2)
    1b38:	00800044 	movi	r2,1
    1b3c:	003f8306 	br	194c <___vfprintf_internal_r+0x528>
    1b40:	030000b4 	movhi	r12,2
    1b44:	89000450 	cmplti	r4,r17,17
    1b48:	d8801b17 	ldw	r2,108(sp)
    1b4c:	632e4e04 	addi	r12,r12,-18120
    1b50:	20001b1e 	bne	r4,zero,1bc0 <___vfprintf_internal_r+0x79c>
    1b54:	05400404 	movi	r21,16
    1b58:	6039883a 	mov	fp,r12
    1b5c:	00000406 	br	1b70 <___vfprintf_internal_r+0x74c>
    1b60:	8c7ffc04 	addi	r17,r17,-16
    1b64:	89000448 	cmpgei	r4,r17,17
    1b68:	b5800204 	addi	r22,r22,8
    1b6c:	20001326 	beq	r4,zero,1bbc <___vfprintf_internal_r+0x798>
    1b70:	10800044 	addi	r2,r2,1
    1b74:	18c00404 	addi	r3,r3,16
    1b78:	b7000015 	stw	fp,0(r22)
    1b7c:	b5400115 	stw	r21,4(r22)
    1b80:	d8c01c15 	stw	r3,112(sp)
    1b84:	d8801b15 	stw	r2,108(sp)
    1b88:	11000208 	cmpgei	r4,r2,8
    1b8c:	203ff426 	beq	r4,zero,1b60 <___vfprintf_internal_r+0x73c>
    1b90:	d9801a04 	addi	r6,sp,104
    1b94:	900b883a 	mov	r5,r18
    1b98:	9809883a 	mov	r4,r19
    1b9c:	0007d880 	call	7d88 <__sprint_r>
    1ba0:	103f2d1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    1ba4:	8c7ffc04 	addi	r17,r17,-16
    1ba8:	89000448 	cmpgei	r4,r17,17
    1bac:	d8c01c17 	ldw	r3,112(sp)
    1bb0:	d8801b17 	ldw	r2,108(sp)
    1bb4:	dd802704 	addi	r22,sp,156
    1bb8:	203fed1e 	bne	r4,zero,1b70 <___vfprintf_internal_r+0x74c>
    1bbc:	e019883a 	mov	r12,fp
    1bc0:	10800044 	addi	r2,r2,1
    1bc4:	1c47883a 	add	r3,r3,r17
    1bc8:	d8801b15 	stw	r2,108(sp)
    1bcc:	b3000015 	stw	r12,0(r22)
    1bd0:	b4400115 	stw	r17,4(r22)
    1bd4:	d8c01c15 	stw	r3,112(sp)
    1bd8:	10800210 	cmplti	r2,r2,8
    1bdc:	103f121e 	bne	r2,zero,1828 <___vfprintf_internal_r+0x404>
    1be0:	d9801a04 	addi	r6,sp,104
    1be4:	900b883a 	mov	r5,r18
    1be8:	9809883a 	mov	r4,r19
    1bec:	0007d880 	call	7d88 <__sprint_r>
    1bf0:	103f191e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    1bf4:	d8c01c17 	ldw	r3,112(sp)
    1bf8:	003f0b06 	br	1828 <___vfprintf_internal_r+0x404>
    1bfc:	9809883a 	mov	r4,r19
    1c00:	00056fc0 	call	56fc <__sinit>
    1c04:	003e1f06 	br	1484 <___vfprintf_internal_r+0x60>
    1c08:	21003fcc 	andi	r4,r4,255
    1c0c:	2005dc1e 	bne	r4,zero,3380 <___vfprintf_internal_r+0x1f5c>
    1c10:	6080080c 	andi	r2,r12,32
    1c14:	10004926 	beq	r2,zero,1d3c <___vfprintf_internal_r+0x918>
    1c18:	d8c00617 	ldw	r3,24(sp)
    1c1c:	18800117 	ldw	r2,4(r3)
    1c20:	1d000017 	ldw	r20,0(r3)
    1c24:	18c00204 	addi	r3,r3,8
    1c28:	d8c00615 	stw	r3,24(sp)
    1c2c:	102b883a 	mov	r21,r2
    1c30:	10004e16 	blt	r2,zero,1d6c <___vfprintf_internal_r+0x948>
    1c34:	40bfffd8 	cmpnei	r2,r8,-1
    1c38:	db401343 	ldbu	r13,77(sp)
    1c3c:	10000626 	beq	r2,zero,1c58 <___vfprintf_internal_r+0x834>
    1c40:	047fdfc4 	movi	r17,-129
    1c44:	6446703a 	and	r3,r12,r17
    1c48:	a544b03a 	or	r2,r20,r21
    1c4c:	d8c00415 	stw	r3,16(sp)
    1c50:	1002bb26 	beq	r2,zero,2740 <___vfprintf_internal_r+0x131c>
    1c54:	db000417 	ldw	r12,16(sp)
    1c58:	a8036e1e 	bne	r21,zero,2a14 <___vfprintf_internal_r+0x15f0>
    1c5c:	a08002a8 	cmpgeui	r2,r20,10
    1c60:	10036c1e 	bne	r2,zero,2a14 <___vfprintf_internal_r+0x15f0>
    1c64:	a5000c04 	addi	r20,r20,48
    1c68:	dd0026c5 	stb	r20,155(sp)
    1c6c:	db000415 	stw	r12,16(sp)
    1c70:	05400044 	movi	r21,1
    1c74:	dc4026c4 	addi	r17,sp,155
    1c78:	4029883a 	mov	r20,r8
    1c7c:	4540010e 	bge	r8,r21,1c84 <___vfprintf_internal_r+0x860>
    1c80:	a829883a 	mov	r20,r21
    1c84:	d8000715 	stw	zero,28(sp)
    1c88:	6b403fcc 	andi	r13,r13,255
    1c8c:	6b40201c 	xori	r13,r13,128
    1c90:	6b7fe004 	addi	r13,r13,-128
    1c94:	683ea926 	beq	r13,zero,173c <___vfprintf_internal_r+0x318>
    1c98:	a5000044 	addi	r20,r20,1
    1c9c:	003ea706 	br	173c <___vfprintf_internal_r+0x318>
    1ca0:	bac00007 	ldb	r11,0(r23)
    1ca4:	63001014 	ori	r12,r12,64
    1ca8:	003e2a06 	br	1554 <___vfprintf_internal_r+0x130>
    1cac:	d8c00617 	ldw	r3,24(sp)
    1cb0:	d8001345 	stb	zero,77(sp)
    1cb4:	05000044 	movi	r20,1
    1cb8:	18800017 	ldw	r2,0(r3)
    1cbc:	18c00104 	addi	r3,r3,4
    1cc0:	d8c00615 	stw	r3,24(sp)
    1cc4:	d8801d05 	stb	r2,116(sp)
    1cc8:	05400044 	movi	r21,1
    1ccc:	dc401d04 	addi	r17,sp,116
    1cd0:	003e9706 	br	1730 <___vfprintf_internal_r+0x30c>
    1cd4:	21003fcc 	andi	r4,r4,255
    1cd8:	2005a51e 	bne	r4,zero,3370 <___vfprintf_internal_r+0x1f4c>
    1cdc:	008000b4 	movhi	r2,2
    1ce0:	10ae4204 	addi	r2,r2,-18168
    1ce4:	d8800c15 	stw	r2,48(sp)
    1ce8:	6080080c 	andi	r2,r12,32
    1cec:	10008526 	beq	r2,zero,1f04 <___vfprintf_internal_r+0xae0>
    1cf0:	d8800617 	ldw	r2,24(sp)
    1cf4:	15000017 	ldw	r20,0(r2)
    1cf8:	15400117 	ldw	r21,4(r2)
    1cfc:	10800204 	addi	r2,r2,8
    1d00:	d8800615 	stw	r2,24(sp)
    1d04:	6080004c 	andi	r2,r12,1
    1d08:	10000226 	beq	r2,zero,1d14 <___vfprintf_internal_r+0x8f0>
    1d0c:	a544b03a 	or	r2,r20,r21
    1d10:	1002cb1e 	bne	r2,zero,2840 <___vfprintf_internal_r+0x141c>
    1d14:	00800084 	movi	r2,2
    1d18:	003f0c06 	br	194c <___vfprintf_internal_r+0x528>
    1d1c:	bac00007 	ldb	r11,0(r23)
    1d20:	63000214 	ori	r12,r12,8
    1d24:	003e0b06 	br	1554 <___vfprintf_internal_r+0x130>
    1d28:	21003fcc 	andi	r4,r4,255
    1d2c:	2005961e 	bne	r4,zero,3388 <___vfprintf_internal_r+0x1f64>
    1d30:	63000414 	ori	r12,r12,16
    1d34:	6080080c 	andi	r2,r12,32
    1d38:	103fb71e 	bne	r2,zero,1c18 <___vfprintf_internal_r+0x7f4>
    1d3c:	d9000617 	ldw	r4,24(sp)
    1d40:	6080040c 	andi	r2,r12,16
    1d44:	20c00104 	addi	r3,r4,4
    1d48:	1002db1e 	bne	r2,zero,28b8 <___vfprintf_internal_r+0x1494>
    1d4c:	6080100c 	andi	r2,r12,64
    1d50:	10048226 	beq	r2,zero,2f5c <___vfprintf_internal_r+0x1b38>
    1d54:	d8800617 	ldw	r2,24(sp)
    1d58:	d8c00615 	stw	r3,24(sp)
    1d5c:	1500000f 	ldh	r20,0(r2)
    1d60:	a02bd7fa 	srai	r21,r20,31
    1d64:	a805883a 	mov	r2,r21
    1d68:	103fb20e 	bge	r2,zero,1c34 <___vfprintf_internal_r+0x810>
    1d6c:	a004c03a 	cmpne	r2,r20,zero
    1d70:	056bc83a 	sub	r21,zero,r21
    1d74:	a8abc83a 	sub	r21,r21,r2
    1d78:	00800b44 	movi	r2,45
    1d7c:	d8801345 	stb	r2,77(sp)
    1d80:	40ffffe0 	cmpeqi	r3,r8,-1
    1d84:	0529c83a 	sub	r20,zero,r20
    1d88:	03400b44 	movi	r13,45
    1d8c:	00800044 	movi	r2,1
    1d90:	183ef226 	beq	r3,zero,195c <___vfprintf_internal_r+0x538>
    1d94:	10c00060 	cmpeqi	r3,r2,1
    1d98:	183faf1e 	bne	r3,zero,1c58 <___vfprintf_internal_r+0x834>
    1d9c:	108000a0 	cmpeqi	r2,r2,2
    1da0:	1001561e 	bne	r2,zero,22fc <___vfprintf_internal_r+0xed8>
    1da4:	dc402704 	addi	r17,sp,156
    1da8:	a006d0fa 	srli	r3,r20,3
    1dac:	a808977a 	slli	r4,r21,29
    1db0:	a82ad0fa 	srli	r21,r21,3
    1db4:	a50001cc 	andi	r20,r20,7
    1db8:	a0800c04 	addi	r2,r20,48
    1dbc:	20e8b03a 	or	r20,r4,r3
    1dc0:	88bfffc5 	stb	r2,-1(r17)
    1dc4:	a546b03a 	or	r3,r20,r21
    1dc8:	880b883a 	mov	r5,r17
    1dcc:	8c7fffc4 	addi	r17,r17,-1
    1dd0:	183ff51e 	bne	r3,zero,1da8 <___vfprintf_internal_r+0x984>
    1dd4:	60c0004c 	andi	r3,r12,1
    1dd8:	18015526 	beq	r3,zero,2330 <___vfprintf_internal_r+0xf0c>
    1ddc:	10803fcc 	andi	r2,r2,255
    1de0:	1080201c 	xori	r2,r2,128
    1de4:	10bfe004 	addi	r2,r2,-128
    1de8:	10800c18 	cmpnei	r2,r2,48
    1dec:	10015026 	beq	r2,zero,2330 <___vfprintf_internal_r+0xf0c>
    1df0:	00800c04 	movi	r2,48
    1df4:	297fff84 	addi	r5,r5,-2
    1df8:	88bfffc5 	stb	r2,-1(r17)
    1dfc:	d8802704 	addi	r2,sp,156
    1e00:	116bc83a 	sub	r21,r2,r5
    1e04:	db000415 	stw	r12,16(sp)
    1e08:	2823883a 	mov	r17,r5
    1e0c:	003f9a06 	br	1c78 <___vfprintf_internal_r+0x854>
    1e10:	bac00007 	ldb	r11,0(r23)
    1e14:	63002014 	ori	r12,r12,128
    1e18:	003dce06 	br	1554 <___vfprintf_internal_r+0x130>
    1e1c:	bf000007 	ldb	fp,0(r23)
    1e20:	b8c00044 	addi	r3,r23,1
    1e24:	e0800aa0 	cmpeqi	r2,fp,42
    1e28:	1005af1e 	bne	r2,zero,34e8 <___vfprintf_internal_r+0x20c4>
    1e2c:	e0bff404 	addi	r2,fp,-48
    1e30:	118002b0 	cmpltui	r6,r2,10
    1e34:	182f883a 	mov	r23,r3
    1e38:	0011883a 	mov	r8,zero
    1e3c:	303dc726 	beq	r6,zero,155c <___vfprintf_internal_r+0x138>
    1e40:	bf000007 	ldb	fp,0(r23)
    1e44:	420002a4 	muli	r8,r8,10
    1e48:	bdc00044 	addi	r23,r23,1
    1e4c:	4091883a 	add	r8,r8,r2
    1e50:	e0bff404 	addi	r2,fp,-48
    1e54:	10c002b0 	cmpltui	r3,r2,10
    1e58:	183ff91e 	bne	r3,zero,1e40 <___vfprintf_internal_r+0xa1c>
    1e5c:	003dbf06 	br	155c <___vfprintf_internal_r+0x138>
    1e60:	bf000003 	ldbu	fp,0(r23)
    1e64:	e2c03fcc 	andi	r11,fp,255
    1e68:	5ac0201c 	xori	r11,r11,128
    1e6c:	63000114 	ori	r12,r12,4
    1e70:	5affe004 	addi	r11,r11,-128
    1e74:	003db706 	br	1554 <___vfprintf_internal_r+0x130>
    1e78:	bac00007 	ldb	r11,0(r23)
    1e7c:	01000044 	movi	r4,1
    1e80:	01400ac4 	movi	r5,43
    1e84:	003db306 	br	1554 <___vfprintf_internal_r+0x130>
    1e88:	d8800617 	ldw	r2,24(sp)
    1e8c:	bf000003 	ldbu	fp,0(r23)
    1e90:	14000017 	ldw	r16,0(r2)
    1e94:	10800104 	addi	r2,r2,4
    1e98:	80028c16 	blt	r16,zero,28cc <___vfprintf_internal_r+0x14a8>
    1e9c:	d8800615 	stw	r2,24(sp)
    1ea0:	e2c03fcc 	andi	r11,fp,255
    1ea4:	5ac0201c 	xori	r11,r11,128
    1ea8:	5affe004 	addi	r11,r11,-128
    1eac:	003da906 	br	1554 <___vfprintf_internal_r+0x130>
    1eb0:	bac00007 	ldb	r11,0(r23)
    1eb4:	63000054 	ori	r12,r12,1
    1eb8:	003da606 	br	1554 <___vfprintf_internal_r+0x130>
    1ebc:	28803fcc 	andi	r2,r5,255
    1ec0:	1080201c 	xori	r2,r2,128
    1ec4:	10bfe004 	addi	r2,r2,-128
    1ec8:	bf000003 	ldbu	fp,0(r23)
    1ecc:	103ff41e 	bne	r2,zero,1ea0 <___vfprintf_internal_r+0xa7c>
    1ed0:	e2c03fcc 	andi	r11,fp,255
    1ed4:	5ac0201c 	xori	r11,r11,128
    1ed8:	01000044 	movi	r4,1
    1edc:	01400804 	movi	r5,32
    1ee0:	5affe004 	addi	r11,r11,-128
    1ee4:	003d9b06 	br	1554 <___vfprintf_internal_r+0x130>
    1ee8:	21003fcc 	andi	r4,r4,255
    1eec:	20051e1e 	bne	r4,zero,3368 <___vfprintf_internal_r+0x1f44>
    1ef0:	008000b4 	movhi	r2,2
    1ef4:	10ae3d04 	addi	r2,r2,-18188
    1ef8:	d8800c15 	stw	r2,48(sp)
    1efc:	6080080c 	andi	r2,r12,32
    1f00:	103f7b1e 	bne	r2,zero,1cf0 <___vfprintf_internal_r+0x8cc>
    1f04:	d9000617 	ldw	r4,24(sp)
    1f08:	6080040c 	andi	r2,r12,16
    1f0c:	20c00104 	addi	r3,r4,4
    1f10:	10025b1e 	bne	r2,zero,2880 <___vfprintf_internal_r+0x145c>
    1f14:	6080100c 	andi	r2,r12,64
    1f18:	10046026 	beq	r2,zero,309c <___vfprintf_internal_r+0x1c78>
    1f1c:	d8800617 	ldw	r2,24(sp)
    1f20:	002b883a 	mov	r21,zero
    1f24:	d8c00615 	stw	r3,24(sp)
    1f28:	1500000b 	ldhu	r20,0(r2)
    1f2c:	003f7506 	br	1d04 <___vfprintf_internal_r+0x8e0>
    1f30:	d8800617 	ldw	r2,24(sp)
    1f34:	d8001345 	stb	zero,77(sp)
    1f38:	14400017 	ldw	r17,0(r2)
    1f3c:	10c00104 	addi	r3,r2,4
    1f40:	88028e26 	beq	r17,zero,297c <___vfprintf_internal_r+0x1558>
    1f44:	40bfffe0 	cmpeqi	r2,r8,-1
    1f48:	1003c01e 	bne	r2,zero,2e4c <___vfprintf_internal_r+0x1a28>
    1f4c:	400d883a 	mov	r6,r8
    1f50:	000b883a 	mov	r5,zero
    1f54:	8809883a 	mov	r4,r17
    1f58:	d8c00715 	stw	r3,28(sp)
    1f5c:	db000615 	stw	r12,24(sp)
    1f60:	da000415 	stw	r8,16(sp)
    1f64:	00067440 	call	6744 <memchr>
    1f68:	da000417 	ldw	r8,16(sp)
    1f6c:	db000617 	ldw	r12,24(sp)
    1f70:	d8c00717 	ldw	r3,28(sp)
    1f74:	1004ec26 	beq	r2,zero,3328 <___vfprintf_internal_r+0x1f04>
    1f78:	146bc83a 	sub	r21,r2,r17
    1f7c:	a829883a 	mov	r20,r21
    1f80:	d8c00615 	stw	r3,24(sp)
    1f84:	003dea06 	br	1730 <___vfprintf_internal_r+0x30c>
    1f88:	bac00007 	ldb	r11,0(r23)
    1f8c:	63000814 	ori	r12,r12,32
    1f90:	003d7006 	br	1554 <___vfprintf_internal_r+0x130>
    1f94:	d8c00617 	ldw	r3,24(sp)
    1f98:	00800c04 	movi	r2,48
    1f9c:	d8801385 	stb	r2,78(sp)
    1fa0:	00801e04 	movi	r2,120
    1fa4:	010000b4 	movhi	r4,2
    1fa8:	d88013c5 	stb	r2,79(sp)
    1fac:	18800104 	addi	r2,r3,4
    1fb0:	d8800615 	stw	r2,24(sp)
    1fb4:	20ae3d04 	addi	r2,r4,-18188
    1fb8:	d8800c15 	stw	r2,48(sp)
    1fbc:	1d000017 	ldw	r20,0(r3)
    1fc0:	002b883a 	mov	r21,zero
    1fc4:	63000094 	ori	r12,r12,2
    1fc8:	00800084 	movi	r2,2
    1fcc:	07001e04 	movi	fp,120
    1fd0:	003e5e06 	br	194c <___vfprintf_internal_r+0x528>
    1fd4:	21003fcc 	andi	r4,r4,255
    1fd8:	2004e71e 	bne	r4,zero,3378 <___vfprintf_internal_r+0x1f54>
    1fdc:	d9000617 	ldw	r4,24(sp)
    1fe0:	6080080c 	andi	r2,r12,32
    1fe4:	20c00017 	ldw	r3,0(r4)
    1fe8:	21000104 	addi	r4,r4,4
    1fec:	d9000615 	stw	r4,24(sp)
    1ff0:	10021e1e 	bne	r2,zero,286c <___vfprintf_internal_r+0x1448>
    1ff4:	6080040c 	andi	r2,r12,16
    1ff8:	1002ae1e 	bne	r2,zero,2ab4 <___vfprintf_internal_r+0x1690>
    1ffc:	6300100c 	andi	r12,r12,64
    2000:	6002ac26 	beq	r12,zero,2ab4 <___vfprintf_internal_r+0x1690>
    2004:	d8800517 	ldw	r2,20(sp)
    2008:	1880000d 	sth	r2,0(r3)
    200c:	003d3906 	br	14f4 <___vfprintf_internal_r+0xd0>
    2010:	bac00007 	ldb	r11,0(r23)
    2014:	58801b18 	cmpnei	r2,r11,108
    2018:	10024926 	beq	r2,zero,2940 <___vfprintf_internal_r+0x151c>
    201c:	63000414 	ori	r12,r12,16
    2020:	003d4c06 	br	1554 <___vfprintf_internal_r+0x130>
    2024:	e2c01990 	cmplti	r11,fp,102
    2028:	5800cb1e 	bne	r11,zero,2358 <___vfprintf_internal_r+0xf34>
    202c:	d9000917 	ldw	r4,36(sp)
    2030:	d9400a17 	ldw	r5,40(sp)
    2034:	000d883a 	mov	r6,zero
    2038:	000f883a 	mov	r7,zero
    203c:	d8c00e15 	stw	r3,56(sp)
    2040:	000cc140 	call	cc14 <__eqdf2>
    2044:	d8c00e17 	ldw	r3,56(sp)
    2048:	1001641e 	bne	r2,zero,25dc <___vfprintf_internal_r+0x11b8>
    204c:	d8801b17 	ldw	r2,108(sp)
    2050:	010000b4 	movhi	r4,2
    2054:	212e4904 	addi	r4,r4,-18140
    2058:	10800044 	addi	r2,r2,1
    205c:	18c00044 	addi	r3,r3,1
    2060:	b1000015 	stw	r4,0(r22)
    2064:	01000044 	movi	r4,1
    2068:	d8801b15 	stw	r2,108(sp)
    206c:	b1000115 	stw	r4,4(r22)
    2070:	d8c01c15 	stw	r3,112(sp)
    2074:	10800208 	cmpgei	r2,r2,8
    2078:	1003621e 	bne	r2,zero,2e04 <___vfprintf_internal_r+0x19e0>
    207c:	b5800204 	addi	r22,r22,8
    2080:	d8801417 	ldw	r2,80(sp)
    2084:	d9000817 	ldw	r4,32(sp)
    2088:	1101e70e 	bge	r2,r4,2828 <___vfprintf_internal_r+0x1404>
    208c:	d8800d17 	ldw	r2,52(sp)
    2090:	d9000b17 	ldw	r4,44(sp)
    2094:	b0800015 	stw	r2,0(r22)
    2098:	d8801b17 	ldw	r2,108(sp)
    209c:	1907883a 	add	r3,r3,r4
    20a0:	b1000115 	stw	r4,4(r22)
    20a4:	10800044 	addi	r2,r2,1
    20a8:	d8801b15 	stw	r2,108(sp)
    20ac:	d8c01c15 	stw	r3,112(sp)
    20b0:	10800208 	cmpgei	r2,r2,8
    20b4:	1002291e 	bne	r2,zero,295c <___vfprintf_internal_r+0x1538>
    20b8:	b5800204 	addi	r22,r22,8
    20bc:	d8800817 	ldw	r2,32(sp)
    20c0:	157fffc4 	addi	r21,r2,-1
    20c4:	057dd30e 	bge	zero,r21,1814 <___vfprintf_internal_r+0x3f0>
    20c8:	01c000b4 	movhi	r7,2
    20cc:	a9000450 	cmplti	r4,r21,17
    20d0:	d8801b17 	ldw	r2,108(sp)
    20d4:	39ee4a04 	addi	r7,r7,-18136
    20d8:	2003461e 	bne	r4,zero,2df4 <___vfprintf_internal_r+0x19d0>
    20dc:	07000404 	movi	fp,16
    20e0:	3823883a 	mov	r17,r7
    20e4:	00000406 	br	20f8 <___vfprintf_internal_r+0xcd4>
    20e8:	b5800204 	addi	r22,r22,8
    20ec:	ad7ffc04 	addi	r21,r21,-16
    20f0:	a9000448 	cmpgei	r4,r21,17
    20f4:	20033e26 	beq	r4,zero,2df0 <___vfprintf_internal_r+0x19cc>
    20f8:	10800044 	addi	r2,r2,1
    20fc:	18c00404 	addi	r3,r3,16
    2100:	b4400015 	stw	r17,0(r22)
    2104:	b7000115 	stw	fp,4(r22)
    2108:	d8c01c15 	stw	r3,112(sp)
    210c:	d8801b15 	stw	r2,108(sp)
    2110:	11000208 	cmpgei	r4,r2,8
    2114:	203ff426 	beq	r4,zero,20e8 <___vfprintf_internal_r+0xcc4>
    2118:	d9801a04 	addi	r6,sp,104
    211c:	900b883a 	mov	r5,r18
    2120:	9809883a 	mov	r4,r19
    2124:	0007d880 	call	7d88 <__sprint_r>
    2128:	103dcb1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    212c:	d8c01c17 	ldw	r3,112(sp)
    2130:	d8801b17 	ldw	r2,108(sp)
    2134:	dd802704 	addi	r22,sp,156
    2138:	003fec06 	br	20ec <___vfprintf_internal_r+0xcc8>
    213c:	8519c83a 	sub	r12,r16,r20
    2140:	033da50e 	bge	zero,r12,17d8 <___vfprintf_internal_r+0x3b4>
    2144:	01c000b4 	movhi	r7,2
    2148:	61000450 	cmplti	r4,r12,17
    214c:	d8801b17 	ldw	r2,108(sp)
    2150:	39ee4a04 	addi	r7,r7,-18136
    2154:	2000281e 	bne	r4,zero,21f8 <___vfprintf_internal_r+0xdd4>
    2158:	dc400e15 	stw	r17,56(sp)
    215c:	dc000f15 	stw	r16,60(sp)
    2160:	b009883a 	mov	r4,r22
    2164:	03400404 	movi	r13,16
    2168:	a02d883a 	mov	r22,r20
    216c:	6021883a 	mov	r16,r12
    2170:	4029883a 	mov	r20,r8
    2174:	3823883a 	mov	r17,r7
    2178:	00000406 	br	218c <___vfprintf_internal_r+0xd68>
    217c:	843ffc04 	addi	r16,r16,-16
    2180:	81400448 	cmpgei	r5,r16,17
    2184:	21000204 	addi	r4,r4,8
    2188:	28001426 	beq	r5,zero,21dc <___vfprintf_internal_r+0xdb8>
    218c:	10800044 	addi	r2,r2,1
    2190:	18c00404 	addi	r3,r3,16
    2194:	24400015 	stw	r17,0(r4)
    2198:	23400115 	stw	r13,4(r4)
    219c:	d8c01c15 	stw	r3,112(sp)
    21a0:	d8801b15 	stw	r2,108(sp)
    21a4:	11400208 	cmpgei	r5,r2,8
    21a8:	283ff426 	beq	r5,zero,217c <___vfprintf_internal_r+0xd58>
    21ac:	d9801a04 	addi	r6,sp,104
    21b0:	900b883a 	mov	r5,r18
    21b4:	9809883a 	mov	r4,r19
    21b8:	0007d880 	call	7d88 <__sprint_r>
    21bc:	103da61e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    21c0:	843ffc04 	addi	r16,r16,-16
    21c4:	81400448 	cmpgei	r5,r16,17
    21c8:	d8c01c17 	ldw	r3,112(sp)
    21cc:	d8801b17 	ldw	r2,108(sp)
    21d0:	d9002704 	addi	r4,sp,156
    21d4:	03400404 	movi	r13,16
    21d8:	283fec1e 	bne	r5,zero,218c <___vfprintf_internal_r+0xd68>
    21dc:	8019883a 	mov	r12,r16
    21e0:	880f883a 	mov	r7,r17
    21e4:	dc000f17 	ldw	r16,60(sp)
    21e8:	dc400e17 	ldw	r17,56(sp)
    21ec:	a011883a 	mov	r8,r20
    21f0:	b029883a 	mov	r20,r22
    21f4:	202d883a 	mov	r22,r4
    21f8:	10800044 	addi	r2,r2,1
    21fc:	1b07883a 	add	r3,r3,r12
    2200:	d8801b15 	stw	r2,108(sp)
    2204:	b1c00015 	stw	r7,0(r22)
    2208:	b3000115 	stw	r12,4(r22)
    220c:	d8c01c15 	stw	r3,112(sp)
    2210:	10800208 	cmpgei	r2,r2,8
    2214:	1003031e 	bne	r2,zero,2e24 <___vfprintf_internal_r+0x1a00>
    2218:	4551c83a 	sub	r8,r8,r21
    221c:	b5800204 	addi	r22,r22,8
    2220:	023d6f0e 	bge	zero,r8,17e0 <___vfprintf_internal_r+0x3bc>
    2224:	01c000b4 	movhi	r7,2
    2228:	41000450 	cmplti	r4,r8,17
    222c:	d8801b17 	ldw	r2,108(sp)
    2230:	39ee4a04 	addi	r7,r7,-18136
    2234:	2000221e 	bne	r4,zero,22c0 <___vfprintf_internal_r+0xe9c>
    2238:	dc400e15 	stw	r17,56(sp)
    223c:	dc000f15 	stw	r16,60(sp)
    2240:	03000404 	movi	r12,16
    2244:	4021883a 	mov	r16,r8
    2248:	3823883a 	mov	r17,r7
    224c:	00000406 	br	2260 <___vfprintf_internal_r+0xe3c>
    2250:	843ffc04 	addi	r16,r16,-16
    2254:	81000448 	cmpgei	r4,r16,17
    2258:	b5800204 	addi	r22,r22,8
    225c:	20001426 	beq	r4,zero,22b0 <___vfprintf_internal_r+0xe8c>
    2260:	10800044 	addi	r2,r2,1
    2264:	18c00404 	addi	r3,r3,16
    2268:	b4400015 	stw	r17,0(r22)
    226c:	b3000115 	stw	r12,4(r22)
    2270:	d8c01c15 	stw	r3,112(sp)
    2274:	d8801b15 	stw	r2,108(sp)
    2278:	11000208 	cmpgei	r4,r2,8
    227c:	203ff426 	beq	r4,zero,2250 <___vfprintf_internal_r+0xe2c>
    2280:	d9801a04 	addi	r6,sp,104
    2284:	900b883a 	mov	r5,r18
    2288:	9809883a 	mov	r4,r19
    228c:	0007d880 	call	7d88 <__sprint_r>
    2290:	103d711e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2294:	843ffc04 	addi	r16,r16,-16
    2298:	81000448 	cmpgei	r4,r16,17
    229c:	d8c01c17 	ldw	r3,112(sp)
    22a0:	d8801b17 	ldw	r2,108(sp)
    22a4:	dd802704 	addi	r22,sp,156
    22a8:	03000404 	movi	r12,16
    22ac:	203fec1e 	bne	r4,zero,2260 <___vfprintf_internal_r+0xe3c>
    22b0:	8011883a 	mov	r8,r16
    22b4:	880f883a 	mov	r7,r17
    22b8:	dc000f17 	ldw	r16,60(sp)
    22bc:	dc400e17 	ldw	r17,56(sp)
    22c0:	10800044 	addi	r2,r2,1
    22c4:	1a07883a 	add	r3,r3,r8
    22c8:	d8801b15 	stw	r2,108(sp)
    22cc:	b1c00015 	stw	r7,0(r22)
    22d0:	b2000115 	stw	r8,4(r22)
    22d4:	d8c01c15 	stw	r3,112(sp)
    22d8:	10800208 	cmpgei	r2,r2,8
    22dc:	10014a1e 	bne	r2,zero,2808 <___vfprintf_internal_r+0x13e4>
    22e0:	b5800204 	addi	r22,r22,8
    22e4:	003d3e06 	br	17e0 <___vfprintf_internal_r+0x3bc>
    22e8:	10c00060 	cmpeqi	r3,r2,1
    22ec:	1803bc1e 	bne	r3,zero,31e0 <___vfprintf_internal_r+0x1dbc>
    22f0:	108000a0 	cmpeqi	r2,r2,2
    22f4:	db000417 	ldw	r12,16(sp)
    22f8:	103eaa26 	beq	r2,zero,1da4 <___vfprintf_internal_r+0x980>
    22fc:	d9000c17 	ldw	r4,48(sp)
    2300:	dc402704 	addi	r17,sp,156
    2304:	a08003cc 	andi	r2,r20,15
    2308:	a806973a 	slli	r3,r21,28
    230c:	a028d13a 	srli	r20,r20,4
    2310:	2085883a 	add	r2,r4,r2
    2314:	10800003 	ldbu	r2,0(r2)
    2318:	a82ad13a 	srli	r21,r21,4
    231c:	1d28b03a 	or	r20,r3,r20
    2320:	88bfffc5 	stb	r2,-1(r17)
    2324:	a544b03a 	or	r2,r20,r21
    2328:	8c7fffc4 	addi	r17,r17,-1
    232c:	103ff51e 	bne	r2,zero,2304 <___vfprintf_internal_r+0xee0>
    2330:	d8802704 	addi	r2,sp,156
    2334:	146bc83a 	sub	r21,r2,r17
    2338:	db000415 	stw	r12,16(sp)
    233c:	003e4e06 	br	1c78 <___vfprintf_internal_r+0x854>
    2340:	d9801a04 	addi	r6,sp,104
    2344:	900b883a 	mov	r5,r18
    2348:	9809883a 	mov	r4,r19
    234c:	0007d880 	call	7d88 <__sprint_r>
    2350:	103d3b26 	beq	r2,zero,1840 <___vfprintf_internal_r+0x41c>
    2354:	003d4006 	br	1858 <___vfprintf_internal_r+0x434>
    2358:	d8800817 	ldw	r2,32(sp)
    235c:	da001b17 	ldw	r8,108(sp)
    2360:	18c00044 	addi	r3,r3,1
    2364:	10800088 	cmpgei	r2,r2,2
    2368:	45400044 	addi	r21,r8,1
    236c:	b7000204 	addi	fp,r22,8
    2370:	1000f826 	beq	r2,zero,2754 <___vfprintf_internal_r+0x1330>
    2374:	00800044 	movi	r2,1
    2378:	b0800115 	stw	r2,4(r22)
    237c:	b4400015 	stw	r17,0(r22)
    2380:	d8c01c15 	stw	r3,112(sp)
    2384:	dd401b15 	stw	r21,108(sp)
    2388:	a8800210 	cmplti	r2,r21,8
    238c:	1001cc26 	beq	r2,zero,2ac0 <___vfprintf_internal_r+0x169c>
    2390:	d8800b17 	ldw	r2,44(sp)
    2394:	d9000d17 	ldw	r4,52(sp)
    2398:	ad400044 	addi	r21,r21,1
    239c:	1887883a 	add	r3,r3,r2
    23a0:	e0800115 	stw	r2,4(fp)
    23a4:	e1000015 	stw	r4,0(fp)
    23a8:	d8c01c15 	stw	r3,112(sp)
    23ac:	dd401b15 	stw	r21,108(sp)
    23b0:	a8800208 	cmpgei	r2,r21,8
    23b4:	1001cb1e 	bne	r2,zero,2ae4 <___vfprintf_internal_r+0x16c0>
    23b8:	e7000204 	addi	fp,fp,8
    23bc:	d9000917 	ldw	r4,36(sp)
    23c0:	d9400a17 	ldw	r5,40(sp)
    23c4:	aa000044 	addi	r8,r21,1
    23c8:	000d883a 	mov	r6,zero
    23cc:	000f883a 	mov	r7,zero
    23d0:	d8c00e15 	stw	r3,56(sp)
    23d4:	da000715 	stw	r8,28(sp)
    23d8:	000cc140 	call	cc14 <__eqdf2>
    23dc:	d8c00817 	ldw	r3,32(sp)
    23e0:	da000717 	ldw	r8,28(sp)
    23e4:	e5800204 	addi	r22,fp,8
    23e8:	1affffc4 	addi	r11,r3,-1
    23ec:	d8c00e17 	ldw	r3,56(sp)
    23f0:	1000e526 	beq	r2,zero,2788 <___vfprintf_internal_r+0x1364>
    23f4:	8a400044 	addi	r9,r17,1
    23f8:	1ac7883a 	add	r3,r3,r11
    23fc:	da001b15 	stw	r8,108(sp)
    2400:	e2400015 	stw	r9,0(fp)
    2404:	e2c00115 	stw	r11,4(fp)
    2408:	d8c01c15 	stw	r3,112(sp)
    240c:	42000208 	cmpgei	r8,r8,8
    2410:	40013e1e 	bne	r8,zero,290c <___vfprintf_internal_r+0x14e8>
    2414:	e0800404 	addi	r2,fp,16
    2418:	aa000084 	addi	r8,r21,2
    241c:	b039883a 	mov	fp,r22
    2420:	102d883a 	mov	r22,r2
    2424:	d9001017 	ldw	r4,64(sp)
    2428:	d8801644 	addi	r2,sp,89
    242c:	da001b15 	stw	r8,108(sp)
    2430:	20c7883a 	add	r3,r4,r3
    2434:	e0800015 	stw	r2,0(fp)
    2438:	e1000115 	stw	r4,4(fp)
    243c:	d8c01c15 	stw	r3,112(sp)
    2440:	42000210 	cmplti	r8,r8,8
    2444:	403cf31e 	bne	r8,zero,1814 <___vfprintf_internal_r+0x3f0>
    2448:	d9801a04 	addi	r6,sp,104
    244c:	900b883a 	mov	r5,r18
    2450:	9809883a 	mov	r4,r19
    2454:	0007d880 	call	7d88 <__sprint_r>
    2458:	103cff1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    245c:	d8c01c17 	ldw	r3,112(sp)
    2460:	dd802704 	addi	r22,sp,156
    2464:	003ceb06 	br	1814 <___vfprintf_internal_r+0x3f0>
    2468:	db000417 	ldw	r12,16(sp)
    246c:	003e4906 	br	1d94 <___vfprintf_internal_r+0x970>
    2470:	030000b4 	movhi	r12,2
    2474:	39000450 	cmplti	r4,r7,17
    2478:	d8801b17 	ldw	r2,108(sp)
    247c:	632e4e04 	addi	r12,r12,-18120
    2480:	2000321e 	bne	r4,zero,254c <___vfprintf_internal_r+0x1128>
    2484:	dc401115 	stw	r17,68(sp)
    2488:	b009883a 	mov	r4,r22
    248c:	9023883a 	mov	r17,r18
    2490:	a82d883a 	mov	r22,r21
    2494:	ddc01215 	stw	r23,72(sp)
    2498:	03c00404 	movi	r15,16
    249c:	a02f883a 	mov	r23,r20
    24a0:	db800e15 	stw	r14,56(sp)
    24a4:	8029883a 	mov	r20,r16
    24a8:	db400f15 	stw	r13,60(sp)
    24ac:	402b883a 	mov	r21,r8
    24b0:	3821883a 	mov	r16,r7
    24b4:	6025883a 	mov	r18,r12
    24b8:	00000406 	br	24cc <___vfprintf_internal_r+0x10a8>
    24bc:	843ffc04 	addi	r16,r16,-16
    24c0:	81800448 	cmpgei	r6,r16,17
    24c4:	21000204 	addi	r4,r4,8
    24c8:	30001426 	beq	r6,zero,251c <___vfprintf_internal_r+0x10f8>
    24cc:	10800044 	addi	r2,r2,1
    24d0:	18c00404 	addi	r3,r3,16
    24d4:	24800015 	stw	r18,0(r4)
    24d8:	23c00115 	stw	r15,4(r4)
    24dc:	d8c01c15 	stw	r3,112(sp)
    24e0:	d8801b15 	stw	r2,108(sp)
    24e4:	11800208 	cmpgei	r6,r2,8
    24e8:	303ff426 	beq	r6,zero,24bc <___vfprintf_internal_r+0x1098>
    24ec:	d9801a04 	addi	r6,sp,104
    24f0:	880b883a 	mov	r5,r17
    24f4:	9809883a 	mov	r4,r19
    24f8:	0007d880 	call	7d88 <__sprint_r>
    24fc:	1001b91e 	bne	r2,zero,2be4 <___vfprintf_internal_r+0x17c0>
    2500:	843ffc04 	addi	r16,r16,-16
    2504:	81800448 	cmpgei	r6,r16,17
    2508:	d8c01c17 	ldw	r3,112(sp)
    250c:	d8801b17 	ldw	r2,108(sp)
    2510:	d9002704 	addi	r4,sp,156
    2514:	03c00404 	movi	r15,16
    2518:	303fec1e 	bne	r6,zero,24cc <___vfprintf_internal_r+0x10a8>
    251c:	800f883a 	mov	r7,r16
    2520:	9019883a 	mov	r12,r18
    2524:	a021883a 	mov	r16,r20
    2528:	8825883a 	mov	r18,r17
    252c:	b829883a 	mov	r20,r23
    2530:	db800e17 	ldw	r14,56(sp)
    2534:	db400f17 	ldw	r13,60(sp)
    2538:	ddc01217 	ldw	r23,72(sp)
    253c:	dc401117 	ldw	r17,68(sp)
    2540:	a811883a 	mov	r8,r21
    2544:	b02b883a 	mov	r21,r22
    2548:	202d883a 	mov	r22,r4
    254c:	10800044 	addi	r2,r2,1
    2550:	19c7883a 	add	r3,r3,r7
    2554:	d8801b15 	stw	r2,108(sp)
    2558:	b3000015 	stw	r12,0(r22)
    255c:	b1c00115 	stw	r7,4(r22)
    2560:	d8c01c15 	stw	r3,112(sp)
    2564:	10800208 	cmpgei	r2,r2,8
    2568:	1001671e 	bne	r2,zero,2b08 <___vfprintf_internal_r+0x16e4>
    256c:	b5800204 	addi	r22,r22,8
    2570:	003c7c06 	br	1764 <___vfprintf_internal_r+0x340>
    2574:	d9801a04 	addi	r6,sp,104
    2578:	900b883a 	mov	r5,r18
    257c:	9809883a 	mov	r4,r19
    2580:	da001115 	stw	r8,68(sp)
    2584:	db400f15 	stw	r13,60(sp)
    2588:	db800e15 	stw	r14,56(sp)
    258c:	0007d880 	call	7d88 <__sprint_r>
    2590:	103cb11e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2594:	d8c01c17 	ldw	r3,112(sp)
    2598:	da001117 	ldw	r8,68(sp)
    259c:	db400f17 	ldw	r13,60(sp)
    25a0:	db800e17 	ldw	r14,56(sp)
    25a4:	dd802704 	addi	r22,sp,156
    25a8:	003c7c06 	br	179c <___vfprintf_internal_r+0x378>
    25ac:	d9801a04 	addi	r6,sp,104
    25b0:	900b883a 	mov	r5,r18
    25b4:	9809883a 	mov	r4,r19
    25b8:	da000f15 	stw	r8,60(sp)
    25bc:	db400e15 	stw	r13,56(sp)
    25c0:	0007d880 	call	7d88 <__sprint_r>
    25c4:	103ca41e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    25c8:	d8c01c17 	ldw	r3,112(sp)
    25cc:	da000f17 	ldw	r8,60(sp)
    25d0:	db400e17 	ldw	r13,56(sp)
    25d4:	dd802704 	addi	r22,sp,156
    25d8:	003c7d06 	br	17d0 <___vfprintf_internal_r+0x3ac>
    25dc:	d9401417 	ldw	r5,80(sp)
    25e0:	0141570e 	bge	zero,r5,2b40 <___vfprintf_internal_r+0x171c>
    25e4:	d8800717 	ldw	r2,28(sp)
    25e8:	d9000817 	ldw	r4,32(sp)
    25ec:	102b883a 	mov	r21,r2
    25f0:	2080b916 	blt	r4,r2,28d8 <___vfprintf_internal_r+0x14b4>
    25f4:	05400a0e 	bge	zero,r21,2620 <___vfprintf_internal_r+0x11fc>
    25f8:	d8801b17 	ldw	r2,108(sp)
    25fc:	1d47883a 	add	r3,r3,r21
    2600:	b4400015 	stw	r17,0(r22)
    2604:	10800044 	addi	r2,r2,1
    2608:	d8801b15 	stw	r2,108(sp)
    260c:	b5400115 	stw	r21,4(r22)
    2610:	d8c01c15 	stw	r3,112(sp)
    2614:	10800208 	cmpgei	r2,r2,8
    2618:	10032d1e 	bne	r2,zero,32d0 <___vfprintf_internal_r+0x1eac>
    261c:	b5800204 	addi	r22,r22,8
    2620:	a800c516 	blt	r21,zero,2938 <___vfprintf_internal_r+0x1514>
    2624:	d8800717 	ldw	r2,28(sp)
    2628:	156bc83a 	sub	r21,r2,r21
    262c:	0540db16 	blt	zero,r21,299c <___vfprintf_internal_r+0x1578>
    2630:	dd401417 	ldw	r21,80(sp)
    2634:	d8800817 	ldw	r2,32(sp)
    2638:	a880aa0e 	bge	r21,r2,28e4 <___vfprintf_internal_r+0x14c0>
    263c:	d8800d17 	ldw	r2,52(sp)
    2640:	d9000b17 	ldw	r4,44(sp)
    2644:	b0800015 	stw	r2,0(r22)
    2648:	d8801b17 	ldw	r2,108(sp)
    264c:	1907883a 	add	r3,r3,r4
    2650:	b1000115 	stw	r4,4(r22)
    2654:	10800044 	addi	r2,r2,1
    2658:	d8801b15 	stw	r2,108(sp)
    265c:	d8c01c15 	stw	r3,112(sp)
    2660:	10800208 	cmpgei	r2,r2,8
    2664:	1003111e 	bne	r2,zero,32ac <___vfprintf_internal_r+0x1e88>
    2668:	b5800204 	addi	r22,r22,8
    266c:	d9000817 	ldw	r4,32(sp)
    2670:	d9400717 	ldw	r5,28(sp)
    2674:	2545c83a 	sub	r2,r4,r21
    2678:	2149c83a 	sub	r4,r4,r5
    267c:	102b883a 	mov	r21,r2
    2680:	2080010e 	bge	r4,r2,2688 <___vfprintf_internal_r+0x1264>
    2684:	202b883a 	mov	r21,r4
    2688:	05400c0e 	bge	zero,r21,26bc <___vfprintf_internal_r+0x1298>
    268c:	d9000717 	ldw	r4,28(sp)
    2690:	1d47883a 	add	r3,r3,r21
    2694:	b5400115 	stw	r21,4(r22)
    2698:	8913883a 	add	r9,r17,r4
    269c:	d9001b17 	ldw	r4,108(sp)
    26a0:	b2400015 	stw	r9,0(r22)
    26a4:	d8c01c15 	stw	r3,112(sp)
    26a8:	21000044 	addi	r4,r4,1
    26ac:	d9001b15 	stw	r4,108(sp)
    26b0:	21000208 	cmpgei	r4,r4,8
    26b4:	2003111e 	bne	r4,zero,32fc <___vfprintf_internal_r+0x1ed8>
    26b8:	b5800204 	addi	r22,r22,8
    26bc:	a800010e 	bge	r21,zero,26c4 <___vfprintf_internal_r+0x12a0>
    26c0:	002b883a 	mov	r21,zero
    26c4:	156bc83a 	sub	r21,r2,r21
    26c8:	057c520e 	bge	zero,r21,1814 <___vfprintf_internal_r+0x3f0>
    26cc:	01c000b4 	movhi	r7,2
    26d0:	a9000450 	cmplti	r4,r21,17
    26d4:	d8801b17 	ldw	r2,108(sp)
    26d8:	39ee4a04 	addi	r7,r7,-18136
    26dc:	2001c51e 	bne	r4,zero,2df4 <___vfprintf_internal_r+0x19d0>
    26e0:	07000404 	movi	fp,16
    26e4:	3823883a 	mov	r17,r7
    26e8:	00000406 	br	26fc <___vfprintf_internal_r+0x12d8>
    26ec:	b5800204 	addi	r22,r22,8
    26f0:	ad7ffc04 	addi	r21,r21,-16
    26f4:	a9000448 	cmpgei	r4,r21,17
    26f8:	2001bd26 	beq	r4,zero,2df0 <___vfprintf_internal_r+0x19cc>
    26fc:	10800044 	addi	r2,r2,1
    2700:	18c00404 	addi	r3,r3,16
    2704:	b4400015 	stw	r17,0(r22)
    2708:	b7000115 	stw	fp,4(r22)
    270c:	d8c01c15 	stw	r3,112(sp)
    2710:	d8801b15 	stw	r2,108(sp)
    2714:	11000208 	cmpgei	r4,r2,8
    2718:	203ff426 	beq	r4,zero,26ec <___vfprintf_internal_r+0x12c8>
    271c:	d9801a04 	addi	r6,sp,104
    2720:	900b883a 	mov	r5,r18
    2724:	9809883a 	mov	r4,r19
    2728:	0007d880 	call	7d88 <__sprint_r>
    272c:	103c4a1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2730:	d8c01c17 	ldw	r3,112(sp)
    2734:	d8801b17 	ldw	r2,108(sp)
    2738:	dd802704 	addi	r22,sp,156
    273c:	003fec06 	br	26f0 <___vfprintf_internal_r+0x12cc>
    2740:	4002a71e 	bne	r8,zero,31e0 <___vfprintf_internal_r+0x1dbc>
    2744:	0011883a 	mov	r8,zero
    2748:	002b883a 	mov	r21,zero
    274c:	dc402704 	addi	r17,sp,156
    2750:	003d4906 	br	1c78 <___vfprintf_internal_r+0x854>
    2754:	d8800417 	ldw	r2,16(sp)
    2758:	1080004c 	andi	r2,r2,1
    275c:	103f051e 	bne	r2,zero,2374 <___vfprintf_internal_r+0xf50>
    2760:	00800044 	movi	r2,1
    2764:	dd401b15 	stw	r21,108(sp)
    2768:	b4400015 	stw	r17,0(r22)
    276c:	b0800115 	stw	r2,4(r22)
    2770:	d8c01c15 	stw	r3,112(sp)
    2774:	ad400208 	cmpgei	r21,r21,8
    2778:	a800641e 	bne	r21,zero,290c <___vfprintf_internal_r+0x14e8>
    277c:	42000084 	addi	r8,r8,2
    2780:	b5800404 	addi	r22,r22,16
    2784:	003f2706 	br	2424 <___vfprintf_internal_r+0x1000>
    2788:	02ff260e 	bge	zero,r11,2424 <___vfprintf_internal_r+0x1000>
    278c:	58800450 	cmplti	r2,r11,17
    2790:	01c000b4 	movhi	r7,2
    2794:	10034c1e 	bne	r2,zero,34c8 <___vfprintf_internal_r+0x20a4>
    2798:	39ee4a04 	addi	r7,r7,-18136
    279c:	dc000715 	stw	r16,28(sp)
    27a0:	05800404 	movi	r22,16
    27a4:	5823883a 	mov	r17,r11
    27a8:	3821883a 	mov	r16,r7
    27ac:	402b883a 	mov	r21,r8
    27b0:	00000506 	br	27c8 <___vfprintf_internal_r+0x13a4>
    27b4:	e7000204 	addi	fp,fp,8
    27b8:	8c7ffc04 	addi	r17,r17,-16
    27bc:	88800448 	cmpgei	r2,r17,17
    27c0:	1001d626 	beq	r2,zero,2f1c <___vfprintf_internal_r+0x1af8>
    27c4:	ad400044 	addi	r21,r21,1
    27c8:	18c00404 	addi	r3,r3,16
    27cc:	e4000015 	stw	r16,0(fp)
    27d0:	e5800115 	stw	r22,4(fp)
    27d4:	d8c01c15 	stw	r3,112(sp)
    27d8:	dd401b15 	stw	r21,108(sp)
    27dc:	a8800208 	cmpgei	r2,r21,8
    27e0:	103ff426 	beq	r2,zero,27b4 <___vfprintf_internal_r+0x1390>
    27e4:	d9801a04 	addi	r6,sp,104
    27e8:	900b883a 	mov	r5,r18
    27ec:	9809883a 	mov	r4,r19
    27f0:	0007d880 	call	7d88 <__sprint_r>
    27f4:	103c181e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    27f8:	dd401b17 	ldw	r21,108(sp)
    27fc:	d8c01c17 	ldw	r3,112(sp)
    2800:	df002704 	addi	fp,sp,156
    2804:	003fec06 	br	27b8 <___vfprintf_internal_r+0x1394>
    2808:	d9801a04 	addi	r6,sp,104
    280c:	900b883a 	mov	r5,r18
    2810:	9809883a 	mov	r4,r19
    2814:	0007d880 	call	7d88 <__sprint_r>
    2818:	103c0f1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    281c:	d8c01c17 	ldw	r3,112(sp)
    2820:	dd802704 	addi	r22,sp,156
    2824:	003bee06 	br	17e0 <___vfprintf_internal_r+0x3bc>
    2828:	d8800417 	ldw	r2,16(sp)
    282c:	1080004c 	andi	r2,r2,1
    2830:	103bf826 	beq	r2,zero,1814 <___vfprintf_internal_r+0x3f0>
    2834:	003e1506 	br	208c <___vfprintf_internal_r+0xc68>
    2838:	dc402704 	addi	r17,sp,156
    283c:	003d0e06 	br	1c78 <___vfprintf_internal_r+0x854>
    2840:	00800c04 	movi	r2,48
    2844:	d8801385 	stb	r2,78(sp)
    2848:	df0013c5 	stb	fp,79(sp)
    284c:	63000094 	ori	r12,r12,2
    2850:	00800084 	movi	r2,2
    2854:	003c3d06 	br	194c <___vfprintf_internal_r+0x528>
    2858:	25000017 	ldw	r20,0(r4)
    285c:	002b883a 	mov	r21,zero
    2860:	d8c00615 	stw	r3,24(sp)
    2864:	00800044 	movi	r2,1
    2868:	003c3806 	br	194c <___vfprintf_internal_r+0x528>
    286c:	d9000517 	ldw	r4,20(sp)
    2870:	2005d7fa 	srai	r2,r4,31
    2874:	19000015 	stw	r4,0(r3)
    2878:	18800115 	stw	r2,4(r3)
    287c:	003b1d06 	br	14f4 <___vfprintf_internal_r+0xd0>
    2880:	25000017 	ldw	r20,0(r4)
    2884:	002b883a 	mov	r21,zero
    2888:	d8c00615 	stw	r3,24(sp)
    288c:	003d1d06 	br	1d04 <___vfprintf_internal_r+0x8e0>
    2890:	25000017 	ldw	r20,0(r4)
    2894:	002b883a 	mov	r21,zero
    2898:	d8c00615 	stw	r3,24(sp)
    289c:	0005883a 	mov	r2,zero
    28a0:	003c2a06 	br	194c <___vfprintf_internal_r+0x528>
    28a4:	18800017 	ldw	r2,0(r3)
    28a8:	d8800915 	stw	r2,36(sp)
    28ac:	18800117 	ldw	r2,4(r3)
    28b0:	d8800a15 	stw	r2,40(sp)
    28b4:	003c5b06 	br	1a24 <___vfprintf_internal_r+0x600>
    28b8:	25000017 	ldw	r20,0(r4)
    28bc:	d8c00615 	stw	r3,24(sp)
    28c0:	a02bd7fa 	srai	r21,r20,31
    28c4:	a805883a 	mov	r2,r21
    28c8:	003cd906 	br	1c30 <___vfprintf_internal_r+0x80c>
    28cc:	0421c83a 	sub	r16,zero,r16
    28d0:	d8800615 	stw	r2,24(sp)
    28d4:	003d6306 	br	1e64 <___vfprintf_internal_r+0xa40>
    28d8:	202b883a 	mov	r21,r4
    28dc:	057f4616 	blt	zero,r21,25f8 <___vfprintf_internal_r+0x11d4>
    28e0:	003f4f06 	br	2620 <___vfprintf_internal_r+0x11fc>
    28e4:	d8800417 	ldw	r2,16(sp)
    28e8:	1080004c 	andi	r2,r2,1
    28ec:	103f531e 	bne	r2,zero,263c <___vfprintf_internal_r+0x1218>
    28f0:	d9000817 	ldw	r4,32(sp)
    28f4:	d9400717 	ldw	r5,28(sp)
    28f8:	2545c83a 	sub	r2,r4,r21
    28fc:	216bc83a 	sub	r21,r4,r5
    2900:	157f6e0e 	bge	r2,r21,26bc <___vfprintf_internal_r+0x1298>
    2904:	102b883a 	mov	r21,r2
    2908:	003f6c06 	br	26bc <___vfprintf_internal_r+0x1298>
    290c:	d9801a04 	addi	r6,sp,104
    2910:	900b883a 	mov	r5,r18
    2914:	9809883a 	mov	r4,r19
    2918:	0007d880 	call	7d88 <__sprint_r>
    291c:	103bce1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2920:	da001b17 	ldw	r8,108(sp)
    2924:	d8c01c17 	ldw	r3,112(sp)
    2928:	dd802904 	addi	r22,sp,164
    292c:	42000044 	addi	r8,r8,1
    2930:	df002704 	addi	fp,sp,156
    2934:	003ebb06 	br	2424 <___vfprintf_internal_r+0x1000>
    2938:	002b883a 	mov	r21,zero
    293c:	003f3906 	br	2624 <___vfprintf_internal_r+0x1200>
    2940:	bf000043 	ldbu	fp,1(r23)
    2944:	63000814 	ori	r12,r12,32
    2948:	bdc00044 	addi	r23,r23,1
    294c:	e2c03fcc 	andi	r11,fp,255
    2950:	5ac0201c 	xori	r11,r11,128
    2954:	5affe004 	addi	r11,r11,-128
    2958:	003afe06 	br	1554 <___vfprintf_internal_r+0x130>
    295c:	d9801a04 	addi	r6,sp,104
    2960:	900b883a 	mov	r5,r18
    2964:	9809883a 	mov	r4,r19
    2968:	0007d880 	call	7d88 <__sprint_r>
    296c:	103bba1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2970:	d8c01c17 	ldw	r3,112(sp)
    2974:	dd802704 	addi	r22,sp,156
    2978:	003dd006 	br	20bc <___vfprintf_internal_r+0xc98>
    297c:	408001f0 	cmpltui	r2,r8,7
    2980:	402b883a 	mov	r21,r8
    2984:	1001e726 	beq	r2,zero,3124 <___vfprintf_internal_r+0x1d00>
    2988:	044000b4 	movhi	r17,2
    298c:	a829883a 	mov	r20,r21
    2990:	d8c00615 	stw	r3,24(sp)
    2994:	8c6e4704 	addi	r17,r17,-18148
    2998:	003b6506 	br	1730 <___vfprintf_internal_r+0x30c>
    299c:	01c000b4 	movhi	r7,2
    29a0:	a9000450 	cmplti	r4,r21,17
    29a4:	d8801b17 	ldw	r2,108(sp)
    29a8:	39ee4a04 	addi	r7,r7,-18136
    29ac:	2001c21e 	bne	r4,zero,30b8 <___vfprintf_internal_r+0x1c94>
    29b0:	dc000e15 	stw	r16,56(sp)
    29b4:	07000404 	movi	fp,16
    29b8:	3821883a 	mov	r16,r7
    29bc:	00000406 	br	29d0 <___vfprintf_internal_r+0x15ac>
    29c0:	b5800204 	addi	r22,r22,8
    29c4:	ad7ffc04 	addi	r21,r21,-16
    29c8:	a9000448 	cmpgei	r4,r21,17
    29cc:	2001b826 	beq	r4,zero,30b0 <___vfprintf_internal_r+0x1c8c>
    29d0:	10800044 	addi	r2,r2,1
    29d4:	18c00404 	addi	r3,r3,16
    29d8:	b4000015 	stw	r16,0(r22)
    29dc:	b7000115 	stw	fp,4(r22)
    29e0:	d8c01c15 	stw	r3,112(sp)
    29e4:	d8801b15 	stw	r2,108(sp)
    29e8:	11000208 	cmpgei	r4,r2,8
    29ec:	203ff426 	beq	r4,zero,29c0 <___vfprintf_internal_r+0x159c>
    29f0:	d9801a04 	addi	r6,sp,104
    29f4:	900b883a 	mov	r5,r18
    29f8:	9809883a 	mov	r4,r19
    29fc:	0007d880 	call	7d88 <__sprint_r>
    2a00:	103b951e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2a04:	d8c01c17 	ldw	r3,112(sp)
    2a08:	d8801b17 	ldw	r2,108(sp)
    2a0c:	dd802704 	addi	r22,sp,156
    2a10:	003fec06 	br	29c4 <___vfprintf_internal_r+0x15a0>
    2a14:	dc402704 	addi	r17,sp,156
    2a18:	a805883a 	mov	r2,r21
    2a1c:	dc000715 	stw	r16,28(sp)
    2a20:	902b883a 	mov	r21,r18
    2a24:	8821883a 	mov	r16,r17
    2a28:	db000415 	stw	r12,16(sp)
    2a2c:	a023883a 	mov	r17,r20
    2a30:	da000e15 	stw	r8,56(sp)
    2a34:	9829883a 	mov	r20,r19
    2a38:	1025883a 	mov	r18,r2
    2a3c:	6827883a 	mov	r19,r13
    2a40:	8809883a 	mov	r4,r17
    2a44:	900b883a 	mov	r5,r18
    2a48:	01800284 	movi	r6,10
    2a4c:	000f883a 	mov	r7,zero
    2a50:	000b3e00 	call	b3e0 <__umoddi3>
    2a54:	10800c04 	addi	r2,r2,48
    2a58:	8809883a 	mov	r4,r17
    2a5c:	900b883a 	mov	r5,r18
    2a60:	01800284 	movi	r6,10
    2a64:	000f883a 	mov	r7,zero
    2a68:	80bfffc5 	stb	r2,-1(r16)
    2a6c:	000ae500 	call	ae50 <__udivdi3>
    2a70:	900d883a 	mov	r6,r18
    2a74:	880f883a 	mov	r7,r17
    2a78:	843fffc4 	addi	r16,r16,-1
    2a7c:	1023883a 	mov	r17,r2
    2a80:	1825883a 	mov	r18,r3
    2a84:	303fee1e 	bne	r6,zero,2a40 <___vfprintf_internal_r+0x161c>
    2a88:	39c002a8 	cmpgeui	r7,r7,10
    2a8c:	383fec1e 	bne	r7,zero,2a40 <___vfprintf_internal_r+0x161c>
    2a90:	8023883a 	mov	r17,r16
    2a94:	d8802704 	addi	r2,sp,156
    2a98:	981b883a 	mov	r13,r19
    2a9c:	a825883a 	mov	r18,r21
    2aa0:	dc000717 	ldw	r16,28(sp)
    2aa4:	da000e17 	ldw	r8,56(sp)
    2aa8:	a027883a 	mov	r19,r20
    2aac:	146bc83a 	sub	r21,r2,r17
    2ab0:	003c7106 	br	1c78 <___vfprintf_internal_r+0x854>
    2ab4:	d8800517 	ldw	r2,20(sp)
    2ab8:	18800015 	stw	r2,0(r3)
    2abc:	003a8d06 	br	14f4 <___vfprintf_internal_r+0xd0>
    2ac0:	d9801a04 	addi	r6,sp,104
    2ac4:	900b883a 	mov	r5,r18
    2ac8:	9809883a 	mov	r4,r19
    2acc:	0007d880 	call	7d88 <__sprint_r>
    2ad0:	103b611e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2ad4:	d8c01c17 	ldw	r3,112(sp)
    2ad8:	dd401b17 	ldw	r21,108(sp)
    2adc:	df002704 	addi	fp,sp,156
    2ae0:	003e2b06 	br	2390 <___vfprintf_internal_r+0xf6c>
    2ae4:	d9801a04 	addi	r6,sp,104
    2ae8:	900b883a 	mov	r5,r18
    2aec:	9809883a 	mov	r4,r19
    2af0:	0007d880 	call	7d88 <__sprint_r>
    2af4:	103b581e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2af8:	d8c01c17 	ldw	r3,112(sp)
    2afc:	dd401b17 	ldw	r21,108(sp)
    2b00:	df002704 	addi	fp,sp,156
    2b04:	003e2d06 	br	23bc <___vfprintf_internal_r+0xf98>
    2b08:	d9801a04 	addi	r6,sp,104
    2b0c:	900b883a 	mov	r5,r18
    2b10:	9809883a 	mov	r4,r19
    2b14:	da001115 	stw	r8,68(sp)
    2b18:	db400f15 	stw	r13,60(sp)
    2b1c:	db800e15 	stw	r14,56(sp)
    2b20:	0007d880 	call	7d88 <__sprint_r>
    2b24:	103b4c1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2b28:	d8c01c17 	ldw	r3,112(sp)
    2b2c:	da001117 	ldw	r8,68(sp)
    2b30:	db400f17 	ldw	r13,60(sp)
    2b34:	db800e17 	ldw	r14,56(sp)
    2b38:	dd802704 	addi	r22,sp,156
    2b3c:	003b0906 	br	1764 <___vfprintf_internal_r+0x340>
    2b40:	d8801b17 	ldw	r2,108(sp)
    2b44:	010000b4 	movhi	r4,2
    2b48:	212e4904 	addi	r4,r4,-18140
    2b4c:	10800044 	addi	r2,r2,1
    2b50:	18c00044 	addi	r3,r3,1
    2b54:	b1000015 	stw	r4,0(r22)
    2b58:	01000044 	movi	r4,1
    2b5c:	d8801b15 	stw	r2,108(sp)
    2b60:	b1000115 	stw	r4,4(r22)
    2b64:	d8c01c15 	stw	r3,112(sp)
    2b68:	10800208 	cmpgei	r2,r2,8
    2b6c:	1001641e 	bne	r2,zero,3100 <___vfprintf_internal_r+0x1cdc>
    2b70:	b5800204 	addi	r22,r22,8
    2b74:	2800bd1e 	bne	r5,zero,2e6c <___vfprintf_internal_r+0x1a48>
    2b78:	d8800417 	ldw	r2,16(sp)
    2b7c:	d9000817 	ldw	r4,32(sp)
    2b80:	1080004c 	andi	r2,r2,1
    2b84:	1104b03a 	or	r2,r2,r4
    2b88:	103b2226 	beq	r2,zero,1814 <___vfprintf_internal_r+0x3f0>
    2b8c:	d8800d17 	ldw	r2,52(sp)
    2b90:	d9000b17 	ldw	r4,44(sp)
    2b94:	b0800015 	stw	r2,0(r22)
    2b98:	d8801b17 	ldw	r2,108(sp)
    2b9c:	20c7883a 	add	r3,r4,r3
    2ba0:	b1000115 	stw	r4,4(r22)
    2ba4:	10800044 	addi	r2,r2,1
    2ba8:	d8c01c15 	stw	r3,112(sp)
    2bac:	d8801b15 	stw	r2,108(sp)
    2bb0:	11000208 	cmpgei	r4,r2,8
    2bb4:	2001771e 	bne	r4,zero,3194 <___vfprintf_internal_r+0x1d70>
    2bb8:	b5800204 	addi	r22,r22,8
    2bbc:	d9000817 	ldw	r4,32(sp)
    2bc0:	10800044 	addi	r2,r2,1
    2bc4:	d8801b15 	stw	r2,108(sp)
    2bc8:	20c7883a 	add	r3,r4,r3
    2bcc:	b4400015 	stw	r17,0(r22)
    2bd0:	b1000115 	stw	r4,4(r22)
    2bd4:	d8c01c15 	stw	r3,112(sp)
    2bd8:	10800208 	cmpgei	r2,r2,8
    2bdc:	103b0c26 	beq	r2,zero,1810 <___vfprintf_internal_r+0x3ec>
    2be0:	003e1906 	br	2448 <___vfprintf_internal_r+0x1024>
    2be4:	8825883a 	mov	r18,r17
    2be8:	003b1b06 	br	1858 <___vfprintf_internal_r+0x434>
    2bec:	d9000917 	ldw	r4,36(sp)
    2bf0:	d9400a17 	ldw	r5,40(sp)
    2bf4:	da000615 	stw	r8,24(sp)
    2bf8:	200d883a 	mov	r6,r4
    2bfc:	280f883a 	mov	r7,r5
    2c00:	db000415 	stw	r12,16(sp)
    2c04:	000dd8c0 	call	dd8c <__unorddf2>
    2c08:	db000417 	ldw	r12,16(sp)
    2c0c:	da000617 	ldw	r8,24(sp)
    2c10:	1002061e 	bne	r2,zero,342c <___vfprintf_internal_r+0x2008>
    2c14:	057ff7c4 	movi	r21,-33
    2c18:	40bfffe0 	cmpeqi	r2,r8,-1
    2c1c:	e56a703a 	and	r21,fp,r21
    2c20:	1001b41e 	bne	r2,zero,32f4 <___vfprintf_internal_r+0x1ed0>
    2c24:	a88011d8 	cmpnei	r2,r21,71
    2c28:	10015726 	beq	r2,zero,3188 <___vfprintf_internal_r+0x1d64>
    2c2c:	60804014 	ori	r2,r12,256
    2c30:	d8800415 	stw	r2,16(sp)
    2c34:	d8800a17 	ldw	r2,40(sp)
    2c38:	10012d16 	blt	r2,zero,30f0 <___vfprintf_internal_r+0x1ccc>
    2c3c:	dd000a17 	ldw	r20,40(sp)
    2c40:	d8000605 	stb	zero,24(sp)
    2c44:	e08019a0 	cmpeqi	r2,fp,102
    2c48:	d8800f15 	stw	r2,60(sp)
    2c4c:	1000d21e 	bne	r2,zero,2f98 <___vfprintf_internal_r+0x1b74>
    2c50:	e08011a0 	cmpeqi	r2,fp,70
    2c54:	1000d01e 	bne	r2,zero,2f98 <___vfprintf_internal_r+0x1b74>
    2c58:	a8801158 	cmpnei	r2,r21,69
    2c5c:	10016226 	beq	r2,zero,31e8 <___vfprintf_internal_r+0x1dc4>
    2c60:	d8801804 	addi	r2,sp,96
    2c64:	d8800315 	stw	r2,12(sp)
    2c68:	d9400917 	ldw	r5,36(sp)
    2c6c:	d8801504 	addi	r2,sp,84
    2c70:	d8800215 	stw	r2,8(sp)
    2c74:	d8801404 	addi	r2,sp,80
    2c78:	da000015 	stw	r8,0(sp)
    2c7c:	9809883a 	mov	r4,r19
    2c80:	d8800115 	stw	r2,4(sp)
    2c84:	01c00084 	movi	r7,2
    2c88:	a00d883a 	mov	r6,r20
    2c8c:	db000815 	stw	r12,32(sp)
    2c90:	da000715 	stw	r8,28(sp)
    2c94:	00039540 	call	3954 <_dtoa_r>
    2c98:	da000717 	ldw	r8,28(sp)
    2c9c:	e10019d8 	cmpnei	r4,fp,103
    2ca0:	db000817 	ldw	r12,32(sp)
    2ca4:	1023883a 	mov	r17,r2
    2ca8:	4007883a 	mov	r3,r8
    2cac:	2001621e 	bne	r4,zero,3238 <___vfprintf_internal_r+0x1e14>
    2cb0:	6080004c 	andi	r2,r12,1
    2cb4:	1001621e 	bne	r2,zero,3240 <___vfprintf_internal_r+0x1e1c>
    2cb8:	d8801417 	ldw	r2,80(sp)
    2cbc:	ad4011e0 	cmpeqi	r21,r21,71
    2cc0:	d8800715 	stw	r2,28(sp)
    2cc4:	d8801817 	ldw	r2,96(sp)
    2cc8:	1445c83a 	sub	r2,r2,r17
    2ccc:	d8800815 	stw	r2,32(sp)
    2cd0:	a8000526 	beq	r21,zero,2ce8 <___vfprintf_internal_r+0x18c4>
    2cd4:	d8c00717 	ldw	r3,28(sp)
    2cd8:	18bfff50 	cmplti	r2,r3,-3
    2cdc:	1000011e 	bne	r2,zero,2ce4 <___vfprintf_internal_r+0x18c0>
    2ce0:	40c1670e 	bge	r8,r3,3280 <___vfprintf_internal_r+0x1e5c>
    2ce4:	e73fff84 	addi	fp,fp,-2
    2ce8:	d8800717 	ldw	r2,28(sp)
    2cec:	df001645 	stb	fp,89(sp)
    2cf0:	157fffc4 	addi	r21,r2,-1
    2cf4:	dd401415 	stw	r21,80(sp)
    2cf8:	a801d416 	blt	r21,zero,344c <___vfprintf_internal_r+0x2028>
    2cfc:	00800ac4 	movi	r2,43
    2d00:	d8801685 	stb	r2,90(sp)
    2d04:	a8800290 	cmplti	r2,r21,10
    2d08:	1001c11e 	bne	r2,zero,3410 <___vfprintf_internal_r+0x1fec>
    2d0c:	d98019c4 	addi	r6,sp,103
    2d10:	9029883a 	mov	r20,r18
    2d14:	dc400715 	stw	r17,28(sp)
    2d18:	8025883a 	mov	r18,r16
    2d1c:	db000f15 	stw	r12,60(sp)
    2d20:	3021883a 	mov	r16,r6
    2d24:	a809883a 	mov	r4,r21
    2d28:	01400284 	movi	r5,10
    2d2c:	000b9940 	call	b994 <__modsi3>
    2d30:	10800c04 	addi	r2,r2,48
    2d34:	a809883a 	mov	r4,r21
    2d38:	80bfffc5 	stb	r2,-1(r16)
    2d3c:	01400284 	movi	r5,10
    2d40:	000b9140 	call	b914 <__divsi3>
    2d44:	a9001908 	cmpgei	r4,r21,100
    2d48:	8023883a 	mov	r17,r16
    2d4c:	102b883a 	mov	r21,r2
    2d50:	843fffc4 	addi	r16,r16,-1
    2d54:	203ff31e 	bne	r4,zero,2d24 <___vfprintf_internal_r+0x1900>
    2d58:	800d883a 	mov	r6,r16
    2d5c:	11000c04 	addi	r4,r2,48
    2d60:	9021883a 	mov	r16,r18
    2d64:	a025883a 	mov	r18,r20
    2d68:	8829883a 	mov	r20,r17
    2d6c:	a0bfff84 	addi	r2,r20,-2
    2d70:	313fffc5 	stb	r4,-1(r6)
    2d74:	d8c019c4 	addi	r3,sp,103
    2d78:	db000f17 	ldw	r12,60(sp)
    2d7c:	dc400717 	ldw	r17,28(sp)
    2d80:	10c1d62e 	bgeu	r2,r3,34dc <___vfprintf_internal_r+0x20b8>
    2d84:	d8c016c4 	addi	r3,sp,91
    2d88:	00000106 	br	2d90 <___vfprintf_internal_r+0x196c>
    2d8c:	11000003 	ldbu	r4,0(r2)
    2d90:	19000005 	stb	r4,0(r3)
    2d94:	10800044 	addi	r2,r2,1
    2d98:	d90019c4 	addi	r4,sp,103
    2d9c:	18c00044 	addi	r3,r3,1
    2da0:	113ffa1e 	bne	r2,r4,2d8c <___vfprintf_internal_r+0x1968>
    2da4:	d8801a44 	addi	r2,sp,105
    2da8:	d8c016c4 	addi	r3,sp,91
    2dac:	1505c83a 	sub	r2,r2,r20
    2db0:	1885883a 	add	r2,r3,r2
    2db4:	d8c01644 	addi	r3,sp,89
    2db8:	10c5c83a 	sub	r2,r2,r3
    2dbc:	d8801015 	stw	r2,64(sp)
    2dc0:	d8c00817 	ldw	r3,32(sp)
    2dc4:	d9001017 	ldw	r4,64(sp)
    2dc8:	18800088 	cmpgei	r2,r3,2
    2dcc:	192b883a 	add	r21,r3,r4
    2dd0:	1001aa26 	beq	r2,zero,347c <___vfprintf_internal_r+0x2058>
    2dd4:	d8800b17 	ldw	r2,44(sp)
    2dd8:	a8ab883a 	add	r21,r21,r2
    2ddc:	a829883a 	mov	r20,r21
    2de0:	a800010e 	bge	r21,zero,2de8 <___vfprintf_internal_r+0x19c4>
    2de4:	0029883a 	mov	r20,zero
    2de8:	d8000715 	stw	zero,28(sp)
    2dec:	00009d06 	br	3064 <___vfprintf_internal_r+0x1c40>
    2df0:	880f883a 	mov	r7,r17
    2df4:	10800044 	addi	r2,r2,1
    2df8:	1d47883a 	add	r3,r3,r21
    2dfc:	b1c00015 	stw	r7,0(r22)
    2e00:	003a7e06 	br	17fc <___vfprintf_internal_r+0x3d8>
    2e04:	d9801a04 	addi	r6,sp,104
    2e08:	900b883a 	mov	r5,r18
    2e0c:	9809883a 	mov	r4,r19
    2e10:	0007d880 	call	7d88 <__sprint_r>
    2e14:	103a901e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2e18:	d8c01c17 	ldw	r3,112(sp)
    2e1c:	dd802704 	addi	r22,sp,156
    2e20:	003c9706 	br	2080 <___vfprintf_internal_r+0xc5c>
    2e24:	d9801a04 	addi	r6,sp,104
    2e28:	900b883a 	mov	r5,r18
    2e2c:	9809883a 	mov	r4,r19
    2e30:	da000e15 	stw	r8,56(sp)
    2e34:	0007d880 	call	7d88 <__sprint_r>
    2e38:	103a871e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    2e3c:	d8c01c17 	ldw	r3,112(sp)
    2e40:	da000e17 	ldw	r8,56(sp)
    2e44:	dd802704 	addi	r22,sp,156
    2e48:	003a6306 	br	17d8 <___vfprintf_internal_r+0x3b4>
    2e4c:	8809883a 	mov	r4,r17
    2e50:	db000415 	stw	r12,16(sp)
    2e54:	d8c00615 	stw	r3,24(sp)
    2e58:	0007bfc0 	call	7bfc <strlen>
    2e5c:	db000417 	ldw	r12,16(sp)
    2e60:	102b883a 	mov	r21,r2
    2e64:	1029883a 	mov	r20,r2
    2e68:	003a3106 	br	1730 <___vfprintf_internal_r+0x30c>
    2e6c:	d8800d17 	ldw	r2,52(sp)
    2e70:	d9000b17 	ldw	r4,44(sp)
    2e74:	b0800015 	stw	r2,0(r22)
    2e78:	d8801b17 	ldw	r2,108(sp)
    2e7c:	20c7883a 	add	r3,r4,r3
    2e80:	b1000115 	stw	r4,4(r22)
    2e84:	10800044 	addi	r2,r2,1
    2e88:	d8c01c15 	stw	r3,112(sp)
    2e8c:	d8801b15 	stw	r2,108(sp)
    2e90:	11000208 	cmpgei	r4,r2,8
    2e94:	2000bf1e 	bne	r4,zero,3194 <___vfprintf_internal_r+0x1d70>
    2e98:	b5800204 	addi	r22,r22,8
    2e9c:	283f470e 	bge	r5,zero,2bbc <___vfprintf_internal_r+0x1798>
    2ea0:	01c000b4 	movhi	r7,2
    2ea4:	293ffc08 	cmpgei	r4,r5,-16
    2ea8:	39ee4a04 	addi	r7,r7,-18136
    2eac:	0179c83a 	sub	fp,zero,r5
    2eb0:	20013f1e 	bne	r4,zero,33b0 <___vfprintf_internal_r+0x1f8c>
    2eb4:	dc000715 	stw	r16,28(sp)
    2eb8:	05400404 	movi	r21,16
    2ebc:	9021883a 	mov	r16,r18
    2ec0:	3825883a 	mov	r18,r7
    2ec4:	00000406 	br	2ed8 <___vfprintf_internal_r+0x1ab4>
    2ec8:	b5800204 	addi	r22,r22,8
    2ecc:	e73ffc04 	addi	fp,fp,-16
    2ed0:	e1800448 	cmpgei	r6,fp,17
    2ed4:	30013326 	beq	r6,zero,33a4 <___vfprintf_internal_r+0x1f80>
    2ed8:	10800044 	addi	r2,r2,1
    2edc:	18c00404 	addi	r3,r3,16
    2ee0:	b4800015 	stw	r18,0(r22)
    2ee4:	b5400115 	stw	r21,4(r22)
    2ee8:	d8c01c15 	stw	r3,112(sp)
    2eec:	d8801b15 	stw	r2,108(sp)
    2ef0:	11800208 	cmpgei	r6,r2,8
    2ef4:	303ff426 	beq	r6,zero,2ec8 <___vfprintf_internal_r+0x1aa4>
    2ef8:	d9801a04 	addi	r6,sp,104
    2efc:	800b883a 	mov	r5,r16
    2f00:	9809883a 	mov	r4,r19
    2f04:	0007d880 	call	7d88 <__sprint_r>
    2f08:	1001721e 	bne	r2,zero,34d4 <___vfprintf_internal_r+0x20b0>
    2f0c:	d8c01c17 	ldw	r3,112(sp)
    2f10:	d8801b17 	ldw	r2,108(sp)
    2f14:	dd802704 	addi	r22,sp,156
    2f18:	003fec06 	br	2ecc <___vfprintf_internal_r+0x1aa8>
    2f1c:	800f883a 	mov	r7,r16
    2f20:	dc000717 	ldw	r16,28(sp)
    2f24:	8817883a 	mov	r11,r17
    2f28:	aa000044 	addi	r8,r21,1
    2f2c:	e0800204 	addi	r2,fp,8
    2f30:	1ac7883a 	add	r3,r3,r11
    2f34:	e1c00015 	stw	r7,0(fp)
    2f38:	e2c00115 	stw	r11,4(fp)
    2f3c:	d8c01c15 	stw	r3,112(sp)
    2f40:	da001b15 	stw	r8,108(sp)
    2f44:	41000208 	cmpgei	r4,r8,8
    2f48:	203e701e 	bne	r4,zero,290c <___vfprintf_internal_r+0x14e8>
    2f4c:	42000044 	addi	r8,r8,1
    2f50:	15800204 	addi	r22,r2,8
    2f54:	1039883a 	mov	fp,r2
    2f58:	003d3206 	br	2424 <___vfprintf_internal_r+0x1000>
    2f5c:	d8800617 	ldw	r2,24(sp)
    2f60:	d8c00615 	stw	r3,24(sp)
    2f64:	15000017 	ldw	r20,0(r2)
    2f68:	a02bd7fa 	srai	r21,r20,31
    2f6c:	a805883a 	mov	r2,r21
    2f70:	003b2f06 	br	1c30 <___vfprintf_internal_r+0x80c>
    2f74:	d8800617 	ldw	r2,24(sp)
    2f78:	002b883a 	mov	r21,zero
    2f7c:	d8c00615 	stw	r3,24(sp)
    2f80:	15000017 	ldw	r20,0(r2)
    2f84:	0005883a 	mov	r2,zero
    2f88:	003a7006 	br	194c <___vfprintf_internal_r+0x528>
    2f8c:	044000b4 	movhi	r17,2
    2f90:	8c6e3904 	addi	r17,r17,-18204
    2f94:	003ac806 	br	1ab8 <___vfprintf_internal_r+0x694>
    2f98:	d8801804 	addi	r2,sp,96
    2f9c:	d8800315 	stw	r2,12(sp)
    2fa0:	d9400917 	ldw	r5,36(sp)
    2fa4:	d8801504 	addi	r2,sp,84
    2fa8:	d8800215 	stw	r2,8(sp)
    2fac:	d8801404 	addi	r2,sp,80
    2fb0:	da000015 	stw	r8,0(sp)
    2fb4:	d8800115 	stw	r2,4(sp)
    2fb8:	01c000c4 	movi	r7,3
    2fbc:	a00d883a 	mov	r6,r20
    2fc0:	9809883a 	mov	r4,r19
    2fc4:	db000815 	stw	r12,32(sp)
    2fc8:	da000715 	stw	r8,28(sp)
    2fcc:	00039540 	call	3954 <_dtoa_r>
    2fd0:	da000717 	ldw	r8,28(sp)
    2fd4:	1023883a 	mov	r17,r2
    2fd8:	db000817 	ldw	r12,32(sp)
    2fdc:	1207883a 	add	r3,r2,r8
    2fe0:	88800007 	ldb	r2,0(r17)
    2fe4:	10800c20 	cmpeqi	r2,r2,48
    2fe8:	1000571e 	bne	r2,zero,3148 <___vfprintf_internal_r+0x1d24>
    2fec:	d8801417 	ldw	r2,80(sp)
    2ff0:	1893883a 	add	r9,r3,r2
    2ff4:	d9000917 	ldw	r4,36(sp)
    2ff8:	000d883a 	mov	r6,zero
    2ffc:	000f883a 	mov	r7,zero
    3000:	a00b883a 	mov	r5,r20
    3004:	da401115 	stw	r9,68(sp)
    3008:	da000815 	stw	r8,32(sp)
    300c:	db000715 	stw	r12,28(sp)
    3010:	000cc140 	call	cc14 <__eqdf2>
    3014:	db000717 	ldw	r12,28(sp)
    3018:	da000817 	ldw	r8,32(sp)
    301c:	da401117 	ldw	r9,68(sp)
    3020:	1000891e 	bne	r2,zero,3248 <___vfprintf_internal_r+0x1e24>
    3024:	4805883a 	mov	r2,r9
    3028:	d8c01417 	ldw	r3,80(sp)
    302c:	1445c83a 	sub	r2,r2,r17
    3030:	ad4011d8 	cmpnei	r21,r21,71
    3034:	d8c00715 	stw	r3,28(sp)
    3038:	d8800815 	stw	r2,32(sp)
    303c:	a83f2526 	beq	r21,zero,2cd4 <___vfprintf_internal_r+0x18b0>
    3040:	d8800f17 	ldw	r2,60(sp)
    3044:	103f2826 	beq	r2,zero,2ce8 <___vfprintf_internal_r+0x18c4>
    3048:	d8c00717 	ldw	r3,28(sp)
    304c:	6080004c 	andi	r2,r12,1
    3050:	1204b03a 	or	r2,r2,r8
    3054:	00c1140e 	bge	zero,r3,34a8 <___vfprintf_internal_r+0x2084>
    3058:	1001011e 	bne	r2,zero,3460 <___vfprintf_internal_r+0x203c>
    305c:	dd400717 	ldw	r21,28(sp)
    3060:	a829883a 	mov	r20,r21
    3064:	d8800607 	ldb	r2,24(sp)
    3068:	10008026 	beq	r2,zero,326c <___vfprintf_internal_r+0x1e48>
    306c:	00800b44 	movi	r2,45
    3070:	d8801345 	stb	r2,77(sp)
    3074:	d8800e17 	ldw	r2,56(sp)
    3078:	0011883a 	mov	r8,zero
    307c:	d8800615 	stw	r2,24(sp)
    3080:	003b0506 	br	1c98 <___vfprintf_internal_r+0x874>
    3084:	d8800617 	ldw	r2,24(sp)
    3088:	002b883a 	mov	r21,zero
    308c:	d8c00615 	stw	r3,24(sp)
    3090:	15000017 	ldw	r20,0(r2)
    3094:	00800044 	movi	r2,1
    3098:	003a2c06 	br	194c <___vfprintf_internal_r+0x528>
    309c:	d8800617 	ldw	r2,24(sp)
    30a0:	002b883a 	mov	r21,zero
    30a4:	d8c00615 	stw	r3,24(sp)
    30a8:	15000017 	ldw	r20,0(r2)
    30ac:	003b1506 	br	1d04 <___vfprintf_internal_r+0x8e0>
    30b0:	800f883a 	mov	r7,r16
    30b4:	dc000e17 	ldw	r16,56(sp)
    30b8:	10800044 	addi	r2,r2,1
    30bc:	1d47883a 	add	r3,r3,r21
    30c0:	d8801b15 	stw	r2,108(sp)
    30c4:	b1c00015 	stw	r7,0(r22)
    30c8:	b5400115 	stw	r21,4(r22)
    30cc:	d8c01c15 	stw	r3,112(sp)
    30d0:	10800208 	cmpgei	r2,r2,8
    30d4:	10003a1e 	bne	r2,zero,31c0 <___vfprintf_internal_r+0x1d9c>
    30d8:	b5800204 	addi	r22,r22,8
    30dc:	003d5406 	br	2630 <___vfprintf_internal_r+0x120c>
    30e0:	00800b44 	movi	r2,45
    30e4:	d8801345 	stb	r2,77(sp)
    30e8:	03400b44 	movi	r13,45
    30ec:	003a6e06 	br	1aa8 <___vfprintf_internal_r+0x684>
    30f0:	1520003c 	xorhi	r20,r2,32768
    30f4:	00800b44 	movi	r2,45
    30f8:	d8800605 	stb	r2,24(sp)
    30fc:	003ed106 	br	2c44 <___vfprintf_internal_r+0x1820>
    3100:	d9801a04 	addi	r6,sp,104
    3104:	900b883a 	mov	r5,r18
    3108:	9809883a 	mov	r4,r19
    310c:	0007d880 	call	7d88 <__sprint_r>
    3110:	1039d11e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    3114:	d9401417 	ldw	r5,80(sp)
    3118:	d8c01c17 	ldw	r3,112(sp)
    311c:	dd802704 	addi	r22,sp,156
    3120:	003e9406 	br	2b74 <___vfprintf_internal_r+0x1750>
    3124:	05400184 	movi	r21,6
    3128:	003e1706 	br	2988 <___vfprintf_internal_r+0x1564>
    312c:	d9401345 	stb	r5,77(sp)
    3130:	00397906 	br	1718 <___vfprintf_internal_r+0x2f4>
    3134:	d9801a04 	addi	r6,sp,104
    3138:	900b883a 	mov	r5,r18
    313c:	9809883a 	mov	r4,r19
    3140:	0007d880 	call	7d88 <__sprint_r>
    3144:	0039c406 	br	1858 <___vfprintf_internal_r+0x434>
    3148:	d9000917 	ldw	r4,36(sp)
    314c:	000d883a 	mov	r6,zero
    3150:	000f883a 	mov	r7,zero
    3154:	a00b883a 	mov	r5,r20
    3158:	d8c01115 	stw	r3,68(sp)
    315c:	da000815 	stw	r8,32(sp)
    3160:	db000715 	stw	r12,28(sp)
    3164:	000cc140 	call	cc14 <__eqdf2>
    3168:	db000717 	ldw	r12,28(sp)
    316c:	da000817 	ldw	r8,32(sp)
    3170:	d8c01117 	ldw	r3,68(sp)
    3174:	103f9d26 	beq	r2,zero,2fec <___vfprintf_internal_r+0x1bc8>
    3178:	00800044 	movi	r2,1
    317c:	1205c83a 	sub	r2,r2,r8
    3180:	d8801415 	stw	r2,80(sp)
    3184:	003f9a06 	br	2ff0 <___vfprintf_internal_r+0x1bcc>
    3188:	403ea81e 	bne	r8,zero,2c2c <___vfprintf_internal_r+0x1808>
    318c:	02000044 	movi	r8,1
    3190:	003ea606 	br	2c2c <___vfprintf_internal_r+0x1808>
    3194:	d9801a04 	addi	r6,sp,104
    3198:	900b883a 	mov	r5,r18
    319c:	9809883a 	mov	r4,r19
    31a0:	0007d880 	call	7d88 <__sprint_r>
    31a4:	1039ac1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    31a8:	d9401417 	ldw	r5,80(sp)
    31ac:	d8c01c17 	ldw	r3,112(sp)
    31b0:	d8801b17 	ldw	r2,108(sp)
    31b4:	dd802704 	addi	r22,sp,156
    31b8:	283e800e 	bge	r5,zero,2bbc <___vfprintf_internal_r+0x1798>
    31bc:	003f3806 	br	2ea0 <___vfprintf_internal_r+0x1a7c>
    31c0:	d9801a04 	addi	r6,sp,104
    31c4:	900b883a 	mov	r5,r18
    31c8:	9809883a 	mov	r4,r19
    31cc:	0007d880 	call	7d88 <__sprint_r>
    31d0:	1039a11e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    31d4:	d8c01c17 	ldw	r3,112(sp)
    31d8:	dd802704 	addi	r22,sp,156
    31dc:	003d1406 	br	2630 <___vfprintf_internal_r+0x120c>
    31e0:	db000417 	ldw	r12,16(sp)
    31e4:	003a9f06 	br	1c64 <___vfprintf_internal_r+0x840>
    31e8:	d8801804 	addi	r2,sp,96
    31ec:	d8800315 	stw	r2,12(sp)
    31f0:	d9400917 	ldw	r5,36(sp)
    31f4:	d8801504 	addi	r2,sp,84
    31f8:	40c00044 	addi	r3,r8,1
    31fc:	d8800215 	stw	r2,8(sp)
    3200:	d8801404 	addi	r2,sp,80
    3204:	d8c00015 	stw	r3,0(sp)
    3208:	d8800115 	stw	r2,4(sp)
    320c:	01c00084 	movi	r7,2
    3210:	a00d883a 	mov	r6,r20
    3214:	9809883a 	mov	r4,r19
    3218:	db001115 	stw	r12,68(sp)
    321c:	da000815 	stw	r8,32(sp)
    3220:	d8c00715 	stw	r3,28(sp)
    3224:	00039540 	call	3954 <_dtoa_r>
    3228:	d8c00717 	ldw	r3,28(sp)
    322c:	da000817 	ldw	r8,32(sp)
    3230:	db001117 	ldw	r12,68(sp)
    3234:	1023883a 	mov	r17,r2
    3238:	e08011d8 	cmpnei	r2,fp,71
    323c:	103e9c26 	beq	r2,zero,2cb0 <___vfprintf_internal_r+0x188c>
    3240:	88d3883a 	add	r9,r17,r3
    3244:	003f6b06 	br	2ff4 <___vfprintf_internal_r+0x1bd0>
    3248:	d8801817 	ldw	r2,96(sp)
    324c:	127f762e 	bgeu	r2,r9,3028 <___vfprintf_internal_r+0x1c04>
    3250:	01000c04 	movi	r4,48
    3254:	10c00044 	addi	r3,r2,1
    3258:	d8c01815 	stw	r3,96(sp)
    325c:	11000005 	stb	r4,0(r2)
    3260:	d8801817 	ldw	r2,96(sp)
    3264:	127ffb36 	bltu	r2,r9,3254 <___vfprintf_internal_r+0x1e30>
    3268:	003f6f06 	br	3028 <___vfprintf_internal_r+0x1c04>
    326c:	d8800e17 	ldw	r2,56(sp)
    3270:	db401343 	ldbu	r13,77(sp)
    3274:	0011883a 	mov	r8,zero
    3278:	d8800615 	stw	r2,24(sp)
    327c:	003a8206 	br	1c88 <___vfprintf_internal_r+0x864>
    3280:	d8800717 	ldw	r2,28(sp)
    3284:	d8c00817 	ldw	r3,32(sp)
    3288:	10c02b16 	blt	r2,r3,3338 <___vfprintf_internal_r+0x1f14>
    328c:	6300004c 	andi	r12,r12,1
    3290:	6000581e 	bne	r12,zero,33f4 <___vfprintf_internal_r+0x1fd0>
    3294:	1029883a 	mov	r20,r2
    3298:	1000010e 	bge	r2,zero,32a0 <___vfprintf_internal_r+0x1e7c>
    329c:	0029883a 	mov	r20,zero
    32a0:	dd400717 	ldw	r21,28(sp)
    32a4:	070019c4 	movi	fp,103
    32a8:	003f6e06 	br	3064 <___vfprintf_internal_r+0x1c40>
    32ac:	d9801a04 	addi	r6,sp,104
    32b0:	900b883a 	mov	r5,r18
    32b4:	9809883a 	mov	r4,r19
    32b8:	0007d880 	call	7d88 <__sprint_r>
    32bc:	1039661e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    32c0:	dd401417 	ldw	r21,80(sp)
    32c4:	d8c01c17 	ldw	r3,112(sp)
    32c8:	dd802704 	addi	r22,sp,156
    32cc:	003ce706 	br	266c <___vfprintf_internal_r+0x1248>
    32d0:	d9801a04 	addi	r6,sp,104
    32d4:	900b883a 	mov	r5,r18
    32d8:	9809883a 	mov	r4,r19
    32dc:	0007d880 	call	7d88 <__sprint_r>
    32e0:	10395d1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    32e4:	d8c01c17 	ldw	r3,112(sp)
    32e8:	dd802704 	addi	r22,sp,156
    32ec:	a83ccd0e 	bge	r21,zero,2624 <___vfprintf_internal_r+0x1200>
    32f0:	003d9106 	br	2938 <___vfprintf_internal_r+0x1514>
    32f4:	02000184 	movi	r8,6
    32f8:	003e4c06 	br	2c2c <___vfprintf_internal_r+0x1808>
    32fc:	d9801a04 	addi	r6,sp,104
    3300:	900b883a 	mov	r5,r18
    3304:	9809883a 	mov	r4,r19
    3308:	0007d880 	call	7d88 <__sprint_r>
    330c:	1039521e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    3310:	d8801417 	ldw	r2,80(sp)
    3314:	d9000817 	ldw	r4,32(sp)
    3318:	d8c01c17 	ldw	r3,112(sp)
    331c:	dd802704 	addi	r22,sp,156
    3320:	2085c83a 	sub	r2,r4,r2
    3324:	003ce506 	br	26bc <___vfprintf_internal_r+0x1298>
    3328:	4029883a 	mov	r20,r8
    332c:	d8c00615 	stw	r3,24(sp)
    3330:	402b883a 	mov	r21,r8
    3334:	0038fe06 	br	1730 <___vfprintf_internal_r+0x30c>
    3338:	d8800817 	ldw	r2,32(sp)
    333c:	d8c00b17 	ldw	r3,44(sp)
    3340:	10eb883a 	add	r21,r2,r3
    3344:	d8800717 	ldw	r2,28(sp)
    3348:	00800316 	blt	zero,r2,3358 <___vfprintf_internal_r+0x1f34>
    334c:	d8800717 	ldw	r2,28(sp)
    3350:	a8abc83a 	sub	r21,r21,r2
    3354:	ad400044 	addi	r21,r21,1
    3358:	a829883a 	mov	r20,r21
    335c:	a8002a16 	blt	r21,zero,3408 <___vfprintf_internal_r+0x1fe4>
    3360:	070019c4 	movi	fp,103
    3364:	003f3f06 	br	3064 <___vfprintf_internal_r+0x1c40>
    3368:	d9401345 	stb	r5,77(sp)
    336c:	003ae006 	br	1ef0 <___vfprintf_internal_r+0xacc>
    3370:	d9401345 	stb	r5,77(sp)
    3374:	003a5906 	br	1cdc <___vfprintf_internal_r+0x8b8>
    3378:	d9401345 	stb	r5,77(sp)
    337c:	003b1706 	br	1fdc <___vfprintf_internal_r+0xbb8>
    3380:	d9401345 	stb	r5,77(sp)
    3384:	003a2206 	br	1c10 <___vfprintf_internal_r+0x7ec>
    3388:	d9401345 	stb	r5,77(sp)
    338c:	003a6806 	br	1d30 <___vfprintf_internal_r+0x90c>
    3390:	d9401345 	stb	r5,77(sp)
    3394:	00399906 	br	19fc <___vfprintf_internal_r+0x5d8>
    3398:	00bfffc4 	movi	r2,-1
    339c:	d8800515 	stw	r2,20(sp)
    33a0:	00393006 	br	1864 <___vfprintf_internal_r+0x440>
    33a4:	900f883a 	mov	r7,r18
    33a8:	8025883a 	mov	r18,r16
    33ac:	dc000717 	ldw	r16,28(sp)
    33b0:	10800044 	addi	r2,r2,1
    33b4:	1f07883a 	add	r3,r3,fp
    33b8:	b1c00015 	stw	r7,0(r22)
    33bc:	b7000115 	stw	fp,4(r22)
    33c0:	d8c01c15 	stw	r3,112(sp)
    33c4:	d8801b15 	stw	r2,108(sp)
    33c8:	11000208 	cmpgei	r4,r2,8
    33cc:	203dfa26 	beq	r4,zero,2bb8 <___vfprintf_internal_r+0x1794>
    33d0:	d9801a04 	addi	r6,sp,104
    33d4:	900b883a 	mov	r5,r18
    33d8:	9809883a 	mov	r4,r19
    33dc:	0007d880 	call	7d88 <__sprint_r>
    33e0:	10391d1e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x434>
    33e4:	d8c01c17 	ldw	r3,112(sp)
    33e8:	d8801b17 	ldw	r2,108(sp)
    33ec:	dd802704 	addi	r22,sp,156
    33f0:	003df206 	br	2bbc <___vfprintf_internal_r+0x1798>
    33f4:	d8800717 	ldw	r2,28(sp)
    33f8:	d8c00b17 	ldw	r3,44(sp)
    33fc:	10eb883a 	add	r21,r2,r3
    3400:	a829883a 	mov	r20,r21
    3404:	a83fd60e 	bge	r21,zero,3360 <___vfprintf_internal_r+0x1f3c>
    3408:	0029883a 	mov	r20,zero
    340c:	003fd406 	br	3360 <___vfprintf_internal_r+0x1f3c>
    3410:	00800c04 	movi	r2,48
    3414:	ad400c04 	addi	r21,r21,48
    3418:	d88016c5 	stb	r2,91(sp)
    341c:	00800104 	movi	r2,4
    3420:	dd401705 	stb	r21,92(sp)
    3424:	d8801015 	stw	r2,64(sp)
    3428:	003e6506 	br	2dc0 <___vfprintf_internal_r+0x199c>
    342c:	d8800a17 	ldw	r2,40(sp)
    3430:	10001916 	blt	r2,zero,3498 <___vfprintf_internal_r+0x2074>
    3434:	db401343 	ldbu	r13,77(sp)
    3438:	e0801210 	cmplti	r2,fp,72
    343c:	1000131e 	bne	r2,zero,348c <___vfprintf_internal_r+0x2068>
    3440:	044000b4 	movhi	r17,2
    3444:	8c6e3c04 	addi	r17,r17,-18192
    3448:	00399b06 	br	1ab8 <___vfprintf_internal_r+0x694>
    344c:	05400044 	movi	r21,1
    3450:	a8abc83a 	sub	r21,r21,r2
    3454:	00800b44 	movi	r2,45
    3458:	d8801685 	stb	r2,90(sp)
    345c:	003e2906 	br	2d04 <___vfprintf_internal_r+0x18e0>
    3460:	d8800b17 	ldw	r2,44(sp)
    3464:	18ab883a 	add	r21,r3,r2
    3468:	aa2b883a 	add	r21,r21,r8
    346c:	a829883a 	mov	r20,r21
    3470:	a83efc0e 	bge	r21,zero,3064 <___vfprintf_internal_r+0x1c40>
    3474:	0029883a 	mov	r20,zero
    3478:	003efa06 	br	3064 <___vfprintf_internal_r+0x1c40>
    347c:	6080004c 	andi	r2,r12,1
    3480:	d8800715 	stw	r2,28(sp)
    3484:	103e531e 	bne	r2,zero,2dd4 <___vfprintf_internal_r+0x19b0>
    3488:	003ff806 	br	346c <___vfprintf_internal_r+0x2048>
    348c:	044000b4 	movhi	r17,2
    3490:	8c6e3b04 	addi	r17,r17,-18196
    3494:	00398806 	br	1ab8 <___vfprintf_internal_r+0x694>
    3498:	00800b44 	movi	r2,45
    349c:	d8801345 	stb	r2,77(sp)
    34a0:	03400b44 	movi	r13,45
    34a4:	003fe406 	br	3438 <___vfprintf_internal_r+0x2014>
    34a8:	1000031e 	bne	r2,zero,34b8 <___vfprintf_internal_r+0x2094>
    34ac:	05000044 	movi	r20,1
    34b0:	05400044 	movi	r21,1
    34b4:	003eeb06 	br	3064 <___vfprintf_internal_r+0x1c40>
    34b8:	d8800b17 	ldw	r2,44(sp)
    34bc:	15400044 	addi	r21,r2,1
    34c0:	aa2b883a 	add	r21,r21,r8
    34c4:	003fe906 	br	346c <___vfprintf_internal_r+0x2048>
    34c8:	b005883a 	mov	r2,r22
    34cc:	39ee4a04 	addi	r7,r7,-18136
    34d0:	003e9706 	br	2f30 <___vfprintf_internal_r+0x1b0c>
    34d4:	8025883a 	mov	r18,r16
    34d8:	0038df06 	br	1858 <___vfprintf_internal_r+0x434>
    34dc:	00800084 	movi	r2,2
    34e0:	d8801015 	stw	r2,64(sp)
    34e4:	003e3606 	br	2dc0 <___vfprintf_internal_r+0x199c>
    34e8:	d8800617 	ldw	r2,24(sp)
    34ec:	12000017 	ldw	r8,0(r2)
    34f0:	10800104 	addi	r2,r2,4
    34f4:	4000010e 	bge	r8,zero,34fc <___vfprintf_internal_r+0x20d8>
    34f8:	023fffc4 	movi	r8,-1
    34fc:	bf000043 	ldbu	fp,1(r23)
    3500:	d8800615 	stw	r2,24(sp)
    3504:	182f883a 	mov	r23,r3
    3508:	e2c03fcc 	andi	r11,fp,255
    350c:	5ac0201c 	xori	r11,r11,128
    3510:	5affe004 	addi	r11,r11,-128
    3514:	00380f06 	br	1554 <___vfprintf_internal_r+0x130>

00003518 <__vfprintf_internal>:
    3518:	00c000b4 	movhi	r3,2
    351c:	2005883a 	mov	r2,r4
    3520:	19381817 	ldw	r4,-8096(r3)
    3524:	300f883a 	mov	r7,r6
    3528:	280d883a 	mov	r6,r5
    352c:	100b883a 	mov	r5,r2
    3530:	00014241 	jmpi	1424 <___vfprintf_internal_r>

00003534 <__sbprintf>:
    3534:	2880030b 	ldhu	r2,12(r5)
    3538:	2b001917 	ldw	r12,100(r5)
    353c:	2ac0038b 	ldhu	r11,14(r5)
    3540:	2a800717 	ldw	r10,28(r5)
    3544:	2a400917 	ldw	r9,36(r5)
    3548:	defee204 	addi	sp,sp,-1144
    354c:	da001a04 	addi	r8,sp,104
    3550:	00c10004 	movi	r3,1024
    3554:	dc011a15 	stw	r16,1128(sp)
    3558:	10bfff4c 	andi	r2,r2,65533
    355c:	2821883a 	mov	r16,r5
    3560:	d80b883a 	mov	r5,sp
    3564:	dc811c15 	stw	r18,1136(sp)
    3568:	dc411b15 	stw	r17,1132(sp)
    356c:	dfc11d15 	stw	ra,1140(sp)
    3570:	2025883a 	mov	r18,r4
    3574:	d880030d 	sth	r2,12(sp)
    3578:	db001915 	stw	r12,100(sp)
    357c:	dac0038d 	sth	r11,14(sp)
    3580:	da800715 	stw	r10,28(sp)
    3584:	da400915 	stw	r9,36(sp)
    3588:	da000015 	stw	r8,0(sp)
    358c:	da000415 	stw	r8,16(sp)
    3590:	d8c00215 	stw	r3,8(sp)
    3594:	d8c00515 	stw	r3,20(sp)
    3598:	d8000615 	stw	zero,24(sp)
    359c:	00014240 	call	1424 <___vfprintf_internal_r>
    35a0:	1023883a 	mov	r17,r2
    35a4:	10000d0e 	bge	r2,zero,35dc <__sbprintf+0xa8>
    35a8:	d880030b 	ldhu	r2,12(sp)
    35ac:	1080100c 	andi	r2,r2,64
    35b0:	10000326 	beq	r2,zero,35c0 <__sbprintf+0x8c>
    35b4:	8080030b 	ldhu	r2,12(r16)
    35b8:	10801014 	ori	r2,r2,64
    35bc:	8080030d 	sth	r2,12(r16)
    35c0:	8805883a 	mov	r2,r17
    35c4:	dfc11d17 	ldw	ra,1140(sp)
    35c8:	dc811c17 	ldw	r18,1136(sp)
    35cc:	dc411b17 	ldw	r17,1132(sp)
    35d0:	dc011a17 	ldw	r16,1128(sp)
    35d4:	dec11e04 	addi	sp,sp,1144
    35d8:	f800283a 	ret
    35dc:	d80b883a 	mov	r5,sp
    35e0:	9009883a 	mov	r4,r18
    35e4:	00052c40 	call	52c4 <_fflush_r>
    35e8:	103fef26 	beq	r2,zero,35a8 <__sbprintf+0x74>
    35ec:	047fffc4 	movi	r17,-1
    35f0:	003fed06 	br	35a8 <__sbprintf+0x74>

000035f4 <__swsetup_r>:
    35f4:	008000b4 	movhi	r2,2
    35f8:	10b81817 	ldw	r2,-8096(r2)
    35fc:	defffd04 	addi	sp,sp,-12
    3600:	dc400115 	stw	r17,4(sp)
    3604:	dc000015 	stw	r16,0(sp)
    3608:	dfc00215 	stw	ra,8(sp)
    360c:	2023883a 	mov	r17,r4
    3610:	2821883a 	mov	r16,r5
    3614:	10000226 	beq	r2,zero,3620 <__swsetup_r+0x2c>
    3618:	10c00e17 	ldw	r3,56(r2)
    361c:	18001f26 	beq	r3,zero,369c <__swsetup_r+0xa8>
    3620:	8180030b 	ldhu	r6,12(r16)
    3624:	30c0020c 	andi	r3,r6,8
    3628:	3005883a 	mov	r2,r6
    362c:	18002126 	beq	r3,zero,36b4 <__swsetup_r+0xc0>
    3630:	80c00417 	ldw	r3,16(r16)
    3634:	18002826 	beq	r3,zero,36d8 <__swsetup_r+0xe4>
    3638:	1100004c 	andi	r4,r2,1
    363c:	20000b1e 	bne	r4,zero,366c <__swsetup_r+0x78>
    3640:	1100008c 	andi	r4,r2,2
    3644:	20002e1e 	bne	r4,zero,3700 <__swsetup_r+0x10c>
    3648:	81000517 	ldw	r4,20(r16)
    364c:	81000215 	stw	r4,8(r16)
    3650:	18000b26 	beq	r3,zero,3680 <__swsetup_r+0x8c>
    3654:	0005883a 	mov	r2,zero
    3658:	dfc00217 	ldw	ra,8(sp)
    365c:	dc400117 	ldw	r17,4(sp)
    3660:	dc000017 	ldw	r16,0(sp)
    3664:	dec00304 	addi	sp,sp,12
    3668:	f800283a 	ret
    366c:	81000517 	ldw	r4,20(r16)
    3670:	80000215 	stw	zero,8(r16)
    3674:	0109c83a 	sub	r4,zero,r4
    3678:	81000615 	stw	r4,24(r16)
    367c:	183ff51e 	bne	r3,zero,3654 <__swsetup_r+0x60>
    3680:	10c0200c 	andi	r3,r2,128
    3684:	0005883a 	mov	r2,zero
    3688:	183ff326 	beq	r3,zero,3658 <__swsetup_r+0x64>
    368c:	31801014 	ori	r6,r6,64
    3690:	8180030d 	sth	r6,12(r16)
    3694:	00bfffc4 	movi	r2,-1
    3698:	003fef06 	br	3658 <__swsetup_r+0x64>
    369c:	1009883a 	mov	r4,r2
    36a0:	00056fc0 	call	56fc <__sinit>
    36a4:	8180030b 	ldhu	r6,12(r16)
    36a8:	30c0020c 	andi	r3,r6,8
    36ac:	3005883a 	mov	r2,r6
    36b0:	183fdf1e 	bne	r3,zero,3630 <__swsetup_r+0x3c>
    36b4:	3080040c 	andi	r2,r6,16
    36b8:	10002126 	beq	r2,zero,3740 <__swsetup_r+0x14c>
    36bc:	3080010c 	andi	r2,r6,4
    36c0:	1000111e 	bne	r2,zero,3708 <__swsetup_r+0x114>
    36c4:	80c00417 	ldw	r3,16(r16)
    36c8:	30800214 	ori	r2,r6,8
    36cc:	8080030d 	sth	r2,12(r16)
    36d0:	100d883a 	mov	r6,r2
    36d4:	183fd81e 	bne	r3,zero,3638 <__swsetup_r+0x44>
    36d8:	1100a00c 	andi	r4,r2,640
    36dc:	21008020 	cmpeqi	r4,r4,512
    36e0:	203fd51e 	bne	r4,zero,3638 <__swsetup_r+0x44>
    36e4:	800b883a 	mov	r5,r16
    36e8:	8809883a 	mov	r4,r17
    36ec:	0005d1c0 	call	5d1c <__smakebuf_r>
    36f0:	8180030b 	ldhu	r6,12(r16)
    36f4:	80c00417 	ldw	r3,16(r16)
    36f8:	3005883a 	mov	r2,r6
    36fc:	003fce06 	br	3638 <__swsetup_r+0x44>
    3700:	0009883a 	mov	r4,zero
    3704:	003fd106 	br	364c <__swsetup_r+0x58>
    3708:	81400c17 	ldw	r5,48(r16)
    370c:	28000626 	beq	r5,zero,3728 <__swsetup_r+0x134>
    3710:	80801004 	addi	r2,r16,64
    3714:	28800326 	beq	r5,r2,3724 <__swsetup_r+0x130>
    3718:	8809883a 	mov	r4,r17
    371c:	00058600 	call	5860 <_free_r>
    3720:	8180030b 	ldhu	r6,12(r16)
    3724:	80000c15 	stw	zero,48(r16)
    3728:	80c00417 	ldw	r3,16(r16)
    372c:	00bff6c4 	movi	r2,-37
    3730:	118c703a 	and	r6,r2,r6
    3734:	80000115 	stw	zero,4(r16)
    3738:	80c00015 	stw	r3,0(r16)
    373c:	003fe206 	br	36c8 <__swsetup_r+0xd4>
    3740:	00800244 	movi	r2,9
    3744:	88800015 	stw	r2,0(r17)
    3748:	31801014 	ori	r6,r6,64
    374c:	8180030d 	sth	r6,12(r16)
    3750:	00bfffc4 	movi	r2,-1
    3754:	003fc006 	br	3658 <__swsetup_r+0x64>

00003758 <quorem>:
    3758:	defff504 	addi	sp,sp,-44
    375c:	dc800315 	stw	r18,12(sp)
    3760:	20800417 	ldw	r2,16(r4)
    3764:	2c800417 	ldw	r18,16(r5)
    3768:	dfc00a15 	stw	ra,40(sp)
    376c:	df000915 	stw	fp,36(sp)
    3770:	ddc00815 	stw	r23,32(sp)
    3774:	dd800715 	stw	r22,28(sp)
    3778:	dd400615 	stw	r21,24(sp)
    377c:	dd000515 	stw	r20,20(sp)
    3780:	dcc00415 	stw	r19,16(sp)
    3784:	dc400215 	stw	r17,8(sp)
    3788:	dc000115 	stw	r16,4(sp)
    378c:	14806f16 	blt	r2,r18,394c <quorem+0x1f4>
    3790:	94bfffc4 	addi	r18,r18,-1
    3794:	902c90ba 	slli	r22,r18,2
    3798:	2c000504 	addi	r16,r5,20
    379c:	25000504 	addi	r20,r4,20
    37a0:	85a7883a 	add	r19,r16,r22
    37a4:	9f000017 	ldw	fp,0(r19)
    37a8:	a5ad883a 	add	r22,r20,r22
    37ac:	202b883a 	mov	r21,r4
    37b0:	b1000017 	ldw	r4,0(r22)
    37b4:	e7000044 	addi	fp,fp,1
    37b8:	282f883a 	mov	r23,r5
    37bc:	e00b883a 	mov	r5,fp
    37c0:	d9000015 	stw	r4,0(sp)
    37c4:	000ba080 	call	ba08 <__udivsi3>
    37c8:	d9000017 	ldw	r4,0(sp)
    37cc:	1023883a 	mov	r17,r2
    37d0:	27002a36 	bltu	r4,fp,387c <quorem+0x124>
    37d4:	800b883a 	mov	r5,r16
    37d8:	a009883a 	mov	r4,r20
    37dc:	0013883a 	mov	r9,zero
    37e0:	0007883a 	mov	r3,zero
    37e4:	2a000017 	ldw	r8,0(r5)
    37e8:	21800017 	ldw	r6,0(r4)
    37ec:	21000104 	addi	r4,r4,4
    37f0:	40bfffcc 	andi	r2,r8,65535
    37f4:	1445383a 	mul	r2,r2,r17
    37f8:	400ed43a 	srli	r7,r8,16
    37fc:	32bfffcc 	andi	r10,r6,65535
    3800:	1245883a 	add	r2,r2,r9
    3804:	1012d43a 	srli	r9,r2,16
    3808:	123fffcc 	andi	r8,r2,65535
    380c:	3c4f383a 	mul	r7,r7,r17
    3810:	1a07c83a 	sub	r3,r3,r8
    3814:	1a91883a 	add	r8,r3,r10
    3818:	3006d43a 	srli	r3,r6,16
    381c:	4005d43a 	srai	r2,r8,16
    3820:	3a4f883a 	add	r7,r7,r9
    3824:	39bfffcc 	andi	r6,r7,65535
    3828:	1987c83a 	sub	r3,r3,r6
    382c:	1887883a 	add	r3,r3,r2
    3830:	1804943a 	slli	r2,r3,16
    3834:	423fffcc 	andi	r8,r8,65535
    3838:	29400104 	addi	r5,r5,4
    383c:	1210b03a 	or	r8,r2,r8
    3840:	223fff15 	stw	r8,-4(r4)
    3844:	3812d43a 	srli	r9,r7,16
    3848:	1807d43a 	srai	r3,r3,16
    384c:	997fe52e 	bgeu	r19,r5,37e4 <quorem+0x8c>
    3850:	b0800017 	ldw	r2,0(r22)
    3854:	1000091e 	bne	r2,zero,387c <quorem+0x124>
    3858:	b5bfff04 	addi	r22,r22,-4
    385c:	a5800336 	bltu	r20,r22,386c <quorem+0x114>
    3860:	00000506 	br	3878 <quorem+0x120>
    3864:	94bfffc4 	addi	r18,r18,-1
    3868:	a580032e 	bgeu	r20,r22,3878 <quorem+0x120>
    386c:	b0800017 	ldw	r2,0(r22)
    3870:	b5bfff04 	addi	r22,r22,-4
    3874:	103ffb26 	beq	r2,zero,3864 <quorem+0x10c>
    3878:	ac800415 	stw	r18,16(r21)
    387c:	b80b883a 	mov	r5,r23
    3880:	a809883a 	mov	r4,r21
    3884:	00073240 	call	7324 <__mcmp>
    3888:	10002316 	blt	r2,zero,3918 <quorem+0x1c0>
    388c:	8c400044 	addi	r17,r17,1
    3890:	a00d883a 	mov	r6,r20
    3894:	0007883a 	mov	r3,zero
    3898:	81000017 	ldw	r4,0(r16)
    389c:	31400017 	ldw	r5,0(r6)
    38a0:	31800104 	addi	r6,r6,4
    38a4:	20bfffcc 	andi	r2,r4,65535
    38a8:	1887c83a 	sub	r3,r3,r2
    38ac:	28bfffcc 	andi	r2,r5,65535
    38b0:	1885883a 	add	r2,r3,r2
    38b4:	2008d43a 	srli	r4,r4,16
    38b8:	2806d43a 	srli	r3,r5,16
    38bc:	100fd43a 	srai	r7,r2,16
    38c0:	117fffcc 	andi	r5,r2,65535
    38c4:	1907c83a 	sub	r3,r3,r4
    38c8:	19c7883a 	add	r3,r3,r7
    38cc:	1804943a 	slli	r2,r3,16
    38d0:	84000104 	addi	r16,r16,4
    38d4:	1807d43a 	srai	r3,r3,16
    38d8:	1144b03a 	or	r2,r2,r5
    38dc:	30bfff15 	stw	r2,-4(r6)
    38e0:	9c3fed2e 	bgeu	r19,r16,3898 <quorem+0x140>
    38e4:	900490ba 	slli	r2,r18,2
    38e8:	a085883a 	add	r2,r20,r2
    38ec:	10c00017 	ldw	r3,0(r2)
    38f0:	1800091e 	bne	r3,zero,3918 <quorem+0x1c0>
    38f4:	10bfff04 	addi	r2,r2,-4
    38f8:	a0800336 	bltu	r20,r2,3908 <quorem+0x1b0>
    38fc:	00000506 	br	3914 <quorem+0x1bc>
    3900:	94bfffc4 	addi	r18,r18,-1
    3904:	a080032e 	bgeu	r20,r2,3914 <quorem+0x1bc>
    3908:	10c00017 	ldw	r3,0(r2)
    390c:	10bfff04 	addi	r2,r2,-4
    3910:	183ffb26 	beq	r3,zero,3900 <quorem+0x1a8>
    3914:	ac800415 	stw	r18,16(r21)
    3918:	8805883a 	mov	r2,r17
    391c:	dfc00a17 	ldw	ra,40(sp)
    3920:	df000917 	ldw	fp,36(sp)
    3924:	ddc00817 	ldw	r23,32(sp)
    3928:	dd800717 	ldw	r22,28(sp)
    392c:	dd400617 	ldw	r21,24(sp)
    3930:	dd000517 	ldw	r20,20(sp)
    3934:	dcc00417 	ldw	r19,16(sp)
    3938:	dc800317 	ldw	r18,12(sp)
    393c:	dc400217 	ldw	r17,8(sp)
    3940:	dc000117 	ldw	r16,4(sp)
    3944:	dec00b04 	addi	sp,sp,44
    3948:	f800283a 	ret
    394c:	0005883a 	mov	r2,zero
    3950:	003ff206 	br	391c <quorem+0x1c4>

00003954 <_dtoa_r>:
    3954:	20801017 	ldw	r2,64(r4)
    3958:	deffe204 	addi	sp,sp,-120
    395c:	ddc01b15 	stw	r23,108(sp)
    3960:	dcc01715 	stw	r19,92(sp)
    3964:	dc801615 	stw	r18,88(sp)
    3968:	dc401515 	stw	r17,84(sp)
    396c:	dc001415 	stw	r16,80(sp)
    3970:	dfc01d15 	stw	ra,116(sp)
    3974:	df001c15 	stw	fp,112(sp)
    3978:	dd801a15 	stw	r22,104(sp)
    397c:	dd401915 	stw	r21,100(sp)
    3980:	dd001815 	stw	r20,96(sp)
    3984:	d9c00215 	stw	r7,8(sp)
    3988:	dc002017 	ldw	r16,128(sp)
    398c:	202f883a 	mov	r23,r4
    3990:	3025883a 	mov	r18,r6
    3994:	2827883a 	mov	r19,r5
    3998:	3023883a 	mov	r17,r6
    399c:	10000826 	beq	r2,zero,39c0 <_dtoa_r+0x6c>
    39a0:	21801117 	ldw	r6,68(r4)
    39a4:	00c00044 	movi	r3,1
    39a8:	100b883a 	mov	r5,r2
    39ac:	1986983a 	sll	r3,r3,r6
    39b0:	11800115 	stw	r6,4(r2)
    39b4:	10c00215 	stw	r3,8(r2)
    39b8:	00069a80 	call	69a8 <_Bfree>
    39bc:	b8001015 	stw	zero,64(r23)
    39c0:	90018816 	blt	r18,zero,3fe4 <_dtoa_r+0x690>
    39c4:	80000015 	stw	zero,0(r16)
    39c8:	909ffc2c 	andhi	r2,r18,32752
    39cc:	00dffc34 	movhi	r3,32752
    39d0:	10c18d26 	beq	r2,r3,4008 <_dtoa_r+0x6b4>
    39d4:	000d883a 	mov	r6,zero
    39d8:	000f883a 	mov	r7,zero
    39dc:	9809883a 	mov	r4,r19
    39e0:	880b883a 	mov	r5,r17
    39e4:	000cc140 	call	cc14 <__eqdf2>
    39e8:	1000191e 	bne	r2,zero,3a50 <_dtoa_r+0xfc>
    39ec:	d8c01f17 	ldw	r3,124(sp)
    39f0:	00800044 	movi	r2,1
    39f4:	18800015 	stw	r2,0(r3)
    39f8:	d8802117 	ldw	r2,132(sp)
    39fc:	1002f926 	beq	r2,zero,45e4 <_dtoa_r+0xc90>
    3a00:	d9002117 	ldw	r4,132(sp)
    3a04:	008000b4 	movhi	r2,2
    3a08:	10ae4944 	addi	r2,r2,-18139
    3a0c:	00c000b4 	movhi	r3,2
    3a10:	20800015 	stw	r2,0(r4)
    3a14:	18ae4904 	addi	r2,r3,-18140
    3a18:	d8800115 	stw	r2,4(sp)
    3a1c:	d8800117 	ldw	r2,4(sp)
    3a20:	dfc01d17 	ldw	ra,116(sp)
    3a24:	df001c17 	ldw	fp,112(sp)
    3a28:	ddc01b17 	ldw	r23,108(sp)
    3a2c:	dd801a17 	ldw	r22,104(sp)
    3a30:	dd401917 	ldw	r21,100(sp)
    3a34:	dd001817 	ldw	r20,96(sp)
    3a38:	dcc01717 	ldw	r19,92(sp)
    3a3c:	dc801617 	ldw	r18,88(sp)
    3a40:	dc401517 	ldw	r17,84(sp)
    3a44:	dc001417 	ldw	r16,80(sp)
    3a48:	dec01e04 	addi	sp,sp,120
    3a4c:	f800283a 	ret
    3a50:	d8801204 	addi	r2,sp,72
    3a54:	9020d53a 	srli	r16,r18,20
    3a58:	d8800015 	stw	r2,0(sp)
    3a5c:	d9c01304 	addi	r7,sp,76
    3a60:	980b883a 	mov	r5,r19
    3a64:	880d883a 	mov	r6,r17
    3a68:	b809883a 	mov	r4,r23
    3a6c:	000770c0 	call	770c <__d2b>
    3a70:	1039883a 	mov	fp,r2
    3a74:	8001771e 	bne	r16,zero,4054 <_dtoa_r+0x700>
    3a78:	dd001217 	ldw	r20,72(sp)
    3a7c:	dc001317 	ldw	r16,76(sp)
    3a80:	a421883a 	add	r16,r20,r16
    3a84:	80810c84 	addi	r2,r16,1074
    3a88:	10c00850 	cmplti	r3,r2,33
    3a8c:	1802e51e 	bne	r3,zero,4624 <_dtoa_r+0xcd0>
    3a90:	01001004 	movi	r4,64
    3a94:	2085c83a 	sub	r2,r4,r2
    3a98:	81010484 	addi	r4,r16,1042
    3a9c:	90a4983a 	sll	r18,r18,r2
    3aa0:	9908d83a 	srl	r4,r19,r4
    3aa4:	9108b03a 	or	r4,r18,r4
    3aa8:	000df180 	call	df18 <__floatunsidf>
    3aac:	1009883a 	mov	r4,r2
    3ab0:	017f8434 	movhi	r5,65040
    3ab4:	00800044 	movi	r2,1
    3ab8:	194b883a 	add	r5,r3,r5
    3abc:	843fffc4 	addi	r16,r16,-1
    3ac0:	d8800a15 	stw	r2,40(sp)
    3ac4:	000d883a 	mov	r6,zero
    3ac8:	01cffe34 	movhi	r7,16376
    3acc:	000d4d80 	call	d4d8 <__subdf3>
    3ad0:	0198dbf4 	movhi	r6,25455
    3ad4:	01cff4f4 	movhi	r7,16339
    3ad8:	3190d844 	addi	r6,r6,17249
    3adc:	39e1e9c4 	addi	r7,r7,-30809
    3ae0:	1009883a 	mov	r4,r2
    3ae4:	180b883a 	mov	r5,r3
    3ae8:	000ce640 	call	ce64 <__muldf3>
    3aec:	01a2d874 	movhi	r6,35681
    3af0:	01cff1f4 	movhi	r7,16327
    3af4:	31b22cc4 	addi	r6,r6,-14157
    3af8:	39e28a04 	addi	r7,r7,-30168
    3afc:	180b883a 	mov	r5,r3
    3b00:	1009883a 	mov	r4,r2
    3b04:	000bac80 	call	bac8 <__adddf3>
    3b08:	8009883a 	mov	r4,r16
    3b0c:	102b883a 	mov	r21,r2
    3b10:	1825883a 	mov	r18,r3
    3b14:	000de600 	call	de60 <__floatsidf>
    3b18:	019427f4 	movhi	r6,20639
    3b1c:	01cff4f4 	movhi	r7,16339
    3b20:	319e7ec4 	addi	r6,r6,31227
    3b24:	39d104c4 	addi	r7,r7,17427
    3b28:	1009883a 	mov	r4,r2
    3b2c:	180b883a 	mov	r5,r3
    3b30:	000ce640 	call	ce64 <__muldf3>
    3b34:	100d883a 	mov	r6,r2
    3b38:	180f883a 	mov	r7,r3
    3b3c:	a809883a 	mov	r4,r21
    3b40:	900b883a 	mov	r5,r18
    3b44:	000bac80 	call	bac8 <__adddf3>
    3b48:	1009883a 	mov	r4,r2
    3b4c:	180b883a 	mov	r5,r3
    3b50:	1025883a 	mov	r18,r2
    3b54:	182d883a 	mov	r22,r3
    3b58:	000dde00 	call	dde0 <__fixdfsi>
    3b5c:	000d883a 	mov	r6,zero
    3b60:	000f883a 	mov	r7,zero
    3b64:	9009883a 	mov	r4,r18
    3b68:	b00b883a 	mov	r5,r22
    3b6c:	102b883a 	mov	r21,r2
    3b70:	d8800315 	stw	r2,12(sp)
    3b74:	000cd7c0 	call	cd7c <__ledf2>
    3b78:	10028f16 	blt	r2,zero,45b8 <_dtoa_r+0xc64>
    3b7c:	dc800317 	ldw	r18,12(sp)
    3b80:	a421c83a 	sub	r16,r20,r16
    3b84:	85bfffc4 	addi	r22,r16,-1
    3b88:	908005e8 	cmpgeui	r2,r18,23
    3b8c:	1002821e 	bne	r2,zero,4598 <_dtoa_r+0xc44>
    3b90:	900690fa 	slli	r3,r18,3
    3b94:	008000b4 	movhi	r2,2
    3b98:	10ae9204 	addi	r2,r2,-17848
    3b9c:	10c5883a 	add	r2,r2,r3
    3ba0:	11800017 	ldw	r6,0(r2)
    3ba4:	11c00117 	ldw	r7,4(r2)
    3ba8:	9809883a 	mov	r4,r19
    3bac:	880b883a 	mov	r5,r17
    3bb0:	000cd7c0 	call	cd7c <__ledf2>
    3bb4:	1002550e 	bge	r2,zero,450c <_dtoa_r+0xbb8>
    3bb8:	90bfffc4 	addi	r2,r18,-1
    3bbc:	d8800315 	stw	r2,12(sp)
    3bc0:	d8000915 	stw	zero,36(sp)
    3bc4:	b0027716 	blt	r22,zero,45a4 <_dtoa_r+0xc50>
    3bc8:	d8000615 	stw	zero,24(sp)
    3bcc:	d8800317 	ldw	r2,12(sp)
    3bd0:	1002510e 	bge	r2,zero,4518 <_dtoa_r+0xbc4>
    3bd4:	d8800317 	ldw	r2,12(sp)
    3bd8:	d8c00617 	ldw	r3,24(sp)
    3bdc:	d8000315 	stw	zero,12(sp)
    3be0:	d8800415 	stw	r2,16(sp)
    3be4:	1887c83a 	sub	r3,r3,r2
    3be8:	d8c00615 	stw	r3,24(sp)
    3bec:	0087c83a 	sub	r3,zero,r2
    3bf0:	d8c00815 	stw	r3,32(sp)
    3bf4:	d8c00217 	ldw	r3,8(sp)
    3bf8:	188002a8 	cmpgeui	r2,r3,10
    3bfc:	10024d1e 	bne	r2,zero,4534 <_dtoa_r+0xbe0>
    3c00:	18800190 	cmplti	r2,r3,6
    3c04:	10028b1e 	bne	r2,zero,4634 <_dtoa_r+0xce0>
    3c08:	18bfff04 	addi	r2,r3,-4
    3c0c:	d8800215 	stw	r2,8(sp)
    3c10:	0021883a 	mov	r16,zero
    3c14:	d8c00217 	ldw	r3,8(sp)
    3c18:	18800120 	cmpeqi	r2,r3,4
    3c1c:	10035d1e 	bne	r2,zero,4994 <_dtoa_r+0x1040>
    3c20:	18800160 	cmpeqi	r2,r3,5
    3c24:	10031b1e 	bne	r2,zero,4894 <_dtoa_r+0xf40>
    3c28:	188000a0 	cmpeqi	r2,r3,2
    3c2c:	10024d26 	beq	r2,zero,4564 <_dtoa_r+0xc10>
    3c30:	d8000715 	stw	zero,28(sp)
    3c34:	d8801e17 	ldw	r2,120(sp)
    3c38:	0083260e 	bge	zero,r2,48d4 <_dtoa_r+0xf80>
    3c3c:	d8800b15 	stw	r2,44(sp)
    3c40:	d8800515 	stw	r2,20(sp)
    3c44:	100d883a 	mov	r6,r2
    3c48:	b8001115 	stw	zero,68(r23)
    3c4c:	30800610 	cmplti	r2,r6,24
    3c50:	1004f11e 	bne	r2,zero,5018 <_dtoa_r+0x16c4>
    3c54:	00c00044 	movi	r3,1
    3c58:	00800104 	movi	r2,4
    3c5c:	1085883a 	add	r2,r2,r2
    3c60:	11000504 	addi	r4,r2,20
    3c64:	180b883a 	mov	r5,r3
    3c68:	18c00044 	addi	r3,r3,1
    3c6c:	313ffb2e 	bgeu	r6,r4,3c5c <_dtoa_r+0x308>
    3c70:	b9401115 	stw	r5,68(r23)
    3c74:	b809883a 	mov	r4,r23
    3c78:	00069040 	call	6904 <_Balloc>
    3c7c:	d8800115 	stw	r2,4(sp)
    3c80:	1004de26 	beq	r2,zero,4ffc <_dtoa_r+0x16a8>
    3c84:	d8800117 	ldw	r2,4(sp)
    3c88:	b8801015 	stw	r2,64(r23)
    3c8c:	d8800517 	ldw	r2,20(sp)
    3c90:	108003e8 	cmpgeui	r2,r2,15
    3c94:	1001021e 	bne	r2,zero,40a0 <_dtoa_r+0x74c>
    3c98:	80010126 	beq	r16,zero,40a0 <_dtoa_r+0x74c>
    3c9c:	d9000417 	ldw	r4,16(sp)
    3ca0:	01038b0e 	bge	zero,r4,4ad0 <_dtoa_r+0x117c>
    3ca4:	208003cc 	andi	r2,r4,15
    3ca8:	100690fa 	slli	r3,r2,3
    3cac:	2029d13a 	srai	r20,r4,4
    3cb0:	008000b4 	movhi	r2,2
    3cb4:	10ae9204 	addi	r2,r2,-17848
    3cb8:	10c5883a 	add	r2,r2,r3
    3cbc:	a0c0040c 	andi	r3,r20,16
    3cc0:	12800017 	ldw	r10,0(r2)
    3cc4:	12400117 	ldw	r9,4(r2)
    3cc8:	18032c26 	beq	r3,zero,497c <_dtoa_r+0x1028>
    3ccc:	008000b4 	movhi	r2,2
    3cd0:	10ae8804 	addi	r2,r2,-17888
    3cd4:	11800817 	ldw	r6,32(r2)
    3cd8:	11c00917 	ldw	r7,36(r2)
    3cdc:	9809883a 	mov	r4,r19
    3ce0:	880b883a 	mov	r5,r17
    3ce4:	da400e15 	stw	r9,56(sp)
    3ce8:	da800d15 	stw	r10,52(sp)
    3cec:	000c3b80 	call	c3b8 <__divdf3>
    3cf0:	da800d17 	ldw	r10,52(sp)
    3cf4:	da400e17 	ldw	r9,56(sp)
    3cf8:	a50003cc 	andi	r20,r20,15
    3cfc:	d8800c15 	stw	r2,48(sp)
    3d00:	1825883a 	mov	r18,r3
    3d04:	054000c4 	movi	r21,3
    3d08:	a0001126 	beq	r20,zero,3d50 <_dtoa_r+0x3fc>
    3d0c:	040000b4 	movhi	r16,2
    3d10:	842e8804 	addi	r16,r16,-17888
    3d14:	5009883a 	mov	r4,r10
    3d18:	480b883a 	mov	r5,r9
    3d1c:	a180004c 	andi	r6,r20,1
    3d20:	30000626 	beq	r6,zero,3d3c <_dtoa_r+0x3e8>
    3d24:	81800017 	ldw	r6,0(r16)
    3d28:	81c00117 	ldw	r7,4(r16)
    3d2c:	ad400044 	addi	r21,r21,1
    3d30:	000ce640 	call	ce64 <__muldf3>
    3d34:	1009883a 	mov	r4,r2
    3d38:	180b883a 	mov	r5,r3
    3d3c:	a029d07a 	srai	r20,r20,1
    3d40:	84000204 	addi	r16,r16,8
    3d44:	a03ff51e 	bne	r20,zero,3d1c <_dtoa_r+0x3c8>
    3d48:	2015883a 	mov	r10,r4
    3d4c:	2813883a 	mov	r9,r5
    3d50:	d9000c17 	ldw	r4,48(sp)
    3d54:	900b883a 	mov	r5,r18
    3d58:	500d883a 	mov	r6,r10
    3d5c:	480f883a 	mov	r7,r9
    3d60:	000c3b80 	call	c3b8 <__divdf3>
    3d64:	1021883a 	mov	r16,r2
    3d68:	1825883a 	mov	r18,r3
    3d6c:	d8800917 	ldw	r2,36(sp)
    3d70:	10000626 	beq	r2,zero,3d8c <_dtoa_r+0x438>
    3d74:	000d883a 	mov	r6,zero
    3d78:	01cffc34 	movhi	r7,16368
    3d7c:	8009883a 	mov	r4,r16
    3d80:	900b883a 	mov	r5,r18
    3d84:	000cd7c0 	call	cd7c <__ledf2>
    3d88:	10044416 	blt	r2,zero,4e9c <_dtoa_r+0x1548>
    3d8c:	a809883a 	mov	r4,r21
    3d90:	000de600 	call	de60 <__floatsidf>
    3d94:	800d883a 	mov	r6,r16
    3d98:	900f883a 	mov	r7,r18
    3d9c:	1009883a 	mov	r4,r2
    3da0:	180b883a 	mov	r5,r3
    3da4:	000ce640 	call	ce64 <__muldf3>
    3da8:	000d883a 	mov	r6,zero
    3dac:	01d00734 	movhi	r7,16412
    3db0:	1009883a 	mov	r4,r2
    3db4:	180b883a 	mov	r5,r3
    3db8:	000bac80 	call	bac8 <__adddf3>
    3dbc:	1029883a 	mov	r20,r2
    3dc0:	00bf3034 	movhi	r2,64704
    3dc4:	1885883a 	add	r2,r3,r2
    3dc8:	d8800c15 	stw	r2,48(sp)
    3dcc:	d8800517 	ldw	r2,20(sp)
    3dd0:	10032226 	beq	r2,zero,4a5c <_dtoa_r+0x1108>
    3dd4:	d8800417 	ldw	r2,16(sp)
    3dd8:	d8801115 	stw	r2,68(sp)
    3ddc:	d8800517 	ldw	r2,20(sp)
    3de0:	d8800d15 	stw	r2,52(sp)
    3de4:	d8800d17 	ldw	r2,52(sp)
    3de8:	900b883a 	mov	r5,r18
    3dec:	8009883a 	mov	r4,r16
    3df0:	10bfffc4 	addi	r2,r2,-1
    3df4:	100690fa 	slli	r3,r2,3
    3df8:	008000b4 	movhi	r2,2
    3dfc:	10ae9204 	addi	r2,r2,-17848
    3e00:	10c5883a 	add	r2,r2,r3
    3e04:	12800017 	ldw	r10,0(r2)
    3e08:	12c00117 	ldw	r11,4(r2)
    3e0c:	da800f15 	stw	r10,60(sp)
    3e10:	dac00e15 	stw	r11,56(sp)
    3e14:	000dde00 	call	dde0 <__fixdfsi>
    3e18:	1009883a 	mov	r4,r2
    3e1c:	10800c04 	addi	r2,r2,48
    3e20:	d8801015 	stw	r2,64(sp)
    3e24:	000de600 	call	de60 <__floatsidf>
    3e28:	8009883a 	mov	r4,r16
    3e2c:	100d883a 	mov	r6,r2
    3e30:	180f883a 	mov	r7,r3
    3e34:	900b883a 	mov	r5,r18
    3e38:	000d4d80 	call	d4d8 <__subdf3>
    3e3c:	d9000117 	ldw	r4,4(sp)
    3e40:	dac00e17 	ldw	r11,56(sp)
    3e44:	da800f17 	ldw	r10,60(sp)
    3e48:	1825883a 	mov	r18,r3
    3e4c:	d8c00717 	ldw	r3,28(sp)
    3e50:	25400044 	addi	r21,r4,1
    3e54:	1021883a 	mov	r16,r2
    3e58:	500d883a 	mov	r6,r10
    3e5c:	580f883a 	mov	r7,r11
    3e60:	1803b626 	beq	r3,zero,4d3c <_dtoa_r+0x13e8>
    3e64:	0009883a 	mov	r4,zero
    3e68:	014ff834 	movhi	r5,16352
    3e6c:	000c3b80 	call	c3b8 <__divdf3>
    3e70:	d9c00c17 	ldw	r7,48(sp)
    3e74:	a00d883a 	mov	r6,r20
    3e78:	1009883a 	mov	r4,r2
    3e7c:	180b883a 	mov	r5,r3
    3e80:	000d4d80 	call	d4d8 <__subdf3>
    3e84:	d9000117 	ldw	r4,4(sp)
    3e88:	1029883a 	mov	r20,r2
    3e8c:	d8801017 	ldw	r2,64(sp)
    3e90:	800d883a 	mov	r6,r16
    3e94:	900f883a 	mov	r7,r18
    3e98:	20800005 	stb	r2,0(r4)
    3e9c:	180b883a 	mov	r5,r3
    3ea0:	a009883a 	mov	r4,r20
    3ea4:	d8c00c15 	stw	r3,48(sp)
    3ea8:	000cc940 	call	cc94 <__gedf2>
    3eac:	0083e716 	blt	zero,r2,4e4c <_dtoa_r+0x14f8>
    3eb0:	0005883a 	mov	r2,zero
    3eb4:	dd800e15 	stw	r22,56(sp)
    3eb8:	dc400f15 	stw	r17,60(sp)
    3ebc:	dd800d17 	ldw	r22,52(sp)
    3ec0:	dc400c17 	ldw	r17,48(sp)
    3ec4:	ddc00d15 	stw	r23,52(sp)
    3ec8:	dcc00c15 	stw	r19,48(sp)
    3ecc:	1027883a 	mov	r19,r2
    3ed0:	00002606 	br	3f6c <_dtoa_r+0x618>
    3ed4:	9cc00044 	addi	r19,r19,1
    3ed8:	9d806d0e 	bge	r19,r22,4090 <_dtoa_r+0x73c>
    3edc:	a009883a 	mov	r4,r20
    3ee0:	880b883a 	mov	r5,r17
    3ee4:	000d883a 	mov	r6,zero
    3ee8:	01d00934 	movhi	r7,16420
    3eec:	000ce640 	call	ce64 <__muldf3>
    3ef0:	000d883a 	mov	r6,zero
    3ef4:	01d00934 	movhi	r7,16420
    3ef8:	8009883a 	mov	r4,r16
    3efc:	900b883a 	mov	r5,r18
    3f00:	1029883a 	mov	r20,r2
    3f04:	1823883a 	mov	r17,r3
    3f08:	000ce640 	call	ce64 <__muldf3>
    3f0c:	180b883a 	mov	r5,r3
    3f10:	1009883a 	mov	r4,r2
    3f14:	1821883a 	mov	r16,r3
    3f18:	1025883a 	mov	r18,r2
    3f1c:	000dde00 	call	dde0 <__fixdfsi>
    3f20:	1009883a 	mov	r4,r2
    3f24:	102f883a 	mov	r23,r2
    3f28:	000de600 	call	de60 <__floatsidf>
    3f2c:	9009883a 	mov	r4,r18
    3f30:	800b883a 	mov	r5,r16
    3f34:	100d883a 	mov	r6,r2
    3f38:	180f883a 	mov	r7,r3
    3f3c:	000d4d80 	call	d4d8 <__subdf3>
    3f40:	ad400044 	addi	r21,r21,1
    3f44:	ba000c04 	addi	r8,r23,48
    3f48:	aa3fffc5 	stb	r8,-1(r21)
    3f4c:	a00d883a 	mov	r6,r20
    3f50:	880f883a 	mov	r7,r17
    3f54:	1009883a 	mov	r4,r2
    3f58:	180b883a 	mov	r5,r3
    3f5c:	1021883a 	mov	r16,r2
    3f60:	1825883a 	mov	r18,r3
    3f64:	000cd7c0 	call	cd7c <__ledf2>
    3f68:	10040516 	blt	r2,zero,4f80 <_dtoa_r+0x162c>
    3f6c:	800d883a 	mov	r6,r16
    3f70:	900f883a 	mov	r7,r18
    3f74:	0009883a 	mov	r4,zero
    3f78:	014ffc34 	movhi	r5,16368
    3f7c:	000d4d80 	call	d4d8 <__subdf3>
    3f80:	a00d883a 	mov	r6,r20
    3f84:	880f883a 	mov	r7,r17
    3f88:	1009883a 	mov	r4,r2
    3f8c:	180b883a 	mov	r5,r3
    3f90:	000cd7c0 	call	cd7c <__ledf2>
    3f94:	103fcf0e 	bge	r2,zero,3ed4 <_dtoa_r+0x580>
    3f98:	d8801117 	ldw	r2,68(sp)
    3f9c:	ddc00d17 	ldw	r23,52(sp)
    3fa0:	d9000117 	ldw	r4,4(sp)
    3fa4:	10800044 	addi	r2,r2,1
    3fa8:	d8800415 	stw	r2,16(sp)
    3fac:	a829883a 	mov	r20,r21
    3fb0:	00000106 	br	3fb8 <_dtoa_r+0x664>
    3fb4:	a103da26 	beq	r20,r4,4f20 <_dtoa_r+0x15cc>
    3fb8:	a0ffffc3 	ldbu	r3,-1(r20)
    3fbc:	a02b883a 	mov	r21,r20
    3fc0:	a53fffc4 	addi	r20,r20,-1
    3fc4:	18803fcc 	andi	r2,r3,255
    3fc8:	1080201c 	xori	r2,r2,128
    3fcc:	10bfe004 	addi	r2,r2,-128
    3fd0:	10800e60 	cmpeqi	r2,r2,57
    3fd4:	103ff71e 	bne	r2,zero,3fb4 <_dtoa_r+0x660>
    3fd8:	18c00044 	addi	r3,r3,1
    3fdc:	a0c00005 	stb	r3,0(r20)
    3fe0:	00013f06 	br	44e0 <_dtoa_r+0xb8c>
    3fe4:	04600034 	movhi	r17,32768
    3fe8:	8c7fffc4 	addi	r17,r17,-1
    3fec:	9462703a 	and	r17,r18,r17
    3ff0:	00800044 	movi	r2,1
    3ff4:	8825883a 	mov	r18,r17
    3ff8:	80800015 	stw	r2,0(r16)
    3ffc:	00dffc34 	movhi	r3,32752
    4000:	909ffc2c 	andhi	r2,r18,32752
    4004:	10fe731e 	bne	r2,r3,39d4 <_dtoa_r+0x80>
    4008:	d9001f17 	ldw	r4,124(sp)
    400c:	00800434 	movhi	r2,16
    4010:	10bfffc4 	addi	r2,r2,-1
    4014:	9084703a 	and	r2,r18,r2
    4018:	00c9c3c4 	movi	r3,9999
    401c:	20c00015 	stw	r3,0(r4)
    4020:	14e6b03a 	or	r19,r2,r19
    4024:	9800141e 	bne	r19,zero,4078 <_dtoa_r+0x724>
    4028:	d8802117 	ldw	r2,132(sp)
    402c:	10041226 	beq	r2,zero,5078 <_dtoa_r+0x1724>
    4030:	008000b4 	movhi	r2,2
    4034:	1007883a 	mov	r3,r2
    4038:	18ee5304 	addi	r3,r3,-18100
    403c:	008000b4 	movhi	r2,2
    4040:	d8c00115 	stw	r3,4(sp)
    4044:	10ae5504 	addi	r2,r2,-18092
    4048:	d8c02117 	ldw	r3,132(sp)
    404c:	18800015 	stw	r2,0(r3)
    4050:	003e7206 	br	3a1c <_dtoa_r+0xc8>
    4054:	01400434 	movhi	r5,16
    4058:	297fffc4 	addi	r5,r5,-1
    405c:	894a703a 	and	r5,r17,r5
    4060:	dd001217 	ldw	r20,72(sp)
    4064:	9809883a 	mov	r4,r19
    4068:	294ffc34 	orhi	r5,r5,16368
    406c:	843f0044 	addi	r16,r16,-1023
    4070:	d8000a15 	stw	zero,40(sp)
    4074:	003e9306 	br	3ac4 <_dtoa_r+0x170>
    4078:	d8802117 	ldw	r2,132(sp)
    407c:	1001fe1e 	bne	r2,zero,4878 <_dtoa_r+0xf24>
    4080:	008000b4 	movhi	r2,2
    4084:	10ae5204 	addi	r2,r2,-18104
    4088:	d8800115 	stw	r2,4(sp)
    408c:	003e6306 	br	3a1c <_dtoa_r+0xc8>
    4090:	dd800e17 	ldw	r22,56(sp)
    4094:	ddc00d17 	ldw	r23,52(sp)
    4098:	dc400f17 	ldw	r17,60(sp)
    409c:	dcc00c17 	ldw	r19,48(sp)
    40a0:	d8801317 	ldw	r2,76(sp)
    40a4:	10006e16 	blt	r2,zero,4260 <_dtoa_r+0x90c>
    40a8:	d9000417 	ldw	r4,16(sp)
    40ac:	20c003c8 	cmpgei	r3,r4,15
    40b0:	18006b1e 	bne	r3,zero,4260 <_dtoa_r+0x90c>
    40b4:	200690fa 	slli	r3,r4,3
    40b8:	008000b4 	movhi	r2,2
    40bc:	10ae9204 	addi	r2,r2,-17848
    40c0:	10c5883a 	add	r2,r2,r3
    40c4:	14000017 	ldw	r16,0(r2)
    40c8:	14800117 	ldw	r18,4(r2)
    40cc:	d8801e17 	ldw	r2,120(sp)
    40d0:	1000150e 	bge	r2,zero,4128 <_dtoa_r+0x7d4>
    40d4:	d8800517 	ldw	r2,20(sp)
    40d8:	00801316 	blt	zero,r2,4128 <_dtoa_r+0x7d4>
    40dc:	d8800517 	ldw	r2,20(sp)
    40e0:	1002721e 	bne	r2,zero,4aac <_dtoa_r+0x1158>
    40e4:	8009883a 	mov	r4,r16
    40e8:	000d883a 	mov	r6,zero
    40ec:	01d00534 	movhi	r7,16404
    40f0:	900b883a 	mov	r5,r18
    40f4:	000ce640 	call	ce64 <__muldf3>
    40f8:	100d883a 	mov	r6,r2
    40fc:	180f883a 	mov	r7,r3
    4100:	9809883a 	mov	r4,r19
    4104:	880b883a 	mov	r5,r17
    4108:	000cd7c0 	call	cd7c <__ledf2>
    410c:	0029883a 	mov	r20,zero
    4110:	0021883a 	mov	r16,zero
    4114:	00820216 	blt	zero,r2,4920 <_dtoa_r+0xfcc>
    4118:	d8801e17 	ldw	r2,120(sp)
    411c:	dd400117 	ldw	r21,4(sp)
    4120:	00a2303a 	nor	r17,zero,r2
    4124:	00020406 	br	4938 <_dtoa_r+0xfe4>
    4128:	800d883a 	mov	r6,r16
    412c:	900f883a 	mov	r7,r18
    4130:	9809883a 	mov	r4,r19
    4134:	880b883a 	mov	r5,r17
    4138:	000c3b80 	call	c3b8 <__divdf3>
    413c:	180b883a 	mov	r5,r3
    4140:	1009883a 	mov	r4,r2
    4144:	000dde00 	call	dde0 <__fixdfsi>
    4148:	1009883a 	mov	r4,r2
    414c:	102b883a 	mov	r21,r2
    4150:	000de600 	call	de60 <__floatsidf>
    4154:	800d883a 	mov	r6,r16
    4158:	900f883a 	mov	r7,r18
    415c:	1009883a 	mov	r4,r2
    4160:	180b883a 	mov	r5,r3
    4164:	000ce640 	call	ce64 <__muldf3>
    4168:	100d883a 	mov	r6,r2
    416c:	9809883a 	mov	r4,r19
    4170:	880b883a 	mov	r5,r17
    4174:	180f883a 	mov	r7,r3
    4178:	000d4d80 	call	d4d8 <__subdf3>
    417c:	d9800117 	ldw	r6,4(sp)
    4180:	dd800517 	ldw	r22,20(sp)
    4184:	1009883a 	mov	r4,r2
    4188:	a8800c04 	addi	r2,r21,48
    418c:	30800005 	stb	r2,0(r6)
    4190:	b0800060 	cmpeqi	r2,r22,1
    4194:	180b883a 	mov	r5,r3
    4198:	35000044 	addi	r20,r6,1
    419c:	10029f1e 	bne	r2,zero,4c1c <_dtoa_r+0x12c8>
    41a0:	04400044 	movi	r17,1
    41a4:	ddc00215 	stw	r23,8(sp)
    41a8:	00001c06 	br	421c <_dtoa_r+0x8c8>
    41ac:	800d883a 	mov	r6,r16
    41b0:	900f883a 	mov	r7,r18
    41b4:	a809883a 	mov	r4,r21
    41b8:	980b883a 	mov	r5,r19
    41bc:	000c3b80 	call	c3b8 <__divdf3>
    41c0:	180b883a 	mov	r5,r3
    41c4:	1009883a 	mov	r4,r2
    41c8:	000dde00 	call	dde0 <__fixdfsi>
    41cc:	1009883a 	mov	r4,r2
    41d0:	102f883a 	mov	r23,r2
    41d4:	000de600 	call	de60 <__floatsidf>
    41d8:	800d883a 	mov	r6,r16
    41dc:	900f883a 	mov	r7,r18
    41e0:	1009883a 	mov	r4,r2
    41e4:	180b883a 	mov	r5,r3
    41e8:	000ce640 	call	ce64 <__muldf3>
    41ec:	a809883a 	mov	r4,r21
    41f0:	980b883a 	mov	r5,r19
    41f4:	100d883a 	mov	r6,r2
    41f8:	180f883a 	mov	r7,r3
    41fc:	000d4d80 	call	d4d8 <__subdf3>
    4200:	b9000c04 	addi	r4,r23,48
    4204:	a1000005 	stb	r4,0(r20)
    4208:	8c400044 	addi	r17,r17,1
    420c:	a5000044 	addi	r20,r20,1
    4210:	1009883a 	mov	r4,r2
    4214:	180b883a 	mov	r5,r3
    4218:	8d827e26 	beq	r17,r22,4c14 <_dtoa_r+0x12c0>
    421c:	000d883a 	mov	r6,zero
    4220:	01d00934 	movhi	r7,16420
    4224:	000ce640 	call	ce64 <__muldf3>
    4228:	000d883a 	mov	r6,zero
    422c:	000f883a 	mov	r7,zero
    4230:	1009883a 	mov	r4,r2
    4234:	180b883a 	mov	r5,r3
    4238:	102b883a 	mov	r21,r2
    423c:	1827883a 	mov	r19,r3
    4240:	000cc140 	call	cc14 <__eqdf2>
    4244:	103fd91e 	bne	r2,zero,41ac <_dtoa_r+0x858>
    4248:	d8800417 	ldw	r2,16(sp)
    424c:	ddc00217 	ldw	r23,8(sp)
    4250:	a02b883a 	mov	r21,r20
    4254:	10800044 	addi	r2,r2,1
    4258:	d8800415 	stw	r2,16(sp)
    425c:	0000a006 	br	44e0 <_dtoa_r+0xb8c>
    4260:	d8c00717 	ldw	r3,28(sp)
    4264:	1800e326 	beq	r3,zero,45f4 <_dtoa_r+0xca0>
    4268:	d8c00217 	ldw	r3,8(sp)
    426c:	18c00088 	cmpgei	r3,r3,2
    4270:	1801e026 	beq	r3,zero,49f4 <_dtoa_r+0x10a0>
    4274:	d8800517 	ldw	r2,20(sp)
    4278:	153fffc4 	addi	r20,r2,-1
    427c:	d8800817 	ldw	r2,32(sp)
    4280:	1501bc0e 	bge	r2,r20,4974 <_dtoa_r+0x1020>
    4284:	d8800817 	ldw	r2,32(sp)
    4288:	d8c00317 	ldw	r3,12(sp)
    428c:	dd000815 	stw	r20,32(sp)
    4290:	a085c83a 	sub	r2,r20,r2
    4294:	1885883a 	add	r2,r3,r2
    4298:	d8800315 	stw	r2,12(sp)
    429c:	0029883a 	mov	r20,zero
    42a0:	d8800517 	ldw	r2,20(sp)
    42a4:	10028b16 	blt	r2,zero,4cd4 <_dtoa_r+0x1380>
    42a8:	d8c00617 	ldw	r3,24(sp)
    42ac:	b0ad883a 	add	r22,r22,r2
    42b0:	1885883a 	add	r2,r3,r2
    42b4:	1825883a 	mov	r18,r3
    42b8:	d8800615 	stw	r2,24(sp)
    42bc:	01400044 	movi	r5,1
    42c0:	b809883a 	mov	r4,r23
    42c4:	0006d500 	call	6d50 <__i2b>
    42c8:	1021883a 	mov	r16,r2
    42cc:	0480080e 	bge	zero,r18,42f0 <_dtoa_r+0x99c>
    42d0:	0580070e 	bge	zero,r22,42f0 <_dtoa_r+0x99c>
    42d4:	9005883a 	mov	r2,r18
    42d8:	b4819e16 	blt	r22,r18,4954 <_dtoa_r+0x1000>
    42dc:	d8c00617 	ldw	r3,24(sp)
    42e0:	90a5c83a 	sub	r18,r18,r2
    42e4:	b0adc83a 	sub	r22,r22,r2
    42e8:	1887c83a 	sub	r3,r3,r2
    42ec:	d8c00615 	stw	r3,24(sp)
    42f0:	d8800817 	ldw	r2,32(sp)
    42f4:	10001426 	beq	r2,zero,4348 <_dtoa_r+0x9f4>
    42f8:	d8800717 	ldw	r2,28(sp)
    42fc:	1001ee26 	beq	r2,zero,4ab8 <_dtoa_r+0x1164>
    4300:	05000e0e 	bge	zero,r20,433c <_dtoa_r+0x9e8>
    4304:	800b883a 	mov	r5,r16
    4308:	a00d883a 	mov	r6,r20
    430c:	b809883a 	mov	r4,r23
    4310:	00070540 	call	7054 <__pow5mult>
    4314:	e00d883a 	mov	r6,fp
    4318:	100b883a 	mov	r5,r2
    431c:	b809883a 	mov	r4,r23
    4320:	1021883a 	mov	r16,r2
    4324:	0006e000 	call	6e00 <__multiply>
    4328:	102b883a 	mov	r21,r2
    432c:	e00b883a 	mov	r5,fp
    4330:	b809883a 	mov	r4,r23
    4334:	00069a80 	call	69a8 <_Bfree>
    4338:	a839883a 	mov	fp,r21
    433c:	d8800817 	ldw	r2,32(sp)
    4340:	150dc83a 	sub	r6,r2,r20
    4344:	15025e1e 	bne	r2,r20,4cc0 <_dtoa_r+0x136c>
    4348:	01400044 	movi	r5,1
    434c:	b809883a 	mov	r4,r23
    4350:	0006d500 	call	6d50 <__i2b>
    4354:	d9800317 	ldw	r6,12(sp)
    4358:	1029883a 	mov	r20,r2
    435c:	0180b716 	blt	zero,r6,463c <_dtoa_r+0xce8>
    4360:	d8800217 	ldw	r2,8(sp)
    4364:	10800088 	cmpgei	r2,r2,2
    4368:	10014d26 	beq	r2,zero,48a0 <_dtoa_r+0xf4c>
    436c:	0023883a 	mov	r17,zero
    4370:	d8c00317 	ldw	r3,12(sp)
    4374:	00800044 	movi	r2,1
    4378:	1800b81e 	bne	r3,zero,465c <_dtoa_r+0xd08>
    437c:	1585883a 	add	r2,r2,r22
    4380:	108007cc 	andi	r2,r2,31
    4384:	1000a526 	beq	r2,zero,461c <_dtoa_r+0xcc8>
    4388:	00c00804 	movi	r3,32
    438c:	1887c83a 	sub	r3,r3,r2
    4390:	19000150 	cmplti	r4,r3,5
    4394:	20033c1e 	bne	r4,zero,5088 <_dtoa_r+0x1734>
    4398:	00c00704 	movi	r3,28
    439c:	1885c83a 	sub	r2,r3,r2
    43a0:	d8c00617 	ldw	r3,24(sp)
    43a4:	90a5883a 	add	r18,r18,r2
    43a8:	b0ad883a 	add	r22,r22,r2
    43ac:	1887883a 	add	r3,r3,r2
    43b0:	d8c00615 	stw	r3,24(sp)
    43b4:	d8800617 	ldw	r2,24(sp)
    43b8:	00809216 	blt	zero,r2,4604 <_dtoa_r+0xcb0>
    43bc:	0580050e 	bge	zero,r22,43d4 <_dtoa_r+0xa80>
    43c0:	a00b883a 	mov	r5,r20
    43c4:	b00d883a 	mov	r6,r22
    43c8:	b809883a 	mov	r4,r23
    43cc:	000719c0 	call	719c <__lshift>
    43d0:	1029883a 	mov	r20,r2
    43d4:	d8800917 	ldw	r2,36(sp)
    43d8:	1001151e 	bne	r2,zero,4830 <_dtoa_r+0xedc>
    43dc:	d8800517 	ldw	r2,20(sp)
    43e0:	0081020e 	bge	zero,r2,47ec <_dtoa_r+0xe98>
    43e4:	d8800717 	ldw	r2,28(sp)
    43e8:	1000af1e 	bne	r2,zero,46a8 <_dtoa_r+0xd54>
    43ec:	d8800417 	ldw	r2,16(sp)
    43f0:	10800044 	addi	r2,r2,1
    43f4:	d8800415 	stw	r2,16(sp)
    43f8:	dc800517 	ldw	r18,20(sp)
    43fc:	dd400117 	ldw	r21,4(sp)
    4400:	04400044 	movi	r17,1
    4404:	00000706 	br	4424 <_dtoa_r+0xad0>
    4408:	e00b883a 	mov	r5,fp
    440c:	000f883a 	mov	r7,zero
    4410:	01800284 	movi	r6,10
    4414:	b809883a 	mov	r4,r23
    4418:	00069cc0 	call	69cc <__multadd>
    441c:	1039883a 	mov	fp,r2
    4420:	8c400044 	addi	r17,r17,1
    4424:	a00b883a 	mov	r5,r20
    4428:	e009883a 	mov	r4,fp
    442c:	00037580 	call	3758 <quorem>
    4430:	14c00c04 	addi	r19,r2,48
    4434:	ac45883a 	add	r2,r21,r17
    4438:	14ffffc5 	stb	r19,-1(r2)
    443c:	8cbff216 	blt	r17,r18,4408 <_dtoa_r+0xab4>
    4440:	d8800517 	ldw	r2,20(sp)
    4444:	0081510e 	bge	zero,r2,498c <_dtoa_r+0x1038>
    4448:	d8c00117 	ldw	r3,4(sp)
    444c:	0023883a 	mov	r17,zero
    4450:	18ab883a 	add	r21,r3,r2
    4454:	e00b883a 	mov	r5,fp
    4458:	01800044 	movi	r6,1
    445c:	b809883a 	mov	r4,r23
    4460:	000719c0 	call	719c <__lshift>
    4464:	1009883a 	mov	r4,r2
    4468:	a00b883a 	mov	r5,r20
    446c:	1039883a 	mov	fp,r2
    4470:	00073240 	call	7324 <__mcmp>
    4474:	a93fffc3 	ldbu	r4,-1(r21)
    4478:	0081490e 	bge	zero,r2,49a0 <_dtoa_r+0x104c>
    447c:	d9400117 	ldw	r5,4(sp)
    4480:	00000306 	br	4490 <_dtoa_r+0xb3c>
    4484:	19415426 	beq	r3,r5,49d8 <_dtoa_r+0x1084>
    4488:	193fffc3 	ldbu	r4,-1(r3)
    448c:	182b883a 	mov	r21,r3
    4490:	20803fcc 	andi	r2,r4,255
    4494:	1080201c 	xori	r2,r2,128
    4498:	10bfe004 	addi	r2,r2,-128
    449c:	10800e60 	cmpeqi	r2,r2,57
    44a0:	a8ffffc4 	addi	r3,r21,-1
    44a4:	103ff71e 	bne	r2,zero,4484 <_dtoa_r+0xb30>
    44a8:	21000044 	addi	r4,r4,1
    44ac:	19000005 	stb	r4,0(r3)
    44b0:	a00b883a 	mov	r5,r20
    44b4:	b809883a 	mov	r4,r23
    44b8:	00069a80 	call	69a8 <_Bfree>
    44bc:	80000826 	beq	r16,zero,44e0 <_dtoa_r+0xb8c>
    44c0:	88000426 	beq	r17,zero,44d4 <_dtoa_r+0xb80>
    44c4:	8c000326 	beq	r17,r16,44d4 <_dtoa_r+0xb80>
    44c8:	880b883a 	mov	r5,r17
    44cc:	b809883a 	mov	r4,r23
    44d0:	00069a80 	call	69a8 <_Bfree>
    44d4:	800b883a 	mov	r5,r16
    44d8:	b809883a 	mov	r4,r23
    44dc:	00069a80 	call	69a8 <_Bfree>
    44e0:	e00b883a 	mov	r5,fp
    44e4:	b809883a 	mov	r4,r23
    44e8:	00069a80 	call	69a8 <_Bfree>
    44ec:	d8801f17 	ldw	r2,124(sp)
    44f0:	d8c00417 	ldw	r3,16(sp)
    44f4:	a8000005 	stb	zero,0(r21)
    44f8:	10c00015 	stw	r3,0(r2)
    44fc:	d8802117 	ldw	r2,132(sp)
    4500:	103d4626 	beq	r2,zero,3a1c <_dtoa_r+0xc8>
    4504:	15400015 	stw	r21,0(r2)
    4508:	003d4406 	br	3a1c <_dtoa_r+0xc8>
    450c:	d8000915 	stw	zero,36(sp)
    4510:	b0002416 	blt	r22,zero,45a4 <_dtoa_r+0xc50>
    4514:	d8000615 	stw	zero,24(sp)
    4518:	d8800317 	ldw	r2,12(sp)
    451c:	d8c00217 	ldw	r3,8(sp)
    4520:	d8000815 	stw	zero,32(sp)
    4524:	b0ad883a 	add	r22,r22,r2
    4528:	d8800415 	stw	r2,16(sp)
    452c:	188002a8 	cmpgeui	r2,r3,10
    4530:	103db326 	beq	r2,zero,3c00 <_dtoa_r+0x2ac>
    4534:	00800044 	movi	r2,1
    4538:	d8800715 	stw	r2,28(sp)
    453c:	00bfffc4 	movi	r2,-1
    4540:	04000044 	movi	r16,1
    4544:	d8000215 	stw	zero,8(sp)
    4548:	d8800515 	stw	r2,20(sp)
    454c:	d8001e15 	stw	zero,120(sp)
    4550:	d8800517 	ldw	r2,20(sp)
    4554:	b8001115 	stw	zero,68(r23)
    4558:	000b883a 	mov	r5,zero
    455c:	d8800b15 	stw	r2,44(sp)
    4560:	003dc406 	br	3c74 <_dtoa_r+0x320>
    4564:	188000e0 	cmpeqi	r2,r3,3
    4568:	d8000715 	stw	zero,28(sp)
    456c:	1002ac26 	beq	r2,zero,5020 <_dtoa_r+0x16cc>
    4570:	d8801e17 	ldw	r2,120(sp)
    4574:	d8c00417 	ldw	r3,16(sp)
    4578:	10c5883a 	add	r2,r2,r3
    457c:	d8800b15 	stw	r2,44(sp)
    4580:	10800044 	addi	r2,r2,1
    4584:	d8800515 	stw	r2,20(sp)
    4588:	100d883a 	mov	r6,r2
    458c:	00bdae16 	blt	zero,r2,3c48 <_dtoa_r+0x2f4>
    4590:	01800044 	movi	r6,1
    4594:	003dac06 	br	3c48 <_dtoa_r+0x2f4>
    4598:	00800044 	movi	r2,1
    459c:	d8800915 	stw	r2,36(sp)
    45a0:	b03d890e 	bge	r22,zero,3bc8 <_dtoa_r+0x274>
    45a4:	00800044 	movi	r2,1
    45a8:	1405c83a 	sub	r2,r2,r16
    45ac:	d8800615 	stw	r2,24(sp)
    45b0:	002d883a 	mov	r22,zero
    45b4:	003d8506 	br	3bcc <_dtoa_r+0x278>
    45b8:	a809883a 	mov	r4,r21
    45bc:	000de600 	call	de60 <__floatsidf>
    45c0:	900d883a 	mov	r6,r18
    45c4:	b00f883a 	mov	r7,r22
    45c8:	1009883a 	mov	r4,r2
    45cc:	180b883a 	mov	r5,r3
    45d0:	000cc140 	call	cc14 <__eqdf2>
    45d4:	103d6926 	beq	r2,zero,3b7c <_dtoa_r+0x228>
    45d8:	a8bfffc4 	addi	r2,r21,-1
    45dc:	d8800315 	stw	r2,12(sp)
    45e0:	003d6606 	br	3b7c <_dtoa_r+0x228>
    45e4:	008000b4 	movhi	r2,2
    45e8:	10ae4904 	addi	r2,r2,-18140
    45ec:	d8800115 	stw	r2,4(sp)
    45f0:	003d0a06 	br	3a1c <_dtoa_r+0xc8>
    45f4:	dd000817 	ldw	r20,32(sp)
    45f8:	dc800617 	ldw	r18,24(sp)
    45fc:	0021883a 	mov	r16,zero
    4600:	003f3206 	br	42cc <_dtoa_r+0x978>
    4604:	e00b883a 	mov	r5,fp
    4608:	100d883a 	mov	r6,r2
    460c:	b809883a 	mov	r4,r23
    4610:	000719c0 	call	719c <__lshift>
    4614:	1039883a 	mov	fp,r2
    4618:	003f6806 	br	43bc <_dtoa_r+0xa68>
    461c:	00800704 	movi	r2,28
    4620:	003f5f06 	br	43a0 <_dtoa_r+0xa4c>
    4624:	01000804 	movi	r4,32
    4628:	2089c83a 	sub	r4,r4,r2
    462c:	9908983a 	sll	r4,r19,r4
    4630:	003d1d06 	br	3aa8 <_dtoa_r+0x154>
    4634:	04000044 	movi	r16,1
    4638:	003d7606 	br	3c14 <_dtoa_r+0x2c0>
    463c:	100b883a 	mov	r5,r2
    4640:	b809883a 	mov	r4,r23
    4644:	00070540 	call	7054 <__pow5mult>
    4648:	d8c00217 	ldw	r3,8(sp)
    464c:	1029883a 	mov	r20,r2
    4650:	18c00090 	cmplti	r3,r3,2
    4654:	1801511e 	bne	r3,zero,4b9c <_dtoa_r+0x1248>
    4658:	0023883a 	mov	r17,zero
    465c:	a0800417 	ldw	r2,16(r20)
    4660:	10800104 	addi	r2,r2,4
    4664:	100490ba 	slli	r2,r2,2
    4668:	a085883a 	add	r2,r20,r2
    466c:	11000017 	ldw	r4,0(r2)
    4670:	0006c3c0 	call	6c3c <__hi0bits>
    4674:	00c00804 	movi	r3,32
    4678:	1885c83a 	sub	r2,r3,r2
    467c:	003f3f06 	br	437c <_dtoa_r+0xa28>
    4680:	800b883a 	mov	r5,r16
    4684:	000f883a 	mov	r7,zero
    4688:	01800284 	movi	r6,10
    468c:	b809883a 	mov	r4,r23
    4690:	00069cc0 	call	69cc <__multadd>
    4694:	1021883a 	mov	r16,r2
    4698:	d8800b17 	ldw	r2,44(sp)
    469c:	00824b0e 	bge	zero,r2,4fcc <_dtoa_r+0x1678>
    46a0:	dd400415 	stw	r21,16(sp)
    46a4:	d8800515 	stw	r2,20(sp)
    46a8:	0480ac16 	blt	zero,r18,495c <_dtoa_r+0x1008>
    46ac:	8801731e 	bne	r17,zero,4c7c <_dtoa_r+0x1328>
    46b0:	8025883a 	mov	r18,r16
    46b4:	dd800117 	ldw	r22,4(sp)
    46b8:	d9000517 	ldw	r4,20(sp)
    46bc:	98c0004c 	andi	r3,r19,1
    46c0:	b0bfffc4 	addi	r2,r22,-1
    46c4:	1105883a 	add	r2,r2,r4
    46c8:	d8800515 	stw	r2,20(sp)
    46cc:	d8800217 	ldw	r2,8(sp)
    46d0:	d8c00815 	stw	r3,32(sp)
    46d4:	1884b03a 	or	r2,r3,r2
    46d8:	d8800715 	stw	r2,28(sp)
    46dc:	00002906 	br	4784 <_dtoa_r+0xe30>
    46e0:	e009883a 	mov	r4,fp
    46e4:	00073240 	call	7324 <__mcmp>
    46e8:	980b883a 	mov	r5,r19
    46ec:	b809883a 	mov	r4,r23
    46f0:	d8800315 	stw	r2,12(sp)
    46f4:	00069a80 	call	69a8 <_Bfree>
    46f8:	d8800317 	ldw	r2,12(sp)
    46fc:	1000021e 	bne	r2,zero,4708 <_dtoa_r+0xdb4>
    4700:	d8c00717 	ldw	r3,28(sp)
    4704:	18022326 	beq	r3,zero,4f94 <_dtoa_r+0x1640>
    4708:	b4c00044 	addi	r19,r22,1
    470c:	88012916 	blt	r17,zero,4bb4 <_dtoa_r+0x1260>
    4710:	d8c00217 	ldw	r3,8(sp)
    4714:	88e2b03a 	or	r17,r17,r3
    4718:	d8c00817 	ldw	r3,32(sp)
    471c:	1c62b03a 	or	r17,r3,r17
    4720:	88012426 	beq	r17,zero,4bb4 <_dtoa_r+0x1260>
    4724:	00816f16 	blt	zero,r2,4ce4 <_dtoa_r+0x1390>
    4728:	d8800517 	ldw	r2,20(sp)
    472c:	b5400005 	stb	r21,0(r22)
    4730:	15817926 	beq	r2,r22,4d18 <_dtoa_r+0x13c4>
    4734:	e00b883a 	mov	r5,fp
    4738:	000f883a 	mov	r7,zero
    473c:	01800284 	movi	r6,10
    4740:	b809883a 	mov	r4,r23
    4744:	00069cc0 	call	69cc <__multadd>
    4748:	1039883a 	mov	fp,r2
    474c:	800b883a 	mov	r5,r16
    4750:	000f883a 	mov	r7,zero
    4754:	01800284 	movi	r6,10
    4758:	b809883a 	mov	r4,r23
    475c:	84801f26 	beq	r16,r18,47dc <_dtoa_r+0xe88>
    4760:	00069cc0 	call	69cc <__multadd>
    4764:	900b883a 	mov	r5,r18
    4768:	000f883a 	mov	r7,zero
    476c:	01800284 	movi	r6,10
    4770:	b809883a 	mov	r4,r23
    4774:	1021883a 	mov	r16,r2
    4778:	00069cc0 	call	69cc <__multadd>
    477c:	1025883a 	mov	r18,r2
    4780:	982d883a 	mov	r22,r19
    4784:	a00b883a 	mov	r5,r20
    4788:	e009883a 	mov	r4,fp
    478c:	00037580 	call	3758 <quorem>
    4790:	800b883a 	mov	r5,r16
    4794:	e009883a 	mov	r4,fp
    4798:	102b883a 	mov	r21,r2
    479c:	d8800615 	stw	r2,24(sp)
    47a0:	00073240 	call	7324 <__mcmp>
    47a4:	a00b883a 	mov	r5,r20
    47a8:	900d883a 	mov	r6,r18
    47ac:	b809883a 	mov	r4,r23
    47b0:	1023883a 	mov	r17,r2
    47b4:	000737c0 	call	737c <__mdiff>
    47b8:	1027883a 	mov	r19,r2
    47bc:	10800317 	ldw	r2,12(r2)
    47c0:	ad400c04 	addi	r21,r21,48
    47c4:	980b883a 	mov	r5,r19
    47c8:	103fc526 	beq	r2,zero,46e0 <_dtoa_r+0xd8c>
    47cc:	b809883a 	mov	r4,r23
    47d0:	00069a80 	call	69a8 <_Bfree>
    47d4:	00800044 	movi	r2,1
    47d8:	003fcb06 	br	4708 <_dtoa_r+0xdb4>
    47dc:	00069cc0 	call	69cc <__multadd>
    47e0:	1021883a 	mov	r16,r2
    47e4:	1025883a 	mov	r18,r2
    47e8:	003fe506 	br	4780 <_dtoa_r+0xe2c>
    47ec:	d8800217 	ldw	r2,8(sp)
    47f0:	108000d0 	cmplti	r2,r2,3
    47f4:	10003e26 	beq	r2,zero,48f0 <_dtoa_r+0xf9c>
    47f8:	d8800717 	ldw	r2,28(sp)
    47fc:	103faa1e 	bne	r2,zero,46a8 <_dtoa_r+0xd54>
    4800:	a00b883a 	mov	r5,r20
    4804:	e009883a 	mov	r4,fp
    4808:	00037580 	call	3758 <quorem>
    480c:	14c00c04 	addi	r19,r2,48
    4810:	d8800117 	ldw	r2,4(sp)
    4814:	0023883a 	mov	r17,zero
    4818:	15400044 	addi	r21,r2,1
    481c:	14c00005 	stb	r19,0(r2)
    4820:	d8800417 	ldw	r2,16(sp)
    4824:	10800044 	addi	r2,r2,1
    4828:	d8800415 	stw	r2,16(sp)
    482c:	003f0906 	br	4454 <_dtoa_r+0xb00>
    4830:	a00b883a 	mov	r5,r20
    4834:	e009883a 	mov	r4,fp
    4838:	00073240 	call	7324 <__mcmp>
    483c:	103ee70e 	bge	r2,zero,43dc <_dtoa_r+0xa88>
    4840:	e00b883a 	mov	r5,fp
    4844:	000f883a 	mov	r7,zero
    4848:	01800284 	movi	r6,10
    484c:	b809883a 	mov	r4,r23
    4850:	00069cc0 	call	69cc <__multadd>
    4854:	d8c00417 	ldw	r3,16(sp)
    4858:	1039883a 	mov	fp,r2
    485c:	d8800717 	ldw	r2,28(sp)
    4860:	1d7fffc4 	addi	r21,r3,-1
    4864:	103f861e 	bne	r2,zero,4680 <_dtoa_r+0xd2c>
    4868:	d8800b17 	ldw	r2,44(sp)
    486c:	0081d20e 	bge	zero,r2,4fb8 <_dtoa_r+0x1664>
    4870:	d8800515 	stw	r2,20(sp)
    4874:	003ee006 	br	43f8 <_dtoa_r+0xaa4>
    4878:	008000b4 	movhi	r2,2
    487c:	1007883a 	mov	r3,r2
    4880:	18ee5204 	addi	r3,r3,-18104
    4884:	008000b4 	movhi	r2,2
    4888:	d8c00115 	stw	r3,4(sp)
    488c:	10ae52c4 	addi	r2,r2,-18101
    4890:	003ded06 	br	4048 <_dtoa_r+0x6f4>
    4894:	00800044 	movi	r2,1
    4898:	d8800715 	stw	r2,28(sp)
    489c:	003f3406 	br	4570 <_dtoa_r+0xc1c>
    48a0:	983eb21e 	bne	r19,zero,436c <_dtoa_r+0xa18>
    48a4:	00800434 	movhi	r2,16
    48a8:	10bfffc4 	addi	r2,r2,-1
    48ac:	8884703a 	and	r2,r17,r2
    48b0:	103eae1e 	bne	r2,zero,436c <_dtoa_r+0xa18>
    48b4:	8c5ffc2c 	andhi	r17,r17,32752
    48b8:	883eac26 	beq	r17,zero,436c <_dtoa_r+0xa18>
    48bc:	d8800617 	ldw	r2,24(sp)
    48c0:	b5800044 	addi	r22,r22,1
    48c4:	04400044 	movi	r17,1
    48c8:	10800044 	addi	r2,r2,1
    48cc:	d8800615 	stw	r2,24(sp)
    48d0:	003ea706 	br	4370 <_dtoa_r+0xa1c>
    48d4:	00800044 	movi	r2,1
    48d8:	d8800515 	stw	r2,20(sp)
    48dc:	d8801e15 	stw	r2,120(sp)
    48e0:	003f1b06 	br	4550 <_dtoa_r+0xbfc>
    48e4:	d8800b17 	ldw	r2,44(sp)
    48e8:	dd400415 	stw	r21,16(sp)
    48ec:	d8800515 	stw	r2,20(sp)
    48f0:	d8800517 	ldw	r2,20(sp)
    48f4:	103e081e 	bne	r2,zero,4118 <_dtoa_r+0x7c4>
    48f8:	a00b883a 	mov	r5,r20
    48fc:	b809883a 	mov	r4,r23
    4900:	000f883a 	mov	r7,zero
    4904:	01800144 	movi	r6,5
    4908:	00069cc0 	call	69cc <__multadd>
    490c:	100b883a 	mov	r5,r2
    4910:	e009883a 	mov	r4,fp
    4914:	1029883a 	mov	r20,r2
    4918:	00073240 	call	7324 <__mcmp>
    491c:	00bdfe0e 	bge	zero,r2,4118 <_dtoa_r+0x7c4>
    4920:	d8c00117 	ldw	r3,4(sp)
    4924:	00800c44 	movi	r2,49
    4928:	18800005 	stb	r2,0(r3)
    492c:	d8800417 	ldw	r2,16(sp)
    4930:	1d400044 	addi	r21,r3,1
    4934:	14400044 	addi	r17,r2,1
    4938:	a00b883a 	mov	r5,r20
    493c:	b809883a 	mov	r4,r23
    4940:	00069a80 	call	69a8 <_Bfree>
    4944:	88800044 	addi	r2,r17,1
    4948:	d8800415 	stw	r2,16(sp)
    494c:	803ee11e 	bne	r16,zero,44d4 <_dtoa_r+0xb80>
    4950:	003ee306 	br	44e0 <_dtoa_r+0xb8c>
    4954:	b005883a 	mov	r2,r22
    4958:	003e6006 	br	42dc <_dtoa_r+0x988>
    495c:	800b883a 	mov	r5,r16
    4960:	900d883a 	mov	r6,r18
    4964:	b809883a 	mov	r4,r23
    4968:	000719c0 	call	719c <__lshift>
    496c:	1021883a 	mov	r16,r2
    4970:	003f4e06 	br	46ac <_dtoa_r+0xd58>
    4974:	1529c83a 	sub	r20,r2,r20
    4978:	003e4906 	br	42a0 <_dtoa_r+0x94c>
    497c:	dcc00c15 	stw	r19,48(sp)
    4980:	8825883a 	mov	r18,r17
    4984:	05400084 	movi	r21,2
    4988:	003cdf06 	br	3d08 <_dtoa_r+0x3b4>
    498c:	00800044 	movi	r2,1
    4990:	003ead06 	br	4448 <_dtoa_r+0xaf4>
    4994:	00800044 	movi	r2,1
    4998:	d8800715 	stw	r2,28(sp)
    499c:	003ca506 	br	3c34 <_dtoa_r+0x2e0>
    49a0:	1000021e 	bne	r2,zero,49ac <_dtoa_r+0x1058>
    49a4:	98c0004c 	andi	r3,r19,1
    49a8:	183eb41e 	bne	r3,zero,447c <_dtoa_r+0xb28>
    49ac:	2005883a 	mov	r2,r4
    49b0:	00000206 	br	49bc <_dtoa_r+0x1068>
    49b4:	a8bfff83 	ldbu	r2,-2(r21)
    49b8:	182b883a 	mov	r21,r3
    49bc:	10803fcc 	andi	r2,r2,255
    49c0:	1080201c 	xori	r2,r2,128
    49c4:	10bfe004 	addi	r2,r2,-128
    49c8:	10800c18 	cmpnei	r2,r2,48
    49cc:	a8ffffc4 	addi	r3,r21,-1
    49d0:	103ff826 	beq	r2,zero,49b4 <_dtoa_r+0x1060>
    49d4:	003eb606 	br	44b0 <_dtoa_r+0xb5c>
    49d8:	d8c00117 	ldw	r3,4(sp)
    49dc:	00800c44 	movi	r2,49
    49e0:	18800005 	stb	r2,0(r3)
    49e4:	d8800417 	ldw	r2,16(sp)
    49e8:	10800044 	addi	r2,r2,1
    49ec:	d8800415 	stw	r2,16(sp)
    49f0:	003eaf06 	br	44b0 <_dtoa_r+0xb5c>
    49f4:	d8c00a17 	ldw	r3,40(sp)
    49f8:	18011826 	beq	r3,zero,4e5c <_dtoa_r+0x1508>
    49fc:	d8c00617 	ldw	r3,24(sp)
    4a00:	10810cc4 	addi	r2,r2,1075
    4a04:	b0ad883a 	add	r22,r22,r2
    4a08:	1885883a 	add	r2,r3,r2
    4a0c:	dd000817 	ldw	r20,32(sp)
    4a10:	1825883a 	mov	r18,r3
    4a14:	d8800615 	stw	r2,24(sp)
    4a18:	003e2806 	br	42bc <_dtoa_r+0x968>
    4a1c:	a809883a 	mov	r4,r21
    4a20:	000de600 	call	de60 <__floatsidf>
    4a24:	800d883a 	mov	r6,r16
    4a28:	900f883a 	mov	r7,r18
    4a2c:	1009883a 	mov	r4,r2
    4a30:	180b883a 	mov	r5,r3
    4a34:	000ce640 	call	ce64 <__muldf3>
    4a38:	000d883a 	mov	r6,zero
    4a3c:	01d00734 	movhi	r7,16412
    4a40:	1009883a 	mov	r4,r2
    4a44:	180b883a 	mov	r5,r3
    4a48:	000bac80 	call	bac8 <__adddf3>
    4a4c:	1029883a 	mov	r20,r2
    4a50:	00bf3034 	movhi	r2,64704
    4a54:	1885883a 	add	r2,r3,r2
    4a58:	d8800c15 	stw	r2,48(sp)
    4a5c:	8009883a 	mov	r4,r16
    4a60:	900b883a 	mov	r5,r18
    4a64:	000d883a 	mov	r6,zero
    4a68:	01d00534 	movhi	r7,16404
    4a6c:	000d4d80 	call	d4d8 <__subdf3>
    4a70:	dd400c17 	ldw	r21,48(sp)
    4a74:	a00d883a 	mov	r6,r20
    4a78:	1009883a 	mov	r4,r2
    4a7c:	a80f883a 	mov	r7,r21
    4a80:	180b883a 	mov	r5,r3
    4a84:	1025883a 	mov	r18,r2
    4a88:	1821883a 	mov	r16,r3
    4a8c:	000cc940 	call	cc94 <__gedf2>
    4a90:	00812f16 	blt	zero,r2,4f50 <_dtoa_r+0x15fc>
    4a94:	a9e0003c 	xorhi	r7,r21,32768
    4a98:	a00d883a 	mov	r6,r20
    4a9c:	9009883a 	mov	r4,r18
    4aa0:	800b883a 	mov	r5,r16
    4aa4:	000cd7c0 	call	cd7c <__ledf2>
    4aa8:	103d7d0e 	bge	r2,zero,40a0 <_dtoa_r+0x74c>
    4aac:	0029883a 	mov	r20,zero
    4ab0:	0021883a 	mov	r16,zero
    4ab4:	003d9806 	br	4118 <_dtoa_r+0x7c4>
    4ab8:	d9800817 	ldw	r6,32(sp)
    4abc:	e00b883a 	mov	r5,fp
    4ac0:	b809883a 	mov	r4,r23
    4ac4:	00070540 	call	7054 <__pow5mult>
    4ac8:	1039883a 	mov	fp,r2
    4acc:	003e1e06 	br	4348 <_dtoa_r+0x9f4>
    4ad0:	d8800417 	ldw	r2,16(sp)
    4ad4:	1000ed26 	beq	r2,zero,4e8c <_dtoa_r+0x1538>
    4ad8:	00a9c83a 	sub	r20,zero,r2
    4adc:	a08003cc 	andi	r2,r20,15
    4ae0:	100690fa 	slli	r3,r2,3
    4ae4:	008000b4 	movhi	r2,2
    4ae8:	10ae9204 	addi	r2,r2,-17848
    4aec:	10c5883a 	add	r2,r2,r3
    4af0:	11800017 	ldw	r6,0(r2)
    4af4:	11c00117 	ldw	r7,4(r2)
    4af8:	a029d13a 	srai	r20,r20,4
    4afc:	9809883a 	mov	r4,r19
    4b00:	880b883a 	mov	r5,r17
    4b04:	000ce640 	call	ce64 <__muldf3>
    4b08:	1021883a 	mov	r16,r2
    4b0c:	1825883a 	mov	r18,r3
    4b10:	a0013826 	beq	r20,zero,4ff4 <_dtoa_r+0x16a0>
    4b14:	020000b4 	movhi	r8,2
    4b18:	05400084 	movi	r21,2
    4b1c:	422e8804 	addi	r8,r8,-17888
    4b20:	1009883a 	mov	r4,r2
    4b24:	9805883a 	mov	r2,r19
    4b28:	180b883a 	mov	r5,r3
    4b2c:	dc000c15 	stw	r16,48(sp)
    4b30:	8827883a 	mov	r19,r17
    4b34:	0007883a 	mov	r3,zero
    4b38:	a823883a 	mov	r17,r21
    4b3c:	4021883a 	mov	r16,r8
    4b40:	102b883a 	mov	r21,r2
    4b44:	a180004c 	andi	r6,r20,1
    4b48:	30000726 	beq	r6,zero,4b68 <_dtoa_r+0x1214>
    4b4c:	81800017 	ldw	r6,0(r16)
    4b50:	81c00117 	ldw	r7,4(r16)
    4b54:	8c400044 	addi	r17,r17,1
    4b58:	000ce640 	call	ce64 <__muldf3>
    4b5c:	180b883a 	mov	r5,r3
    4b60:	1009883a 	mov	r4,r2
    4b64:	00c00044 	movi	r3,1
    4b68:	a029d07a 	srai	r20,r20,1
    4b6c:	84000204 	addi	r16,r16,8
    4b70:	a03ff41e 	bne	r20,zero,4b44 <_dtoa_r+0x11f0>
    4b74:	a805883a 	mov	r2,r21
    4b78:	18c03fcc 	andi	r3,r3,255
    4b7c:	882b883a 	mov	r21,r17
    4b80:	dc000c17 	ldw	r16,48(sp)
    4b84:	9823883a 	mov	r17,r19
    4b88:	1027883a 	mov	r19,r2
    4b8c:	183c7726 	beq	r3,zero,3d6c <_dtoa_r+0x418>
    4b90:	2021883a 	mov	r16,r4
    4b94:	2825883a 	mov	r18,r5
    4b98:	003c7406 	br	3d6c <_dtoa_r+0x418>
    4b9c:	983eae1e 	bne	r19,zero,4658 <_dtoa_r+0xd04>
    4ba0:	00800434 	movhi	r2,16
    4ba4:	10bfffc4 	addi	r2,r2,-1
    4ba8:	8884703a 	and	r2,r17,r2
    4bac:	103f4126 	beq	r2,zero,48b4 <_dtoa_r+0xf60>
    4bb0:	003ea906 	br	4658 <_dtoa_r+0xd04>
    4bb4:	9807883a 	mov	r3,r19
    4bb8:	a827883a 	mov	r19,r21
    4bbc:	182b883a 	mov	r21,r3
    4bc0:	d8c00417 	ldw	r3,16(sp)
    4bc4:	18c00044 	addi	r3,r3,1
    4bc8:	d8c00415 	stw	r3,16(sp)
    4bcc:	00800d0e 	bge	zero,r2,4c04 <_dtoa_r+0x12b0>
    4bd0:	e00b883a 	mov	r5,fp
    4bd4:	b809883a 	mov	r4,r23
    4bd8:	01800044 	movi	r6,1
    4bdc:	000719c0 	call	719c <__lshift>
    4be0:	a00b883a 	mov	r5,r20
    4be4:	1009883a 	mov	r4,r2
    4be8:	1039883a 	mov	fp,r2
    4bec:	00073240 	call	7324 <__mcmp>
    4bf0:	0080df0e 	bge	zero,r2,4f70 <_dtoa_r+0x161c>
    4bf4:	98c00e60 	cmpeqi	r3,r19,57
    4bf8:	1800ce1e 	bne	r3,zero,4f34 <_dtoa_r+0x15e0>
    4bfc:	d8800617 	ldw	r2,24(sp)
    4c00:	14c00c44 	addi	r19,r2,49
    4c04:	8023883a 	mov	r17,r16
    4c08:	b4c00005 	stb	r19,0(r22)
    4c0c:	9021883a 	mov	r16,r18
    4c10:	003e2706 	br	44b0 <_dtoa_r+0xb5c>
    4c14:	b82b883a 	mov	r21,r23
    4c18:	ddc00217 	ldw	r23,8(sp)
    4c1c:	200d883a 	mov	r6,r4
    4c20:	280f883a 	mov	r7,r5
    4c24:	000bac80 	call	bac8 <__adddf3>
    4c28:	180b883a 	mov	r5,r3
    4c2c:	800d883a 	mov	r6,r16
    4c30:	900f883a 	mov	r7,r18
    4c34:	1009883a 	mov	r4,r2
    4c38:	1823883a 	mov	r17,r3
    4c3c:	1027883a 	mov	r19,r2
    4c40:	000cc940 	call	cc94 <__gedf2>
    4c44:	d8c00417 	ldw	r3,16(sp)
    4c48:	18c00044 	addi	r3,r3,1
    4c4c:	d8c00415 	stw	r3,16(sp)
    4c50:	00808c16 	blt	zero,r2,4e84 <_dtoa_r+0x1530>
    4c54:	800d883a 	mov	r6,r16
    4c58:	900f883a 	mov	r7,r18
    4c5c:	9809883a 	mov	r4,r19
    4c60:	880b883a 	mov	r5,r17
    4c64:	000cc140 	call	cc14 <__eqdf2>
    4c68:	1000021e 	bne	r2,zero,4c74 <_dtoa_r+0x1320>
    4c6c:	ad40004c 	andi	r21,r21,1
    4c70:	a800841e 	bne	r21,zero,4e84 <_dtoa_r+0x1530>
    4c74:	a02b883a 	mov	r21,r20
    4c78:	003e1906 	br	44e0 <_dtoa_r+0xb8c>
    4c7c:	81400117 	ldw	r5,4(r16)
    4c80:	b809883a 	mov	r4,r23
    4c84:	00069040 	call	6904 <_Balloc>
    4c88:	1023883a 	mov	r17,r2
    4c8c:	1000f326 	beq	r2,zero,505c <_dtoa_r+0x1708>
    4c90:	81800417 	ldw	r6,16(r16)
    4c94:	81400304 	addi	r5,r16,12
    4c98:	11000304 	addi	r4,r2,12
    4c9c:	31800084 	addi	r6,r6,2
    4ca0:	300c90ba 	slli	r6,r6,2
    4ca4:	00011f40 	call	11f4 <memcpy>
    4ca8:	01800044 	movi	r6,1
    4cac:	880b883a 	mov	r5,r17
    4cb0:	b809883a 	mov	r4,r23
    4cb4:	000719c0 	call	719c <__lshift>
    4cb8:	1025883a 	mov	r18,r2
    4cbc:	003e7d06 	br	46b4 <_dtoa_r+0xd60>
    4cc0:	e00b883a 	mov	r5,fp
    4cc4:	b809883a 	mov	r4,r23
    4cc8:	00070540 	call	7054 <__pow5mult>
    4ccc:	1039883a 	mov	fp,r2
    4cd0:	003d9d06 	br	4348 <_dtoa_r+0x9f4>
    4cd4:	d8800617 	ldw	r2,24(sp)
    4cd8:	d8c00517 	ldw	r3,20(sp)
    4cdc:	10e5c83a 	sub	r18,r2,r3
    4ce0:	003d7606 	br	42bc <_dtoa_r+0x968>
    4ce4:	d8c00417 	ldw	r3,16(sp)
    4ce8:	9805883a 	mov	r2,r19
    4cec:	a827883a 	mov	r19,r21
    4cf0:	18c00044 	addi	r3,r3,1
    4cf4:	102b883a 	mov	r21,r2
    4cf8:	d8c00415 	stw	r3,16(sp)
    4cfc:	98800e58 	cmpnei	r2,r19,57
    4d00:	10008c26 	beq	r2,zero,4f34 <_dtoa_r+0x15e0>
    4d04:	98c00044 	addi	r3,r19,1
    4d08:	8023883a 	mov	r17,r16
    4d0c:	b0c00005 	stb	r3,0(r22)
    4d10:	9021883a 	mov	r16,r18
    4d14:	003de606 	br	44b0 <_dtoa_r+0xb5c>
    4d18:	9805883a 	mov	r2,r19
    4d1c:	a827883a 	mov	r19,r21
    4d20:	102b883a 	mov	r21,r2
    4d24:	d8800417 	ldw	r2,16(sp)
    4d28:	8023883a 	mov	r17,r16
    4d2c:	9021883a 	mov	r16,r18
    4d30:	10800044 	addi	r2,r2,1
    4d34:	d8800415 	stw	r2,16(sp)
    4d38:	003dc606 	br	4454 <_dtoa_r+0xb00>
    4d3c:	d9400c17 	ldw	r5,48(sp)
    4d40:	a009883a 	mov	r4,r20
    4d44:	000ce640 	call	ce64 <__muldf3>
    4d48:	d9800d17 	ldw	r6,52(sp)
    4d4c:	d9400117 	ldw	r5,4(sp)
    4d50:	d9001017 	ldw	r4,64(sp)
    4d54:	d8800c15 	stw	r2,48(sp)
    4d58:	d8c00d15 	stw	r3,52(sp)
    4d5c:	29000005 	stb	r4,0(r5)
    4d60:	31000058 	cmpnei	r4,r6,1
    4d64:	29a9883a 	add	r20,r5,r6
    4d68:	2000a026 	beq	r4,zero,4fec <_dtoa_r+0x1698>
    4d6c:	dc400e15 	stw	r17,56(sp)
    4d70:	8009883a 	mov	r4,r16
    4d74:	900b883a 	mov	r5,r18
    4d78:	a823883a 	mov	r17,r21
    4d7c:	000d883a 	mov	r6,zero
    4d80:	01d00934 	movhi	r7,16420
    4d84:	000ce640 	call	ce64 <__muldf3>
    4d88:	180b883a 	mov	r5,r3
    4d8c:	1009883a 	mov	r4,r2
    4d90:	1825883a 	mov	r18,r3
    4d94:	102b883a 	mov	r21,r2
    4d98:	000dde00 	call	dde0 <__fixdfsi>
    4d9c:	1009883a 	mov	r4,r2
    4da0:	1021883a 	mov	r16,r2
    4da4:	000de600 	call	de60 <__floatsidf>
    4da8:	a809883a 	mov	r4,r21
    4dac:	900b883a 	mov	r5,r18
    4db0:	100d883a 	mov	r6,r2
    4db4:	180f883a 	mov	r7,r3
    4db8:	8c400044 	addi	r17,r17,1
    4dbc:	84000c04 	addi	r16,r16,48
    4dc0:	000d4d80 	call	d4d8 <__subdf3>
    4dc4:	8c3fffc5 	stb	r16,-1(r17)
    4dc8:	1009883a 	mov	r4,r2
    4dcc:	180b883a 	mov	r5,r3
    4dd0:	a47fea1e 	bne	r20,r17,4d7c <_dtoa_r+0x1428>
    4dd4:	dc400e17 	ldw	r17,56(sp)
    4dd8:	1021883a 	mov	r16,r2
    4ddc:	1825883a 	mov	r18,r3
    4de0:	d9000c17 	ldw	r4,48(sp)
    4de4:	d9400d17 	ldw	r5,52(sp)
    4de8:	000d883a 	mov	r6,zero
    4dec:	01cff834 	movhi	r7,16352
    4df0:	000bac80 	call	bac8 <__adddf3>
    4df4:	800d883a 	mov	r6,r16
    4df8:	900f883a 	mov	r7,r18
    4dfc:	1009883a 	mov	r4,r2
    4e00:	180b883a 	mov	r5,r3
    4e04:	000cd7c0 	call	cd7c <__ledf2>
    4e08:	10005416 	blt	r2,zero,4f5c <_dtoa_r+0x1608>
    4e0c:	d9800c17 	ldw	r6,48(sp)
    4e10:	d9c00d17 	ldw	r7,52(sp)
    4e14:	0009883a 	mov	r4,zero
    4e18:	014ff834 	movhi	r5,16352
    4e1c:	000d4d80 	call	d4d8 <__subdf3>
    4e20:	800d883a 	mov	r6,r16
    4e24:	900f883a 	mov	r7,r18
    4e28:	1009883a 	mov	r4,r2
    4e2c:	180b883a 	mov	r5,r3
    4e30:	000cc940 	call	cc94 <__gedf2>
    4e34:	00bc9a0e 	bge	zero,r2,40a0 <_dtoa_r+0x74c>
    4e38:	a0bfffc7 	ldb	r2,-1(r20)
    4e3c:	a02b883a 	mov	r21,r20
    4e40:	a53fffc4 	addi	r20,r20,-1
    4e44:	10800c20 	cmpeqi	r2,r2,48
    4e48:	103ffb1e 	bne	r2,zero,4e38 <_dtoa_r+0x14e4>
    4e4c:	d8801117 	ldw	r2,68(sp)
    4e50:	10800044 	addi	r2,r2,1
    4e54:	d8800415 	stw	r2,16(sp)
    4e58:	003da106 	br	44e0 <_dtoa_r+0xb8c>
    4e5c:	d8c01217 	ldw	r3,72(sp)
    4e60:	d9000617 	ldw	r4,24(sp)
    4e64:	00800d84 	movi	r2,54
    4e68:	10c5c83a 	sub	r2,r2,r3
    4e6c:	b0ad883a 	add	r22,r22,r2
    4e70:	2085883a 	add	r2,r4,r2
    4e74:	dd000817 	ldw	r20,32(sp)
    4e78:	2025883a 	mov	r18,r4
    4e7c:	d8800615 	stw	r2,24(sp)
    4e80:	003d0e06 	br	42bc <_dtoa_r+0x968>
    4e84:	d9000117 	ldw	r4,4(sp)
    4e88:	003c4b06 	br	3fb8 <_dtoa_r+0x664>
    4e8c:	9821883a 	mov	r16,r19
    4e90:	8825883a 	mov	r18,r17
    4e94:	05400084 	movi	r21,2
    4e98:	003bb406 	br	3d6c <_dtoa_r+0x418>
    4e9c:	d8800517 	ldw	r2,20(sp)
    4ea0:	103ede26 	beq	r2,zero,4a1c <_dtoa_r+0x10c8>
    4ea4:	d8800b17 	ldw	r2,44(sp)
    4ea8:	00bc7d0e 	bge	zero,r2,40a0 <_dtoa_r+0x74c>
    4eac:	900b883a 	mov	r5,r18
    4eb0:	8009883a 	mov	r4,r16
    4eb4:	000d883a 	mov	r6,zero
    4eb8:	01d00934 	movhi	r7,16420
    4ebc:	000ce640 	call	ce64 <__muldf3>
    4ec0:	a9000044 	addi	r4,r21,1
    4ec4:	1021883a 	mov	r16,r2
    4ec8:	1825883a 	mov	r18,r3
    4ecc:	000de600 	call	de60 <__floatsidf>
    4ed0:	800d883a 	mov	r6,r16
    4ed4:	900f883a 	mov	r7,r18
    4ed8:	1009883a 	mov	r4,r2
    4edc:	180b883a 	mov	r5,r3
    4ee0:	000ce640 	call	ce64 <__muldf3>
    4ee4:	1009883a 	mov	r4,r2
    4ee8:	000d883a 	mov	r6,zero
    4eec:	01d00734 	movhi	r7,16412
    4ef0:	180b883a 	mov	r5,r3
    4ef4:	000bac80 	call	bac8 <__adddf3>
    4ef8:	d9000417 	ldw	r4,16(sp)
    4efc:	1029883a 	mov	r20,r2
    4f00:	00bf3034 	movhi	r2,64704
    4f04:	1887883a 	add	r3,r3,r2
    4f08:	d8800b17 	ldw	r2,44(sp)
    4f0c:	213fffc4 	addi	r4,r4,-1
    4f10:	d9001115 	stw	r4,68(sp)
    4f14:	d8c00c15 	stw	r3,48(sp)
    4f18:	d8800d15 	stw	r2,52(sp)
    4f1c:	003bb106 	br	3de4 <_dtoa_r+0x490>
    4f20:	d8800417 	ldw	r2,16(sp)
    4f24:	00c00c44 	movi	r3,49
    4f28:	10800044 	addi	r2,r2,1
    4f2c:	d8800415 	stw	r2,16(sp)
    4f30:	003c2a06 	br	3fdc <_dtoa_r+0x688>
    4f34:	00800e44 	movi	r2,57
    4f38:	8023883a 	mov	r17,r16
    4f3c:	d9400117 	ldw	r5,4(sp)
    4f40:	b0800005 	stb	r2,0(r22)
    4f44:	9021883a 	mov	r16,r18
    4f48:	01000e44 	movi	r4,57
    4f4c:	003d5006 	br	4490 <_dtoa_r+0xb3c>
    4f50:	0029883a 	mov	r20,zero
    4f54:	0021883a 	mov	r16,zero
    4f58:	003e7106 	br	4920 <_dtoa_r+0xfcc>
    4f5c:	d8801117 	ldw	r2,68(sp)
    4f60:	d9000117 	ldw	r4,4(sp)
    4f64:	10800044 	addi	r2,r2,1
    4f68:	d8800415 	stw	r2,16(sp)
    4f6c:	003c1206 	br	3fb8 <_dtoa_r+0x664>
    4f70:	103f241e 	bne	r2,zero,4c04 <_dtoa_r+0x12b0>
    4f74:	9880004c 	andi	r2,r19,1
    4f78:	103f1e1e 	bne	r2,zero,4bf4 <_dtoa_r+0x12a0>
    4f7c:	003f2106 	br	4c04 <_dtoa_r+0x12b0>
    4f80:	d8801117 	ldw	r2,68(sp)
    4f84:	ddc00d17 	ldw	r23,52(sp)
    4f88:	10800044 	addi	r2,r2,1
    4f8c:	d8800415 	stw	r2,16(sp)
    4f90:	003d5306 	br	44e0 <_dtoa_r+0xb8c>
    4f94:	d8c00417 	ldw	r3,16(sp)
    4f98:	a8800e60 	cmpeqi	r2,r21,57
    4f9c:	a827883a 	mov	r19,r21
    4fa0:	18c00044 	addi	r3,r3,1
    4fa4:	d8c00415 	stw	r3,16(sp)
    4fa8:	b5400044 	addi	r21,r22,1
    4fac:	103fe11e 	bne	r2,zero,4f34 <_dtoa_r+0x15e0>
    4fb0:	047f1216 	blt	zero,r17,4bfc <_dtoa_r+0x12a8>
    4fb4:	003f1306 	br	4c04 <_dtoa_r+0x12b0>
    4fb8:	d8800217 	ldw	r2,8(sp)
    4fbc:	108000c8 	cmpgei	r2,r2,3
    4fc0:	103e481e 	bne	r2,zero,48e4 <_dtoa_r+0xf90>
    4fc4:	dd400415 	stw	r21,16(sp)
    4fc8:	003e0d06 	br	4800 <_dtoa_r+0xeac>
    4fcc:	d8800217 	ldw	r2,8(sp)
    4fd0:	108000c8 	cmpgei	r2,r2,3
    4fd4:	103e431e 	bne	r2,zero,48e4 <_dtoa_r+0xf90>
    4fd8:	d8800b17 	ldw	r2,44(sp)
    4fdc:	dd400415 	stw	r21,16(sp)
    4fe0:	d8800515 	stw	r2,20(sp)
    4fe4:	04bdb10e 	bge	zero,r18,46ac <_dtoa_r+0xd58>
    4fe8:	003e5c06 	br	495c <_dtoa_r+0x1008>
    4fec:	a829883a 	mov	r20,r21
    4ff0:	003f7b06 	br	4de0 <_dtoa_r+0x148c>
    4ff4:	05400084 	movi	r21,2
    4ff8:	003b5c06 	br	3d6c <_dtoa_r+0x418>
    4ffc:	01c000b4 	movhi	r7,2
    5000:	010000b4 	movhi	r4,2
    5004:	39ee5604 	addi	r7,r7,-18088
    5008:	000d883a 	mov	r6,zero
    500c:	01406a84 	movi	r5,426
    5010:	212e5b04 	addi	r4,r4,-18068
    5014:	000926c0 	call	926c <__assert_func>
    5018:	000b883a 	mov	r5,zero
    501c:	003b1506 	br	3c74 <_dtoa_r+0x320>
    5020:	b8001115 	stw	zero,68(r23)
    5024:	000b883a 	mov	r5,zero
    5028:	b809883a 	mov	r4,r23
    502c:	00069040 	call	6904 <_Balloc>
    5030:	d8800115 	stw	r2,4(sp)
    5034:	103ff126 	beq	r2,zero,4ffc <_dtoa_r+0x16a8>
    5038:	d8800117 	ldw	r2,4(sp)
    503c:	d8001e15 	stw	zero,120(sp)
    5040:	b8801015 	stw	r2,64(r23)
    5044:	00bfffc4 	movi	r2,-1
    5048:	d8800515 	stw	r2,20(sp)
    504c:	d8800b15 	stw	r2,44(sp)
    5050:	00800044 	movi	r2,1
    5054:	d8800715 	stw	r2,28(sp)
    5058:	003c1106 	br	40a0 <_dtoa_r+0x74c>
    505c:	01c000b4 	movhi	r7,2
    5060:	010000b4 	movhi	r4,2
    5064:	39ee5604 	addi	r7,r7,-18088
    5068:	000d883a 	mov	r6,zero
    506c:	0140ba84 	movi	r5,746
    5070:	212e5b04 	addi	r4,r4,-18068
    5074:	000926c0 	call	926c <__assert_func>
    5078:	008000b4 	movhi	r2,2
    507c:	10ae5304 	addi	r2,r2,-18100
    5080:	d8800115 	stw	r2,4(sp)
    5084:	003a6506 	br	3a1c <_dtoa_r+0xc8>
    5088:	18c00120 	cmpeqi	r3,r3,4
    508c:	183cc91e 	bne	r3,zero,43b4 <_dtoa_r+0xa60>
    5090:	00c00f04 	movi	r3,60
    5094:	1885c83a 	sub	r2,r3,r2
    5098:	003cc106 	br	43a0 <_dtoa_r+0xa4c>

0000509c <__sflush_r>:
    509c:	2880030b 	ldhu	r2,12(r5)
    50a0:	defffb04 	addi	sp,sp,-20
    50a4:	dcc00315 	stw	r19,12(sp)
    50a8:	dc000015 	stw	r16,0(sp)
    50ac:	dfc00415 	stw	ra,16(sp)
    50b0:	dc800215 	stw	r18,8(sp)
    50b4:	dc400115 	stw	r17,4(sp)
    50b8:	10c0020c 	andi	r3,r2,8
    50bc:	2821883a 	mov	r16,r5
    50c0:	2027883a 	mov	r19,r4
    50c4:	18003f1e 	bne	r3,zero,51c4 <__sflush_r+0x128>
    50c8:	28c00117 	ldw	r3,4(r5)
    50cc:	10820014 	ori	r2,r2,2048
    50d0:	2880030d 	sth	r2,12(r5)
    50d4:	00c0550e 	bge	zero,r3,522c <__sflush_r+0x190>
    50d8:	82000a17 	ldw	r8,40(r16)
    50dc:	40003126 	beq	r8,zero,51a4 <__sflush_r+0x108>
    50e0:	9c400017 	ldw	r17,0(r19)
    50e4:	1104000c 	andi	r4,r2,4096
    50e8:	98000015 	stw	zero,0(r19)
    50ec:	81400717 	ldw	r5,28(r16)
    50f0:	1007883a 	mov	r3,r2
    50f4:	2000521e 	bne	r4,zero,5240 <__sflush_r+0x1a4>
    50f8:	01c00044 	movi	r7,1
    50fc:	000d883a 	mov	r6,zero
    5100:	9809883a 	mov	r4,r19
    5104:	403ee83a 	callr	r8
    5108:	10ffffd8 	cmpnei	r3,r2,-1
    510c:	18005826 	beq	r3,zero,5270 <__sflush_r+0x1d4>
    5110:	80c0030b 	ldhu	r3,12(r16)
    5114:	82000a17 	ldw	r8,40(r16)
    5118:	81400717 	ldw	r5,28(r16)
    511c:	18c0010c 	andi	r3,r3,4
    5120:	18000626 	beq	r3,zero,513c <__sflush_r+0xa0>
    5124:	81000117 	ldw	r4,4(r16)
    5128:	80c00c17 	ldw	r3,48(r16)
    512c:	1105c83a 	sub	r2,r2,r4
    5130:	18000226 	beq	r3,zero,513c <__sflush_r+0xa0>
    5134:	80c00f17 	ldw	r3,60(r16)
    5138:	10c5c83a 	sub	r2,r2,r3
    513c:	100d883a 	mov	r6,r2
    5140:	000f883a 	mov	r7,zero
    5144:	9809883a 	mov	r4,r19
    5148:	403ee83a 	callr	r8
    514c:	10ffffd8 	cmpnei	r3,r2,-1
    5150:	18003d1e 	bne	r3,zero,5248 <__sflush_r+0x1ac>
    5154:	99000017 	ldw	r4,0(r19)
    5158:	80c0030b 	ldhu	r3,12(r16)
    515c:	20004e26 	beq	r4,zero,5298 <__sflush_r+0x1fc>
    5160:	21400760 	cmpeqi	r5,r4,29
    5164:	2800021e 	bne	r5,zero,5170 <__sflush_r+0xd4>
    5168:	210005a0 	cmpeqi	r4,r4,22
    516c:	20002c26 	beq	r4,zero,5220 <__sflush_r+0x184>
    5170:	80800417 	ldw	r2,16(r16)
    5174:	18fdffcc 	andi	r3,r3,63487
    5178:	80c0030d 	sth	r3,12(r16)
    517c:	80000115 	stw	zero,4(r16)
    5180:	80800015 	stw	r2,0(r16)
    5184:	81400c17 	ldw	r5,48(r16)
    5188:	9c400015 	stw	r17,0(r19)
    518c:	28000526 	beq	r5,zero,51a4 <__sflush_r+0x108>
    5190:	80801004 	addi	r2,r16,64
    5194:	28800226 	beq	r5,r2,51a0 <__sflush_r+0x104>
    5198:	9809883a 	mov	r4,r19
    519c:	00058600 	call	5860 <_free_r>
    51a0:	80000c15 	stw	zero,48(r16)
    51a4:	0005883a 	mov	r2,zero
    51a8:	dfc00417 	ldw	ra,16(sp)
    51ac:	dcc00317 	ldw	r19,12(sp)
    51b0:	dc800217 	ldw	r18,8(sp)
    51b4:	dc400117 	ldw	r17,4(sp)
    51b8:	dc000017 	ldw	r16,0(sp)
    51bc:	dec00504 	addi	sp,sp,20
    51c0:	f800283a 	ret
    51c4:	2c800417 	ldw	r18,16(r5)
    51c8:	903ff626 	beq	r18,zero,51a4 <__sflush_r+0x108>
    51cc:	2c400017 	ldw	r17,0(r5)
    51d0:	108000cc 	andi	r2,r2,3
    51d4:	2c800015 	stw	r18,0(r5)
    51d8:	8ca3c83a 	sub	r17,r17,r18
    51dc:	1000161e 	bne	r2,zero,5238 <__sflush_r+0x19c>
    51e0:	28800517 	ldw	r2,20(r5)
    51e4:	80800215 	stw	r2,8(r16)
    51e8:	04400316 	blt	zero,r17,51f8 <__sflush_r+0x15c>
    51ec:	003fed06 	br	51a4 <__sflush_r+0x108>
    51f0:	90a5883a 	add	r18,r18,r2
    51f4:	047feb0e 	bge	zero,r17,51a4 <__sflush_r+0x108>
    51f8:	80800917 	ldw	r2,36(r16)
    51fc:	81400717 	ldw	r5,28(r16)
    5200:	880f883a 	mov	r7,r17
    5204:	900d883a 	mov	r6,r18
    5208:	9809883a 	mov	r4,r19
    520c:	103ee83a 	callr	r2
    5210:	88a3c83a 	sub	r17,r17,r2
    5214:	00bff616 	blt	zero,r2,51f0 <__sflush_r+0x154>
    5218:	80c0030b 	ldhu	r3,12(r16)
    521c:	00bfffc4 	movi	r2,-1
    5220:	18c01014 	ori	r3,r3,64
    5224:	80c0030d 	sth	r3,12(r16)
    5228:	003fdf06 	br	51a8 <__sflush_r+0x10c>
    522c:	28c00f17 	ldw	r3,60(r5)
    5230:	00ffa916 	blt	zero,r3,50d8 <__sflush_r+0x3c>
    5234:	003fdb06 	br	51a4 <__sflush_r+0x108>
    5238:	0005883a 	mov	r2,zero
    523c:	003fe906 	br	51e4 <__sflush_r+0x148>
    5240:	80801417 	ldw	r2,80(r16)
    5244:	003fb506 	br	511c <__sflush_r+0x80>
    5248:	80c0030b 	ldhu	r3,12(r16)
    524c:	81000417 	ldw	r4,16(r16)
    5250:	80000115 	stw	zero,4(r16)
    5254:	197dffcc 	andi	r5,r3,63487
    5258:	8140030d 	sth	r5,12(r16)
    525c:	81000015 	stw	r4,0(r16)
    5260:	18c4000c 	andi	r3,r3,4096
    5264:	183fc726 	beq	r3,zero,5184 <__sflush_r+0xe8>
    5268:	80801415 	stw	r2,80(r16)
    526c:	003fc506 	br	5184 <__sflush_r+0xe8>
    5270:	98c00017 	ldw	r3,0(r19)
    5274:	183fa626 	beq	r3,zero,5110 <__sflush_r+0x74>
    5278:	19000760 	cmpeqi	r4,r3,29
    527c:	20000e1e 	bne	r4,zero,52b8 <__sflush_r+0x21c>
    5280:	18c00598 	cmpnei	r3,r3,22
    5284:	18000c26 	beq	r3,zero,52b8 <__sflush_r+0x21c>
    5288:	80c0030b 	ldhu	r3,12(r16)
    528c:	18c01014 	ori	r3,r3,64
    5290:	80c0030d 	sth	r3,12(r16)
    5294:	003fc406 	br	51a8 <__sflush_r+0x10c>
    5298:	81000417 	ldw	r4,16(r16)
    529c:	197dffcc 	andi	r5,r3,63487
    52a0:	8140030d 	sth	r5,12(r16)
    52a4:	80000115 	stw	zero,4(r16)
    52a8:	81000015 	stw	r4,0(r16)
    52ac:	18c4000c 	andi	r3,r3,4096
    52b0:	183fb426 	beq	r3,zero,5184 <__sflush_r+0xe8>
    52b4:	003fec06 	br	5268 <__sflush_r+0x1cc>
    52b8:	9c400015 	stw	r17,0(r19)
    52bc:	0005883a 	mov	r2,zero
    52c0:	003fb906 	br	51a8 <__sflush_r+0x10c>

000052c4 <_fflush_r>:
    52c4:	defffd04 	addi	sp,sp,-12
    52c8:	dc000115 	stw	r16,4(sp)
    52cc:	dfc00215 	stw	ra,8(sp)
    52d0:	2021883a 	mov	r16,r4
    52d4:	20000226 	beq	r4,zero,52e0 <_fflush_r+0x1c>
    52d8:	20800e17 	ldw	r2,56(r4)
    52dc:	10000726 	beq	r2,zero,52fc <_fflush_r+0x38>
    52e0:	2880030f 	ldh	r2,12(r5)
    52e4:	10000a1e 	bne	r2,zero,5310 <_fflush_r+0x4c>
    52e8:	0005883a 	mov	r2,zero
    52ec:	dfc00217 	ldw	ra,8(sp)
    52f0:	dc000117 	ldw	r16,4(sp)
    52f4:	dec00304 	addi	sp,sp,12
    52f8:	f800283a 	ret
    52fc:	d9400015 	stw	r5,0(sp)
    5300:	00056fc0 	call	56fc <__sinit>
    5304:	d9400017 	ldw	r5,0(sp)
    5308:	2880030f 	ldh	r2,12(r5)
    530c:	103ff626 	beq	r2,zero,52e8 <_fflush_r+0x24>
    5310:	8009883a 	mov	r4,r16
    5314:	dfc00217 	ldw	ra,8(sp)
    5318:	dc000117 	ldw	r16,4(sp)
    531c:	dec00304 	addi	sp,sp,12
    5320:	000509c1 	jmpi	509c <__sflush_r>

00005324 <fflush>:
    5324:	20001726 	beq	r4,zero,5384 <fflush+0x60>
    5328:	008000b4 	movhi	r2,2
    532c:	200b883a 	mov	r5,r4
    5330:	11381817 	ldw	r4,-8096(r2)
    5334:	20000226 	beq	r4,zero,5340 <fflush+0x1c>
    5338:	20800e17 	ldw	r2,56(r4)
    533c:	10000526 	beq	r2,zero,5354 <fflush+0x30>
    5340:	2880030f 	ldh	r2,12(r5)
    5344:	1000021e 	bne	r2,zero,5350 <fflush+0x2c>
    5348:	0005883a 	mov	r2,zero
    534c:	f800283a 	ret
    5350:	000509c1 	jmpi	509c <__sflush_r>
    5354:	defffd04 	addi	sp,sp,-12
    5358:	d9400115 	stw	r5,4(sp)
    535c:	d9000015 	stw	r4,0(sp)
    5360:	dfc00215 	stw	ra,8(sp)
    5364:	00056fc0 	call	56fc <__sinit>
    5368:	d9400117 	ldw	r5,4(sp)
    536c:	d9000017 	ldw	r4,0(sp)
    5370:	2880030f 	ldh	r2,12(r5)
    5374:	10000826 	beq	r2,zero,5398 <fflush+0x74>
    5378:	dfc00217 	ldw	ra,8(sp)
    537c:	dec00304 	addi	sp,sp,12
    5380:	000509c1 	jmpi	509c <__sflush_r>
    5384:	008000b4 	movhi	r2,2
    5388:	11381717 	ldw	r4,-8100(r2)
    538c:	01400034 	movhi	r5,0
    5390:	2954b104 	addi	r5,r5,21188
    5394:	0005bf41 	jmpi	5bf4 <_fwalk_reent>
    5398:	0005883a 	mov	r2,zero
    539c:	dfc00217 	ldw	ra,8(sp)
    53a0:	dec00304 	addi	sp,sp,12
    53a4:	f800283a 	ret

000053a8 <__fp_lock>:
    53a8:	0005883a 	mov	r2,zero
    53ac:	f800283a 	ret

000053b0 <_cleanup_r>:
    53b0:	01400074 	movhi	r5,1
    53b4:	29651604 	addi	r5,r5,-27560
    53b8:	0005bf41 	jmpi	5bf4 <_fwalk_reent>

000053bc <__fp_unlock>:
    53bc:	0005883a 	mov	r2,zero
    53c0:	f800283a 	ret

000053c4 <__sinit.part.0>:
    53c4:	00c00034 	movhi	r3,0
    53c8:	20800117 	ldw	r2,4(r4)
    53cc:	18d4ec04 	addi	r3,r3,21424
    53d0:	20c00f15 	stw	r3,60(r4)
    53d4:	2140bb04 	addi	r5,r4,748
    53d8:	00c000c4 	movi	r3,3
    53dc:	20c0b915 	stw	r3,740(r4)
    53e0:	2140ba15 	stw	r5,744(r4)
    53e4:	2000b815 	stw	zero,736(r4)
    53e8:	10001705 	stb	zero,92(r2)
    53ec:	10001745 	stb	zero,93(r2)
    53f0:	10001785 	stb	zero,94(r2)
    53f4:	100017c5 	stb	zero,95(r2)
    53f8:	10001805 	stb	zero,96(r2)
    53fc:	10001845 	stb	zero,97(r2)
    5400:	10001885 	stb	zero,98(r2)
    5404:	100018c5 	stb	zero,99(r2)
    5408:	00c00104 	movi	r3,4
    540c:	10c00315 	stw	r3,12(r2)
    5410:	02000034 	movhi	r8,0
    5414:	20c00217 	ldw	r3,8(r4)
    5418:	01c00034 	movhi	r7,0
    541c:	01800034 	movhi	r6,0
    5420:	01400034 	movhi	r5,0
    5424:	421eaf04 	addi	r8,r8,31420
    5428:	39dec604 	addi	r7,r7,31512
    542c:	319ee604 	addi	r6,r6,31640
    5430:	295efd04 	addi	r5,r5,31732
    5434:	02400074 	movhi	r9,1
    5438:	10001915 	stw	zero,100(r2)
    543c:	10000015 	stw	zero,0(r2)
    5440:	10000115 	stw	zero,4(r2)
    5444:	10000215 	stw	zero,8(r2)
    5448:	10000415 	stw	zero,16(r2)
    544c:	10000515 	stw	zero,20(r2)
    5450:	10000615 	stw	zero,24(r2)
    5454:	10800715 	stw	r2,28(r2)
    5458:	12000815 	stw	r8,32(r2)
    545c:	11c00915 	stw	r7,36(r2)
    5460:	11800a15 	stw	r6,40(r2)
    5464:	11400b15 	stw	r5,44(r2)
    5468:	4a400284 	addi	r9,r9,10
    546c:	1a400315 	stw	r9,12(r3)
    5470:	18001915 	stw	zero,100(r3)
    5474:	18000015 	stw	zero,0(r3)
    5478:	18000115 	stw	zero,4(r3)
    547c:	18000215 	stw	zero,8(r3)
    5480:	18000415 	stw	zero,16(r3)
    5484:	18001705 	stb	zero,92(r3)
    5488:	18001745 	stb	zero,93(r3)
    548c:	18001785 	stb	zero,94(r3)
    5490:	180017c5 	stb	zero,95(r3)
    5494:	18001805 	stb	zero,96(r3)
    5498:	18001845 	stb	zero,97(r3)
    549c:	18001885 	stb	zero,98(r3)
    54a0:	180018c5 	stb	zero,99(r3)
    54a4:	20800317 	ldw	r2,12(r4)
    54a8:	024000b4 	movhi	r9,2
    54ac:	18000515 	stw	zero,20(r3)
    54b0:	18000615 	stw	zero,24(r3)
    54b4:	18c00715 	stw	r3,28(r3)
    54b8:	1a000815 	stw	r8,32(r3)
    54bc:	19c00915 	stw	r7,36(r3)
    54c0:	19800a15 	stw	r6,40(r3)
    54c4:	19400b15 	stw	r5,44(r3)
    54c8:	4a400484 	addi	r9,r9,18
    54cc:	10001915 	stw	zero,100(r2)
    54d0:	10000015 	stw	zero,0(r2)
    54d4:	10000115 	stw	zero,4(r2)
    54d8:	10000215 	stw	zero,8(r2)
    54dc:	12400315 	stw	r9,12(r2)
    54e0:	10000415 	stw	zero,16(r2)
    54e4:	10000515 	stw	zero,20(r2)
    54e8:	10000615 	stw	zero,24(r2)
    54ec:	10001705 	stb	zero,92(r2)
    54f0:	10001745 	stb	zero,93(r2)
    54f4:	10001785 	stb	zero,94(r2)
    54f8:	100017c5 	stb	zero,95(r2)
    54fc:	10001805 	stb	zero,96(r2)
    5500:	10001845 	stb	zero,97(r2)
    5504:	10001885 	stb	zero,98(r2)
    5508:	100018c5 	stb	zero,99(r2)
    550c:	10800715 	stw	r2,28(r2)
    5510:	12000815 	stw	r8,32(r2)
    5514:	11c00915 	stw	r7,36(r2)
    5518:	11800a15 	stw	r6,40(r2)
    551c:	11400b15 	stw	r5,44(r2)
    5520:	00800044 	movi	r2,1
    5524:	20800e15 	stw	r2,56(r4)
    5528:	f800283a 	ret

0000552c <__sfmoreglue>:
    552c:	defffc04 	addi	sp,sp,-16
    5530:	dc400115 	stw	r17,4(sp)
    5534:	2c7fffc4 	addi	r17,r5,-1
    5538:	8c401a24 	muli	r17,r17,104
    553c:	dc800215 	stw	r18,8(sp)
    5540:	2825883a 	mov	r18,r5
    5544:	89401d04 	addi	r5,r17,116
    5548:	dc000015 	stw	r16,0(sp)
    554c:	dfc00315 	stw	ra,12(sp)
    5550:	0005f640 	call	5f64 <_malloc_r>
    5554:	1021883a 	mov	r16,r2
    5558:	10000726 	beq	r2,zero,5578 <__sfmoreglue+0x4c>
    555c:	11000304 	addi	r4,r2,12
    5560:	10000015 	stw	zero,0(r2)
    5564:	14800115 	stw	r18,4(r2)
    5568:	11000215 	stw	r4,8(r2)
    556c:	89801a04 	addi	r6,r17,104
    5570:	000b883a 	mov	r5,zero
    5574:	00068140 	call	6814 <memset>
    5578:	8005883a 	mov	r2,r16
    557c:	dfc00317 	ldw	ra,12(sp)
    5580:	dc800217 	ldw	r18,8(sp)
    5584:	dc400117 	ldw	r17,4(sp)
    5588:	dc000017 	ldw	r16,0(sp)
    558c:	dec00404 	addi	sp,sp,16
    5590:	f800283a 	ret

00005594 <__sfp>:
    5594:	defffb04 	addi	sp,sp,-20
    5598:	008000b4 	movhi	r2,2
    559c:	dc000015 	stw	r16,0(sp)
    55a0:	14381717 	ldw	r16,-8100(r2)
    55a4:	dc400115 	stw	r17,4(sp)
    55a8:	dfc00415 	stw	ra,16(sp)
    55ac:	80800e17 	ldw	r2,56(r16)
    55b0:	dcc00315 	stw	r19,12(sp)
    55b4:	dc800215 	stw	r18,8(sp)
    55b8:	2023883a 	mov	r17,r4
    55bc:	10003126 	beq	r2,zero,5684 <__sfp+0xf0>
    55c0:	8100ba17 	ldw	r4,744(r16)
    55c4:	8140b917 	ldw	r5,740(r16)
    55c8:	04c00104 	movi	r19,4
    55cc:	8400b804 	addi	r16,r16,736
    55d0:	297fffc4 	addi	r5,r5,-1
    55d4:	2800050e 	bge	r5,zero,55ec <__sfp+0x58>
    55d8:	00002406 	br	566c <__sfp+0xd8>
    55dc:	297fffc4 	addi	r5,r5,-1
    55e0:	28bfffd8 	cmpnei	r2,r5,-1
    55e4:	21001a04 	addi	r4,r4,104
    55e8:	10002026 	beq	r2,zero,566c <__sfp+0xd8>
    55ec:	2080030f 	ldh	r2,12(r4)
    55f0:	103ffa1e 	bne	r2,zero,55dc <__sfp+0x48>
    55f4:	00bffff4 	movhi	r2,65535
    55f8:	10800044 	addi	r2,r2,1
    55fc:	20001915 	stw	zero,100(r4)
    5600:	20000015 	stw	zero,0(r4)
    5604:	20000115 	stw	zero,4(r4)
    5608:	20000215 	stw	zero,8(r4)
    560c:	20800315 	stw	r2,12(r4)
    5610:	20000415 	stw	zero,16(r4)
    5614:	20000515 	stw	zero,20(r4)
    5618:	20000615 	stw	zero,24(r4)
    561c:	20001705 	stb	zero,92(r4)
    5620:	20001745 	stb	zero,93(r4)
    5624:	20001785 	stb	zero,94(r4)
    5628:	200017c5 	stb	zero,95(r4)
    562c:	20001805 	stb	zero,96(r4)
    5630:	20001845 	stb	zero,97(r4)
    5634:	20001885 	stb	zero,98(r4)
    5638:	200018c5 	stb	zero,99(r4)
    563c:	20000c15 	stw	zero,48(r4)
    5640:	20000d15 	stw	zero,52(r4)
    5644:	20001115 	stw	zero,68(r4)
    5648:	20001215 	stw	zero,72(r4)
    564c:	2005883a 	mov	r2,r4
    5650:	dfc00417 	ldw	ra,16(sp)
    5654:	dcc00317 	ldw	r19,12(sp)
    5658:	dc800217 	ldw	r18,8(sp)
    565c:	dc400117 	ldw	r17,4(sp)
    5660:	dc000017 	ldw	r16,0(sp)
    5664:	dec00504 	addi	sp,sp,20
    5668:	f800283a 	ret
    566c:	80800017 	ldw	r2,0(r16)
    5670:	10000726 	beq	r2,zero,5690 <__sfp+0xfc>
    5674:	11000217 	ldw	r4,8(r2)
    5678:	11400117 	ldw	r5,4(r2)
    567c:	1021883a 	mov	r16,r2
    5680:	003fd306 	br	55d0 <__sfp+0x3c>
    5684:	8009883a 	mov	r4,r16
    5688:	00053c40 	call	53c4 <__sinit.part.0>
    568c:	003fcc06 	br	55c0 <__sfp+0x2c>
    5690:	01406b04 	movi	r5,428
    5694:	8809883a 	mov	r4,r17
    5698:	0005f640 	call	5f64 <_malloc_r>
    569c:	1025883a 	mov	r18,r2
    56a0:	10000c26 	beq	r2,zero,56d4 <__sfp+0x140>
    56a4:	11000304 	addi	r4,r2,12
    56a8:	11000215 	stw	r4,8(r2)
    56ac:	000b883a 	mov	r5,zero
    56b0:	10000015 	stw	zero,0(r2)
    56b4:	14c00115 	stw	r19,4(r2)
    56b8:	01806804 	movi	r6,416
    56bc:	00068140 	call	6814 <memset>
    56c0:	1009883a 	mov	r4,r2
    56c4:	84800015 	stw	r18,0(r16)
    56c8:	014000c4 	movi	r5,3
    56cc:	9021883a 	mov	r16,r18
    56d0:	003fc606 	br	55ec <__sfp+0x58>
    56d4:	80000015 	stw	zero,0(r16)
    56d8:	00800304 	movi	r2,12
    56dc:	88800015 	stw	r2,0(r17)
    56e0:	0009883a 	mov	r4,zero
    56e4:	003fd906 	br	564c <__sfp+0xb8>

000056e8 <_cleanup>:
    56e8:	008000b4 	movhi	r2,2
    56ec:	11381717 	ldw	r4,-8100(r2)
    56f0:	01400074 	movhi	r5,1
    56f4:	29651604 	addi	r5,r5,-27560
    56f8:	0005bf41 	jmpi	5bf4 <_fwalk_reent>

000056fc <__sinit>:
    56fc:	20800e17 	ldw	r2,56(r4)
    5700:	10000126 	beq	r2,zero,5708 <__sinit+0xc>
    5704:	f800283a 	ret
    5708:	00053c41 	jmpi	53c4 <__sinit.part.0>

0000570c <__sfp_lock_acquire>:
    570c:	f800283a 	ret

00005710 <__sfp_lock_release>:
    5710:	f800283a 	ret

00005714 <__sinit_lock_acquire>:
    5714:	f800283a 	ret

00005718 <__sinit_lock_release>:
    5718:	f800283a 	ret

0000571c <__fp_lock_all>:
    571c:	008000b4 	movhi	r2,2
    5720:	11381817 	ldw	r4,-8096(r2)
    5724:	01400034 	movhi	r5,0
    5728:	2954ea04 	addi	r5,r5,21416
    572c:	0005b5c1 	jmpi	5b5c <_fwalk>

00005730 <__fp_unlock_all>:
    5730:	008000b4 	movhi	r2,2
    5734:	11381817 	ldw	r4,-8096(r2)
    5738:	01400034 	movhi	r5,0
    573c:	2954ef04 	addi	r5,r5,21436
    5740:	0005b5c1 	jmpi	5b5c <_fwalk>

00005744 <_malloc_trim_r>:
    5744:	defffb04 	addi	sp,sp,-20
    5748:	dcc00315 	stw	r19,12(sp)
    574c:	04c000b4 	movhi	r19,2
    5750:	dc800215 	stw	r18,8(sp)
    5754:	dc400115 	stw	r17,4(sp)
    5758:	dc000015 	stw	r16,0(sp)
    575c:	dfc00415 	stw	ra,16(sp)
    5760:	2821883a 	mov	r16,r5
    5764:	9cf17004 	addi	r19,r19,-14912
    5768:	2025883a 	mov	r18,r4
    576c:	000f0240 	call	f024 <__malloc_lock>
    5770:	98800217 	ldw	r2,8(r19)
    5774:	14400117 	ldw	r17,4(r2)
    5778:	00bfff04 	movi	r2,-4
    577c:	88a2703a 	and	r17,r17,r2
    5780:	8c21c83a 	sub	r16,r17,r16
    5784:	8403fbc4 	addi	r16,r16,4079
    5788:	8020d33a 	srli	r16,r16,12
    578c:	843fffc4 	addi	r16,r16,-1
    5790:	8020933a 	slli	r16,r16,12
    5794:	80840008 	cmpgei	r2,r16,4096
    5798:	10000626 	beq	r2,zero,57b4 <_malloc_trim_r+0x70>
    579c:	000b883a 	mov	r5,zero
    57a0:	9009883a 	mov	r4,r18
    57a4:	0007a640 	call	7a64 <_sbrk_r>
    57a8:	98c00217 	ldw	r3,8(r19)
    57ac:	1c47883a 	add	r3,r3,r17
    57b0:	10c00a26 	beq	r2,r3,57dc <_malloc_trim_r+0x98>
    57b4:	9009883a 	mov	r4,r18
    57b8:	000f14c0 	call	f14c <__malloc_unlock>
    57bc:	0005883a 	mov	r2,zero
    57c0:	dfc00417 	ldw	ra,16(sp)
    57c4:	dcc00317 	ldw	r19,12(sp)
    57c8:	dc800217 	ldw	r18,8(sp)
    57cc:	dc400117 	ldw	r17,4(sp)
    57d0:	dc000017 	ldw	r16,0(sp)
    57d4:	dec00504 	addi	sp,sp,20
    57d8:	f800283a 	ret
    57dc:	040bc83a 	sub	r5,zero,r16
    57e0:	9009883a 	mov	r4,r18
    57e4:	0007a640 	call	7a64 <_sbrk_r>
    57e8:	10bfffd8 	cmpnei	r2,r2,-1
    57ec:	10000d26 	beq	r2,zero,5824 <_malloc_trim_r+0xe0>
    57f0:	008000f4 	movhi	r2,3
    57f4:	10b06917 	ldw	r2,-15964(r2)
    57f8:	98c00217 	ldw	r3,8(r19)
    57fc:	8c23c83a 	sub	r17,r17,r16
    5800:	8c400054 	ori	r17,r17,1
    5804:	1421c83a 	sub	r16,r2,r16
    5808:	1c400115 	stw	r17,4(r3)
    580c:	008000f4 	movhi	r2,3
    5810:	9009883a 	mov	r4,r18
    5814:	14306915 	stw	r16,-15964(r2)
    5818:	000f14c0 	call	f14c <__malloc_unlock>
    581c:	00800044 	movi	r2,1
    5820:	003fe706 	br	57c0 <_malloc_trim_r+0x7c>
    5824:	000b883a 	mov	r5,zero
    5828:	9009883a 	mov	r4,r18
    582c:	0007a640 	call	7a64 <_sbrk_r>
    5830:	99000217 	ldw	r4,8(r19)
    5834:	1107c83a 	sub	r3,r2,r4
    5838:	19400410 	cmplti	r5,r3,16
    583c:	283fdd1e 	bne	r5,zero,57b4 <_malloc_trim_r+0x70>
    5840:	014000b4 	movhi	r5,2
    5844:	29781917 	ldw	r5,-8092(r5)
    5848:	18c00054 	ori	r3,r3,1
    584c:	20c00115 	stw	r3,4(r4)
    5850:	1145c83a 	sub	r2,r2,r5
    5854:	014000f4 	movhi	r5,3
    5858:	28b06915 	stw	r2,-15964(r5)
    585c:	003fd506 	br	57b4 <_malloc_trim_r+0x70>

00005860 <_free_r>:
    5860:	28004f26 	beq	r5,zero,59a0 <_free_r+0x140>
    5864:	defffd04 	addi	sp,sp,-12
    5868:	dc400115 	stw	r17,4(sp)
    586c:	dc000015 	stw	r16,0(sp)
    5870:	2023883a 	mov	r17,r4
    5874:	2821883a 	mov	r16,r5
    5878:	dfc00215 	stw	ra,8(sp)
    587c:	000f0240 	call	f024 <__malloc_lock>
    5880:	81ffff17 	ldw	r7,-4(r16)
    5884:	00bfff84 	movi	r2,-2
    5888:	80fffe04 	addi	r3,r16,-8
    588c:	3884703a 	and	r2,r7,r2
    5890:	010000b4 	movhi	r4,2
    5894:	188d883a 	add	r6,r3,r2
    5898:	21317004 	addi	r4,r4,-14912
    589c:	31400117 	ldw	r5,4(r6)
    58a0:	22000217 	ldw	r8,8(r4)
    58a4:	027fff04 	movi	r9,-4
    58a8:	2a4a703a 	and	r5,r5,r9
    58ac:	41806426 	beq	r8,r6,5a40 <_free_r+0x1e0>
    58b0:	31400115 	stw	r5,4(r6)
    58b4:	39c0004c 	andi	r7,r7,1
    58b8:	3151883a 	add	r8,r6,r5
    58bc:	3800281e 	bne	r7,zero,5960 <_free_r+0x100>
    58c0:	82bffe17 	ldw	r10,-8(r16)
    58c4:	42000117 	ldw	r8,4(r8)
    58c8:	01c000b4 	movhi	r7,2
    58cc:	1a87c83a 	sub	r3,r3,r10
    58d0:	1a400217 	ldw	r9,8(r3)
    58d4:	39f17204 	addi	r7,r7,-14904
    58d8:	1285883a 	add	r2,r2,r10
    58dc:	4200004c 	andi	r8,r8,1
    58e0:	49c04c26 	beq	r9,r7,5a14 <_free_r+0x1b4>
    58e4:	1a800317 	ldw	r10,12(r3)
    58e8:	4a800315 	stw	r10,12(r9)
    58ec:	52400215 	stw	r9,8(r10)
    58f0:	40007126 	beq	r8,zero,5ab8 <_free_r+0x258>
    58f4:	11400054 	ori	r5,r2,1
    58f8:	19400115 	stw	r5,4(r3)
    58fc:	30800015 	stw	r2,0(r6)
    5900:	11408028 	cmpgeui	r5,r2,512
    5904:	28002c1e 	bne	r5,zero,59b8 <_free_r+0x158>
    5908:	100ad0fa 	srli	r5,r2,3
    590c:	100cd17a 	srli	r6,r2,5
    5910:	00800044 	movi	r2,1
    5914:	29400044 	addi	r5,r5,1
    5918:	280a90fa 	slli	r5,r5,3
    591c:	21c00117 	ldw	r7,4(r4)
    5920:	1184983a 	sll	r2,r2,r6
    5924:	214b883a 	add	r5,r4,r5
    5928:	29800017 	ldw	r6,0(r5)
    592c:	11c4b03a 	or	r2,r2,r7
    5930:	29fffe04 	addi	r7,r5,-8
    5934:	19c00315 	stw	r7,12(r3)
    5938:	19800215 	stw	r6,8(r3)
    593c:	20800115 	stw	r2,4(r4)
    5940:	28c00015 	stw	r3,0(r5)
    5944:	30c00315 	stw	r3,12(r6)
    5948:	8809883a 	mov	r4,r17
    594c:	dfc00217 	ldw	ra,8(sp)
    5950:	dc400117 	ldw	r17,4(sp)
    5954:	dc000017 	ldw	r16,0(sp)
    5958:	dec00304 	addi	sp,sp,12
    595c:	000f14c1 	jmpi	f14c <__malloc_unlock>
    5960:	41c00117 	ldw	r7,4(r8)
    5964:	39c0004c 	andi	r7,r7,1
    5968:	38000e1e 	bne	r7,zero,59a4 <_free_r+0x144>
    596c:	01c000b4 	movhi	r7,2
    5970:	1145883a 	add	r2,r2,r5
    5974:	39f17204 	addi	r7,r7,-14904
    5978:	31400217 	ldw	r5,8(r6)
    597c:	12400054 	ori	r9,r2,1
    5980:	1891883a 	add	r8,r3,r2
    5984:	29c05226 	beq	r5,r7,5ad0 <_free_r+0x270>
    5988:	31800317 	ldw	r6,12(r6)
    598c:	29800315 	stw	r6,12(r5)
    5990:	31400215 	stw	r5,8(r6)
    5994:	1a400115 	stw	r9,4(r3)
    5998:	40800015 	stw	r2,0(r8)
    599c:	003fd806 	br	5900 <_free_r+0xa0>
    59a0:	f800283a 	ret
    59a4:	11400054 	ori	r5,r2,1
    59a8:	817fff15 	stw	r5,-4(r16)
    59ac:	30800015 	stw	r2,0(r6)
    59b0:	11408028 	cmpgeui	r5,r2,512
    59b4:	283fd426 	beq	r5,zero,5908 <_free_r+0xa8>
    59b8:	100ad27a 	srli	r5,r2,9
    59bc:	29800168 	cmpgeui	r6,r5,5
    59c0:	3000341e 	bne	r6,zero,5a94 <_free_r+0x234>
    59c4:	100ad1ba 	srli	r5,r2,6
    59c8:	29800e44 	addi	r6,r5,57
    59cc:	300c90fa 	slli	r6,r6,3
    59d0:	29c00e04 	addi	r7,r5,56
    59d4:	218d883a 	add	r6,r4,r6
    59d8:	31400017 	ldw	r5,0(r6)
    59dc:	31bffe04 	addi	r6,r6,-8
    59e0:	31404226 	beq	r6,r5,5aec <_free_r+0x28c>
    59e4:	01ffff04 	movi	r7,-4
    59e8:	29000117 	ldw	r4,4(r5)
    59ec:	21c8703a 	and	r4,r4,r7
    59f0:	1100022e 	bgeu	r2,r4,59fc <_free_r+0x19c>
    59f4:	29400217 	ldw	r5,8(r5)
    59f8:	317ffb1e 	bne	r6,r5,59e8 <_free_r+0x188>
    59fc:	29800317 	ldw	r6,12(r5)
    5a00:	19800315 	stw	r6,12(r3)
    5a04:	19400215 	stw	r5,8(r3)
    5a08:	30c00215 	stw	r3,8(r6)
    5a0c:	28c00315 	stw	r3,12(r5)
    5a10:	003fcd06 	br	5948 <_free_r+0xe8>
    5a14:	40004d1e 	bne	r8,zero,5b4c <_free_r+0x2ec>
    5a18:	31000317 	ldw	r4,12(r6)
    5a1c:	31800217 	ldw	r6,8(r6)
    5a20:	2885883a 	add	r2,r5,r2
    5a24:	11400054 	ori	r5,r2,1
    5a28:	31000315 	stw	r4,12(r6)
    5a2c:	21800215 	stw	r6,8(r4)
    5a30:	19400115 	stw	r5,4(r3)
    5a34:	1887883a 	add	r3,r3,r2
    5a38:	18800015 	stw	r2,0(r3)
    5a3c:	003fc206 	br	5948 <_free_r+0xe8>
    5a40:	39c0004c 	andi	r7,r7,1
    5a44:	1145883a 	add	r2,r2,r5
    5a48:	3800071e 	bne	r7,zero,5a68 <_free_r+0x208>
    5a4c:	81fffe17 	ldw	r7,-8(r16)
    5a50:	19c7c83a 	sub	r3,r3,r7
    5a54:	19400317 	ldw	r5,12(r3)
    5a58:	19800217 	ldw	r6,8(r3)
    5a5c:	11c5883a 	add	r2,r2,r7
    5a60:	31400315 	stw	r5,12(r6)
    5a64:	29800215 	stw	r6,8(r5)
    5a68:	014000b4 	movhi	r5,2
    5a6c:	11800054 	ori	r6,r2,1
    5a70:	29781a17 	ldw	r5,-8088(r5)
    5a74:	19800115 	stw	r6,4(r3)
    5a78:	20c00215 	stw	r3,8(r4)
    5a7c:	117fb236 	bltu	r2,r5,5948 <_free_r+0xe8>
    5a80:	008000b4 	movhi	r2,2
    5a84:	11403717 	ldw	r5,220(r2)
    5a88:	8809883a 	mov	r4,r17
    5a8c:	00057440 	call	5744 <_malloc_trim_r>
    5a90:	003fad06 	br	5948 <_free_r+0xe8>
    5a94:	29800568 	cmpgeui	r6,r5,21
    5a98:	30000926 	beq	r6,zero,5ac0 <_free_r+0x260>
    5a9c:	29801568 	cmpgeui	r6,r5,85
    5aa0:	3000191e 	bne	r6,zero,5b08 <_free_r+0x2a8>
    5aa4:	100ad33a 	srli	r5,r2,12
    5aa8:	29801bc4 	addi	r6,r5,111
    5aac:	300c90fa 	slli	r6,r6,3
    5ab0:	29c01b84 	addi	r7,r5,110
    5ab4:	003fc706 	br	59d4 <_free_r+0x174>
    5ab8:	1145883a 	add	r2,r2,r5
    5abc:	003fae06 	br	5978 <_free_r+0x118>
    5ac0:	29801704 	addi	r6,r5,92
    5ac4:	300c90fa 	slli	r6,r6,3
    5ac8:	29c016c4 	addi	r7,r5,91
    5acc:	003fc106 	br	59d4 <_free_r+0x174>
    5ad0:	20c00515 	stw	r3,20(r4)
    5ad4:	20c00415 	stw	r3,16(r4)
    5ad8:	19c00315 	stw	r7,12(r3)
    5adc:	19c00215 	stw	r7,8(r3)
    5ae0:	1a400115 	stw	r9,4(r3)
    5ae4:	40800015 	stw	r2,0(r8)
    5ae8:	003f9706 	br	5948 <_free_r+0xe8>
    5aec:	380fd0ba 	srai	r7,r7,2
    5af0:	00800044 	movi	r2,1
    5af4:	22000117 	ldw	r8,4(r4)
    5af8:	11ce983a 	sll	r7,r2,r7
    5afc:	3a0eb03a 	or	r7,r7,r8
    5b00:	21c00115 	stw	r7,4(r4)
    5b04:	003fbe06 	br	5a00 <_free_r+0x1a0>
    5b08:	29805568 	cmpgeui	r6,r5,341
    5b0c:	3000051e 	bne	r6,zero,5b24 <_free_r+0x2c4>
    5b10:	100ad3fa 	srli	r5,r2,15
    5b14:	29801e04 	addi	r6,r5,120
    5b18:	300c90fa 	slli	r6,r6,3
    5b1c:	29c01dc4 	addi	r7,r5,119
    5b20:	003fac06 	br	59d4 <_free_r+0x174>
    5b24:	29415568 	cmpgeui	r5,r5,1365
    5b28:	2800051e 	bne	r5,zero,5b40 <_free_r+0x2e0>
    5b2c:	100ad4ba 	srli	r5,r2,18
    5b30:	29801f44 	addi	r6,r5,125
    5b34:	300c90fa 	slli	r6,r6,3
    5b38:	29c01f04 	addi	r7,r5,124
    5b3c:	003fa506 	br	59d4 <_free_r+0x174>
    5b40:	0180fe04 	movi	r6,1016
    5b44:	01c01f84 	movi	r7,126
    5b48:	003fa206 	br	59d4 <_free_r+0x174>
    5b4c:	11000054 	ori	r4,r2,1
    5b50:	19000115 	stw	r4,4(r3)
    5b54:	30800015 	stw	r2,0(r6)
    5b58:	003f7b06 	br	5948 <_free_r+0xe8>

00005b5c <_fwalk>:
    5b5c:	defffa04 	addi	sp,sp,-24
    5b60:	dd000415 	stw	r20,16(sp)
    5b64:	dcc00315 	stw	r19,12(sp)
    5b68:	dc800215 	stw	r18,8(sp)
    5b6c:	dfc00515 	stw	ra,20(sp)
    5b70:	dc400115 	stw	r17,4(sp)
    5b74:	dc000015 	stw	r16,0(sp)
    5b78:	2827883a 	mov	r19,r5
    5b7c:	2480b804 	addi	r18,r4,736
    5b80:	0029883a 	mov	r20,zero
    5b84:	94400117 	ldw	r17,4(r18)
    5b88:	94000217 	ldw	r16,8(r18)
    5b8c:	8c7fffc4 	addi	r17,r17,-1
    5b90:	88000d16 	blt	r17,zero,5bc8 <_fwalk+0x6c>
    5b94:	8080030b 	ldhu	r2,12(r16)
    5b98:	8c7fffc4 	addi	r17,r17,-1
    5b9c:	108000b0 	cmpltui	r2,r2,2
    5ba0:	1000061e 	bne	r2,zero,5bbc <_fwalk+0x60>
    5ba4:	8080038f 	ldh	r2,14(r16)
    5ba8:	8009883a 	mov	r4,r16
    5bac:	10bfffe0 	cmpeqi	r2,r2,-1
    5bb0:	1000021e 	bne	r2,zero,5bbc <_fwalk+0x60>
    5bb4:	983ee83a 	callr	r19
    5bb8:	a0a8b03a 	or	r20,r20,r2
    5bbc:	88bfffd8 	cmpnei	r2,r17,-1
    5bc0:	84001a04 	addi	r16,r16,104
    5bc4:	103ff31e 	bne	r2,zero,5b94 <_fwalk+0x38>
    5bc8:	94800017 	ldw	r18,0(r18)
    5bcc:	903fed1e 	bne	r18,zero,5b84 <_fwalk+0x28>
    5bd0:	a005883a 	mov	r2,r20
    5bd4:	dfc00517 	ldw	ra,20(sp)
    5bd8:	dd000417 	ldw	r20,16(sp)
    5bdc:	dcc00317 	ldw	r19,12(sp)
    5be0:	dc800217 	ldw	r18,8(sp)
    5be4:	dc400117 	ldw	r17,4(sp)
    5be8:	dc000017 	ldw	r16,0(sp)
    5bec:	dec00604 	addi	sp,sp,24
    5bf0:	f800283a 	ret

00005bf4 <_fwalk_reent>:
    5bf4:	defff904 	addi	sp,sp,-28
    5bf8:	dd400515 	stw	r21,20(sp)
    5bfc:	dd000415 	stw	r20,16(sp)
    5c00:	dcc00315 	stw	r19,12(sp)
    5c04:	dc800215 	stw	r18,8(sp)
    5c08:	dfc00615 	stw	ra,24(sp)
    5c0c:	dc400115 	stw	r17,4(sp)
    5c10:	dc000015 	stw	r16,0(sp)
    5c14:	202b883a 	mov	r21,r4
    5c18:	2827883a 	mov	r19,r5
    5c1c:	2480b804 	addi	r18,r4,736
    5c20:	0029883a 	mov	r20,zero
    5c24:	94400117 	ldw	r17,4(r18)
    5c28:	94000217 	ldw	r16,8(r18)
    5c2c:	8c7fffc4 	addi	r17,r17,-1
    5c30:	88000e16 	blt	r17,zero,5c6c <_fwalk_reent+0x78>
    5c34:	8080030b 	ldhu	r2,12(r16)
    5c38:	8c7fffc4 	addi	r17,r17,-1
    5c3c:	108000b0 	cmpltui	r2,r2,2
    5c40:	1000071e 	bne	r2,zero,5c60 <_fwalk_reent+0x6c>
    5c44:	8080038f 	ldh	r2,14(r16)
    5c48:	800b883a 	mov	r5,r16
    5c4c:	a809883a 	mov	r4,r21
    5c50:	10bfffe0 	cmpeqi	r2,r2,-1
    5c54:	1000021e 	bne	r2,zero,5c60 <_fwalk_reent+0x6c>
    5c58:	983ee83a 	callr	r19
    5c5c:	a0a8b03a 	or	r20,r20,r2
    5c60:	88bfffd8 	cmpnei	r2,r17,-1
    5c64:	84001a04 	addi	r16,r16,104
    5c68:	103ff21e 	bne	r2,zero,5c34 <_fwalk_reent+0x40>
    5c6c:	94800017 	ldw	r18,0(r18)
    5c70:	903fec1e 	bne	r18,zero,5c24 <_fwalk_reent+0x30>
    5c74:	a005883a 	mov	r2,r20
    5c78:	dfc00617 	ldw	ra,24(sp)
    5c7c:	dd400517 	ldw	r21,20(sp)
    5c80:	dd000417 	ldw	r20,16(sp)
    5c84:	dcc00317 	ldw	r19,12(sp)
    5c88:	dc800217 	ldw	r18,8(sp)
    5c8c:	dc400117 	ldw	r17,4(sp)
    5c90:	dc000017 	ldw	r16,0(sp)
    5c94:	dec00704 	addi	sp,sp,28
    5c98:	f800283a 	ret

00005c9c <_gettimeofday_r>:
    5c9c:	2807883a 	mov	r3,r5
    5ca0:	defffe04 	addi	sp,sp,-8
    5ca4:	dc000015 	stw	r16,0(sp)
    5ca8:	008000b4 	movhi	r2,2
    5cac:	300b883a 	mov	r5,r6
    5cb0:	2021883a 	mov	r16,r4
    5cb4:	1809883a 	mov	r4,r3
    5cb8:	dfc00115 	stw	ra,4(sp)
    5cbc:	10003415 	stw	zero,208(r2)
    5cc0:	000e2780 	call	e278 <gettimeofday>
    5cc4:	10ffffd8 	cmpnei	r3,r2,-1
    5cc8:	18000426 	beq	r3,zero,5cdc <_gettimeofday_r+0x40>
    5ccc:	dfc00117 	ldw	ra,4(sp)
    5cd0:	dc000017 	ldw	r16,0(sp)
    5cd4:	dec00204 	addi	sp,sp,8
    5cd8:	f800283a 	ret
    5cdc:	00c000b4 	movhi	r3,2
    5ce0:	18c03417 	ldw	r3,208(r3)
    5ce4:	183ff926 	beq	r3,zero,5ccc <_gettimeofday_r+0x30>
    5ce8:	80c00015 	stw	r3,0(r16)
    5cec:	dfc00117 	ldw	ra,4(sp)
    5cf0:	dc000017 	ldw	r16,0(sp)
    5cf4:	dec00204 	addi	sp,sp,8
    5cf8:	f800283a 	ret

00005cfc <__localeconv_l>:
    5cfc:	20803c04 	addi	r2,r4,240
    5d00:	f800283a 	ret

00005d04 <_localeconv_r>:
    5d04:	008000b4 	movhi	r2,2
    5d08:	10b2ae04 	addi	r2,r2,-13640
    5d0c:	f800283a 	ret

00005d10 <localeconv>:
    5d10:	008000b4 	movhi	r2,2
    5d14:	10b2ae04 	addi	r2,r2,-13640
    5d18:	f800283a 	ret

00005d1c <__smakebuf_r>:
    5d1c:	2880030b 	ldhu	r2,12(r5)
    5d20:	deffe804 	addi	sp,sp,-96
    5d24:	dc001215 	stw	r16,72(sp)
    5d28:	dfc01715 	stw	ra,92(sp)
    5d2c:	dd001615 	stw	r20,88(sp)
    5d30:	dcc01515 	stw	r19,84(sp)
    5d34:	dc801415 	stw	r18,80(sp)
    5d38:	dc401315 	stw	r17,76(sp)
    5d3c:	10c0008c 	andi	r3,r2,2
    5d40:	2821883a 	mov	r16,r5
    5d44:	18000d26 	beq	r3,zero,5d7c <__smakebuf_r+0x60>
    5d48:	288010c4 	addi	r2,r5,67
    5d4c:	28800015 	stw	r2,0(r5)
    5d50:	28800415 	stw	r2,16(r5)
    5d54:	00800044 	movi	r2,1
    5d58:	28800515 	stw	r2,20(r5)
    5d5c:	dfc01717 	ldw	ra,92(sp)
    5d60:	dd001617 	ldw	r20,88(sp)
    5d64:	dcc01517 	ldw	r19,84(sp)
    5d68:	dc801417 	ldw	r18,80(sp)
    5d6c:	dc401317 	ldw	r17,76(sp)
    5d70:	dc001217 	ldw	r16,72(sp)
    5d74:	dec01804 	addi	sp,sp,96
    5d78:	f800283a 	ret
    5d7c:	2940038f 	ldh	r5,14(r5)
    5d80:	2023883a 	mov	r17,r4
    5d84:	28002816 	blt	r5,zero,5e28 <__smakebuf_r+0x10c>
    5d88:	d80d883a 	mov	r6,sp
    5d8c:	00097900 	call	9790 <_fstat_r>
    5d90:	10002416 	blt	r2,zero,5e24 <__smakebuf_r+0x108>
    5d94:	d8800117 	ldw	r2,4(sp)
    5d98:	10bc000c 	andi	r2,r2,61440
    5d9c:	10880018 	cmpnei	r2,r2,8192
    5da0:	1000461e 	bne	r2,zero,5ebc <__smakebuf_r+0x1a0>
    5da4:	8140038f 	ldh	r5,14(r16)
    5da8:	8809883a 	mov	r4,r17
    5dac:	0009ca80 	call	9ca8 <_isatty_r>
    5db0:	10003e26 	beq	r2,zero,5eac <__smakebuf_r+0x190>
    5db4:	8080030b 	ldhu	r2,12(r16)
    5db8:	80c010c4 	addi	r3,r16,67
    5dbc:	80c00015 	stw	r3,0(r16)
    5dc0:	10800054 	ori	r2,r2,1
    5dc4:	8080030d 	sth	r2,12(r16)
    5dc8:	00800044 	movi	r2,1
    5dcc:	80c00415 	stw	r3,16(r16)
    5dd0:	80800515 	stw	r2,20(r16)
    5dd4:	04c00044 	movi	r19,1
    5dd8:	05010004 	movi	r20,1024
    5ddc:	04820004 	movi	r18,2048
    5de0:	a00b883a 	mov	r5,r20
    5de4:	8809883a 	mov	r4,r17
    5de8:	0005f640 	call	5f64 <_malloc_r>
    5dec:	10001726 	beq	r2,zero,5e4c <__smakebuf_r+0x130>
    5df0:	80c0030b 	ldhu	r3,12(r16)
    5df4:	01000034 	movhi	r4,0
    5df8:	2114ec04 	addi	r4,r4,21424
    5dfc:	89000f15 	stw	r4,60(r17)
    5e00:	18c02014 	ori	r3,r3,128
    5e04:	80c0030d 	sth	r3,12(r16)
    5e08:	80800015 	stw	r2,0(r16)
    5e0c:	80800415 	stw	r2,16(r16)
    5e10:	85000515 	stw	r20,20(r16)
    5e14:	98001d1e 	bne	r19,zero,5e8c <__smakebuf_r+0x170>
    5e18:	90c6b03a 	or	r3,r18,r3
    5e1c:	80c0030d 	sth	r3,12(r16)
    5e20:	003fce06 	br	5d5c <__smakebuf_r+0x40>
    5e24:	8080030b 	ldhu	r2,12(r16)
    5e28:	1080200c 	andi	r2,r2,128
    5e2c:	0027883a 	mov	r19,zero
    5e30:	10001326 	beq	r2,zero,5e80 <__smakebuf_r+0x164>
    5e34:	05001004 	movi	r20,64
    5e38:	a00b883a 	mov	r5,r20
    5e3c:	8809883a 	mov	r4,r17
    5e40:	0025883a 	mov	r18,zero
    5e44:	0005f640 	call	5f64 <_malloc_r>
    5e48:	103fe91e 	bne	r2,zero,5df0 <__smakebuf_r+0xd4>
    5e4c:	8080030b 	ldhu	r2,12(r16)
    5e50:	10c0800c 	andi	r3,r2,512
    5e54:	183fc11e 	bne	r3,zero,5d5c <__smakebuf_r+0x40>
    5e58:	00ffff04 	movi	r3,-4
    5e5c:	10c4703a 	and	r2,r2,r3
    5e60:	10800094 	ori	r2,r2,2
    5e64:	80c010c4 	addi	r3,r16,67
    5e68:	8080030d 	sth	r2,12(r16)
    5e6c:	00800044 	movi	r2,1
    5e70:	80c00015 	stw	r3,0(r16)
    5e74:	80c00415 	stw	r3,16(r16)
    5e78:	80800515 	stw	r2,20(r16)
    5e7c:	003fb706 	br	5d5c <__smakebuf_r+0x40>
    5e80:	05010004 	movi	r20,1024
    5e84:	0025883a 	mov	r18,zero
    5e88:	003fd506 	br	5de0 <__smakebuf_r+0xc4>
    5e8c:	8140038f 	ldh	r5,14(r16)
    5e90:	8809883a 	mov	r4,r17
    5e94:	0009ca80 	call	9ca8 <_isatty_r>
    5e98:	80c0030b 	ldhu	r3,12(r16)
    5e9c:	103fde26 	beq	r2,zero,5e18 <__smakebuf_r+0xfc>
    5ea0:	18ffff0c 	andi	r3,r3,65532
    5ea4:	18c00054 	ori	r3,r3,1
    5ea8:	003fdb06 	br	5e18 <__smakebuf_r+0xfc>
    5eac:	04c00044 	movi	r19,1
    5eb0:	05010004 	movi	r20,1024
    5eb4:	04820004 	movi	r18,2048
    5eb8:	003fc906 	br	5de0 <__smakebuf_r+0xc4>
    5ebc:	0027883a 	mov	r19,zero
    5ec0:	05010004 	movi	r20,1024
    5ec4:	04820004 	movi	r18,2048
    5ec8:	003fc506 	br	5de0 <__smakebuf_r+0xc4>

00005ecc <__swhatbuf_r>:
    5ecc:	deffea04 	addi	sp,sp,-88
    5ed0:	dc001215 	stw	r16,72(sp)
    5ed4:	2821883a 	mov	r16,r5
    5ed8:	2940038f 	ldh	r5,14(r5)
    5edc:	dc801415 	stw	r18,80(sp)
    5ee0:	dc401315 	stw	r17,76(sp)
    5ee4:	dfc01515 	stw	ra,84(sp)
    5ee8:	3023883a 	mov	r17,r6
    5eec:	3825883a 	mov	r18,r7
    5ef0:	28001016 	blt	r5,zero,5f34 <__swhatbuf_r+0x68>
    5ef4:	d80d883a 	mov	r6,sp
    5ef8:	00097900 	call	9790 <_fstat_r>
    5efc:	10000d16 	blt	r2,zero,5f34 <__swhatbuf_r+0x68>
    5f00:	d8c00117 	ldw	r3,4(sp)
    5f04:	00820004 	movi	r2,2048
    5f08:	18fc000c 	andi	r3,r3,61440
    5f0c:	18c80020 	cmpeqi	r3,r3,8192
    5f10:	90c00015 	stw	r3,0(r18)
    5f14:	00c10004 	movi	r3,1024
    5f18:	88c00015 	stw	r3,0(r17)
    5f1c:	dfc01517 	ldw	ra,84(sp)
    5f20:	dc801417 	ldw	r18,80(sp)
    5f24:	dc401317 	ldw	r17,76(sp)
    5f28:	dc001217 	ldw	r16,72(sp)
    5f2c:	dec01604 	addi	sp,sp,88
    5f30:	f800283a 	ret
    5f34:	8080030b 	ldhu	r2,12(r16)
    5f38:	90000015 	stw	zero,0(r18)
    5f3c:	1080200c 	andi	r2,r2,128
    5f40:	10000426 	beq	r2,zero,5f54 <__swhatbuf_r+0x88>
    5f44:	00801004 	movi	r2,64
    5f48:	88800015 	stw	r2,0(r17)
    5f4c:	0005883a 	mov	r2,zero
    5f50:	003ff206 	br	5f1c <__swhatbuf_r+0x50>
    5f54:	00810004 	movi	r2,1024
    5f58:	88800015 	stw	r2,0(r17)
    5f5c:	0005883a 	mov	r2,zero
    5f60:	003fee06 	br	5f1c <__swhatbuf_r+0x50>

00005f64 <_malloc_r>:
    5f64:	defff604 	addi	sp,sp,-40
    5f68:	dc400115 	stw	r17,4(sp)
    5f6c:	2c4002c4 	addi	r17,r5,11
    5f70:	dc800215 	stw	r18,8(sp)
    5f74:	dfc00915 	stw	ra,36(sp)
    5f78:	df000815 	stw	fp,32(sp)
    5f7c:	ddc00715 	stw	r23,28(sp)
    5f80:	dd800615 	stw	r22,24(sp)
    5f84:	dd400515 	stw	r21,20(sp)
    5f88:	dd000415 	stw	r20,16(sp)
    5f8c:	dcc00315 	stw	r19,12(sp)
    5f90:	dc000015 	stw	r16,0(sp)
    5f94:	888005e8 	cmpgeui	r2,r17,23
    5f98:	2025883a 	mov	r18,r4
    5f9c:	10001b1e 	bne	r2,zero,600c <_malloc_r+0xa8>
    5fa0:	29400468 	cmpgeui	r5,r5,17
    5fa4:	2800821e 	bne	r5,zero,61b0 <_malloc_r+0x24c>
    5fa8:	000f0240 	call	f024 <__malloc_lock>
    5fac:	04400404 	movi	r17,16
    5fb0:	00800604 	movi	r2,24
    5fb4:	01c00084 	movi	r7,2
    5fb8:	04c000b4 	movhi	r19,2
    5fbc:	9cf17004 	addi	r19,r19,-14912
    5fc0:	9885883a 	add	r2,r19,r2
    5fc4:	14000117 	ldw	r16,4(r2)
    5fc8:	10fffe04 	addi	r3,r2,-8
    5fcc:	80c08b26 	beq	r16,r3,61fc <_malloc_r+0x298>
    5fd0:	80800117 	ldw	r2,4(r16)
    5fd4:	81000317 	ldw	r4,12(r16)
    5fd8:	00ffff04 	movi	r3,-4
    5fdc:	10c4703a 	and	r2,r2,r3
    5fe0:	81400217 	ldw	r5,8(r16)
    5fe4:	8085883a 	add	r2,r16,r2
    5fe8:	10c00117 	ldw	r3,4(r2)
    5fec:	29000315 	stw	r4,12(r5)
    5ff0:	21400215 	stw	r5,8(r4)
    5ff4:	18c00054 	ori	r3,r3,1
    5ff8:	10c00115 	stw	r3,4(r2)
    5ffc:	9009883a 	mov	r4,r18
    6000:	000f14c0 	call	f14c <__malloc_unlock>
    6004:	80800204 	addi	r2,r16,8
    6008:	00006c06 	br	61bc <_malloc_r+0x258>
    600c:	00bffe04 	movi	r2,-8
    6010:	88a2703a 	and	r17,r17,r2
    6014:	88006616 	blt	r17,zero,61b0 <_malloc_r+0x24c>
    6018:	89406536 	bltu	r17,r5,61b0 <_malloc_r+0x24c>
    601c:	000f0240 	call	f024 <__malloc_lock>
    6020:	88807e28 	cmpgeui	r2,r17,504
    6024:	10012226 	beq	r2,zero,64b0 <_malloc_r+0x54c>
    6028:	8804d27a 	srli	r2,r17,9
    602c:	10006f26 	beq	r2,zero,61ec <_malloc_r+0x288>
    6030:	10c00168 	cmpgeui	r3,r2,5
    6034:	1800fe1e 	bne	r3,zero,6430 <_malloc_r+0x4cc>
    6038:	8804d1ba 	srli	r2,r17,6
    603c:	11c00e44 	addi	r7,r2,57
    6040:	380890fa 	slli	r4,r7,3
    6044:	12000e04 	addi	r8,r2,56
    6048:	04c000b4 	movhi	r19,2
    604c:	9cf17004 	addi	r19,r19,-14912
    6050:	9909883a 	add	r4,r19,r4
    6054:	24000117 	ldw	r16,4(r4)
    6058:	213ffe04 	addi	r4,r4,-8
    605c:	24000b26 	beq	r4,r16,608c <_malloc_r+0x128>
    6060:	01bfff04 	movi	r6,-4
    6064:	00000306 	br	6074 <_malloc_r+0x110>
    6068:	1800d60e 	bge	r3,zero,63c4 <_malloc_r+0x460>
    606c:	84000317 	ldw	r16,12(r16)
    6070:	24000626 	beq	r4,r16,608c <_malloc_r+0x128>
    6074:	80800117 	ldw	r2,4(r16)
    6078:	1184703a 	and	r2,r2,r6
    607c:	1447c83a 	sub	r3,r2,r17
    6080:	19400408 	cmpgei	r5,r3,16
    6084:	283ff826 	beq	r5,zero,6068 <_malloc_r+0x104>
    6088:	400f883a 	mov	r7,r8
    608c:	9c000417 	ldw	r16,16(r19)
    6090:	024000b4 	movhi	r9,2
    6094:	4a717204 	addi	r9,r9,-14904
    6098:	82405f26 	beq	r16,r9,6218 <_malloc_r+0x2b4>
    609c:	80c00117 	ldw	r3,4(r16)
    60a0:	00bfff04 	movi	r2,-4
    60a4:	1884703a 	and	r2,r3,r2
    60a8:	1447c83a 	sub	r3,r2,r17
    60ac:	19000410 	cmplti	r4,r3,16
    60b0:	20010a26 	beq	r4,zero,64dc <_malloc_r+0x578>
    60b4:	9a400515 	stw	r9,20(r19)
    60b8:	9a400415 	stw	r9,16(r19)
    60bc:	1800ff0e 	bge	r3,zero,64bc <_malloc_r+0x558>
    60c0:	10c08028 	cmpgeui	r3,r2,512
    60c4:	1800c11e 	bne	r3,zero,63cc <_malloc_r+0x468>
    60c8:	1006d0fa 	srli	r3,r2,3
    60cc:	1008d17a 	srli	r4,r2,5
    60d0:	00800044 	movi	r2,1
    60d4:	18c00044 	addi	r3,r3,1
    60d8:	180690fa 	slli	r3,r3,3
    60dc:	99400117 	ldw	r5,4(r19)
    60e0:	1104983a 	sll	r2,r2,r4
    60e4:	98c7883a 	add	r3,r19,r3
    60e8:	19000017 	ldw	r4,0(r3)
    60ec:	1144b03a 	or	r2,r2,r5
    60f0:	197ffe04 	addi	r5,r3,-8
    60f4:	81400315 	stw	r5,12(r16)
    60f8:	81000215 	stw	r4,8(r16)
    60fc:	98800115 	stw	r2,4(r19)
    6100:	1c000015 	stw	r16,0(r3)
    6104:	24000315 	stw	r16,12(r4)
    6108:	3807d0ba 	srai	r3,r7,2
    610c:	01000044 	movi	r4,1
    6110:	20c8983a 	sll	r4,r4,r3
    6114:	11004536 	bltu	r2,r4,622c <_malloc_r+0x2c8>
    6118:	2086703a 	and	r3,r4,r2
    611c:	18000a1e 	bne	r3,zero,6148 <_malloc_r+0x1e4>
    6120:	00ffff04 	movi	r3,-4
    6124:	2109883a 	add	r4,r4,r4
    6128:	38ce703a 	and	r7,r7,r3
    612c:	2086703a 	and	r3,r4,r2
    6130:	39c00104 	addi	r7,r7,4
    6134:	1800041e 	bne	r3,zero,6148 <_malloc_r+0x1e4>
    6138:	2109883a 	add	r4,r4,r4
    613c:	2086703a 	and	r3,r4,r2
    6140:	39c00104 	addi	r7,r7,4
    6144:	183ffc26 	beq	r3,zero,6138 <_malloc_r+0x1d4>
    6148:	02bfff04 	movi	r10,-4
    614c:	381690fa 	slli	r11,r7,3
    6150:	3819883a 	mov	r12,r7
    6154:	9ad7883a 	add	r11,r19,r11
    6158:	5811883a 	mov	r8,r11
    615c:	40800317 	ldw	r2,12(r8)
    6160:	4080bc26 	beq	r8,r2,6454 <_malloc_r+0x4f0>
    6164:	10c00117 	ldw	r3,4(r2)
    6168:	1021883a 	mov	r16,r2
    616c:	10800317 	ldw	r2,12(r2)
    6170:	1a86703a 	and	r3,r3,r10
    6174:	1c4bc83a 	sub	r5,r3,r17
    6178:	29800410 	cmplti	r6,r5,16
    617c:	3000ba26 	beq	r6,zero,6468 <_malloc_r+0x504>
    6180:	283ff716 	blt	r5,zero,6160 <_malloc_r+0x1fc>
    6184:	80c7883a 	add	r3,r16,r3
    6188:	19400117 	ldw	r5,4(r3)
    618c:	81800217 	ldw	r6,8(r16)
    6190:	9009883a 	mov	r4,r18
    6194:	29400054 	ori	r5,r5,1
    6198:	19400115 	stw	r5,4(r3)
    619c:	30800315 	stw	r2,12(r6)
    61a0:	11800215 	stw	r6,8(r2)
    61a4:	000f14c0 	call	f14c <__malloc_unlock>
    61a8:	80800204 	addi	r2,r16,8
    61ac:	00000306 	br	61bc <_malloc_r+0x258>
    61b0:	00800304 	movi	r2,12
    61b4:	90800015 	stw	r2,0(r18)
    61b8:	0005883a 	mov	r2,zero
    61bc:	dfc00917 	ldw	ra,36(sp)
    61c0:	df000817 	ldw	fp,32(sp)
    61c4:	ddc00717 	ldw	r23,28(sp)
    61c8:	dd800617 	ldw	r22,24(sp)
    61cc:	dd400517 	ldw	r21,20(sp)
    61d0:	dd000417 	ldw	r20,16(sp)
    61d4:	dcc00317 	ldw	r19,12(sp)
    61d8:	dc800217 	ldw	r18,8(sp)
    61dc:	dc400117 	ldw	r17,4(sp)
    61e0:	dc000017 	ldw	r16,0(sp)
    61e4:	dec00a04 	addi	sp,sp,40
    61e8:	f800283a 	ret
    61ec:	01008004 	movi	r4,512
    61f0:	01c01004 	movi	r7,64
    61f4:	02000fc4 	movi	r8,63
    61f8:	003f9306 	br	6048 <_malloc_r+0xe4>
    61fc:	14000317 	ldw	r16,12(r2)
    6200:	39c00084 	addi	r7,r7,2
    6204:	143f721e 	bne	r2,r16,5fd0 <_malloc_r+0x6c>
    6208:	9c000417 	ldw	r16,16(r19)
    620c:	024000b4 	movhi	r9,2
    6210:	4a717204 	addi	r9,r9,-14904
    6214:	827fa11e 	bne	r16,r9,609c <_malloc_r+0x138>
    6218:	3807d0ba 	srai	r3,r7,2
    621c:	01000044 	movi	r4,1
    6220:	98800117 	ldw	r2,4(r19)
    6224:	20c8983a 	sll	r4,r4,r3
    6228:	113fbb2e 	bgeu	r2,r4,6118 <_malloc_r+0x1b4>
    622c:	9c000217 	ldw	r16,8(r19)
    6230:	00bfff04 	movi	r2,-4
    6234:	85400117 	ldw	r21,4(r16)
    6238:	a8ac703a 	and	r22,r21,r2
    623c:	b4400336 	bltu	r22,r17,624c <_malloc_r+0x2e8>
    6240:	b445c83a 	sub	r2,r22,r17
    6244:	10c00408 	cmpgei	r3,r2,16
    6248:	1800541e 	bne	r3,zero,639c <_malloc_r+0x438>
    624c:	008000b4 	movhi	r2,2
    6250:	10b81917 	ldw	r2,-8092(r2)
    6254:	00c000b4 	movhi	r3,2
    6258:	1d403717 	ldw	r21,220(r3)
    625c:	10bfffd8 	cmpnei	r2,r2,-1
    6260:	85b9883a 	add	fp,r16,r22
    6264:	8d6b883a 	add	r21,r17,r21
    6268:	1000d626 	beq	r2,zero,65c4 <_malloc_r+0x660>
    626c:	ad4403c4 	addi	r21,r21,4111
    6270:	00bc0004 	movi	r2,-4096
    6274:	a8aa703a 	and	r21,r21,r2
    6278:	a80b883a 	mov	r5,r21
    627c:	9009883a 	mov	r4,r18
    6280:	0007a640 	call	7a64 <_sbrk_r>
    6284:	102f883a 	mov	r23,r2
    6288:	10bfffd8 	cmpnei	r2,r2,-1
    628c:	1000a826 	beq	r2,zero,6530 <_malloc_r+0x5cc>
    6290:	bf00a636 	bltu	r23,fp,652c <_malloc_r+0x5c8>
    6294:	008000f4 	movhi	r2,3
    6298:	15306917 	ldw	r20,-15964(r2)
    629c:	ad29883a 	add	r20,r21,r20
    62a0:	15306915 	stw	r20,-15964(r2)
    62a4:	a007883a 	mov	r3,r20
    62a8:	e5c0ec26 	beq	fp,r23,665c <_malloc_r+0x6f8>
    62ac:	008000b4 	movhi	r2,2
    62b0:	10b81917 	ldw	r2,-8092(r2)
    62b4:	10bfffd8 	cmpnei	r2,r2,-1
    62b8:	1000ef26 	beq	r2,zero,6678 <_malloc_r+0x714>
    62bc:	bf39c83a 	sub	fp,r23,fp
    62c0:	e0c7883a 	add	r3,fp,r3
    62c4:	008000f4 	movhi	r2,3
    62c8:	10f06915 	stw	r3,-15964(r2)
    62cc:	bf0001cc 	andi	fp,r23,7
    62d0:	e000c526 	beq	fp,zero,65e8 <_malloc_r+0x684>
    62d4:	bf2fc83a 	sub	r23,r23,fp
    62d8:	bdc00204 	addi	r23,r23,8
    62dc:	05040204 	movi	r20,4104
    62e0:	a729c83a 	sub	r20,r20,fp
    62e4:	bd6b883a 	add	r21,r23,r21
    62e8:	a569c83a 	sub	r20,r20,r21
    62ec:	a503ffcc 	andi	r20,r20,4095
    62f0:	a00b883a 	mov	r5,r20
    62f4:	9009883a 	mov	r4,r18
    62f8:	0007a640 	call	7a64 <_sbrk_r>
    62fc:	10ffffe0 	cmpeqi	r3,r2,-1
    6300:	1800f31e 	bne	r3,zero,66d0 <_malloc_r+0x76c>
    6304:	15c5c83a 	sub	r2,r2,r23
    6308:	152b883a 	add	r21,r2,r20
    630c:	008000f4 	movhi	r2,3
    6310:	11706917 	ldw	r5,-15964(r2)
    6314:	9dc00215 	stw	r23,8(r19)
    6318:	ad400054 	ori	r21,r21,1
    631c:	a169883a 	add	r20,r20,r5
    6320:	15306915 	stw	r20,-15964(r2)
    6324:	bd400115 	stw	r21,4(r23)
    6328:	84c0d626 	beq	r16,r19,6684 <_malloc_r+0x720>
    632c:	b0800428 	cmpgeui	r2,r22,16
    6330:	1000d626 	beq	r2,zero,668c <_malloc_r+0x728>
    6334:	80c00117 	ldw	r3,4(r16)
    6338:	013ffe04 	movi	r4,-8
    633c:	b0bffd04 	addi	r2,r22,-12
    6340:	1104703a 	and	r2,r2,r4
    6344:	18c0004c 	andi	r3,r3,1
    6348:	1886b03a 	or	r3,r3,r2
    634c:	80c00115 	stw	r3,4(r16)
    6350:	01000144 	movi	r4,5
    6354:	8087883a 	add	r3,r16,r2
    6358:	19000115 	stw	r4,4(r3)
    635c:	19000215 	stw	r4,8(r3)
    6360:	10800428 	cmpgeui	r2,r2,16
    6364:	1000df1e 	bne	r2,zero,66e4 <_malloc_r+0x780>
    6368:	bd400117 	ldw	r21,4(r23)
    636c:	b821883a 	mov	r16,r23
    6370:	008000b4 	movhi	r2,2
    6374:	10803617 	ldw	r2,216(r2)
    6378:	1500022e 	bgeu	r2,r20,6384 <_malloc_r+0x420>
    637c:	008000b4 	movhi	r2,2
    6380:	15003615 	stw	r20,216(r2)
    6384:	008000b4 	movhi	r2,2
    6388:	10803517 	ldw	r2,212(r2)
    638c:	15006a2e 	bgeu	r2,r20,6538 <_malloc_r+0x5d4>
    6390:	008000b4 	movhi	r2,2
    6394:	15003515 	stw	r20,212(r2)
    6398:	00006706 	br	6538 <_malloc_r+0x5d4>
    639c:	88c00054 	ori	r3,r17,1
    63a0:	80c00115 	stw	r3,4(r16)
    63a4:	8463883a 	add	r17,r16,r17
    63a8:	10800054 	ori	r2,r2,1
    63ac:	9c400215 	stw	r17,8(r19)
    63b0:	88800115 	stw	r2,4(r17)
    63b4:	9009883a 	mov	r4,r18
    63b8:	000f14c0 	call	f14c <__malloc_unlock>
    63bc:	80800204 	addi	r2,r16,8
    63c0:	003f7e06 	br	61bc <_malloc_r+0x258>
    63c4:	81000317 	ldw	r4,12(r16)
    63c8:	003f0506 	br	5fe0 <_malloc_r+0x7c>
    63cc:	1006d27a 	srli	r3,r2,9
    63d0:	19000168 	cmpgeui	r4,r3,5
    63d4:	20005026 	beq	r4,zero,6518 <_malloc_r+0x5b4>
    63d8:	19000568 	cmpgeui	r4,r3,21
    63dc:	20008c1e 	bne	r4,zero,6610 <_malloc_r+0x6ac>
    63e0:	19401704 	addi	r5,r3,92
    63e4:	280a90fa 	slli	r5,r5,3
    63e8:	190016c4 	addi	r4,r3,91
    63ec:	994b883a 	add	r5,r19,r5
    63f0:	28c00017 	ldw	r3,0(r5)
    63f4:	297ffe04 	addi	r5,r5,-8
    63f8:	28c07426 	beq	r5,r3,65cc <_malloc_r+0x668>
    63fc:	01bfff04 	movi	r6,-4
    6400:	19000117 	ldw	r4,4(r3)
    6404:	2188703a 	and	r4,r4,r6
    6408:	1100022e 	bgeu	r2,r4,6414 <_malloc_r+0x4b0>
    640c:	18c00217 	ldw	r3,8(r3)
    6410:	28fffb1e 	bne	r5,r3,6400 <_malloc_r+0x49c>
    6414:	19400317 	ldw	r5,12(r3)
    6418:	98800117 	ldw	r2,4(r19)
    641c:	81400315 	stw	r5,12(r16)
    6420:	80c00215 	stw	r3,8(r16)
    6424:	2c000215 	stw	r16,8(r5)
    6428:	1c000315 	stw	r16,12(r3)
    642c:	003f3606 	br	6108 <_malloc_r+0x1a4>
    6430:	10c00568 	cmpgeui	r3,r2,21
    6434:	18004a26 	beq	r3,zero,6560 <_malloc_r+0x5fc>
    6438:	10c01568 	cmpgeui	r3,r2,85
    643c:	18007b1e 	bne	r3,zero,662c <_malloc_r+0x6c8>
    6440:	8804d33a 	srli	r2,r17,12
    6444:	11c01bc4 	addi	r7,r2,111
    6448:	380890fa 	slli	r4,r7,3
    644c:	12001b84 	addi	r8,r2,110
    6450:	003efd06 	br	6048 <_malloc_r+0xe4>
    6454:	63000044 	addi	r12,r12,1
    6458:	608000cc 	andi	r2,r12,3
    645c:	42000204 	addi	r8,r8,8
    6460:	103f3e1e 	bne	r2,zero,615c <_malloc_r+0x1f8>
    6464:	00004506 	br	657c <_malloc_r+0x618>
    6468:	81000217 	ldw	r4,8(r16)
    646c:	89800054 	ori	r6,r17,1
    6470:	81800115 	stw	r6,4(r16)
    6474:	20800315 	stw	r2,12(r4)
    6478:	11000215 	stw	r4,8(r2)
    647c:	8463883a 	add	r17,r16,r17
    6480:	9c400515 	stw	r17,20(r19)
    6484:	9c400415 	stw	r17,16(r19)
    6488:	28800054 	ori	r2,r5,1
    648c:	88800115 	stw	r2,4(r17)
    6490:	8a400315 	stw	r9,12(r17)
    6494:	8a400215 	stw	r9,8(r17)
    6498:	80c7883a 	add	r3,r16,r3
    649c:	19400015 	stw	r5,0(r3)
    64a0:	9009883a 	mov	r4,r18
    64a4:	000f14c0 	call	f14c <__malloc_unlock>
    64a8:	80800204 	addi	r2,r16,8
    64ac:	003f4306 	br	61bc <_malloc_r+0x258>
    64b0:	880ed0fa 	srli	r7,r17,3
    64b4:	88800204 	addi	r2,r17,8
    64b8:	003ebf06 	br	5fb8 <_malloc_r+0x54>
    64bc:	8085883a 	add	r2,r16,r2
    64c0:	10c00117 	ldw	r3,4(r2)
    64c4:	9009883a 	mov	r4,r18
    64c8:	18c00054 	ori	r3,r3,1
    64cc:	10c00115 	stw	r3,4(r2)
    64d0:	000f14c0 	call	f14c <__malloc_unlock>
    64d4:	80800204 	addi	r2,r16,8
    64d8:	003f3806 	br	61bc <_malloc_r+0x258>
    64dc:	89000054 	ori	r4,r17,1
    64e0:	81000115 	stw	r4,4(r16)
    64e4:	8463883a 	add	r17,r16,r17
    64e8:	9c400515 	stw	r17,20(r19)
    64ec:	9c400415 	stw	r17,16(r19)
    64f0:	19000054 	ori	r4,r3,1
    64f4:	89000115 	stw	r4,4(r17)
    64f8:	8085883a 	add	r2,r16,r2
    64fc:	8a400315 	stw	r9,12(r17)
    6500:	8a400215 	stw	r9,8(r17)
    6504:	10c00015 	stw	r3,0(r2)
    6508:	9009883a 	mov	r4,r18
    650c:	000f14c0 	call	f14c <__malloc_unlock>
    6510:	80800204 	addi	r2,r16,8
    6514:	003f2906 	br	61bc <_malloc_r+0x258>
    6518:	1006d1ba 	srli	r3,r2,6
    651c:	19400e44 	addi	r5,r3,57
    6520:	280a90fa 	slli	r5,r5,3
    6524:	19000e04 	addi	r4,r3,56
    6528:	003fb006 	br	63ec <_malloc_r+0x488>
    652c:	84c04626 	beq	r16,r19,6648 <_malloc_r+0x6e4>
    6530:	9c000217 	ldw	r16,8(r19)
    6534:	85400117 	ldw	r21,4(r16)
    6538:	00bfff04 	movi	r2,-4
    653c:	a8aa703a 	and	r21,r21,r2
    6540:	ac45c83a 	sub	r2,r21,r17
    6544:	ac400236 	bltu	r21,r17,6550 <_malloc_r+0x5ec>
    6548:	10c00408 	cmpgei	r3,r2,16
    654c:	183f931e 	bne	r3,zero,639c <_malloc_r+0x438>
    6550:	9009883a 	mov	r4,r18
    6554:	000f14c0 	call	f14c <__malloc_unlock>
    6558:	0005883a 	mov	r2,zero
    655c:	003f1706 	br	61bc <_malloc_r+0x258>
    6560:	11c01704 	addi	r7,r2,92
    6564:	380890fa 	slli	r4,r7,3
    6568:	120016c4 	addi	r8,r2,91
    656c:	003eb606 	br	6048 <_malloc_r+0xe4>
    6570:	58800217 	ldw	r2,8(r11)
    6574:	39ffffc4 	addi	r7,r7,-1
    6578:	12c0701e 	bne	r2,r11,673c <_malloc_r+0x7d8>
    657c:	388000cc 	andi	r2,r7,3
    6580:	5afffe04 	addi	r11,r11,-8
    6584:	103ffa1e 	bne	r2,zero,6570 <_malloc_r+0x60c>
    6588:	98c00117 	ldw	r3,4(r19)
    658c:	0104303a 	nor	r2,zero,r4
    6590:	10c4703a 	and	r2,r2,r3
    6594:	98800115 	stw	r2,4(r19)
    6598:	2109883a 	add	r4,r4,r4
    659c:	113f2336 	bltu	r2,r4,622c <_malloc_r+0x2c8>
    65a0:	203f2226 	beq	r4,zero,622c <_malloc_r+0x2c8>
    65a4:	2086703a 	and	r3,r4,r2
    65a8:	1800041e 	bne	r3,zero,65bc <_malloc_r+0x658>
    65ac:	2109883a 	add	r4,r4,r4
    65b0:	2086703a 	and	r3,r4,r2
    65b4:	63000104 	addi	r12,r12,4
    65b8:	183ffc26 	beq	r3,zero,65ac <_malloc_r+0x648>
    65bc:	600f883a 	mov	r7,r12
    65c0:	003ee206 	br	614c <_malloc_r+0x1e8>
    65c4:	ad400404 	addi	r21,r21,16
    65c8:	003f2b06 	br	6278 <_malloc_r+0x314>
    65cc:	2009d0ba 	srai	r4,r4,2
    65d0:	00800044 	movi	r2,1
    65d4:	99800117 	ldw	r6,4(r19)
    65d8:	1104983a 	sll	r2,r2,r4
    65dc:	1184b03a 	or	r2,r2,r6
    65e0:	98800115 	stw	r2,4(r19)
    65e4:	003f8d06 	br	641c <_malloc_r+0x4b8>
    65e8:	bd69883a 	add	r20,r23,r21
    65ec:	0529c83a 	sub	r20,zero,r20
    65f0:	a503ffcc 	andi	r20,r20,4095
    65f4:	a00b883a 	mov	r5,r20
    65f8:	9009883a 	mov	r4,r18
    65fc:	0007a640 	call	7a64 <_sbrk_r>
    6600:	10ffffe0 	cmpeqi	r3,r2,-1
    6604:	183f3f26 	beq	r3,zero,6304 <_malloc_r+0x3a0>
    6608:	0029883a 	mov	r20,zero
    660c:	003f3f06 	br	630c <_malloc_r+0x3a8>
    6610:	19001568 	cmpgeui	r4,r3,85
    6614:	2000201e 	bne	r4,zero,6698 <_malloc_r+0x734>
    6618:	1006d33a 	srli	r3,r2,12
    661c:	19401bc4 	addi	r5,r3,111
    6620:	280a90fa 	slli	r5,r5,3
    6624:	19001b84 	addi	r4,r3,110
    6628:	003f7006 	br	63ec <_malloc_r+0x488>
    662c:	10c05568 	cmpgeui	r3,r2,341
    6630:	1800201e 	bne	r3,zero,66b4 <_malloc_r+0x750>
    6634:	8804d3fa 	srli	r2,r17,15
    6638:	11c01e04 	addi	r7,r2,120
    663c:	380890fa 	slli	r4,r7,3
    6640:	12001dc4 	addi	r8,r2,119
    6644:	003e8006 	br	6048 <_malloc_r+0xe4>
    6648:	008000f4 	movhi	r2,3
    664c:	10f06917 	ldw	r3,-15964(r2)
    6650:	a8c7883a 	add	r3,r21,r3
    6654:	10f06915 	stw	r3,-15964(r2)
    6658:	003f1406 	br	62ac <_malloc_r+0x348>
    665c:	e083ffcc 	andi	r2,fp,4095
    6660:	103f121e 	bne	r2,zero,62ac <_malloc_r+0x348>
    6664:	9c000217 	ldw	r16,8(r19)
    6668:	b56b883a 	add	r21,r22,r21
    666c:	ad400054 	ori	r21,r21,1
    6670:	85400115 	stw	r21,4(r16)
    6674:	003f3e06 	br	6370 <_malloc_r+0x40c>
    6678:	008000b4 	movhi	r2,2
    667c:	15f81915 	stw	r23,-8092(r2)
    6680:	003f1206 	br	62cc <_malloc_r+0x368>
    6684:	b821883a 	mov	r16,r23
    6688:	003f3906 	br	6370 <_malloc_r+0x40c>
    668c:	00800044 	movi	r2,1
    6690:	b8800115 	stw	r2,4(r23)
    6694:	003fae06 	br	6550 <_malloc_r+0x5ec>
    6698:	19005568 	cmpgeui	r4,r3,341
    669c:	2000191e 	bne	r4,zero,6704 <_malloc_r+0x7a0>
    66a0:	1006d3fa 	srli	r3,r2,15
    66a4:	19401e04 	addi	r5,r3,120
    66a8:	280a90fa 	slli	r5,r5,3
    66ac:	19001dc4 	addi	r4,r3,119
    66b0:	003f4e06 	br	63ec <_malloc_r+0x488>
    66b4:	10815568 	cmpgeui	r2,r2,1365
    66b8:	1000191e 	bne	r2,zero,6720 <_malloc_r+0x7bc>
    66bc:	8804d4ba 	srli	r2,r17,18
    66c0:	11c01f44 	addi	r7,r2,125
    66c4:	380890fa 	slli	r4,r7,3
    66c8:	12001f04 	addi	r8,r2,124
    66cc:	003e5e06 	br	6048 <_malloc_r+0xe4>
    66d0:	e73ffe04 	addi	fp,fp,-8
    66d4:	af2b883a 	add	r21,r21,fp
    66d8:	adebc83a 	sub	r21,r21,r23
    66dc:	0029883a 	mov	r20,zero
    66e0:	003f0a06 	br	630c <_malloc_r+0x3a8>
    66e4:	81400204 	addi	r5,r16,8
    66e8:	9009883a 	mov	r4,r18
    66ec:	00058600 	call	5860 <_free_r>
    66f0:	9c000217 	ldw	r16,8(r19)
    66f4:	008000f4 	movhi	r2,3
    66f8:	15306917 	ldw	r20,-15964(r2)
    66fc:	85400117 	ldw	r21,4(r16)
    6700:	003f1b06 	br	6370 <_malloc_r+0x40c>
    6704:	18c15568 	cmpgeui	r3,r3,1365
    6708:	1800091e 	bne	r3,zero,6730 <_malloc_r+0x7cc>
    670c:	1006d4ba 	srli	r3,r2,18
    6710:	19401f44 	addi	r5,r3,125
    6714:	280a90fa 	slli	r5,r5,3
    6718:	19001f04 	addi	r4,r3,124
    671c:	003f3306 	br	63ec <_malloc_r+0x488>
    6720:	0100fe04 	movi	r4,1016
    6724:	01c01fc4 	movi	r7,127
    6728:	02001f84 	movi	r8,126
    672c:	003e4606 	br	6048 <_malloc_r+0xe4>
    6730:	0140fe04 	movi	r5,1016
    6734:	01001f84 	movi	r4,126
    6738:	003f2c06 	br	63ec <_malloc_r+0x488>
    673c:	98800117 	ldw	r2,4(r19)
    6740:	003f9506 	br	6598 <_malloc_r+0x634>

00006744 <memchr>:
    6744:	208000cc 	andi	r2,r4,3
    6748:	280f883a 	mov	r7,r5
    674c:	10000e26 	beq	r2,zero,6788 <memchr+0x44>
    6750:	30bfffc4 	addi	r2,r6,-1
    6754:	30001726 	beq	r6,zero,67b4 <memchr+0x70>
    6758:	29803fcc 	andi	r6,r5,255
    675c:	00000606 	br	6778 <memchr+0x34>
    6760:	21000044 	addi	r4,r4,1
    6764:	20c000cc 	andi	r3,r4,3
    6768:	18000826 	beq	r3,zero,678c <memchr+0x48>
    676c:	10bfffc4 	addi	r2,r2,-1
    6770:	10ffffe0 	cmpeqi	r3,r2,-1
    6774:	18000f1e 	bne	r3,zero,67b4 <memchr+0x70>
    6778:	20c00003 	ldbu	r3,0(r4)
    677c:	19bff81e 	bne	r3,r6,6760 <memchr+0x1c>
    6780:	2005883a 	mov	r2,r4
    6784:	f800283a 	ret
    6788:	3005883a 	mov	r2,r6
    678c:	10c00128 	cmpgeui	r3,r2,4
    6790:	18000a1e 	bne	r3,zero,67bc <memchr+0x78>
    6794:	10001e26 	beq	r2,zero,6810 <memchr+0xcc>
    6798:	2087883a 	add	r3,r4,r2
    679c:	39803fcc 	andi	r6,r7,255
    67a0:	2005883a 	mov	r2,r4
    67a4:	11000003 	ldbu	r4,0(r2)
    67a8:	21bff626 	beq	r4,r6,6784 <memchr+0x40>
    67ac:	10800044 	addi	r2,r2,1
    67b0:	18bffc1e 	bne	r3,r2,67a4 <memchr+0x60>
    67b4:	0005883a 	mov	r2,zero
    67b8:	f800283a 	ret
    67bc:	29403fcc 	andi	r5,r5,255
    67c0:	280c923a 	slli	r6,r5,8
    67c4:	027fbff4 	movhi	r9,65279
    67c8:	02202074 	movhi	r8,32897
    67cc:	314ab03a 	or	r5,r6,r5
    67d0:	280c943a 	slli	r6,r5,16
    67d4:	4a7fbfc4 	addi	r9,r9,-257
    67d8:	42202004 	addi	r8,r8,-32640
    67dc:	314cb03a 	or	r6,r6,r5
    67e0:	20c00017 	ldw	r3,0(r4)
    67e4:	30c6f03a 	xor	r3,r6,r3
    67e8:	1a4b883a 	add	r5,r3,r9
    67ec:	00c6303a 	nor	r3,zero,r3
    67f0:	28c6703a 	and	r3,r5,r3
    67f4:	1a06703a 	and	r3,r3,r8
    67f8:	183fe71e 	bne	r3,zero,6798 <memchr+0x54>
    67fc:	10bfff04 	addi	r2,r2,-4
    6800:	10c00128 	cmpgeui	r3,r2,4
    6804:	21000104 	addi	r4,r4,4
    6808:	183ff51e 	bne	r3,zero,67e0 <memchr+0x9c>
    680c:	003fe106 	br	6794 <memchr+0x50>
    6810:	f800283a 	ret

00006814 <memset>:
    6814:	20c000cc 	andi	r3,r4,3
    6818:	2005883a 	mov	r2,r4
    681c:	18003626 	beq	r3,zero,68f8 <memset+0xe4>
    6820:	31ffffc4 	addi	r7,r6,-1
    6824:	30003326 	beq	r6,zero,68f4 <memset+0xe0>
    6828:	2811883a 	mov	r8,r5
    682c:	2007883a 	mov	r3,r4
    6830:	00000306 	br	6840 <memset+0x2c>
    6834:	39ffffc4 	addi	r7,r7,-1
    6838:	39bfffe0 	cmpeqi	r6,r7,-1
    683c:	30002d1e 	bne	r6,zero,68f4 <memset+0xe0>
    6840:	18c00044 	addi	r3,r3,1
    6844:	198000cc 	andi	r6,r3,3
    6848:	1a3fffc5 	stb	r8,-1(r3)
    684c:	303ff91e 	bne	r6,zero,6834 <memset+0x20>
    6850:	39000130 	cmpltui	r4,r7,4
    6854:	2000221e 	bne	r4,zero,68e0 <memset+0xcc>
    6858:	29003fcc 	andi	r4,r5,255
    685c:	200c923a 	slli	r6,r4,8
    6860:	3a000430 	cmpltui	r8,r7,16
    6864:	3108b03a 	or	r4,r6,r4
    6868:	200c943a 	slli	r6,r4,16
    686c:	310cb03a 	or	r6,r6,r4
    6870:	40000e1e 	bne	r8,zero,68ac <memset+0x98>
    6874:	393ffc04 	addi	r4,r7,-16
    6878:	2008d13a 	srli	r4,r4,4
    687c:	21000044 	addi	r4,r4,1
    6880:	2008913a 	slli	r4,r4,4
    6884:	1909883a 	add	r4,r3,r4
    6888:	19800015 	stw	r6,0(r3)
    688c:	19800115 	stw	r6,4(r3)
    6890:	19800215 	stw	r6,8(r3)
    6894:	19800315 	stw	r6,12(r3)
    6898:	18c00404 	addi	r3,r3,16
    689c:	20fffa1e 	bne	r4,r3,6888 <memset+0x74>
    68a0:	3900030c 	andi	r4,r7,12
    68a4:	39c003cc 	andi	r7,r7,15
    68a8:	20000d26 	beq	r4,zero,68e0 <memset+0xcc>
    68ac:	1811883a 	mov	r8,r3
    68b0:	42000104 	addi	r8,r8,4
    68b4:	3a09c83a 	sub	r4,r7,r8
    68b8:	1909883a 	add	r4,r3,r4
    68bc:	21000128 	cmpgeui	r4,r4,4
    68c0:	41bfff15 	stw	r6,-4(r8)
    68c4:	203ffa1e 	bne	r4,zero,68b0 <memset+0x9c>
    68c8:	393fff04 	addi	r4,r7,-4
    68cc:	2008d0ba 	srli	r4,r4,2
    68d0:	39c000cc 	andi	r7,r7,3
    68d4:	21000044 	addi	r4,r4,1
    68d8:	200890ba 	slli	r4,r4,2
    68dc:	1907883a 	add	r3,r3,r4
    68e0:	38000426 	beq	r7,zero,68f4 <memset+0xe0>
    68e4:	19cf883a 	add	r7,r3,r7
    68e8:	18c00044 	addi	r3,r3,1
    68ec:	197fffc5 	stb	r5,-1(r3)
    68f0:	38fffd1e 	bne	r7,r3,68e8 <memset+0xd4>
    68f4:	f800283a 	ret
    68f8:	2007883a 	mov	r3,r4
    68fc:	300f883a 	mov	r7,r6
    6900:	003fd306 	br	6850 <memset+0x3c>

00006904 <_Balloc>:
    6904:	20801317 	ldw	r2,76(r4)
    6908:	defffc04 	addi	sp,sp,-16
    690c:	dc400115 	stw	r17,4(sp)
    6910:	dc000015 	stw	r16,0(sp)
    6914:	dfc00315 	stw	ra,12(sp)
    6918:	dc800215 	stw	r18,8(sp)
    691c:	2021883a 	mov	r16,r4
    6920:	2823883a 	mov	r17,r5
    6924:	10000e26 	beq	r2,zero,6960 <_Balloc+0x5c>
    6928:	880690ba 	slli	r3,r17,2
    692c:	10c7883a 	add	r3,r2,r3
    6930:	18800017 	ldw	r2,0(r3)
    6934:	10001126 	beq	r2,zero,697c <_Balloc+0x78>
    6938:	11000017 	ldw	r4,0(r2)
    693c:	19000015 	stw	r4,0(r3)
    6940:	10000415 	stw	zero,16(r2)
    6944:	10000315 	stw	zero,12(r2)
    6948:	dfc00317 	ldw	ra,12(sp)
    694c:	dc800217 	ldw	r18,8(sp)
    6950:	dc400117 	ldw	r17,4(sp)
    6954:	dc000017 	ldw	r16,0(sp)
    6958:	dec00404 	addi	sp,sp,16
    695c:	f800283a 	ret
    6960:	01800844 	movi	r6,33
    6964:	01400104 	movi	r5,4
    6968:	00092e40 	call	92e4 <_calloc_r>
    696c:	80801315 	stw	r2,76(r16)
    6970:	103fed1e 	bne	r2,zero,6928 <_Balloc+0x24>
    6974:	0005883a 	mov	r2,zero
    6978:	003ff306 	br	6948 <_Balloc+0x44>
    697c:	04800044 	movi	r18,1
    6980:	9464983a 	sll	r18,r18,r17
    6984:	01400044 	movi	r5,1
    6988:	8009883a 	mov	r4,r16
    698c:	91800144 	addi	r6,r18,5
    6990:	300c90ba 	slli	r6,r6,2
    6994:	00092e40 	call	92e4 <_calloc_r>
    6998:	103ff626 	beq	r2,zero,6974 <_Balloc+0x70>
    699c:	14400115 	stw	r17,4(r2)
    69a0:	14800215 	stw	r18,8(r2)
    69a4:	003fe606 	br	6940 <_Balloc+0x3c>

000069a8 <_Bfree>:
    69a8:	28000726 	beq	r5,zero,69c8 <_Bfree+0x20>
    69ac:	28c00117 	ldw	r3,4(r5)
    69b0:	20801317 	ldw	r2,76(r4)
    69b4:	180690ba 	slli	r3,r3,2
    69b8:	10c5883a 	add	r2,r2,r3
    69bc:	10c00017 	ldw	r3,0(r2)
    69c0:	28c00015 	stw	r3,0(r5)
    69c4:	11400015 	stw	r5,0(r2)
    69c8:	f800283a 	ret

000069cc <__multadd>:
    69cc:	defffa04 	addi	sp,sp,-24
    69d0:	dc400115 	stw	r17,4(sp)
    69d4:	2c400417 	ldw	r17,16(r5)
    69d8:	dcc00315 	stw	r19,12(sp)
    69dc:	dc800215 	stw	r18,8(sp)
    69e0:	dc000015 	stw	r16,0(sp)
    69e4:	dfc00515 	stw	ra,20(sp)
    69e8:	dd000415 	stw	r20,16(sp)
    69ec:	2825883a 	mov	r18,r5
    69f0:	2027883a 	mov	r19,r4
    69f4:	3821883a 	mov	r16,r7
    69f8:	2a400504 	addi	r9,r5,20
    69fc:	0015883a 	mov	r10,zero
    6a00:	48c00017 	ldw	r3,0(r9)
    6a04:	4a400104 	addi	r9,r9,4
    6a08:	52800044 	addi	r10,r10,1
    6a0c:	1a3fffcc 	andi	r8,r3,65535
    6a10:	4191383a 	mul	r8,r8,r6
    6a14:	180ed43a 	srli	r7,r3,16
    6a18:	4407883a 	add	r3,r8,r16
    6a1c:	1810d43a 	srli	r8,r3,16
    6a20:	398f383a 	mul	r7,r7,r6
    6a24:	18ffffcc 	andi	r3,r3,65535
    6a28:	3a0f883a 	add	r7,r7,r8
    6a2c:	3810943a 	slli	r8,r7,16
    6a30:	3820d43a 	srli	r16,r7,16
    6a34:	40c7883a 	add	r3,r8,r3
    6a38:	48ffff15 	stw	r3,-4(r9)
    6a3c:	547ff016 	blt	r10,r17,6a00 <__multadd+0x34>
    6a40:	80000826 	beq	r16,zero,6a64 <__multadd+0x98>
    6a44:	90800217 	ldw	r2,8(r18)
    6a48:	88800f0e 	bge	r17,r2,6a88 <__multadd+0xbc>
    6a4c:	88800144 	addi	r2,r17,5
    6a50:	100490ba 	slli	r2,r2,2
    6a54:	8c400044 	addi	r17,r17,1
    6a58:	9085883a 	add	r2,r18,r2
    6a5c:	14000015 	stw	r16,0(r2)
    6a60:	94400415 	stw	r17,16(r18)
    6a64:	9005883a 	mov	r2,r18
    6a68:	dfc00517 	ldw	ra,20(sp)
    6a6c:	dd000417 	ldw	r20,16(sp)
    6a70:	dcc00317 	ldw	r19,12(sp)
    6a74:	dc800217 	ldw	r18,8(sp)
    6a78:	dc400117 	ldw	r17,4(sp)
    6a7c:	dc000017 	ldw	r16,0(sp)
    6a80:	dec00604 	addi	sp,sp,24
    6a84:	f800283a 	ret
    6a88:	91400117 	ldw	r5,4(r18)
    6a8c:	9809883a 	mov	r4,r19
    6a90:	29400044 	addi	r5,r5,1
    6a94:	00069040 	call	6904 <_Balloc>
    6a98:	1029883a 	mov	r20,r2
    6a9c:	10001226 	beq	r2,zero,6ae8 <__multadd+0x11c>
    6aa0:	91800417 	ldw	r6,16(r18)
    6aa4:	91400304 	addi	r5,r18,12
    6aa8:	11000304 	addi	r4,r2,12
    6aac:	31800084 	addi	r6,r6,2
    6ab0:	300c90ba 	slli	r6,r6,2
    6ab4:	00011f40 	call	11f4 <memcpy>
    6ab8:	90000926 	beq	r18,zero,6ae0 <__multadd+0x114>
    6abc:	90c00117 	ldw	r3,4(r18)
    6ac0:	98801317 	ldw	r2,76(r19)
    6ac4:	180690ba 	slli	r3,r3,2
    6ac8:	10c5883a 	add	r2,r2,r3
    6acc:	10c00017 	ldw	r3,0(r2)
    6ad0:	90c00015 	stw	r3,0(r18)
    6ad4:	14800015 	stw	r18,0(r2)
    6ad8:	a025883a 	mov	r18,r20
    6adc:	003fdb06 	br	6a4c <__multadd+0x80>
    6ae0:	a025883a 	mov	r18,r20
    6ae4:	003fd906 	br	6a4c <__multadd+0x80>
    6ae8:	01c000b4 	movhi	r7,2
    6aec:	010000b4 	movhi	r4,2
    6af0:	39ee5604 	addi	r7,r7,-18088
    6af4:	000d883a 	mov	r6,zero
    6af8:	01402d44 	movi	r5,181
    6afc:	212e6b04 	addi	r4,r4,-18004
    6b00:	000926c0 	call	926c <__assert_func>

00006b04 <__s2b>:
    6b04:	defff904 	addi	sp,sp,-28
    6b08:	dc800215 	stw	r18,8(sp)
    6b0c:	dc000015 	stw	r16,0(sp)
    6b10:	2025883a 	mov	r18,r4
    6b14:	2821883a 	mov	r16,r5
    6b18:	39000204 	addi	r4,r7,8
    6b1c:	01400244 	movi	r5,9
    6b20:	dcc00315 	stw	r19,12(sp)
    6b24:	dc400115 	stw	r17,4(sp)
    6b28:	dfc00615 	stw	ra,24(sp)
    6b2c:	3823883a 	mov	r17,r7
    6b30:	dd400515 	stw	r21,20(sp)
    6b34:	dd000415 	stw	r20,16(sp)
    6b38:	3027883a 	mov	r19,r6
    6b3c:	000b9140 	call	b914 <__divsi3>
    6b40:	88c00290 	cmplti	r3,r17,10
    6b44:	1800341e 	bne	r3,zero,6c18 <__s2b+0x114>
    6b48:	00c00044 	movi	r3,1
    6b4c:	000b883a 	mov	r5,zero
    6b50:	18c7883a 	add	r3,r3,r3
    6b54:	29400044 	addi	r5,r5,1
    6b58:	18bffd16 	blt	r3,r2,6b50 <__s2b+0x4c>
    6b5c:	9009883a 	mov	r4,r18
    6b60:	00069040 	call	6904 <_Balloc>
    6b64:	100b883a 	mov	r5,r2
    6b68:	10002d26 	beq	r2,zero,6c20 <__s2b+0x11c>
    6b6c:	d8800717 	ldw	r2,28(sp)
    6b70:	28800515 	stw	r2,20(r5)
    6b74:	00800044 	movi	r2,1
    6b78:	28800415 	stw	r2,16(r5)
    6b7c:	98800290 	cmplti	r2,r19,10
    6b80:	1000221e 	bne	r2,zero,6c0c <__s2b+0x108>
    6b84:	85400244 	addi	r21,r16,9
    6b88:	a829883a 	mov	r20,r21
    6b8c:	84e1883a 	add	r16,r16,r19
    6b90:	a1c00007 	ldb	r7,0(r20)
    6b94:	01800284 	movi	r6,10
    6b98:	9009883a 	mov	r4,r18
    6b9c:	39fff404 	addi	r7,r7,-48
    6ba0:	00069cc0 	call	69cc <__multadd>
    6ba4:	a5000044 	addi	r20,r20,1
    6ba8:	100b883a 	mov	r5,r2
    6bac:	a43ff81e 	bne	r20,r16,6b90 <__s2b+0x8c>
    6bb0:	9c3ffe04 	addi	r16,r19,-8
    6bb4:	ac21883a 	add	r16,r21,r16
    6bb8:	9c400a0e 	bge	r19,r17,6be4 <__s2b+0xe0>
    6bbc:	8ce3c83a 	sub	r17,r17,r19
    6bc0:	8463883a 	add	r17,r16,r17
    6bc4:	81c00007 	ldb	r7,0(r16)
    6bc8:	01800284 	movi	r6,10
    6bcc:	9009883a 	mov	r4,r18
    6bd0:	39fff404 	addi	r7,r7,-48
    6bd4:	00069cc0 	call	69cc <__multadd>
    6bd8:	84000044 	addi	r16,r16,1
    6bdc:	100b883a 	mov	r5,r2
    6be0:	8c3ff81e 	bne	r17,r16,6bc4 <__s2b+0xc0>
    6be4:	2805883a 	mov	r2,r5
    6be8:	dfc00617 	ldw	ra,24(sp)
    6bec:	dd400517 	ldw	r21,20(sp)
    6bf0:	dd000417 	ldw	r20,16(sp)
    6bf4:	dcc00317 	ldw	r19,12(sp)
    6bf8:	dc800217 	ldw	r18,8(sp)
    6bfc:	dc400117 	ldw	r17,4(sp)
    6c00:	dc000017 	ldw	r16,0(sp)
    6c04:	dec00704 	addi	sp,sp,28
    6c08:	f800283a 	ret
    6c0c:	84000284 	addi	r16,r16,10
    6c10:	04c00244 	movi	r19,9
    6c14:	003fe806 	br	6bb8 <__s2b+0xb4>
    6c18:	000b883a 	mov	r5,zero
    6c1c:	003fcf06 	br	6b5c <__s2b+0x58>
    6c20:	01c000b4 	movhi	r7,2
    6c24:	010000b4 	movhi	r4,2
    6c28:	39ee5604 	addi	r7,r7,-18088
    6c2c:	000d883a 	mov	r6,zero
    6c30:	01403384 	movi	r5,206
    6c34:	212e6b04 	addi	r4,r4,-18004
    6c38:	000926c0 	call	926c <__assert_func>

00006c3c <__hi0bits>:
    6c3c:	20bfffec 	andhi	r2,r4,65535
    6c40:	1000131e 	bne	r2,zero,6c90 <__hi0bits+0x54>
    6c44:	2008943a 	slli	r4,r4,16
    6c48:	00800404 	movi	r2,16
    6c4c:	20ffc02c 	andhi	r3,r4,65280
    6c50:	1800021e 	bne	r3,zero,6c5c <__hi0bits+0x20>
    6c54:	2008923a 	slli	r4,r4,8
    6c58:	10800204 	addi	r2,r2,8
    6c5c:	20fc002c 	andhi	r3,r4,61440
    6c60:	1800021e 	bne	r3,zero,6c6c <__hi0bits+0x30>
    6c64:	2008913a 	slli	r4,r4,4
    6c68:	10800104 	addi	r2,r2,4
    6c6c:	20f0002c 	andhi	r3,r4,49152
    6c70:	1800021e 	bne	r3,zero,6c7c <__hi0bits+0x40>
    6c74:	200890ba 	slli	r4,r4,2
    6c78:	10800084 	addi	r2,r2,2
    6c7c:	20000316 	blt	r4,zero,6c8c <__hi0bits+0x50>
    6c80:	2110002c 	andhi	r4,r4,16384
    6c84:	10800044 	addi	r2,r2,1
    6c88:	20000326 	beq	r4,zero,6c98 <__hi0bits+0x5c>
    6c8c:	f800283a 	ret
    6c90:	0005883a 	mov	r2,zero
    6c94:	003fed06 	br	6c4c <__hi0bits+0x10>
    6c98:	00800804 	movi	r2,32
    6c9c:	f800283a 	ret

00006ca0 <__lo0bits>:
    6ca0:	20c00017 	ldw	r3,0(r4)
    6ca4:	188001cc 	andi	r2,r3,7
    6ca8:	10000826 	beq	r2,zero,6ccc <__lo0bits+0x2c>
    6cac:	1880004c 	andi	r2,r3,1
    6cb0:	10001f1e 	bne	r2,zero,6d30 <__lo0bits+0x90>
    6cb4:	1880008c 	andi	r2,r3,2
    6cb8:	10002126 	beq	r2,zero,6d40 <__lo0bits+0xa0>
    6cbc:	1806d07a 	srli	r3,r3,1
    6cc0:	00800044 	movi	r2,1
    6cc4:	20c00015 	stw	r3,0(r4)
    6cc8:	f800283a 	ret
    6ccc:	18bfffcc 	andi	r2,r3,65535
    6cd0:	10001426 	beq	r2,zero,6d24 <__lo0bits+0x84>
    6cd4:	0005883a 	mov	r2,zero
    6cd8:	19403fcc 	andi	r5,r3,255
    6cdc:	2800021e 	bne	r5,zero,6ce8 <__lo0bits+0x48>
    6ce0:	1806d23a 	srli	r3,r3,8
    6ce4:	10800204 	addi	r2,r2,8
    6ce8:	194003cc 	andi	r5,r3,15
    6cec:	2800021e 	bne	r5,zero,6cf8 <__lo0bits+0x58>
    6cf0:	1806d13a 	srli	r3,r3,4
    6cf4:	10800104 	addi	r2,r2,4
    6cf8:	194000cc 	andi	r5,r3,3
    6cfc:	2800021e 	bne	r5,zero,6d08 <__lo0bits+0x68>
    6d00:	1806d0ba 	srli	r3,r3,2
    6d04:	10800084 	addi	r2,r2,2
    6d08:	1940004c 	andi	r5,r3,1
    6d0c:	2800031e 	bne	r5,zero,6d1c <__lo0bits+0x7c>
    6d10:	1806d07a 	srli	r3,r3,1
    6d14:	10800044 	addi	r2,r2,1
    6d18:	18000726 	beq	r3,zero,6d38 <__lo0bits+0x98>
    6d1c:	20c00015 	stw	r3,0(r4)
    6d20:	f800283a 	ret
    6d24:	1806d43a 	srli	r3,r3,16
    6d28:	00800404 	movi	r2,16
    6d2c:	003fea06 	br	6cd8 <__lo0bits+0x38>
    6d30:	0005883a 	mov	r2,zero
    6d34:	f800283a 	ret
    6d38:	00800804 	movi	r2,32
    6d3c:	f800283a 	ret
    6d40:	1806d0ba 	srli	r3,r3,2
    6d44:	00800084 	movi	r2,2
    6d48:	20c00015 	stw	r3,0(r4)
    6d4c:	f800283a 	ret

00006d50 <__i2b>:
    6d50:	20c01317 	ldw	r3,76(r4)
    6d54:	defffd04 	addi	sp,sp,-12
    6d58:	dc400115 	stw	r17,4(sp)
    6d5c:	dc000015 	stw	r16,0(sp)
    6d60:	dfc00215 	stw	ra,8(sp)
    6d64:	2021883a 	mov	r16,r4
    6d68:	2823883a 	mov	r17,r5
    6d6c:	18000d26 	beq	r3,zero,6da4 <__i2b+0x54>
    6d70:	18800117 	ldw	r2,4(r3)
    6d74:	10001826 	beq	r2,zero,6dd8 <__i2b+0x88>
    6d78:	11000017 	ldw	r4,0(r2)
    6d7c:	19000115 	stw	r4,4(r3)
    6d80:	00c00044 	movi	r3,1
    6d84:	10000315 	stw	zero,12(r2)
    6d88:	14400515 	stw	r17,20(r2)
    6d8c:	10c00415 	stw	r3,16(r2)
    6d90:	dfc00217 	ldw	ra,8(sp)
    6d94:	dc400117 	ldw	r17,4(sp)
    6d98:	dc000017 	ldw	r16,0(sp)
    6d9c:	dec00304 	addi	sp,sp,12
    6da0:	f800283a 	ret
    6da4:	01800844 	movi	r6,33
    6da8:	01400104 	movi	r5,4
    6dac:	00092e40 	call	92e4 <_calloc_r>
    6db0:	80801315 	stw	r2,76(r16)
    6db4:	1007883a 	mov	r3,r2
    6db8:	103fed1e 	bne	r2,zero,6d70 <__i2b+0x20>
    6dbc:	01c000b4 	movhi	r7,2
    6dc0:	010000b4 	movhi	r4,2
    6dc4:	39ee5604 	addi	r7,r7,-18088
    6dc8:	000d883a 	mov	r6,zero
    6dcc:	01405004 	movi	r5,320
    6dd0:	212e6b04 	addi	r4,r4,-18004
    6dd4:	000926c0 	call	926c <__assert_func>
    6dd8:	01800704 	movi	r6,28
    6ddc:	01400044 	movi	r5,1
    6de0:	8009883a 	mov	r4,r16
    6de4:	00092e40 	call	92e4 <_calloc_r>
    6de8:	103ff426 	beq	r2,zero,6dbc <__i2b+0x6c>
    6dec:	00c00044 	movi	r3,1
    6df0:	10c00115 	stw	r3,4(r2)
    6df4:	00c00084 	movi	r3,2
    6df8:	10c00215 	stw	r3,8(r2)
    6dfc:	003fe006 	br	6d80 <__i2b+0x30>

00006e00 <__multiply>:
    6e00:	defff804 	addi	sp,sp,-32
    6e04:	dd400515 	stw	r21,20(sp)
    6e08:	dd000415 	stw	r20,16(sp)
    6e0c:	35400417 	ldw	r21,16(r6)
    6e10:	2d000417 	ldw	r20,16(r5)
    6e14:	dd800615 	stw	r22,24(sp)
    6e18:	dcc00315 	stw	r19,12(sp)
    6e1c:	dfc00715 	stw	ra,28(sp)
    6e20:	dc800215 	stw	r18,8(sp)
    6e24:	dc400115 	stw	r17,4(sp)
    6e28:	dc000015 	stw	r16,0(sp)
    6e2c:	282d883a 	mov	r22,r5
    6e30:	3027883a 	mov	r19,r6
    6e34:	a5400516 	blt	r20,r21,6e4c <__multiply+0x4c>
    6e38:	a807883a 	mov	r3,r21
    6e3c:	2827883a 	mov	r19,r5
    6e40:	a02b883a 	mov	r21,r20
    6e44:	302d883a 	mov	r22,r6
    6e48:	1829883a 	mov	r20,r3
    6e4c:	98800217 	ldw	r2,8(r19)
    6e50:	ad23883a 	add	r17,r21,r20
    6e54:	99400117 	ldw	r5,4(r19)
    6e58:	1440010e 	bge	r2,r17,6e60 <__multiply+0x60>
    6e5c:	29400044 	addi	r5,r5,1
    6e60:	00069040 	call	6904 <_Balloc>
    6e64:	1025883a 	mov	r18,r2
    6e68:	10007326 	beq	r2,zero,7038 <__multiply+0x238>
    6e6c:	882090ba 	slli	r16,r17,2
    6e70:	11000504 	addi	r4,r2,20
    6e74:	2421883a 	add	r16,r4,r16
    6e78:	2400082e 	bgeu	r4,r16,6e9c <__multiply+0x9c>
    6e7c:	808dc83a 	sub	r6,r16,r2
    6e80:	31bffac4 	addi	r6,r6,-21
    6e84:	300cd0ba 	srli	r6,r6,2
    6e88:	000b883a 	mov	r5,zero
    6e8c:	31800044 	addi	r6,r6,1
    6e90:	300c90ba 	slli	r6,r6,2
    6e94:	00068140 	call	6814 <memset>
    6e98:	1009883a 	mov	r4,r2
    6e9c:	a01290ba 	slli	r9,r20,2
    6ea0:	a80e90ba 	slli	r7,r21,2
    6ea4:	b0800504 	addi	r2,r22,20
    6ea8:	9a800504 	addi	r10,r19,20
    6eac:	1253883a 	add	r9,r2,r9
    6eb0:	51cf883a 	add	r7,r10,r7
    6eb4:	12404b2e 	bgeu	r2,r9,6fe4 <__multiply+0x1e4>
    6eb8:	98c00544 	addi	r3,r19,21
    6ebc:	38c05c36 	bltu	r7,r3,7030 <__multiply+0x230>
    6ec0:	3cd1c83a 	sub	r8,r7,r19
    6ec4:	423ffac4 	addi	r8,r8,-21
    6ec8:	4010d0ba 	srli	r8,r8,2
    6ecc:	42000044 	addi	r8,r8,1
    6ed0:	401090ba 	slli	r8,r8,2
    6ed4:	00000506 	br	6eec <__multiply+0xec>
    6ed8:	6018d43a 	srli	r12,r12,16
    6edc:	6000231e 	bne	r12,zero,6f6c <__multiply+0x16c>
    6ee0:	10800104 	addi	r2,r2,4
    6ee4:	21000104 	addi	r4,r4,4
    6ee8:	12403e2e 	bgeu	r2,r9,6fe4 <__multiply+0x1e4>
    6eec:	13000017 	ldw	r12,0(r2)
    6ef0:	63bfffcc 	andi	r14,r12,65535
    6ef4:	703ff826 	beq	r14,zero,6ed8 <__multiply+0xd8>
    6ef8:	201b883a 	mov	r13,r4
    6efc:	5019883a 	mov	r12,r10
    6f00:	001f883a 	mov	r15,zero
    6f04:	61400017 	ldw	r5,0(r12)
    6f08:	6ac00017 	ldw	r11,0(r13)
    6f0c:	6b400104 	addi	r13,r13,4
    6f10:	29bfffcc 	andi	r6,r5,65535
    6f14:	338d383a 	mul	r6,r6,r14
    6f18:	2806d43a 	srli	r3,r5,16
    6f1c:	597fffcc 	andi	r5,r11,65535
    6f20:	314d883a 	add	r6,r6,r5
    6f24:	33cd883a 	add	r6,r6,r15
    6f28:	1b87383a 	mul	r3,r3,r14
    6f2c:	5816d43a 	srli	r11,r11,16
    6f30:	300ad43a 	srli	r5,r6,16
    6f34:	31bfffcc 	andi	r6,r6,65535
    6f38:	1ac7883a 	add	r3,r3,r11
    6f3c:	1947883a 	add	r3,r3,r5
    6f40:	180a943a 	slli	r5,r3,16
    6f44:	63000104 	addi	r12,r12,4
    6f48:	181ed43a 	srli	r15,r3,16
    6f4c:	298cb03a 	or	r6,r5,r6
    6f50:	69bfff15 	stw	r6,-4(r13)
    6f54:	61ffeb36 	bltu	r12,r7,6f04 <__multiply+0x104>
    6f58:	2207883a 	add	r3,r4,r8
    6f5c:	1bc00015 	stw	r15,0(r3)
    6f60:	13000017 	ldw	r12,0(r2)
    6f64:	6018d43a 	srli	r12,r12,16
    6f68:	603fdd26 	beq	r12,zero,6ee0 <__multiply+0xe0>
    6f6c:	20c00017 	ldw	r3,0(r4)
    6f70:	201b883a 	mov	r13,r4
    6f74:	5017883a 	mov	r11,r10
    6f78:	181d883a 	mov	r14,r3
    6f7c:	001f883a 	mov	r15,zero
    6f80:	5980000b 	ldhu	r6,0(r11)
    6f84:	703ed43a 	srli	ra,r14,16
    6f88:	197fffcc 	andi	r5,r3,65535
    6f8c:	3307383a 	mul	r3,r6,r12
    6f90:	5ac00104 	addi	r11,r11,4
    6f94:	6b800117 	ldw	r14,4(r13)
    6f98:	1fc7883a 	add	r3,r3,ra
    6f9c:	1bc7883a 	add	r3,r3,r15
    6fa0:	181e943a 	slli	r15,r3,16
    6fa4:	180cd43a 	srli	r6,r3,16
    6fa8:	77ffffcc 	andi	ra,r14,65535
    6fac:	794ab03a 	or	r5,r15,r5
    6fb0:	69400015 	stw	r5,0(r13)
    6fb4:	58ffff8b 	ldhu	r3,-2(r11)
    6fb8:	6b400104 	addi	r13,r13,4
    6fbc:	1b07383a 	mul	r3,r3,r12
    6fc0:	1fc7883a 	add	r3,r3,ra
    6fc4:	1987883a 	add	r3,r3,r6
    6fc8:	181ed43a 	srli	r15,r3,16
    6fcc:	59ffec36 	bltu	r11,r7,6f80 <__multiply+0x180>
    6fd0:	220b883a 	add	r5,r4,r8
    6fd4:	28c00015 	stw	r3,0(r5)
    6fd8:	10800104 	addi	r2,r2,4
    6fdc:	21000104 	addi	r4,r4,4
    6fe0:	127fc236 	bltu	r2,r9,6eec <__multiply+0xec>
    6fe4:	04400316 	blt	zero,r17,6ff4 <__multiply+0x1f4>
    6fe8:	00000506 	br	7000 <__multiply+0x200>
    6fec:	8c7fffc4 	addi	r17,r17,-1
    6ff0:	88000326 	beq	r17,zero,7000 <__multiply+0x200>
    6ff4:	80bfff17 	ldw	r2,-4(r16)
    6ff8:	843fff04 	addi	r16,r16,-4
    6ffc:	103ffb26 	beq	r2,zero,6fec <__multiply+0x1ec>
    7000:	9005883a 	mov	r2,r18
    7004:	94400415 	stw	r17,16(r18)
    7008:	dfc00717 	ldw	ra,28(sp)
    700c:	dd800617 	ldw	r22,24(sp)
    7010:	dd400517 	ldw	r21,20(sp)
    7014:	dd000417 	ldw	r20,16(sp)
    7018:	dcc00317 	ldw	r19,12(sp)
    701c:	dc800217 	ldw	r18,8(sp)
    7020:	dc400117 	ldw	r17,4(sp)
    7024:	dc000017 	ldw	r16,0(sp)
    7028:	dec00804 	addi	sp,sp,32
    702c:	f800283a 	ret
    7030:	02000104 	movi	r8,4
    7034:	003fad06 	br	6eec <__multiply+0xec>
    7038:	01c000b4 	movhi	r7,2
    703c:	010000b4 	movhi	r4,2
    7040:	39ee5604 	addi	r7,r7,-18088
    7044:	000d883a 	mov	r6,zero
    7048:	01405744 	movi	r5,349
    704c:	212e6b04 	addi	r4,r4,-18004
    7050:	000926c0 	call	926c <__assert_func>

00007054 <__pow5mult>:
    7054:	defffb04 	addi	sp,sp,-20
    7058:	dcc00315 	stw	r19,12(sp)
    705c:	dc000015 	stw	r16,0(sp)
    7060:	dfc00415 	stw	ra,16(sp)
    7064:	dc800215 	stw	r18,8(sp)
    7068:	dc400115 	stw	r17,4(sp)
    706c:	308000cc 	andi	r2,r6,3
    7070:	3021883a 	mov	r16,r6
    7074:	2027883a 	mov	r19,r4
    7078:	10002d1e 	bne	r2,zero,7130 <__pow5mult+0xdc>
    707c:	2825883a 	mov	r18,r5
    7080:	8021d0ba 	srai	r16,r16,2
    7084:	80001926 	beq	r16,zero,70ec <__pow5mult+0x98>
    7088:	9c401217 	ldw	r17,72(r19)
    708c:	8800061e 	bne	r17,zero,70a8 <__pow5mult+0x54>
    7090:	00002f06 	br	7150 <__pow5mult+0xfc>
    7094:	8021d07a 	srai	r16,r16,1
    7098:	80001426 	beq	r16,zero,70ec <__pow5mult+0x98>
    709c:	88800017 	ldw	r2,0(r17)
    70a0:	10001a26 	beq	r2,zero,710c <__pow5mult+0xb8>
    70a4:	1023883a 	mov	r17,r2
    70a8:	8080004c 	andi	r2,r16,1
    70ac:	103ff926 	beq	r2,zero,7094 <__pow5mult+0x40>
    70b0:	880d883a 	mov	r6,r17
    70b4:	900b883a 	mov	r5,r18
    70b8:	9809883a 	mov	r4,r19
    70bc:	0006e000 	call	6e00 <__multiply>
    70c0:	90001926 	beq	r18,zero,7128 <__pow5mult+0xd4>
    70c4:	91000117 	ldw	r4,4(r18)
    70c8:	98c01317 	ldw	r3,76(r19)
    70cc:	8021d07a 	srai	r16,r16,1
    70d0:	200890ba 	slli	r4,r4,2
    70d4:	1907883a 	add	r3,r3,r4
    70d8:	19000017 	ldw	r4,0(r3)
    70dc:	91000015 	stw	r4,0(r18)
    70e0:	1c800015 	stw	r18,0(r3)
    70e4:	1025883a 	mov	r18,r2
    70e8:	803fec1e 	bne	r16,zero,709c <__pow5mult+0x48>
    70ec:	9005883a 	mov	r2,r18
    70f0:	dfc00417 	ldw	ra,16(sp)
    70f4:	dcc00317 	ldw	r19,12(sp)
    70f8:	dc800217 	ldw	r18,8(sp)
    70fc:	dc400117 	ldw	r17,4(sp)
    7100:	dc000017 	ldw	r16,0(sp)
    7104:	dec00504 	addi	sp,sp,20
    7108:	f800283a 	ret
    710c:	880d883a 	mov	r6,r17
    7110:	880b883a 	mov	r5,r17
    7114:	9809883a 	mov	r4,r19
    7118:	0006e000 	call	6e00 <__multiply>
    711c:	88800015 	stw	r2,0(r17)
    7120:	10000015 	stw	zero,0(r2)
    7124:	003fdf06 	br	70a4 <__pow5mult+0x50>
    7128:	1025883a 	mov	r18,r2
    712c:	003fd906 	br	7094 <__pow5mult+0x40>
    7130:	100490ba 	slli	r2,r2,2
    7134:	00c000b4 	movhi	r3,2
    7138:	000f883a 	mov	r7,zero
    713c:	10c7883a 	add	r3,r2,r3
    7140:	19ae7a17 	ldw	r6,-17944(r3)
    7144:	00069cc0 	call	69cc <__multadd>
    7148:	1025883a 	mov	r18,r2
    714c:	003fcc06 	br	7080 <__pow5mult+0x2c>
    7150:	01400044 	movi	r5,1
    7154:	9809883a 	mov	r4,r19
    7158:	00069040 	call	6904 <_Balloc>
    715c:	1023883a 	mov	r17,r2
    7160:	10000726 	beq	r2,zero,7180 <__pow5mult+0x12c>
    7164:	00809c44 	movi	r2,625
    7168:	88800515 	stw	r2,20(r17)
    716c:	00800044 	movi	r2,1
    7170:	88800415 	stw	r2,16(r17)
    7174:	9c401215 	stw	r17,72(r19)
    7178:	88000015 	stw	zero,0(r17)
    717c:	003fca06 	br	70a8 <__pow5mult+0x54>
    7180:	01c000b4 	movhi	r7,2
    7184:	010000b4 	movhi	r4,2
    7188:	39ee5604 	addi	r7,r7,-18088
    718c:	000d883a 	mov	r6,zero
    7190:	01405004 	movi	r5,320
    7194:	212e6b04 	addi	r4,r4,-18004
    7198:	000926c0 	call	926c <__assert_func>

0000719c <__lshift>:
    719c:	defff804 	addi	sp,sp,-32
    71a0:	dd800615 	stw	r22,24(sp)
    71a4:	dc000015 	stw	r16,0(sp)
    71a8:	302dd17a 	srai	r22,r6,5
    71ac:	2c000417 	ldw	r16,16(r5)
    71b0:	28800217 	ldw	r2,8(r5)
    71b4:	dd000415 	stw	r20,16(sp)
    71b8:	b421883a 	add	r16,r22,r16
    71bc:	dcc00315 	stw	r19,12(sp)
    71c0:	dc800215 	stw	r18,8(sp)
    71c4:	dc400115 	stw	r17,4(sp)
    71c8:	dfc00715 	stw	ra,28(sp)
    71cc:	dd400515 	stw	r21,20(sp)
    71d0:	85000044 	addi	r20,r16,1
    71d4:	2827883a 	mov	r19,r5
    71d8:	3025883a 	mov	r18,r6
    71dc:	29400117 	ldw	r5,4(r5)
    71e0:	2023883a 	mov	r17,r4
    71e4:	1500030e 	bge	r2,r20,71f4 <__lshift+0x58>
    71e8:	1085883a 	add	r2,r2,r2
    71ec:	29400044 	addi	r5,r5,1
    71f0:	153ffd16 	blt	r2,r20,71e8 <__lshift+0x4c>
    71f4:	8809883a 	mov	r4,r17
    71f8:	00069040 	call	6904 <_Balloc>
    71fc:	102b883a 	mov	r21,r2
    7200:	10004126 	beq	r2,zero,7308 <__lshift+0x16c>
    7204:	11000504 	addi	r4,r2,20
    7208:	0580050e 	bge	zero,r22,7220 <__lshift+0x84>
    720c:	b02c90ba 	slli	r22,r22,2
    7210:	000b883a 	mov	r5,zero
    7214:	b00d883a 	mov	r6,r22
    7218:	00068140 	call	6814 <memset>
    721c:	1589883a 	add	r4,r2,r22
    7220:	9a000417 	ldw	r8,16(r19)
    7224:	98c00504 	addi	r3,r19,20
    7228:	948007cc 	andi	r18,r18,31
    722c:	401090ba 	slli	r8,r8,2
    7230:	1a11883a 	add	r8,r3,r8
    7234:	90002c26 	beq	r18,zero,72e8 <__lshift+0x14c>
    7238:	01400804 	movi	r5,32
    723c:	2c8bc83a 	sub	r5,r5,r18
    7240:	2005883a 	mov	r2,r4
    7244:	000f883a 	mov	r7,zero
    7248:	19800017 	ldw	r6,0(r3)
    724c:	10800104 	addi	r2,r2,4
    7250:	18c00104 	addi	r3,r3,4
    7254:	348c983a 	sll	r6,r6,r18
    7258:	31ccb03a 	or	r6,r6,r7
    725c:	11bfff15 	stw	r6,-4(r2)
    7260:	19bfff17 	ldw	r6,-4(r3)
    7264:	314ed83a 	srl	r7,r6,r5
    7268:	1a3ff736 	bltu	r3,r8,7248 <__lshift+0xac>
    726c:	98800544 	addi	r2,r19,21
    7270:	40802336 	bltu	r8,r2,7300 <__lshift+0x164>
    7274:	44c7c83a 	sub	r3,r8,r19
    7278:	18fffac4 	addi	r3,r3,-21
    727c:	1806d0ba 	srli	r3,r3,2
    7280:	18c00044 	addi	r3,r3,1
    7284:	180690ba 	slli	r3,r3,2
    7288:	20c9883a 	add	r4,r4,r3
    728c:	21c00015 	stw	r7,0(r4)
    7290:	38000126 	beq	r7,zero,7298 <__lshift+0xfc>
    7294:	a021883a 	mov	r16,r20
    7298:	ac000415 	stw	r16,16(r21)
    729c:	98000726 	beq	r19,zero,72bc <__lshift+0x120>
    72a0:	98c00117 	ldw	r3,4(r19)
    72a4:	88801317 	ldw	r2,76(r17)
    72a8:	180690ba 	slli	r3,r3,2
    72ac:	10c5883a 	add	r2,r2,r3
    72b0:	10c00017 	ldw	r3,0(r2)
    72b4:	98c00015 	stw	r3,0(r19)
    72b8:	14c00015 	stw	r19,0(r2)
    72bc:	a805883a 	mov	r2,r21
    72c0:	dfc00717 	ldw	ra,28(sp)
    72c4:	dd800617 	ldw	r22,24(sp)
    72c8:	dd400517 	ldw	r21,20(sp)
    72cc:	dd000417 	ldw	r20,16(sp)
    72d0:	dcc00317 	ldw	r19,12(sp)
    72d4:	dc800217 	ldw	r18,8(sp)
    72d8:	dc400117 	ldw	r17,4(sp)
    72dc:	dc000017 	ldw	r16,0(sp)
    72e0:	dec00804 	addi	sp,sp,32
    72e4:	f800283a 	ret
    72e8:	18800017 	ldw	r2,0(r3)
    72ec:	18c00104 	addi	r3,r3,4
    72f0:	21000104 	addi	r4,r4,4
    72f4:	20bfff15 	stw	r2,-4(r4)
    72f8:	1a3ffb36 	bltu	r3,r8,72e8 <__lshift+0x14c>
    72fc:	003fe606 	br	7298 <__lshift+0xfc>
    7300:	00c00104 	movi	r3,4
    7304:	003fe006 	br	7288 <__lshift+0xec>
    7308:	01c000b4 	movhi	r7,2
    730c:	010000b4 	movhi	r4,2
    7310:	39ee5604 	addi	r7,r7,-18088
    7314:	000d883a 	mov	r6,zero
    7318:	01407644 	movi	r5,473
    731c:	212e6b04 	addi	r4,r4,-18004
    7320:	000926c0 	call	926c <__assert_func>

00007324 <__mcmp>:
    7324:	21800417 	ldw	r6,16(r4)
    7328:	28c00417 	ldw	r3,16(r5)
    732c:	30c5c83a 	sub	r2,r6,r3
    7330:	30c00e1e 	bne	r6,r3,736c <__mcmp+0x48>
    7334:	180690ba 	slli	r3,r3,2
    7338:	21c00504 	addi	r7,r4,20
    733c:	29400504 	addi	r5,r5,20
    7340:	38c9883a 	add	r4,r7,r3
    7344:	28c7883a 	add	r3,r5,r3
    7348:	00000106 	br	7350 <__mcmp+0x2c>
    734c:	3900082e 	bgeu	r7,r4,7370 <__mcmp+0x4c>
    7350:	21bfff17 	ldw	r6,-4(r4)
    7354:	197fff17 	ldw	r5,-4(r3)
    7358:	213fff04 	addi	r4,r4,-4
    735c:	18ffff04 	addi	r3,r3,-4
    7360:	317ffa26 	beq	r6,r5,734c <__mcmp+0x28>
    7364:	3140032e 	bgeu	r6,r5,7374 <__mcmp+0x50>
    7368:	00bfffc4 	movi	r2,-1
    736c:	f800283a 	ret
    7370:	f800283a 	ret
    7374:	00800044 	movi	r2,1
    7378:	f800283a 	ret

0000737c <__mdiff>:
    737c:	28800417 	ldw	r2,16(r5)
    7380:	30c00417 	ldw	r3,16(r6)
    7384:	defffc04 	addi	sp,sp,-16
    7388:	dc800215 	stw	r18,8(sp)
    738c:	dc400115 	stw	r17,4(sp)
    7390:	dc000015 	stw	r16,0(sp)
    7394:	dfc00315 	stw	ra,12(sp)
    7398:	2823883a 	mov	r17,r5
    739c:	3021883a 	mov	r16,r6
    73a0:	10e5c83a 	sub	r18,r2,r3
    73a4:	10c0641e 	bne	r2,r3,7538 <__mdiff+0x1bc>
    73a8:	180c90ba 	slli	r6,r3,2
    73ac:	29400504 	addi	r5,r5,20
    73b0:	80c00504 	addi	r3,r16,20
    73b4:	2985883a 	add	r2,r5,r6
    73b8:	1987883a 	add	r3,r3,r6
    73bc:	00000106 	br	73c4 <__mdiff+0x48>
    73c0:	2880642e 	bgeu	r5,r2,7554 <__mdiff+0x1d8>
    73c4:	11bfff17 	ldw	r6,-4(r2)
    73c8:	19ffff17 	ldw	r7,-4(r3)
    73cc:	10bfff04 	addi	r2,r2,-4
    73d0:	18ffff04 	addi	r3,r3,-4
    73d4:	31fffa26 	beq	r6,r7,73c0 <__mdiff+0x44>
    73d8:	31c05236 	bltu	r6,r7,7524 <__mdiff+0x1a8>
    73dc:	89400117 	ldw	r5,4(r17)
    73e0:	00069040 	call	6904 <_Balloc>
    73e4:	10006226 	beq	r2,zero,7570 <__mdiff+0x1f4>
    73e8:	8a400417 	ldw	r9,16(r17)
    73ec:	83000417 	ldw	r12,16(r16)
    73f0:	8ac00504 	addi	r11,r17,20
    73f4:	481090ba 	slli	r8,r9,2
    73f8:	601890ba 	slli	r12,r12,2
    73fc:	81800504 	addi	r6,r16,20
    7400:	13400504 	addi	r13,r2,20
    7404:	14800315 	stw	r18,12(r2)
    7408:	5a11883a 	add	r8,r11,r8
    740c:	3319883a 	add	r12,r6,r12
    7410:	681d883a 	mov	r14,r13
    7414:	5815883a 	mov	r10,r11
    7418:	0007883a 	mov	r3,zero
    741c:	51000017 	ldw	r4,0(r10)
    7420:	31c00017 	ldw	r7,0(r6)
    7424:	73800104 	addi	r14,r14,4
    7428:	217fffcc 	andi	r5,r4,65535
    742c:	28cb883a 	add	r5,r5,r3
    7430:	38ffffcc 	andi	r3,r7,65535
    7434:	28cbc83a 	sub	r5,r5,r3
    7438:	380ed43a 	srli	r7,r7,16
    743c:	2006d43a 	srli	r3,r4,16
    7440:	2809d43a 	srai	r4,r5,16
    7444:	297fffcc 	andi	r5,r5,65535
    7448:	19c7c83a 	sub	r3,r3,r7
    744c:	1907883a 	add	r3,r3,r4
    7450:	1808943a 	slli	r4,r3,16
    7454:	31800104 	addi	r6,r6,4
    7458:	1807d43a 	srai	r3,r3,16
    745c:	214ab03a 	or	r5,r4,r5
    7460:	717fff15 	stw	r5,-4(r14)
    7464:	52800104 	addi	r10,r10,4
    7468:	333fec36 	bltu	r6,r12,741c <__mdiff+0xa0>
    746c:	640fc83a 	sub	r7,r12,r16
    7470:	39fffac4 	addi	r7,r7,-21
    7474:	84000544 	addi	r16,r16,21
    7478:	380ed0ba 	srli	r7,r7,2
    747c:	64003336 	bltu	r12,r16,754c <__mdiff+0x1d0>
    7480:	380890ba 	slli	r4,r7,2
    7484:	6909883a 	add	r4,r13,r4
    7488:	64002e36 	bltu	r12,r16,7544 <__mdiff+0x1c8>
    748c:	39800044 	addi	r6,r7,1
    7490:	300c90ba 	slli	r6,r6,2
    7494:	5997883a 	add	r11,r11,r6
    7498:	699b883a 	add	r13,r13,r6
    749c:	5a00152e 	bgeu	r11,r8,74f4 <__mdiff+0x178>
    74a0:	680f883a 	mov	r7,r13
    74a4:	580d883a 	mov	r6,r11
    74a8:	31000017 	ldw	r4,0(r6)
    74ac:	39c00104 	addi	r7,r7,4
    74b0:	31800104 	addi	r6,r6,4
    74b4:	217fffcc 	andi	r5,r4,65535
    74b8:	28cb883a 	add	r5,r5,r3
    74bc:	2815d43a 	srai	r10,r5,16
    74c0:	2006d43a 	srli	r3,r4,16
    74c4:	297fffcc 	andi	r5,r5,65535
    74c8:	1a87883a 	add	r3,r3,r10
    74cc:	1814943a 	slli	r10,r3,16
    74d0:	1807d43a 	srai	r3,r3,16
    74d4:	514ab03a 	or	r5,r10,r5
    74d8:	397fff15 	stw	r5,-4(r7)
    74dc:	323ff236 	bltu	r6,r8,74a8 <__mdiff+0x12c>
    74e0:	413fffc4 	addi	r4,r8,-1
    74e4:	22c9c83a 	sub	r4,r4,r11
    74e8:	2008d0ba 	srli	r4,r4,2
    74ec:	200890ba 	slli	r4,r4,2
    74f0:	6909883a 	add	r4,r13,r4
    74f4:	2800041e 	bne	r5,zero,7508 <__mdiff+0x18c>
    74f8:	20ffff17 	ldw	r3,-4(r4)
    74fc:	4a7fffc4 	addi	r9,r9,-1
    7500:	213fff04 	addi	r4,r4,-4
    7504:	183ffc26 	beq	r3,zero,74f8 <__mdiff+0x17c>
    7508:	12400415 	stw	r9,16(r2)
    750c:	dfc00317 	ldw	ra,12(sp)
    7510:	dc800217 	ldw	r18,8(sp)
    7514:	dc400117 	ldw	r17,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00404 	addi	sp,sp,16
    7520:	f800283a 	ret
    7524:	8805883a 	mov	r2,r17
    7528:	04800044 	movi	r18,1
    752c:	8023883a 	mov	r17,r16
    7530:	1021883a 	mov	r16,r2
    7534:	003fa906 	br	73dc <__mdiff+0x60>
    7538:	903ffa16 	blt	r18,zero,7524 <__mdiff+0x1a8>
    753c:	0025883a 	mov	r18,zero
    7540:	003fa606 	br	73dc <__mdiff+0x60>
    7544:	01800104 	movi	r6,4
    7548:	003fd206 	br	7494 <__mdiff+0x118>
    754c:	0009883a 	mov	r4,zero
    7550:	003fcc06 	br	7484 <__mdiff+0x108>
    7554:	000b883a 	mov	r5,zero
    7558:	00069040 	call	6904 <_Balloc>
    755c:	10000b26 	beq	r2,zero,758c <__mdiff+0x210>
    7560:	00c00044 	movi	r3,1
    7564:	10c00415 	stw	r3,16(r2)
    7568:	10000515 	stw	zero,20(r2)
    756c:	003fe706 	br	750c <__mdiff+0x190>
    7570:	01c000b4 	movhi	r7,2
    7574:	010000b4 	movhi	r4,2
    7578:	39ee5604 	addi	r7,r7,-18088
    757c:	000d883a 	mov	r6,zero
    7580:	01409004 	movi	r5,576
    7584:	212e6b04 	addi	r4,r4,-18004
    7588:	000926c0 	call	926c <__assert_func>
    758c:	01c000b4 	movhi	r7,2
    7590:	010000b4 	movhi	r4,2
    7594:	39ee5604 	addi	r7,r7,-18088
    7598:	000d883a 	mov	r6,zero
    759c:	01408c84 	movi	r5,562
    75a0:	212e6b04 	addi	r4,r4,-18004
    75a4:	000926c0 	call	926c <__assert_func>

000075a8 <__ulp>:
    75a8:	28dffc2c 	andhi	r3,r5,32752
    75ac:	017f3034 	movhi	r5,64704
    75b0:	1947883a 	add	r3,r3,r5
    75b4:	00c0020e 	bge	zero,r3,75c0 <__ulp+0x18>
    75b8:	0005883a 	mov	r2,zero
    75bc:	f800283a 	ret
    75c0:	00c7c83a 	sub	r3,zero,r3
    75c4:	1807d53a 	srai	r3,r3,20
    75c8:	18800508 	cmpgei	r2,r3,20
    75cc:	1000041e 	bne	r2,zero,75e0 <__ulp+0x38>
    75d0:	00800234 	movhi	r2,8
    75d4:	10c7d83a 	sra	r3,r2,r3
    75d8:	0005883a 	mov	r2,zero
    75dc:	f800283a 	ret
    75e0:	193ffb04 	addi	r4,r3,-20
    75e4:	208007c8 	cmpgei	r2,r4,31
    75e8:	0007883a 	mov	r3,zero
    75ec:	1000031e 	bne	r2,zero,75fc <__ulp+0x54>
    75f0:	00a00034 	movhi	r2,32768
    75f4:	1104d83a 	srl	r2,r2,r4
    75f8:	f800283a 	ret
    75fc:	00800044 	movi	r2,1
    7600:	f800283a 	ret

00007604 <__b2d>:
    7604:	defffa04 	addi	sp,sp,-24
    7608:	dc400115 	stw	r17,4(sp)
    760c:	24400417 	ldw	r17,16(r4)
    7610:	dc000015 	stw	r16,0(sp)
    7614:	24000504 	addi	r16,r4,20
    7618:	882290ba 	slli	r17,r17,2
    761c:	dc800215 	stw	r18,8(sp)
    7620:	dd000415 	stw	r20,16(sp)
    7624:	8463883a 	add	r17,r16,r17
    7628:	8cbfff17 	ldw	r18,-4(r17)
    762c:	dcc00315 	stw	r19,12(sp)
    7630:	dfc00515 	stw	ra,20(sp)
    7634:	9009883a 	mov	r4,r18
    7638:	2827883a 	mov	r19,r5
    763c:	0006c3c0 	call	6c3c <__hi0bits>
    7640:	00c00804 	movi	r3,32
    7644:	1889c83a 	sub	r4,r3,r2
    7648:	99000015 	stw	r4,0(r19)
    764c:	110002c8 	cmpgei	r4,r2,11
    7650:	8d3fff04 	addi	r20,r17,-4
    7654:	20002026 	beq	r4,zero,76d8 <__b2d+0xd4>
    7658:	10bffd44 	addi	r2,r2,-11
    765c:	85000e2e 	bgeu	r16,r20,7698 <__b2d+0x94>
    7660:	897ffe17 	ldw	r5,-8(r17)
    7664:	10001226 	beq	r2,zero,76b0 <__b2d+0xac>
    7668:	1889c83a 	sub	r4,r3,r2
    766c:	90a4983a 	sll	r18,r18,r2
    7670:	2906d83a 	srl	r3,r5,r4
    7674:	89bffe04 	addi	r6,r17,-8
    7678:	2884983a 	sll	r2,r5,r2
    767c:	90e4b03a 	or	r18,r18,r3
    7680:	90cffc34 	orhi	r3,r18,16368
    7684:	81800c2e 	bgeu	r16,r6,76b8 <__b2d+0xb4>
    7688:	897ffd17 	ldw	r5,-12(r17)
    768c:	2908d83a 	srl	r4,r5,r4
    7690:	1104b03a 	or	r2,r2,r4
    7694:	00000806 	br	76b8 <__b2d+0xb4>
    7698:	10000426 	beq	r2,zero,76ac <__b2d+0xa8>
    769c:	90a4983a 	sll	r18,r18,r2
    76a0:	0005883a 	mov	r2,zero
    76a4:	90cffc34 	orhi	r3,r18,16368
    76a8:	00000306 	br	76b8 <__b2d+0xb4>
    76ac:	000b883a 	mov	r5,zero
    76b0:	90cffc34 	orhi	r3,r18,16368
    76b4:	2805883a 	mov	r2,r5
    76b8:	dfc00517 	ldw	ra,20(sp)
    76bc:	dd000417 	ldw	r20,16(sp)
    76c0:	dcc00317 	ldw	r19,12(sp)
    76c4:	dc800217 	ldw	r18,8(sp)
    76c8:	dc400117 	ldw	r17,4(sp)
    76cc:	dc000017 	ldw	r16,0(sp)
    76d0:	dec00604 	addi	sp,sp,24
    76d4:	f800283a 	ret
    76d8:	014002c4 	movi	r5,11
    76dc:	2889c83a 	sub	r4,r5,r2
    76e0:	9106d83a 	srl	r3,r18,r4
    76e4:	18cffc34 	orhi	r3,r3,16368
    76e8:	85000536 	bltu	r16,r20,7700 <__b2d+0xfc>
    76ec:	000b883a 	mov	r5,zero
    76f0:	10800544 	addi	r2,r2,21
    76f4:	9084983a 	sll	r2,r18,r2
    76f8:	1144b03a 	or	r2,r2,r5
    76fc:	003fee06 	br	76b8 <__b2d+0xb4>
    7700:	897ffe17 	ldw	r5,-8(r17)
    7704:	290ad83a 	srl	r5,r5,r4
    7708:	003ff906 	br	76f0 <__b2d+0xec>

0000770c <__d2b>:
    770c:	defff804 	addi	sp,sp,-32
    7710:	dd000615 	stw	r20,24(sp)
    7714:	2829883a 	mov	r20,r5
    7718:	01400044 	movi	r5,1
    771c:	dcc00515 	stw	r19,20(sp)
    7720:	dc000215 	stw	r16,8(sp)
    7724:	dfc00715 	stw	ra,28(sp)
    7728:	dc800415 	stw	r18,16(sp)
    772c:	dc400315 	stw	r17,12(sp)
    7730:	3021883a 	mov	r16,r6
    7734:	3827883a 	mov	r19,r7
    7738:	00069040 	call	6904 <_Balloc>
    773c:	10004526 	beq	r2,zero,7854 <__d2b+0x148>
    7740:	8024d53a 	srli	r18,r16,20
    7744:	01800434 	movhi	r6,16
    7748:	31bfffc4 	addi	r6,r6,-1
    774c:	9481ffcc 	andi	r18,r18,2047
    7750:	1023883a 	mov	r17,r2
    7754:	81a0703a 	and	r16,r16,r6
    7758:	90000126 	beq	r18,zero,7760 <__d2b+0x54>
    775c:	84000434 	orhi	r16,r16,16
    7760:	dc000115 	stw	r16,4(sp)
    7764:	a0002226 	beq	r20,zero,77f0 <__d2b+0xe4>
    7768:	d809883a 	mov	r4,sp
    776c:	dd000015 	stw	r20,0(sp)
    7770:	0006ca00 	call	6ca0 <__lo0bits>
    7774:	d8c00117 	ldw	r3,4(sp)
    7778:	10003326 	beq	r2,zero,7848 <__d2b+0x13c>
    777c:	01000804 	movi	r4,32
    7780:	2089c83a 	sub	r4,r4,r2
    7784:	1908983a 	sll	r4,r3,r4
    7788:	d9400017 	ldw	r5,0(sp)
    778c:	1886d83a 	srl	r3,r3,r2
    7790:	2148b03a 	or	r4,r4,r5
    7794:	89000515 	stw	r4,20(r17)
    7798:	d8c00115 	stw	r3,4(sp)
    779c:	88c00615 	stw	r3,24(r17)
    77a0:	1800271e 	bne	r3,zero,7840 <__d2b+0x134>
    77a4:	04000044 	movi	r16,1
    77a8:	8c000415 	stw	r16,16(r17)
    77ac:	90001926 	beq	r18,zero,7814 <__d2b+0x108>
    77b0:	00c00d44 	movi	r3,53
    77b4:	94bef344 	addi	r18,r18,-1075
    77b8:	90a5883a 	add	r18,r18,r2
    77bc:	1885c83a 	sub	r2,r3,r2
    77c0:	d8c00817 	ldw	r3,32(sp)
    77c4:	9c800015 	stw	r18,0(r19)
    77c8:	18800015 	stw	r2,0(r3)
    77cc:	8805883a 	mov	r2,r17
    77d0:	dfc00717 	ldw	ra,28(sp)
    77d4:	dd000617 	ldw	r20,24(sp)
    77d8:	dcc00517 	ldw	r19,20(sp)
    77dc:	dc800417 	ldw	r18,16(sp)
    77e0:	dc400317 	ldw	r17,12(sp)
    77e4:	dc000217 	ldw	r16,8(sp)
    77e8:	dec00804 	addi	sp,sp,32
    77ec:	f800283a 	ret
    77f0:	d9000104 	addi	r4,sp,4
    77f4:	0006ca00 	call	6ca0 <__lo0bits>
    77f8:	00c00044 	movi	r3,1
    77fc:	88c00415 	stw	r3,16(r17)
    7800:	d8c00117 	ldw	r3,4(sp)
    7804:	10800804 	addi	r2,r2,32
    7808:	04000044 	movi	r16,1
    780c:	88c00515 	stw	r3,20(r17)
    7810:	903fe71e 	bne	r18,zero,77b0 <__d2b+0xa4>
    7814:	800690ba 	slli	r3,r16,2
    7818:	10bef384 	addi	r2,r2,-1074
    781c:	98800015 	stw	r2,0(r19)
    7820:	88c5883a 	add	r2,r17,r3
    7824:	11000417 	ldw	r4,16(r2)
    7828:	8020917a 	slli	r16,r16,5
    782c:	0006c3c0 	call	6c3c <__hi0bits>
    7830:	80a1c83a 	sub	r16,r16,r2
    7834:	d8800817 	ldw	r2,32(sp)
    7838:	14000015 	stw	r16,0(r2)
    783c:	003fe306 	br	77cc <__d2b+0xc0>
    7840:	04000084 	movi	r16,2
    7844:	003fd806 	br	77a8 <__d2b+0x9c>
    7848:	d9000017 	ldw	r4,0(sp)
    784c:	89000515 	stw	r4,20(r17)
    7850:	003fd206 	br	779c <__d2b+0x90>
    7854:	01c000b4 	movhi	r7,2
    7858:	010000b4 	movhi	r4,2
    785c:	39ee5604 	addi	r7,r7,-18088
    7860:	000d883a 	mov	r6,zero
    7864:	0140c284 	movi	r5,778
    7868:	212e6b04 	addi	r4,r4,-18004
    786c:	000926c0 	call	926c <__assert_func>

00007870 <__ratio>:
    7870:	defff904 	addi	sp,sp,-28
    7874:	dc400315 	stw	r17,12(sp)
    7878:	2823883a 	mov	r17,r5
    787c:	d80b883a 	mov	r5,sp
    7880:	dfc00615 	stw	ra,24(sp)
    7884:	dcc00515 	stw	r19,20(sp)
    7888:	dc800415 	stw	r18,16(sp)
    788c:	2027883a 	mov	r19,r4
    7890:	dc000215 	stw	r16,8(sp)
    7894:	00076040 	call	7604 <__b2d>
    7898:	d9400104 	addi	r5,sp,4
    789c:	8809883a 	mov	r4,r17
    78a0:	1025883a 	mov	r18,r2
    78a4:	1821883a 	mov	r16,r3
    78a8:	00076040 	call	7604 <__b2d>
    78ac:	89000417 	ldw	r4,16(r17)
    78b0:	9a000417 	ldw	r8,16(r19)
    78b4:	d9400117 	ldw	r5,4(sp)
    78b8:	100d883a 	mov	r6,r2
    78bc:	4111c83a 	sub	r8,r8,r4
    78c0:	d9000017 	ldw	r4,0(sp)
    78c4:	4010917a 	slli	r8,r8,5
    78c8:	180f883a 	mov	r7,r3
    78cc:	2149c83a 	sub	r4,r4,r5
    78d0:	4111883a 	add	r8,r8,r4
    78d4:	02000c0e 	bge	zero,r8,7908 <__ratio+0x98>
    78d8:	4010953a 	slli	r8,r8,20
    78dc:	4421883a 	add	r16,r8,r16
    78e0:	9009883a 	mov	r4,r18
    78e4:	800b883a 	mov	r5,r16
    78e8:	000c3b80 	call	c3b8 <__divdf3>
    78ec:	dfc00617 	ldw	ra,24(sp)
    78f0:	dcc00517 	ldw	r19,20(sp)
    78f4:	dc800417 	ldw	r18,16(sp)
    78f8:	dc400317 	ldw	r17,12(sp)
    78fc:	dc000217 	ldw	r16,8(sp)
    7900:	dec00704 	addi	sp,sp,28
    7904:	f800283a 	ret
    7908:	00bffc34 	movhi	r2,65520
    790c:	4091383a 	mul	r8,r8,r2
    7910:	40cf883a 	add	r7,r8,r3
    7914:	003ff206 	br	78e0 <__ratio+0x70>

00007918 <_mprec_log10>:
    7918:	defffe04 	addi	sp,sp,-8
    791c:	dc000015 	stw	r16,0(sp)
    7920:	dfc00115 	stw	ra,4(sp)
    7924:	20800608 	cmpgei	r2,r4,24
    7928:	2021883a 	mov	r16,r4
    792c:	10000f26 	beq	r2,zero,796c <_mprec_log10+0x54>
    7930:	0009883a 	mov	r4,zero
    7934:	014ffc34 	movhi	r5,16368
    7938:	000d883a 	mov	r6,zero
    793c:	01d00934 	movhi	r7,16420
    7940:	000ce640 	call	ce64 <__muldf3>
    7944:	843fffc4 	addi	r16,r16,-1
    7948:	1009883a 	mov	r4,r2
    794c:	180b883a 	mov	r5,r3
    7950:	803ff91e 	bne	r16,zero,7938 <_mprec_log10+0x20>
    7954:	2005883a 	mov	r2,r4
    7958:	2807883a 	mov	r3,r5
    795c:	dfc00117 	ldw	ra,4(sp)
    7960:	dc000017 	ldw	r16,0(sp)
    7964:	dec00204 	addi	sp,sp,8
    7968:	f800283a 	ret
    796c:	202090fa 	slli	r16,r4,3
    7970:	008000b4 	movhi	r2,2
    7974:	10ae9204 	addi	r2,r2,-17848
    7978:	1421883a 	add	r16,r2,r16
    797c:	81000017 	ldw	r4,0(r16)
    7980:	81400117 	ldw	r5,4(r16)
    7984:	003ff306 	br	7954 <_mprec_log10+0x3c>

00007988 <__copybits>:
    7988:	297fffc4 	addi	r5,r5,-1
    798c:	280fd17a 	srai	r7,r5,5
    7990:	31400417 	ldw	r5,16(r6)
    7994:	30800504 	addi	r2,r6,20
    7998:	39c00044 	addi	r7,r7,1
    799c:	280a90ba 	slli	r5,r5,2
    79a0:	380e90ba 	slli	r7,r7,2
    79a4:	114b883a 	add	r5,r2,r5
    79a8:	21cf883a 	add	r7,r4,r7
    79ac:	11400c2e 	bgeu	r2,r5,79e0 <__copybits+0x58>
    79b0:	2007883a 	mov	r3,r4
    79b4:	12000017 	ldw	r8,0(r2)
    79b8:	10800104 	addi	r2,r2,4
    79bc:	18c00104 	addi	r3,r3,4
    79c0:	1a3fff15 	stw	r8,-4(r3)
    79c4:	117ffb36 	bltu	r2,r5,79b4 <__copybits+0x2c>
    79c8:	2985c83a 	sub	r2,r5,r6
    79cc:	10bffac4 	addi	r2,r2,-21
    79d0:	1004d0ba 	srli	r2,r2,2
    79d4:	10800044 	addi	r2,r2,1
    79d8:	100490ba 	slli	r2,r2,2
    79dc:	2089883a 	add	r4,r4,r2
    79e0:	21c0072e 	bgeu	r4,r7,7a00 <__copybits+0x78>
    79e4:	39bfffc4 	addi	r6,r7,-1
    79e8:	310dc83a 	sub	r6,r6,r4
    79ec:	300cd0ba 	srli	r6,r6,2
    79f0:	000b883a 	mov	r5,zero
    79f4:	31800044 	addi	r6,r6,1
    79f8:	300c90ba 	slli	r6,r6,2
    79fc:	00068141 	jmpi	6814 <memset>
    7a00:	f800283a 	ret

00007a04 <__any_on>:
    7a04:	20c00417 	ldw	r3,16(r4)
    7a08:	280dd17a 	srai	r6,r5,5
    7a0c:	21000504 	addi	r4,r4,20
    7a10:	1980080e 	bge	r3,r6,7a34 <__any_on+0x30>
    7a14:	180490ba 	slli	r2,r3,2
    7a18:	2085883a 	add	r2,r4,r2
    7a1c:	20800f2e 	bgeu	r4,r2,7a5c <__any_on+0x58>
    7a20:	10ffff17 	ldw	r3,-4(r2)
    7a24:	10bfff04 	addi	r2,r2,-4
    7a28:	183ffc26 	beq	r3,zero,7a1c <__any_on+0x18>
    7a2c:	00800044 	movi	r2,1
    7a30:	f800283a 	ret
    7a34:	300490ba 	slli	r2,r6,2
    7a38:	2085883a 	add	r2,r4,r2
    7a3c:	30fff70e 	bge	r6,r3,7a1c <__any_on+0x18>
    7a40:	294007cc 	andi	r5,r5,31
    7a44:	283ff526 	beq	r5,zero,7a1c <__any_on+0x18>
    7a48:	11800017 	ldw	r6,0(r2)
    7a4c:	3146d83a 	srl	r3,r6,r5
    7a50:	194a983a 	sll	r5,r3,r5
    7a54:	317ff51e 	bne	r6,r5,7a2c <__any_on+0x28>
    7a58:	003ff006 	br	7a1c <__any_on+0x18>
    7a5c:	0005883a 	mov	r2,zero
    7a60:	f800283a 	ret

00007a64 <_sbrk_r>:
    7a64:	defffe04 	addi	sp,sp,-8
    7a68:	dc000015 	stw	r16,0(sp)
    7a6c:	008000b4 	movhi	r2,2
    7a70:	2021883a 	mov	r16,r4
    7a74:	2809883a 	mov	r4,r5
    7a78:	dfc00115 	stw	ra,4(sp)
    7a7c:	10003415 	stw	zero,208(r2)
    7a80:	000eb6c0 	call	eb6c <sbrk>
    7a84:	10ffffd8 	cmpnei	r3,r2,-1
    7a88:	18000426 	beq	r3,zero,7a9c <_sbrk_r+0x38>
    7a8c:	dfc00117 	ldw	ra,4(sp)
    7a90:	dc000017 	ldw	r16,0(sp)
    7a94:	dec00204 	addi	sp,sp,8
    7a98:	f800283a 	ret
    7a9c:	00c000b4 	movhi	r3,2
    7aa0:	18c03417 	ldw	r3,208(r3)
    7aa4:	183ff926 	beq	r3,zero,7a8c <_sbrk_r+0x28>
    7aa8:	80c00015 	stw	r3,0(r16)
    7aac:	dfc00117 	ldw	ra,4(sp)
    7ab0:	dc000017 	ldw	r16,0(sp)
    7ab4:	dec00204 	addi	sp,sp,8
    7ab8:	f800283a 	ret

00007abc <__sread>:
    7abc:	defffe04 	addi	sp,sp,-8
    7ac0:	dc000015 	stw	r16,0(sp)
    7ac4:	2821883a 	mov	r16,r5
    7ac8:	2940038f 	ldh	r5,14(r5)
    7acc:	dfc00115 	stw	ra,4(sp)
    7ad0:	0009fd40 	call	9fd4 <_read_r>
    7ad4:	10000716 	blt	r2,zero,7af4 <__sread+0x38>
    7ad8:	80c01417 	ldw	r3,80(r16)
    7adc:	1887883a 	add	r3,r3,r2
    7ae0:	80c01415 	stw	r3,80(r16)
    7ae4:	dfc00117 	ldw	ra,4(sp)
    7ae8:	dc000017 	ldw	r16,0(sp)
    7aec:	dec00204 	addi	sp,sp,8
    7af0:	f800283a 	ret
    7af4:	80c0030b 	ldhu	r3,12(r16)
    7af8:	18fbffcc 	andi	r3,r3,61439
    7afc:	80c0030d 	sth	r3,12(r16)
    7b00:	dfc00117 	ldw	ra,4(sp)
    7b04:	dc000017 	ldw	r16,0(sp)
    7b08:	dec00204 	addi	sp,sp,8
    7b0c:	f800283a 	ret

00007b10 <__seofread>:
    7b10:	0005883a 	mov	r2,zero
    7b14:	f800283a 	ret

00007b18 <__swrite>:
    7b18:	2880030b 	ldhu	r2,12(r5)
    7b1c:	defffb04 	addi	sp,sp,-20
    7b20:	dcc00315 	stw	r19,12(sp)
    7b24:	dc800215 	stw	r18,8(sp)
    7b28:	dc400115 	stw	r17,4(sp)
    7b2c:	dc000015 	stw	r16,0(sp)
    7b30:	dfc00415 	stw	ra,16(sp)
    7b34:	10c0400c 	andi	r3,r2,256
    7b38:	2821883a 	mov	r16,r5
    7b3c:	2023883a 	mov	r17,r4
    7b40:	2940038f 	ldh	r5,14(r5)
    7b44:	3025883a 	mov	r18,r6
    7b48:	3827883a 	mov	r19,r7
    7b4c:	18000c1e 	bne	r3,zero,7b80 <__swrite+0x68>
    7b50:	10bbffcc 	andi	r2,r2,61439
    7b54:	980f883a 	mov	r7,r19
    7b58:	900d883a 	mov	r6,r18
    7b5c:	8809883a 	mov	r4,r17
    7b60:	8080030d 	sth	r2,12(r16)
    7b64:	dfc00417 	ldw	ra,16(sp)
    7b68:	dcc00317 	ldw	r19,12(sp)
    7b6c:	dc800217 	ldw	r18,8(sp)
    7b70:	dc400117 	ldw	r17,4(sp)
    7b74:	dc000017 	ldw	r16,0(sp)
    7b78:	dec00504 	addi	sp,sp,20
    7b7c:	00091b01 	jmpi	91b0 <_write_r>
    7b80:	01c00084 	movi	r7,2
    7b84:	000d883a 	mov	r6,zero
    7b88:	0009df40 	call	9df4 <_lseek_r>
    7b8c:	8080030b 	ldhu	r2,12(r16)
    7b90:	8140038f 	ldh	r5,14(r16)
    7b94:	003fee06 	br	7b50 <__swrite+0x38>

00007b98 <__sseek>:
    7b98:	defffe04 	addi	sp,sp,-8
    7b9c:	dc000015 	stw	r16,0(sp)
    7ba0:	2821883a 	mov	r16,r5
    7ba4:	2940038f 	ldh	r5,14(r5)
    7ba8:	dfc00115 	stw	ra,4(sp)
    7bac:	0009df40 	call	9df4 <_lseek_r>
    7bb0:	10ffffd8 	cmpnei	r3,r2,-1
    7bb4:	18000826 	beq	r3,zero,7bd8 <__sseek+0x40>
    7bb8:	80c0030b 	ldhu	r3,12(r16)
    7bbc:	80801415 	stw	r2,80(r16)
    7bc0:	18c40014 	ori	r3,r3,4096
    7bc4:	80c0030d 	sth	r3,12(r16)
    7bc8:	dfc00117 	ldw	ra,4(sp)
    7bcc:	dc000017 	ldw	r16,0(sp)
    7bd0:	dec00204 	addi	sp,sp,8
    7bd4:	f800283a 	ret
    7bd8:	80c0030b 	ldhu	r3,12(r16)
    7bdc:	18fbffcc 	andi	r3,r3,61439
    7be0:	80c0030d 	sth	r3,12(r16)
    7be4:	dfc00117 	ldw	ra,4(sp)
    7be8:	dc000017 	ldw	r16,0(sp)
    7bec:	dec00204 	addi	sp,sp,8
    7bf0:	f800283a 	ret

00007bf4 <__sclose>:
    7bf4:	2940038f 	ldh	r5,14(r5)
    7bf8:	00092141 	jmpi	9214 <_close_r>

00007bfc <strlen>:
    7bfc:	208000cc 	andi	r2,r4,3
    7c00:	10000926 	beq	r2,zero,7c28 <strlen+0x2c>
    7c04:	2005883a 	mov	r2,r4
    7c08:	00000306 	br	7c18 <strlen+0x1c>
    7c0c:	10800044 	addi	r2,r2,1
    7c10:	10c000cc 	andi	r3,r2,3
    7c14:	18000526 	beq	r3,zero,7c2c <strlen+0x30>
    7c18:	10c00007 	ldb	r3,0(r2)
    7c1c:	183ffb1e 	bne	r3,zero,7c0c <strlen+0x10>
    7c20:	1105c83a 	sub	r2,r2,r4
    7c24:	f800283a 	ret
    7c28:	2005883a 	mov	r2,r4
    7c2c:	11400017 	ldw	r5,0(r2)
    7c30:	01ffbff4 	movhi	r7,65279
    7c34:	39ffbfc4 	addi	r7,r7,-257
    7c38:	29c7883a 	add	r3,r5,r7
    7c3c:	01a02074 	movhi	r6,32897
    7c40:	014a303a 	nor	r5,zero,r5
    7c44:	1946703a 	and	r3,r3,r5
    7c48:	31a02004 	addi	r6,r6,-32640
    7c4c:	1986703a 	and	r3,r3,r6
    7c50:	1800071e 	bne	r3,zero,7c70 <strlen+0x74>
    7c54:	11400117 	ldw	r5,4(r2)
    7c58:	10800104 	addi	r2,r2,4
    7c5c:	29c7883a 	add	r3,r5,r7
    7c60:	014a303a 	nor	r5,zero,r5
    7c64:	1946703a 	and	r3,r3,r5
    7c68:	1986703a 	and	r3,r3,r6
    7c6c:	183ff926 	beq	r3,zero,7c54 <strlen+0x58>
    7c70:	10c00007 	ldb	r3,0(r2)
    7c74:	183fea26 	beq	r3,zero,7c20 <strlen+0x24>
    7c78:	10c00047 	ldb	r3,1(r2)
    7c7c:	10800044 	addi	r2,r2,1
    7c80:	183fe726 	beq	r3,zero,7c20 <strlen+0x24>
    7c84:	10c00047 	ldb	r3,1(r2)
    7c88:	10800044 	addi	r2,r2,1
    7c8c:	183ffa1e 	bne	r3,zero,7c78 <strlen+0x7c>
    7c90:	003fe306 	br	7c20 <strlen+0x24>

00007c94 <__sprint_r.part.0>:
    7c94:	28801917 	ldw	r2,100(r5)
    7c98:	defff604 	addi	sp,sp,-40
    7c9c:	dcc00315 	stw	r19,12(sp)
    7ca0:	dfc00915 	stw	ra,36(sp)
    7ca4:	df000815 	stw	fp,32(sp)
    7ca8:	ddc00715 	stw	r23,28(sp)
    7cac:	dd800615 	stw	r22,24(sp)
    7cb0:	dd400515 	stw	r21,20(sp)
    7cb4:	dd000415 	stw	r20,16(sp)
    7cb8:	dc800215 	stw	r18,8(sp)
    7cbc:	dc400115 	stw	r17,4(sp)
    7cc0:	dc000015 	stw	r16,0(sp)
    7cc4:	1088000c 	andi	r2,r2,8192
    7cc8:	3027883a 	mov	r19,r6
    7ccc:	10002c26 	beq	r2,zero,7d80 <__sprint_r.part.0+0xec>
    7cd0:	30800217 	ldw	r2,8(r6)
    7cd4:	35000017 	ldw	r20,0(r6)
    7cd8:	2821883a 	mov	r16,r5
    7cdc:	2023883a 	mov	r17,r4
    7ce0:	05bfff04 	movi	r22,-4
    7ce4:	10002426 	beq	r2,zero,7d78 <__sprint_r.part.0+0xe4>
    7ce8:	a5400117 	ldw	r21,4(r20)
    7cec:	a5c00017 	ldw	r23,0(r20)
    7cf0:	a824d0ba 	srli	r18,r21,2
    7cf4:	90001b26 	beq	r18,zero,7d64 <__sprint_r.part.0+0xd0>
    7cf8:	0039883a 	mov	fp,zero
    7cfc:	00000206 	br	7d08 <__sprint_r.part.0+0x74>
    7d00:	bdc00104 	addi	r23,r23,4
    7d04:	97001626 	beq	r18,fp,7d60 <__sprint_r.part.0+0xcc>
    7d08:	b9400017 	ldw	r5,0(r23)
    7d0c:	800d883a 	mov	r6,r16
    7d10:	8809883a 	mov	r4,r17
    7d14:	00096f40 	call	96f4 <_fputwc_r>
    7d18:	10bfffe0 	cmpeqi	r2,r2,-1
    7d1c:	e7000044 	addi	fp,fp,1
    7d20:	103ff726 	beq	r2,zero,7d00 <__sprint_r.part.0+0x6c>
    7d24:	00bfffc4 	movi	r2,-1
    7d28:	98000215 	stw	zero,8(r19)
    7d2c:	98000115 	stw	zero,4(r19)
    7d30:	dfc00917 	ldw	ra,36(sp)
    7d34:	df000817 	ldw	fp,32(sp)
    7d38:	ddc00717 	ldw	r23,28(sp)
    7d3c:	dd800617 	ldw	r22,24(sp)
    7d40:	dd400517 	ldw	r21,20(sp)
    7d44:	dd000417 	ldw	r20,16(sp)
    7d48:	dcc00317 	ldw	r19,12(sp)
    7d4c:	dc800217 	ldw	r18,8(sp)
    7d50:	dc400117 	ldw	r17,4(sp)
    7d54:	dc000017 	ldw	r16,0(sp)
    7d58:	dec00a04 	addi	sp,sp,40
    7d5c:	f800283a 	ret
    7d60:	98800217 	ldw	r2,8(r19)
    7d64:	adaa703a 	and	r21,r21,r22
    7d68:	1545c83a 	sub	r2,r2,r21
    7d6c:	98800215 	stw	r2,8(r19)
    7d70:	a5000204 	addi	r20,r20,8
    7d74:	103fdc1e 	bne	r2,zero,7ce8 <__sprint_r.part.0+0x54>
    7d78:	0005883a 	mov	r2,zero
    7d7c:	003fea06 	br	7d28 <__sprint_r.part.0+0x94>
    7d80:	00097f00 	call	97f0 <__sfvwrite_r>
    7d84:	003fe806 	br	7d28 <__sprint_r.part.0+0x94>

00007d88 <__sprint_r>:
    7d88:	30c00217 	ldw	r3,8(r6)
    7d8c:	18000126 	beq	r3,zero,7d94 <__sprint_r+0xc>
    7d90:	0007c941 	jmpi	7c94 <__sprint_r.part.0>
    7d94:	30000115 	stw	zero,4(r6)
    7d98:	0005883a 	mov	r2,zero
    7d9c:	f800283a 	ret

00007da0 <___vfiprintf_internal_r>:
    7da0:	deffcf04 	addi	sp,sp,-196
    7da4:	dd802d15 	stw	r22,180(sp)
    7da8:	dd402c15 	stw	r21,176(sp)
    7dac:	dd002b15 	stw	r20,172(sp)
    7db0:	dfc03015 	stw	ra,192(sp)
    7db4:	df002f15 	stw	fp,188(sp)
    7db8:	ddc02e15 	stw	r23,184(sp)
    7dbc:	dcc02a15 	stw	r19,168(sp)
    7dc0:	dc802915 	stw	r18,164(sp)
    7dc4:	dc402815 	stw	r17,160(sp)
    7dc8:	dc002715 	stw	r16,156(sp)
    7dcc:	d9c00415 	stw	r7,16(sp)
    7dd0:	202d883a 	mov	r22,r4
    7dd4:	282b883a 	mov	r21,r5
    7dd8:	3029883a 	mov	r20,r6
    7ddc:	20000226 	beq	r4,zero,7de8 <___vfiprintf_internal_r+0x48>
    7de0:	20800e17 	ldw	r2,56(r4)
    7de4:	1001bb26 	beq	r2,zero,84d4 <___vfiprintf_internal_r+0x734>
    7de8:	a880030b 	ldhu	r2,12(r21)
    7dec:	10c8000c 	andi	r3,r2,8192
    7df0:	1800061e 	bne	r3,zero,7e0c <___vfiprintf_internal_r+0x6c>
    7df4:	a8c01917 	ldw	r3,100(r21)
    7df8:	0137ffc4 	movi	r4,-8193
    7dfc:	10880014 	ori	r2,r2,8192
    7e00:	1906703a 	and	r3,r3,r4
    7e04:	a880030d 	sth	r2,12(r21)
    7e08:	a8c01915 	stw	r3,100(r21)
    7e0c:	10c0020c 	andi	r3,r2,8
    7e10:	18010626 	beq	r3,zero,822c <___vfiprintf_internal_r+0x48c>
    7e14:	a8c00417 	ldw	r3,16(r21)
    7e18:	18010426 	beq	r3,zero,822c <___vfiprintf_internal_r+0x48c>
    7e1c:	1080068c 	andi	r2,r2,26
    7e20:	10800298 	cmpnei	r2,r2,10
    7e24:	10010926 	beq	r2,zero,824c <___vfiprintf_internal_r+0x4ac>
    7e28:	dc801704 	addi	r18,sp,92
    7e2c:	dc800a15 	stw	r18,40(sp)
    7e30:	d8000c15 	stw	zero,48(sp)
    7e34:	d8000b15 	stw	zero,44(sp)
    7e38:	9021883a 	mov	r16,r18
    7e3c:	d8000515 	stw	zero,20(sp)
    7e40:	d8000115 	stw	zero,4(sp)
    7e44:	a0800007 	ldb	r2,0(r20)
    7e48:	1000e626 	beq	r2,zero,81e4 <___vfiprintf_internal_r+0x444>
    7e4c:	a023883a 	mov	r17,r20
    7e50:	00000306 	br	7e60 <___vfiprintf_internal_r+0xc0>
    7e54:	88800047 	ldb	r2,1(r17)
    7e58:	8c400044 	addi	r17,r17,1
    7e5c:	10013126 	beq	r2,zero,8324 <___vfiprintf_internal_r+0x584>
    7e60:	10800958 	cmpnei	r2,r2,37
    7e64:	103ffb1e 	bne	r2,zero,7e54 <___vfiprintf_internal_r+0xb4>
    7e68:	8d27c83a 	sub	r19,r17,r20
    7e6c:	8d012f1e 	bne	r17,r20,832c <___vfiprintf_internal_r+0x58c>
    7e70:	88800003 	ldbu	r2,0(r17)
    7e74:	10803fcc 	andi	r2,r2,255
    7e78:	1080201c 	xori	r2,r2,128
    7e7c:	10bfe004 	addi	r2,r2,-128
    7e80:	1000d826 	beq	r2,zero,81e4 <___vfiprintf_internal_r+0x444>
    7e84:	88800047 	ldb	r2,1(r17)
    7e88:	8d000044 	addi	r20,r17,1
    7e8c:	d8000945 	stb	zero,37(sp)
    7e90:	000b883a 	mov	r5,zero
    7e94:	000d883a 	mov	r6,zero
    7e98:	023fffc4 	movi	r8,-1
    7e9c:	0023883a 	mov	r17,zero
    7ea0:	001b883a 	mov	r13,zero
    7ea4:	a5000044 	addi	r20,r20,1
    7ea8:	10fff804 	addi	r3,r2,-32
    7eac:	19001668 	cmpgeui	r4,r3,89
    7eb0:	20006a1e 	bne	r4,zero,805c <___vfiprintf_internal_r+0x2bc>
    7eb4:	180690ba 	slli	r3,r3,2
    7eb8:	01000034 	movhi	r4,0
    7ebc:	1909883a 	add	r4,r3,r4
    7ec0:	20dfb217 	ldw	r3,32456(r4)
    7ec4:	1800683a 	jmp	r3
    7ec8:	000087f4 	movhi	zero,543
    7ecc:	0000805c 	xori	zero,zero,513
    7ed0:	0000805c 	xori	zero,zero,513
    7ed4:	000087e8 	cmpgeui	zero,zero,543
    7ed8:	0000805c 	xori	zero,zero,513
    7edc:	0000805c 	xori	zero,zero,513
    7ee0:	0000805c 	xori	zero,zero,513
    7ee4:	0000805c 	xori	zero,zero,513
    7ee8:	0000805c 	xori	zero,zero,513
    7eec:	0000805c 	xori	zero,zero,513
    7ef0:	000087c0 	call	87c <timer_counter_task+0x28>
    7ef4:	000087b0 	cmpltui	zero,zero,542
    7ef8:	0000805c 	xori	zero,zero,513
    7efc:	00008798 	cmpnei	zero,zero,542
    7f00:	00008754 	movui	zero,541
    7f04:	0000805c 	xori	zero,zero,513
    7f08:	00008748 	cmpgei	zero,zero,541
    7f0c:	0000802c 	andhi	zero,zero,512
    7f10:	0000802c 	andhi	zero,zero,512
    7f14:	0000802c 	andhi	zero,zero,512
    7f18:	0000802c 	andhi	zero,zero,512
    7f1c:	0000802c 	andhi	zero,zero,512
    7f20:	0000802c 	andhi	zero,zero,512
    7f24:	0000802c 	andhi	zero,zero,512
    7f28:	0000802c 	andhi	zero,zero,512
    7f2c:	0000802c 	andhi	zero,zero,512
    7f30:	0000805c 	xori	zero,zero,513
    7f34:	0000805c 	xori	zero,zero,513
    7f38:	0000805c 	xori	zero,zero,513
    7f3c:	0000805c 	xori	zero,zero,513
    7f40:	0000805c 	xori	zero,zero,513
    7f44:	0000805c 	xori	zero,zero,513
    7f48:	0000805c 	xori	zero,zero,513
    7f4c:	0000805c 	xori	zero,zero,513
    7f50:	0000805c 	xori	zero,zero,513
    7f54:	0000805c 	xori	zero,zero,513
    7f58:	00008644 	movi	zero,537
    7f5c:	0000805c 	xori	zero,zero,513
    7f60:	0000805c 	xori	zero,zero,513
    7f64:	0000805c 	xori	zero,zero,513
    7f68:	0000805c 	xori	zero,zero,513
    7f6c:	0000805c 	xori	zero,zero,513
    7f70:	0000805c 	xori	zero,zero,513
    7f74:	0000805c 	xori	zero,zero,513
    7f78:	0000805c 	xori	zero,zero,513
    7f7c:	0000805c 	xori	zero,zero,513
    7f80:	0000805c 	xori	zero,zero,513
    7f84:	000082bc 	xorhi	zero,zero,522
    7f88:	0000805c 	xori	zero,zero,513
    7f8c:	0000805c 	xori	zero,zero,513
    7f90:	0000805c 	xori	zero,zero,513
    7f94:	0000805c 	xori	zero,zero,513
    7f98:	0000805c 	xori	zero,zero,513
    7f9c:	00008294 	movui	zero,522
    7fa0:	0000805c 	xori	zero,zero,513
    7fa4:	0000805c 	xori	zero,zero,513
    7fa8:	00008848 	cmpgei	zero,zero,545
    7fac:	0000805c 	xori	zero,zero,513
    7fb0:	0000805c 	xori	zero,zero,513
    7fb4:	0000805c 	xori	zero,zero,513
    7fb8:	0000805c 	xori	zero,zero,513
    7fbc:	0000805c 	xori	zero,zero,513
    7fc0:	0000805c 	xori	zero,zero,513
    7fc4:	0000805c 	xori	zero,zero,513
    7fc8:	0000805c 	xori	zero,zero,513
    7fcc:	0000805c 	xori	zero,zero,513
    7fd0:	0000805c 	xori	zero,zero,513
    7fd4:	00008820 	cmpeqi	zero,zero,544
    7fd8:	000084dc 	xori	zero,zero,531
    7fdc:	0000805c 	xori	zero,zero,513
    7fe0:	0000805c 	xori	zero,zero,513
    7fe4:	0000805c 	xori	zero,zero,513
    7fe8:	00008550 	cmplti	zero,zero,533
    7fec:	000084dc 	xori	zero,zero,531
    7ff0:	0000805c 	xori	zero,zero,513
    7ff4:	0000805c 	xori	zero,zero,513
    7ff8:	000088cc 	andi	zero,zero,547
    7ffc:	0000805c 	xori	zero,zero,513
    8000:	00008890 	cmplti	zero,zero,546
    8004:	000082c0 	call	82c <keys_task+0x1cc>
    8008:	00008608 	cmpgei	zero,zero,536
    800c:	000085fc 	xorhi	zero,zero,535
    8010:	0000805c 	xori	zero,zero,513
    8014:	000085a4 	muli	zero,zero,534
    8018:	0000805c 	xori	zero,zero,513
    801c:	00008298 	cmpnei	zero,zero,522
    8020:	0000805c 	xori	zero,zero,513
    8024:	0000805c 	xori	zero,zero,513
    8028:	0000855c 	xori	zero,zero,533
    802c:	0023883a 	mov	r17,zero
    8030:	10fff404 	addi	r3,r2,-48
    8034:	a0800007 	ldb	r2,0(r20)
    8038:	8c4002a4 	muli	r17,r17,10
    803c:	a5000044 	addi	r20,r20,1
    8040:	1c63883a 	add	r17,r3,r17
    8044:	10fff404 	addi	r3,r2,-48
    8048:	190002b0 	cmpltui	r4,r3,10
    804c:	203ff91e 	bne	r4,zero,8034 <___vfiprintf_internal_r+0x294>
    8050:	10fff804 	addi	r3,r2,-32
    8054:	19001668 	cmpgeui	r4,r3,89
    8058:	203f9626 	beq	r4,zero,7eb4 <___vfiprintf_internal_r+0x114>
    805c:	29403fcc 	andi	r5,r5,255
    8060:	2803eb1e 	bne	r5,zero,9010 <___vfiprintf_internal_r+0x1270>
    8064:	10005f26 	beq	r2,zero,81e4 <___vfiprintf_internal_r+0x444>
    8068:	d8800d05 	stb	r2,52(sp)
    806c:	d8000945 	stb	zero,37(sp)
    8070:	05c00044 	movi	r23,1
    8074:	07000044 	movi	fp,1
    8078:	dcc00d04 	addi	r19,sp,52
    807c:	db400015 	stw	r13,0(sp)
    8080:	0011883a 	mov	r8,zero
    8084:	d8800017 	ldw	r2,0(sp)
    8088:	1380008c 	andi	r14,r2,2
    808c:	70000126 	beq	r14,zero,8094 <___vfiprintf_internal_r+0x2f4>
    8090:	bdc00084 	addi	r23,r23,2
    8094:	d8800017 	ldw	r2,0(sp)
    8098:	d9000b17 	ldw	r4,44(sp)
    809c:	1340210c 	andi	r13,r2,132
    80a0:	21800044 	addi	r6,r4,1
    80a4:	d8800c17 	ldw	r2,48(sp)
    80a8:	300b883a 	mov	r5,r6
    80ac:	6800021e 	bne	r13,zero,80b8 <___vfiprintf_internal_r+0x318>
    80b0:	8dc7c83a 	sub	r3,r17,r23
    80b4:	00c2e016 	blt	zero,r3,8c38 <___vfiprintf_internal_r+0xe98>
    80b8:	d8c00947 	ldb	r3,37(sp)
    80bc:	81800204 	addi	r6,r16,8
    80c0:	18000d26 	beq	r3,zero,80f8 <___vfiprintf_internal_r+0x358>
    80c4:	d8c00944 	addi	r3,sp,37
    80c8:	10800044 	addi	r2,r2,1
    80cc:	80c00015 	stw	r3,0(r16)
    80d0:	00c00044 	movi	r3,1
    80d4:	80c00115 	stw	r3,4(r16)
    80d8:	d8800c15 	stw	r2,48(sp)
    80dc:	d9400b15 	stw	r5,44(sp)
    80e0:	28c00208 	cmpgei	r3,r5,8
    80e4:	1802981e 	bne	r3,zero,8b48 <___vfiprintf_internal_r+0xda8>
    80e8:	2809883a 	mov	r4,r5
    80ec:	3021883a 	mov	r16,r6
    80f0:	29400044 	addi	r5,r5,1
    80f4:	31800204 	addi	r6,r6,8
    80f8:	70001826 	beq	r14,zero,815c <___vfiprintf_internal_r+0x3bc>
    80fc:	d8c00984 	addi	r3,sp,38
    8100:	10800084 	addi	r2,r2,2
    8104:	80c00015 	stw	r3,0(r16)
    8108:	00c00084 	movi	r3,2
    810c:	80c00115 	stw	r3,4(r16)
    8110:	d8800c15 	stw	r2,48(sp)
    8114:	d9400b15 	stw	r5,44(sp)
    8118:	28c00208 	cmpgei	r3,r5,8
    811c:	1802a226 	beq	r3,zero,8ba8 <___vfiprintf_internal_r+0xe08>
    8120:	10032026 	beq	r2,zero,8da4 <___vfiprintf_internal_r+0x1004>
    8124:	d9800a04 	addi	r6,sp,40
    8128:	a80b883a 	mov	r5,r21
    812c:	b009883a 	mov	r4,r22
    8130:	da000315 	stw	r8,12(sp)
    8134:	db400215 	stw	r13,8(sp)
    8138:	0007c940 	call	7c94 <__sprint_r.part.0>
    813c:	10002b1e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8140:	d9000b17 	ldw	r4,44(sp)
    8144:	d8800c17 	ldw	r2,48(sp)
    8148:	da000317 	ldw	r8,12(sp)
    814c:	db400217 	ldw	r13,8(sp)
    8150:	d9801904 	addi	r6,sp,100
    8154:	21400044 	addi	r5,r4,1
    8158:	9021883a 	mov	r16,r18
    815c:	6b402018 	cmpnei	r13,r13,128
    8160:	6801e326 	beq	r13,zero,88f0 <___vfiprintf_internal_r+0xb50>
    8164:	4711c83a 	sub	r8,r8,fp
    8168:	02022216 	blt	zero,r8,89f4 <___vfiprintf_internal_r+0xc54>
    816c:	e085883a 	add	r2,fp,r2
    8170:	d9400b15 	stw	r5,44(sp)
    8174:	84c00015 	stw	r19,0(r16)
    8178:	87000115 	stw	fp,4(r16)
    817c:	d8800c15 	stw	r2,48(sp)
    8180:	29400210 	cmplti	r5,r5,8
    8184:	2800081e 	bne	r5,zero,81a8 <___vfiprintf_internal_r+0x408>
    8188:	10009826 	beq	r2,zero,83ec <___vfiprintf_internal_r+0x64c>
    818c:	d9800a04 	addi	r6,sp,40
    8190:	a80b883a 	mov	r5,r21
    8194:	b009883a 	mov	r4,r22
    8198:	0007c940 	call	7c94 <__sprint_r.part.0>
    819c:	1000131e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    81a0:	d8800c17 	ldw	r2,48(sp)
    81a4:	900d883a 	mov	r6,r18
    81a8:	d8c00017 	ldw	r3,0(sp)
    81ac:	1cc0010c 	andi	r19,r3,4
    81b0:	98000226 	beq	r19,zero,81bc <___vfiprintf_internal_r+0x41c>
    81b4:	8de1c83a 	sub	r16,r17,r23
    81b8:	04009316 	blt	zero,r16,8408 <___vfiprintf_internal_r+0x668>
    81bc:	8dc0010e 	bge	r17,r23,81c4 <___vfiprintf_internal_r+0x424>
    81c0:	b823883a 	mov	r17,r23
    81c4:	d8c00117 	ldw	r3,4(sp)
    81c8:	1c47883a 	add	r3,r3,r17
    81cc:	d8c00115 	stw	r3,4(sp)
    81d0:	1002531e 	bne	r2,zero,8b20 <___vfiprintf_internal_r+0xd80>
    81d4:	a0800007 	ldb	r2,0(r20)
    81d8:	d8000b15 	stw	zero,44(sp)
    81dc:	9021883a 	mov	r16,r18
    81e0:	103f1a1e 	bne	r2,zero,7e4c <___vfiprintf_internal_r+0xac>
    81e4:	d8800c17 	ldw	r2,48(sp)
    81e8:	10038b1e 	bne	r2,zero,9018 <___vfiprintf_internal_r+0x1278>
    81ec:	a880030b 	ldhu	r2,12(r21)
    81f0:	1080100c 	andi	r2,r2,64
    81f4:	1003a31e 	bne	r2,zero,9084 <___vfiprintf_internal_r+0x12e4>
    81f8:	d8800117 	ldw	r2,4(sp)
    81fc:	dfc03017 	ldw	ra,192(sp)
    8200:	df002f17 	ldw	fp,188(sp)
    8204:	ddc02e17 	ldw	r23,184(sp)
    8208:	dd802d17 	ldw	r22,180(sp)
    820c:	dd402c17 	ldw	r21,176(sp)
    8210:	dd002b17 	ldw	r20,172(sp)
    8214:	dcc02a17 	ldw	r19,168(sp)
    8218:	dc802917 	ldw	r18,164(sp)
    821c:	dc402817 	ldw	r17,160(sp)
    8220:	dc002717 	ldw	r16,156(sp)
    8224:	dec03104 	addi	sp,sp,196
    8228:	f800283a 	ret
    822c:	a80b883a 	mov	r5,r21
    8230:	b009883a 	mov	r4,r22
    8234:	00035f40 	call	35f4 <__swsetup_r>
    8238:	1003921e 	bne	r2,zero,9084 <___vfiprintf_internal_r+0x12e4>
    823c:	a880030b 	ldhu	r2,12(r21)
    8240:	1080068c 	andi	r2,r2,26
    8244:	10800298 	cmpnei	r2,r2,10
    8248:	103ef71e 	bne	r2,zero,7e28 <___vfiprintf_internal_r+0x88>
    824c:	a880038f 	ldh	r2,14(r21)
    8250:	103ef516 	blt	r2,zero,7e28 <___vfiprintf_internal_r+0x88>
    8254:	d9c00417 	ldw	r7,16(sp)
    8258:	a00d883a 	mov	r6,r20
    825c:	a80b883a 	mov	r5,r21
    8260:	b009883a 	mov	r4,r22
    8264:	dfc03017 	ldw	ra,192(sp)
    8268:	df002f17 	ldw	fp,188(sp)
    826c:	ddc02e17 	ldw	r23,184(sp)
    8270:	dd802d17 	ldw	r22,180(sp)
    8274:	dd402c17 	ldw	r21,176(sp)
    8278:	dd002b17 	ldw	r20,172(sp)
    827c:	dcc02a17 	ldw	r19,168(sp)
    8280:	dc802917 	ldw	r18,164(sp)
    8284:	dc402817 	ldw	r17,160(sp)
    8288:	dc002717 	ldw	r16,156(sp)
    828c:	dec03104 	addi	sp,sp,196
    8290:	00090f01 	jmpi	90f0 <__sbprintf>
    8294:	6b400414 	ori	r13,r13,16
    8298:	6880080c 	andi	r2,r13,32
    829c:	10004726 	beq	r2,zero,83bc <___vfiprintf_internal_r+0x61c>
    82a0:	d8c00417 	ldw	r3,16(sp)
    82a4:	00800044 	movi	r2,1
    82a8:	1dc00017 	ldw	r23,0(r3)
    82ac:	1f000117 	ldw	fp,4(r3)
    82b0:	18c00204 	addi	r3,r3,8
    82b4:	d8c00415 	stw	r3,16(sp)
    82b8:	00000906 	br	82e0 <___vfiprintf_internal_r+0x540>
    82bc:	6b400414 	ori	r13,r13,16
    82c0:	6880080c 	andi	r2,r13,32
    82c4:	10003126 	beq	r2,zero,838c <___vfiprintf_internal_r+0x5ec>
    82c8:	d8c00417 	ldw	r3,16(sp)
    82cc:	0005883a 	mov	r2,zero
    82d0:	1dc00017 	ldw	r23,0(r3)
    82d4:	1f000117 	ldw	fp,4(r3)
    82d8:	18c00204 	addi	r3,r3,8
    82dc:	d8c00415 	stw	r3,16(sp)
    82e0:	d8000945 	stb	zero,37(sp)
    82e4:	40ffffe0 	cmpeqi	r3,r8,-1
    82e8:	001d883a 	mov	r14,zero
    82ec:	1800f01e 	bne	r3,zero,86b0 <___vfiprintf_internal_r+0x910>
    82f0:	04ffdfc4 	movi	r19,-129
    82f4:	6cc8703a 	and	r4,r13,r19
    82f8:	bf06b03a 	or	r3,r23,fp
    82fc:	d9000015 	stw	r4,0(sp)
    8300:	18022e1e 	bne	r3,zero,8bbc <___vfiprintf_internal_r+0xe1c>
    8304:	4001f11e 	bne	r8,zero,8acc <___vfiprintf_internal_r+0xd2c>
    8308:	10029c1e 	bne	r2,zero,8d7c <___vfiprintf_internal_r+0xfdc>
    830c:	6f00004c 	andi	fp,r13,1
    8310:	e002ba26 	beq	fp,zero,8dfc <___vfiprintf_internal_r+0x105c>
    8314:	00800c04 	movi	r2,48
    8318:	d88016c5 	stb	r2,91(sp)
    831c:	dcc016c4 	addi	r19,sp,91
    8320:	00010006 	br	8724 <___vfiprintf_internal_r+0x984>
    8324:	8d27c83a 	sub	r19,r17,r20
    8328:	8d3fae26 	beq	r17,r20,81e4 <___vfiprintf_internal_r+0x444>
    832c:	d8c00c17 	ldw	r3,48(sp)
    8330:	d8800b17 	ldw	r2,44(sp)
    8334:	85000015 	stw	r20,0(r16)
    8338:	98c7883a 	add	r3,r19,r3
    833c:	10800044 	addi	r2,r2,1
    8340:	d8800b15 	stw	r2,44(sp)
    8344:	84c00115 	stw	r19,4(r16)
    8348:	d8c00c15 	stw	r3,48(sp)
    834c:	10800208 	cmpgei	r2,r2,8
    8350:	1000061e 	bne	r2,zero,836c <___vfiprintf_internal_r+0x5cc>
    8354:	84000204 	addi	r16,r16,8
    8358:	d8c00117 	ldw	r3,4(sp)
    835c:	88800003 	ldbu	r2,0(r17)
    8360:	1cc7883a 	add	r3,r3,r19
    8364:	d8c00115 	stw	r3,4(sp)
    8368:	003ec206 	br	7e74 <___vfiprintf_internal_r+0xd4>
    836c:	18027f26 	beq	r3,zero,8d6c <___vfiprintf_internal_r+0xfcc>
    8370:	d9800a04 	addi	r6,sp,40
    8374:	a80b883a 	mov	r5,r21
    8378:	b009883a 	mov	r4,r22
    837c:	0007c940 	call	7c94 <__sprint_r.part.0>
    8380:	103f9a1e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8384:	9021883a 	mov	r16,r18
    8388:	003ff306 	br	8358 <___vfiprintf_internal_r+0x5b8>
    838c:	d9000417 	ldw	r4,16(sp)
    8390:	6880040c 	andi	r2,r13,16
    8394:	20c00104 	addi	r3,r4,4
    8398:	1002aa1e 	bne	r2,zero,8e44 <___vfiprintf_internal_r+0x10a4>
    839c:	6880100c 	andi	r2,r13,64
    83a0:	1002f926 	beq	r2,zero,8f88 <___vfiprintf_internal_r+0x11e8>
    83a4:	d8800417 	ldw	r2,16(sp)
    83a8:	0039883a 	mov	fp,zero
    83ac:	d8c00415 	stw	r3,16(sp)
    83b0:	15c0000b 	ldhu	r23,0(r2)
    83b4:	0005883a 	mov	r2,zero
    83b8:	003fc906 	br	82e0 <___vfiprintf_internal_r+0x540>
    83bc:	d9000417 	ldw	r4,16(sp)
    83c0:	6880040c 	andi	r2,r13,16
    83c4:	20c00104 	addi	r3,r4,4
    83c8:	1002ad1e 	bne	r2,zero,8e80 <___vfiprintf_internal_r+0x10e0>
    83cc:	6880100c 	andi	r2,r13,64
    83d0:	1002f926 	beq	r2,zero,8fb8 <___vfiprintf_internal_r+0x1218>
    83d4:	d8800417 	ldw	r2,16(sp)
    83d8:	0039883a 	mov	fp,zero
    83dc:	d8c00415 	stw	r3,16(sp)
    83e0:	15c0000b 	ldhu	r23,0(r2)
    83e4:	00800044 	movi	r2,1
    83e8:	003fbd06 	br	82e0 <___vfiprintf_internal_r+0x540>
    83ec:	d8c00017 	ldw	r3,0(sp)
    83f0:	d8000b15 	stw	zero,44(sp)
    83f4:	1cc0010c 	andi	r19,r3,4
    83f8:	98024a26 	beq	r19,zero,8d24 <___vfiprintf_internal_r+0xf84>
    83fc:	8de1c83a 	sub	r16,r17,r23
    8400:	0402480e 	bge	zero,r16,8d24 <___vfiprintf_internal_r+0xf84>
    8404:	900d883a 	mov	r6,r18
    8408:	80c00450 	cmplti	r3,r16,17
    840c:	d9000b17 	ldw	r4,44(sp)
    8410:	01c000b4 	movhi	r7,2
    8414:	1803181e 	bne	r3,zero,9078 <___vfiprintf_internal_r+0x12d8>
    8418:	39eec804 	addi	r7,r7,-17632
    841c:	04c00404 	movi	r19,16
    8420:	00000606 	br	843c <___vfiprintf_internal_r+0x69c>
    8424:	21400084 	addi	r5,r4,2
    8428:	31800204 	addi	r6,r6,8
    842c:	1809883a 	mov	r4,r3
    8430:	843ffc04 	addi	r16,r16,-16
    8434:	80c00448 	cmpgei	r3,r16,17
    8438:	18001726 	beq	r3,zero,8498 <___vfiprintf_internal_r+0x6f8>
    843c:	20c00044 	addi	r3,r4,1
    8440:	10800404 	addi	r2,r2,16
    8444:	31c00015 	stw	r7,0(r6)
    8448:	34c00115 	stw	r19,4(r6)
    844c:	d8800c15 	stw	r2,48(sp)
    8450:	d8c00b15 	stw	r3,44(sp)
    8454:	19400208 	cmpgei	r5,r3,8
    8458:	283ff226 	beq	r5,zero,8424 <___vfiprintf_internal_r+0x684>
    845c:	d9800a04 	addi	r6,sp,40
    8460:	a80b883a 	mov	r5,r21
    8464:	b009883a 	mov	r4,r22
    8468:	10011d26 	beq	r2,zero,88e0 <___vfiprintf_internal_r+0xb40>
    846c:	d9c00015 	stw	r7,0(sp)
    8470:	0007c940 	call	7c94 <__sprint_r.part.0>
    8474:	103f5d1e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8478:	d9000b17 	ldw	r4,44(sp)
    847c:	843ffc04 	addi	r16,r16,-16
    8480:	80c00448 	cmpgei	r3,r16,17
    8484:	d8800c17 	ldw	r2,48(sp)
    8488:	d9c00017 	ldw	r7,0(sp)
    848c:	900d883a 	mov	r6,r18
    8490:	21400044 	addi	r5,r4,1
    8494:	183fe91e 	bne	r3,zero,843c <___vfiprintf_internal_r+0x69c>
    8498:	1405883a 	add	r2,r2,r16
    849c:	d9400b15 	stw	r5,44(sp)
    84a0:	31c00015 	stw	r7,0(r6)
    84a4:	34000115 	stw	r16,4(r6)
    84a8:	d8800c15 	stw	r2,48(sp)
    84ac:	29400210 	cmplti	r5,r5,8
    84b0:	283f421e 	bne	r5,zero,81bc <___vfiprintf_internal_r+0x41c>
    84b4:	10021b26 	beq	r2,zero,8d24 <___vfiprintf_internal_r+0xf84>
    84b8:	d9800a04 	addi	r6,sp,40
    84bc:	a80b883a 	mov	r5,r21
    84c0:	b009883a 	mov	r4,r22
    84c4:	0007c940 	call	7c94 <__sprint_r.part.0>
    84c8:	103f481e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    84cc:	d8800c17 	ldw	r2,48(sp)
    84d0:	003f3a06 	br	81bc <___vfiprintf_internal_r+0x41c>
    84d4:	00056fc0 	call	56fc <__sinit>
    84d8:	003e4306 	br	7de8 <___vfiprintf_internal_r+0x48>
    84dc:	29403fcc 	andi	r5,r5,255
    84e0:	2802d81e 	bne	r5,zero,9044 <___vfiprintf_internal_r+0x12a4>
    84e4:	6880080c 	andi	r2,r13,32
    84e8:	10005b26 	beq	r2,zero,8658 <___vfiprintf_internal_r+0x8b8>
    84ec:	d8c00417 	ldw	r3,16(sp)
    84f0:	18800117 	ldw	r2,4(r3)
    84f4:	1dc00017 	ldw	r23,0(r3)
    84f8:	18c00204 	addi	r3,r3,8
    84fc:	d8c00415 	stw	r3,16(sp)
    8500:	1039883a 	mov	fp,r2
    8504:	10006016 	blt	r2,zero,8688 <___vfiprintf_internal_r+0x8e8>
    8508:	40bfffd8 	cmpnei	r2,r8,-1
    850c:	db800943 	ldbu	r14,37(sp)
    8510:	10000626 	beq	r2,zero,852c <___vfiprintf_internal_r+0x78c>
    8514:	04ffdfc4 	movi	r19,-129
    8518:	6cc6703a 	and	r3,r13,r19
    851c:	bf04b03a 	or	r2,r23,fp
    8520:	d8c00015 	stw	r3,0(sp)
    8524:	10021426 	beq	r2,zero,8d78 <___vfiprintf_internal_r+0xfd8>
    8528:	db400017 	ldw	r13,0(sp)
    852c:	e001a51e 	bne	fp,zero,8bc4 <___vfiprintf_internal_r+0xe24>
    8530:	b88002a8 	cmpgeui	r2,r23,10
    8534:	1001a31e 	bne	r2,zero,8bc4 <___vfiprintf_internal_r+0xe24>
    8538:	bdc00c04 	addi	r23,r23,48
    853c:	ddc016c5 	stb	r23,91(sp)
    8540:	db400015 	stw	r13,0(sp)
    8544:	07000044 	movi	fp,1
    8548:	dcc016c4 	addi	r19,sp,91
    854c:	00007506 	br	8724 <___vfiprintf_internal_r+0x984>
    8550:	a0800007 	ldb	r2,0(r20)
    8554:	6b401014 	ori	r13,r13,64
    8558:	003e5206 	br	7ea4 <___vfiprintf_internal_r+0x104>
    855c:	29403fcc 	andi	r5,r5,255
    8560:	2802ba1e 	bne	r5,zero,904c <___vfiprintf_internal_r+0x12ac>
    8564:	00c000b4 	movhi	r3,2
    8568:	18ee3d04 	addi	r3,r3,-18188
    856c:	d8c00515 	stw	r3,20(sp)
    8570:	68c0080c 	andi	r3,r13,32
    8574:	1800bb26 	beq	r3,zero,8864 <___vfiprintf_internal_r+0xac4>
    8578:	d8c00417 	ldw	r3,16(sp)
    857c:	1dc00017 	ldw	r23,0(r3)
    8580:	1f000117 	ldw	fp,4(r3)
    8584:	18c00204 	addi	r3,r3,8
    8588:	d8c00415 	stw	r3,16(sp)
    858c:	68c0004c 	andi	r3,r13,1
    8590:	18000226 	beq	r3,zero,859c <___vfiprintf_internal_r+0x7fc>
    8594:	bf06b03a 	or	r3,r23,fp
    8598:	1802241e 	bne	r3,zero,8e2c <___vfiprintf_internal_r+0x108c>
    859c:	00800084 	movi	r2,2
    85a0:	003f4f06 	br	82e0 <___vfiprintf_internal_r+0x540>
    85a4:	d8800417 	ldw	r2,16(sp)
    85a8:	d8000945 	stb	zero,37(sp)
    85ac:	14c00017 	ldw	r19,0(r2)
    85b0:	10c00104 	addi	r3,r2,4
    85b4:	98026726 	beq	r19,zero,8f54 <___vfiprintf_internal_r+0x11b4>
    85b8:	40bfffe0 	cmpeqi	r2,r8,-1
    85bc:	10023f1e 	bne	r2,zero,8ebc <___vfiprintf_internal_r+0x111c>
    85c0:	400d883a 	mov	r6,r8
    85c4:	000b883a 	mov	r5,zero
    85c8:	9809883a 	mov	r4,r19
    85cc:	d8c00315 	stw	r3,12(sp)
    85d0:	db400215 	stw	r13,8(sp)
    85d4:	da000015 	stw	r8,0(sp)
    85d8:	00067440 	call	6744 <memchr>
    85dc:	da000017 	ldw	r8,0(sp)
    85e0:	db400217 	ldw	r13,8(sp)
    85e4:	d8c00317 	ldw	r3,12(sp)
    85e8:	10029226 	beq	r2,zero,9034 <___vfiprintf_internal_r+0x1294>
    85ec:	14f9c83a 	sub	fp,r2,r19
    85f0:	e02f883a 	mov	r23,fp
    85f4:	d8c00415 	stw	r3,16(sp)
    85f8:	003ea006 	br	807c <___vfiprintf_internal_r+0x2dc>
    85fc:	a0800007 	ldb	r2,0(r20)
    8600:	6b400814 	ori	r13,r13,32
    8604:	003e2706 	br	7ea4 <___vfiprintf_internal_r+0x104>
    8608:	d8c00417 	ldw	r3,16(sp)
    860c:	00800c04 	movi	r2,48
    8610:	d8800985 	stb	r2,38(sp)
    8614:	00801e04 	movi	r2,120
    8618:	010000b4 	movhi	r4,2
    861c:	d88009c5 	stb	r2,39(sp)
    8620:	18800104 	addi	r2,r3,4
    8624:	d8800415 	stw	r2,16(sp)
    8628:	20ae3d04 	addi	r2,r4,-18188
    862c:	d8800515 	stw	r2,20(sp)
    8630:	1dc00017 	ldw	r23,0(r3)
    8634:	0039883a 	mov	fp,zero
    8638:	6b400094 	ori	r13,r13,2
    863c:	00800084 	movi	r2,2
    8640:	003f2706 	br	82e0 <___vfiprintf_internal_r+0x540>
    8644:	29403fcc 	andi	r5,r5,255
    8648:	2802821e 	bne	r5,zero,9054 <___vfiprintf_internal_r+0x12b4>
    864c:	6b400414 	ori	r13,r13,16
    8650:	6880080c 	andi	r2,r13,32
    8654:	103fa51e 	bne	r2,zero,84ec <___vfiprintf_internal_r+0x74c>
    8658:	d9000417 	ldw	r4,16(sp)
    865c:	6880040c 	andi	r2,r13,16
    8660:	20c00104 	addi	r3,r4,4
    8664:	1001ec1e 	bne	r2,zero,8e18 <___vfiprintf_internal_r+0x1078>
    8668:	6880100c 	andi	r2,r13,64
    866c:	10024c26 	beq	r2,zero,8fa0 <___vfiprintf_internal_r+0x1200>
    8670:	d8800417 	ldw	r2,16(sp)
    8674:	d8c00415 	stw	r3,16(sp)
    8678:	15c0000f 	ldh	r23,0(r2)
    867c:	b839d7fa 	srai	fp,r23,31
    8680:	e005883a 	mov	r2,fp
    8684:	103fa00e 	bge	r2,zero,8508 <___vfiprintf_internal_r+0x768>
    8688:	b804c03a 	cmpne	r2,r23,zero
    868c:	0739c83a 	sub	fp,zero,fp
    8690:	e0b9c83a 	sub	fp,fp,r2
    8694:	00800b44 	movi	r2,45
    8698:	d8800945 	stb	r2,37(sp)
    869c:	40ffffe0 	cmpeqi	r3,r8,-1
    86a0:	05efc83a 	sub	r23,zero,r23
    86a4:	03800b44 	movi	r14,45
    86a8:	00800044 	movi	r2,1
    86ac:	183f1026 	beq	r3,zero,82f0 <___vfiprintf_internal_r+0x550>
    86b0:	10c00060 	cmpeqi	r3,r2,1
    86b4:	183f9d1e 	bne	r3,zero,852c <___vfiprintf_internal_r+0x78c>
    86b8:	108000a0 	cmpeqi	r2,r2,2
    86bc:	1001081e 	bne	r2,zero,8ae0 <___vfiprintf_internal_r+0xd40>
    86c0:	9027883a 	mov	r19,r18
    86c4:	e008977a 	slli	r4,fp,29
    86c8:	b806d0fa 	srli	r3,r23,3
    86cc:	e038d0fa 	srli	fp,fp,3
    86d0:	b88001cc 	andi	r2,r23,7
    86d4:	10800c04 	addi	r2,r2,48
    86d8:	20eeb03a 	or	r23,r4,r3
    86dc:	98bfffc5 	stb	r2,-1(r19)
    86e0:	bf06b03a 	or	r3,r23,fp
    86e4:	980b883a 	mov	r5,r19
    86e8:	9cffffc4 	addi	r19,r19,-1
    86ec:	183ff51e 	bne	r3,zero,86c4 <___vfiprintf_internal_r+0x924>
    86f0:	68c0004c 	andi	r3,r13,1
    86f4:	18010726 	beq	r3,zero,8b14 <___vfiprintf_internal_r+0xd74>
    86f8:	10803fcc 	andi	r2,r2,255
    86fc:	1080201c 	xori	r2,r2,128
    8700:	10bfe004 	addi	r2,r2,-128
    8704:	10800c18 	cmpnei	r2,r2,48
    8708:	10010226 	beq	r2,zero,8b14 <___vfiprintf_internal_r+0xd74>
    870c:	297fff84 	addi	r5,r5,-2
    8710:	00800c04 	movi	r2,48
    8714:	98bfffc5 	stb	r2,-1(r19)
    8718:	9179c83a 	sub	fp,r18,r5
    871c:	db400015 	stw	r13,0(sp)
    8720:	2827883a 	mov	r19,r5
    8724:	402f883a 	mov	r23,r8
    8728:	4700010e 	bge	r8,fp,8730 <___vfiprintf_internal_r+0x990>
    872c:	e02f883a 	mov	r23,fp
    8730:	73803fcc 	andi	r14,r14,255
    8734:	7380201c 	xori	r14,r14,128
    8738:	73bfe004 	addi	r14,r14,-128
    873c:	703e5126 	beq	r14,zero,8084 <___vfiprintf_internal_r+0x2e4>
    8740:	bdc00044 	addi	r23,r23,1
    8744:	003e4f06 	br	8084 <___vfiprintf_internal_r+0x2e4>
    8748:	a0800007 	ldb	r2,0(r20)
    874c:	6b402014 	ori	r13,r13,128
    8750:	003dd406 	br	7ea4 <___vfiprintf_internal_r+0x104>
    8754:	a0800007 	ldb	r2,0(r20)
    8758:	a1000044 	addi	r4,r20,1
    875c:	10c00aa0 	cmpeqi	r3,r2,42
    8760:	1802501e 	bne	r3,zero,90a4 <___vfiprintf_internal_r+0x1304>
    8764:	10fff404 	addi	r3,r2,-48
    8768:	19c002b0 	cmpltui	r7,r3,10
    876c:	2029883a 	mov	r20,r4
    8770:	0011883a 	mov	r8,zero
    8774:	383dcc26 	beq	r7,zero,7ea8 <___vfiprintf_internal_r+0x108>
    8778:	a0800007 	ldb	r2,0(r20)
    877c:	420002a4 	muli	r8,r8,10
    8780:	a5000044 	addi	r20,r20,1
    8784:	40d1883a 	add	r8,r8,r3
    8788:	10fff404 	addi	r3,r2,-48
    878c:	190002b0 	cmpltui	r4,r3,10
    8790:	203ff91e 	bne	r4,zero,8778 <___vfiprintf_internal_r+0x9d8>
    8794:	003dc406 	br	7ea8 <___vfiprintf_internal_r+0x108>
    8798:	a0800003 	ldbu	r2,0(r20)
    879c:	10803fcc 	andi	r2,r2,255
    87a0:	1080201c 	xori	r2,r2,128
    87a4:	6b400114 	ori	r13,r13,4
    87a8:	10bfe004 	addi	r2,r2,-128
    87ac:	003dbd06 	br	7ea4 <___vfiprintf_internal_r+0x104>
    87b0:	a0800007 	ldb	r2,0(r20)
    87b4:	01400044 	movi	r5,1
    87b8:	01800ac4 	movi	r6,43
    87bc:	003db906 	br	7ea4 <___vfiprintf_internal_r+0x104>
    87c0:	d8c00417 	ldw	r3,16(sp)
    87c4:	a0800003 	ldbu	r2,0(r20)
    87c8:	1c400017 	ldw	r17,0(r3)
    87cc:	18c00104 	addi	r3,r3,4
    87d0:	8801b716 	blt	r17,zero,8eb0 <___vfiprintf_internal_r+0x1110>
    87d4:	d8c00415 	stw	r3,16(sp)
    87d8:	10803fcc 	andi	r2,r2,255
    87dc:	1080201c 	xori	r2,r2,128
    87e0:	10bfe004 	addi	r2,r2,-128
    87e4:	003daf06 	br	7ea4 <___vfiprintf_internal_r+0x104>
    87e8:	a0800007 	ldb	r2,0(r20)
    87ec:	6b400054 	ori	r13,r13,1
    87f0:	003dac06 	br	7ea4 <___vfiprintf_internal_r+0x104>
    87f4:	30c03fcc 	andi	r3,r6,255
    87f8:	18c0201c 	xori	r3,r3,128
    87fc:	18ffe004 	addi	r3,r3,-128
    8800:	a0800003 	ldbu	r2,0(r20)
    8804:	183ff41e 	bne	r3,zero,87d8 <___vfiprintf_internal_r+0xa38>
    8808:	10803fcc 	andi	r2,r2,255
    880c:	1080201c 	xori	r2,r2,128
    8810:	01400044 	movi	r5,1
    8814:	01800804 	movi	r6,32
    8818:	10bfe004 	addi	r2,r2,-128
    881c:	003da106 	br	7ea4 <___vfiprintf_internal_r+0x104>
    8820:	d8c00417 	ldw	r3,16(sp)
    8824:	d8000945 	stb	zero,37(sp)
    8828:	05c00044 	movi	r23,1
    882c:	18800017 	ldw	r2,0(r3)
    8830:	18c00104 	addi	r3,r3,4
    8834:	d8c00415 	stw	r3,16(sp)
    8838:	d8800d05 	stb	r2,52(sp)
    883c:	07000044 	movi	fp,1
    8840:	dcc00d04 	addi	r19,sp,52
    8844:	003e0d06 	br	807c <___vfiprintf_internal_r+0x2dc>
    8848:	29403fcc 	andi	r5,r5,255
    884c:	2802061e 	bne	r5,zero,9068 <___vfiprintf_internal_r+0x12c8>
    8850:	00c000b4 	movhi	r3,2
    8854:	18ee4204 	addi	r3,r3,-18168
    8858:	d8c00515 	stw	r3,20(sp)
    885c:	68c0080c 	andi	r3,r13,32
    8860:	183f451e 	bne	r3,zero,8578 <___vfiprintf_internal_r+0x7d8>
    8864:	d9400417 	ldw	r5,16(sp)
    8868:	68c0040c 	andi	r3,r13,16
    886c:	29000104 	addi	r4,r5,4
    8870:	18017f1e 	bne	r3,zero,8e70 <___vfiprintf_internal_r+0x10d0>
    8874:	68c0100c 	andi	r3,r13,64
    8878:	1801be26 	beq	r3,zero,8f74 <___vfiprintf_internal_r+0x11d4>
    887c:	d8c00417 	ldw	r3,16(sp)
    8880:	0039883a 	mov	fp,zero
    8884:	d9000415 	stw	r4,16(sp)
    8888:	1dc0000b 	ldhu	r23,0(r3)
    888c:	003f3f06 	br	858c <___vfiprintf_internal_r+0x7ec>
    8890:	29403fcc 	andi	r5,r5,255
    8894:	2801f61e 	bne	r5,zero,9070 <___vfiprintf_internal_r+0x12d0>
    8898:	d9000417 	ldw	r4,16(sp)
    889c:	6880080c 	andi	r2,r13,32
    88a0:	20c00017 	ldw	r3,0(r4)
    88a4:	21000104 	addi	r4,r4,4
    88a8:	10016b1e 	bne	r2,zero,8e58 <___vfiprintf_internal_r+0x10b8>
    88ac:	6880040c 	andi	r2,r13,16
    88b0:	1001951e 	bne	r2,zero,8f08 <___vfiprintf_internal_r+0x1168>
    88b4:	6b40100c 	andi	r13,r13,64
    88b8:	68019326 	beq	r13,zero,8f08 <___vfiprintf_internal_r+0x1168>
    88bc:	d8800117 	ldw	r2,4(sp)
    88c0:	d9000415 	stw	r4,16(sp)
    88c4:	1880000d 	sth	r2,0(r3)
    88c8:	003d5e06 	br	7e44 <___vfiprintf_internal_r+0xa4>
    88cc:	a0800007 	ldb	r2,0(r20)
    88d0:	10c01b18 	cmpnei	r3,r2,108
    88d4:	18019826 	beq	r3,zero,8f38 <___vfiprintf_internal_r+0x1198>
    88d8:	6b400414 	ori	r13,r13,16
    88dc:	003d7106 	br	7ea4 <___vfiprintf_internal_r+0x104>
    88e0:	01400044 	movi	r5,1
    88e4:	0009883a 	mov	r4,zero
    88e8:	900d883a 	mov	r6,r18
    88ec:	003ed006 	br	8430 <___vfiprintf_internal_r+0x690>
    88f0:	8dc7c83a 	sub	r3,r17,r23
    88f4:	00fe1b0e 	bge	zero,r3,8164 <___vfiprintf_internal_r+0x3c4>
    88f8:	19c00450 	cmplti	r7,r3,17
    88fc:	3801e41e 	bne	r7,zero,9090 <___vfiprintf_internal_r+0x12f0>
    8900:	01c000b4 	movhi	r7,2
    8904:	39eec404 	addi	r7,r7,-17648
    8908:	03400404 	movi	r13,16
    890c:	00000606 	br	8928 <___vfiprintf_internal_r+0xb88>
    8910:	23800084 	addi	r14,r4,2
    8914:	84000204 	addi	r16,r16,8
    8918:	2809883a 	mov	r4,r5
    891c:	18fffc04 	addi	r3,r3,-16
    8920:	19400448 	cmpgei	r5,r3,17
    8924:	28001c26 	beq	r5,zero,8998 <___vfiprintf_internal_r+0xbf8>
    8928:	21400044 	addi	r5,r4,1
    892c:	10800404 	addi	r2,r2,16
    8930:	81c00015 	stw	r7,0(r16)
    8934:	83400115 	stw	r13,4(r16)
    8938:	d8800c15 	stw	r2,48(sp)
    893c:	d9400b15 	stw	r5,44(sp)
    8940:	29800208 	cmpgei	r6,r5,8
    8944:	303ff226 	beq	r6,zero,8910 <___vfiprintf_internal_r+0xb70>
    8948:	d9800a04 	addi	r6,sp,40
    894c:	a80b883a 	mov	r5,r21
    8950:	b009883a 	mov	r4,r22
    8954:	10007826 	beq	r2,zero,8b38 <___vfiprintf_internal_r+0xd98>
    8958:	d9c00615 	stw	r7,24(sp)
    895c:	d8c00315 	stw	r3,12(sp)
    8960:	da000215 	stw	r8,8(sp)
    8964:	0007c940 	call	7c94 <__sprint_r.part.0>
    8968:	103e201e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    896c:	d8c00317 	ldw	r3,12(sp)
    8970:	d9000b17 	ldw	r4,44(sp)
    8974:	d8800c17 	ldw	r2,48(sp)
    8978:	18fffc04 	addi	r3,r3,-16
    897c:	19400448 	cmpgei	r5,r3,17
    8980:	d9c00617 	ldw	r7,24(sp)
    8984:	da000217 	ldw	r8,8(sp)
    8988:	9021883a 	mov	r16,r18
    898c:	23800044 	addi	r14,r4,1
    8990:	03400404 	movi	r13,16
    8994:	283fe41e 	bne	r5,zero,8928 <___vfiprintf_internal_r+0xb88>
    8998:	83400204 	addi	r13,r16,8
    899c:	10c5883a 	add	r2,r2,r3
    89a0:	80c00115 	stw	r3,4(r16)
    89a4:	81c00015 	stw	r7,0(r16)
    89a8:	d8800c15 	stw	r2,48(sp)
    89ac:	db800b15 	stw	r14,44(sp)
    89b0:	70c00208 	cmpgei	r3,r14,8
    89b4:	18011326 	beq	r3,zero,8e04 <___vfiprintf_internal_r+0x1064>
    89b8:	10018826 	beq	r2,zero,8fdc <___vfiprintf_internal_r+0x123c>
    89bc:	d9800a04 	addi	r6,sp,40
    89c0:	a80b883a 	mov	r5,r21
    89c4:	b009883a 	mov	r4,r22
    89c8:	da000215 	stw	r8,8(sp)
    89cc:	0007c940 	call	7c94 <__sprint_r.part.0>
    89d0:	103e061e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    89d4:	da000217 	ldw	r8,8(sp)
    89d8:	d9000b17 	ldw	r4,44(sp)
    89dc:	d8800c17 	ldw	r2,48(sp)
    89e0:	4711c83a 	sub	r8,r8,fp
    89e4:	d9801904 	addi	r6,sp,100
    89e8:	21400044 	addi	r5,r4,1
    89ec:	9021883a 	mov	r16,r18
    89f0:	023dde0e 	bge	zero,r8,816c <___vfiprintf_internal_r+0x3cc>
    89f4:	40c00450 	cmplti	r3,r8,17
    89f8:	01c000b4 	movhi	r7,2
    89fc:	1801741e 	bne	r3,zero,8fd0 <___vfiprintf_internal_r+0x1230>
    8a00:	39eec404 	addi	r7,r7,-17648
    8a04:	03400404 	movi	r13,16
    8a08:	00000606 	br	8a24 <___vfiprintf_internal_r+0xc84>
    8a0c:	21400084 	addi	r5,r4,2
    8a10:	84000204 	addi	r16,r16,8
    8a14:	1809883a 	mov	r4,r3
    8a18:	423ffc04 	addi	r8,r8,-16
    8a1c:	40c00448 	cmpgei	r3,r8,17
    8a20:	18001a26 	beq	r3,zero,8a8c <___vfiprintf_internal_r+0xcec>
    8a24:	20c00044 	addi	r3,r4,1
    8a28:	10800404 	addi	r2,r2,16
    8a2c:	81c00015 	stw	r7,0(r16)
    8a30:	83400115 	stw	r13,4(r16)
    8a34:	d8800c15 	stw	r2,48(sp)
    8a38:	d8c00b15 	stw	r3,44(sp)
    8a3c:	19400208 	cmpgei	r5,r3,8
    8a40:	283ff226 	beq	r5,zero,8a0c <___vfiprintf_internal_r+0xc6c>
    8a44:	d9800a04 	addi	r6,sp,40
    8a48:	a80b883a 	mov	r5,r21
    8a4c:	b009883a 	mov	r4,r22
    8a50:	10001a26 	beq	r2,zero,8abc <___vfiprintf_internal_r+0xd1c>
    8a54:	d9c00315 	stw	r7,12(sp)
    8a58:	da000215 	stw	r8,8(sp)
    8a5c:	0007c940 	call	7c94 <__sprint_r.part.0>
    8a60:	103de21e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8a64:	da000217 	ldw	r8,8(sp)
    8a68:	d9000b17 	ldw	r4,44(sp)
    8a6c:	d8800c17 	ldw	r2,48(sp)
    8a70:	423ffc04 	addi	r8,r8,-16
    8a74:	40c00448 	cmpgei	r3,r8,17
    8a78:	d9c00317 	ldw	r7,12(sp)
    8a7c:	9021883a 	mov	r16,r18
    8a80:	21400044 	addi	r5,r4,1
    8a84:	03400404 	movi	r13,16
    8a88:	183fe61e 	bne	r3,zero,8a24 <___vfiprintf_internal_r+0xc84>
    8a8c:	81000204 	addi	r4,r16,8
    8a90:	1205883a 	add	r2,r2,r8
    8a94:	81c00015 	stw	r7,0(r16)
    8a98:	82000115 	stw	r8,4(r16)
    8a9c:	d8800c15 	stw	r2,48(sp)
    8aa0:	d9400b15 	stw	r5,44(sp)
    8aa4:	28c00208 	cmpgei	r3,r5,8
    8aa8:	1800a41e 	bne	r3,zero,8d3c <___vfiprintf_internal_r+0xf9c>
    8aac:	29400044 	addi	r5,r5,1
    8ab0:	21800204 	addi	r6,r4,8
    8ab4:	2021883a 	mov	r16,r4
    8ab8:	003dac06 	br	816c <___vfiprintf_internal_r+0x3cc>
    8abc:	01400044 	movi	r5,1
    8ac0:	0009883a 	mov	r4,zero
    8ac4:	9021883a 	mov	r16,r18
    8ac8:	003fd306 	br	8a18 <___vfiprintf_internal_r+0xc78>
    8acc:	10c00060 	cmpeqi	r3,r2,1
    8ad0:	1801561e 	bne	r3,zero,902c <___vfiprintf_internal_r+0x128c>
    8ad4:	108000a0 	cmpeqi	r2,r2,2
    8ad8:	db400017 	ldw	r13,0(sp)
    8adc:	103ef826 	beq	r2,zero,86c0 <___vfiprintf_internal_r+0x920>
    8ae0:	9027883a 	mov	r19,r18
    8ae4:	d9000517 	ldw	r4,20(sp)
    8ae8:	b88003cc 	andi	r2,r23,15
    8aec:	e006973a 	slli	r3,fp,28
    8af0:	b82ed13a 	srli	r23,r23,4
    8af4:	2085883a 	add	r2,r4,r2
    8af8:	10800003 	ldbu	r2,0(r2)
    8afc:	e038d13a 	srli	fp,fp,4
    8b00:	1deeb03a 	or	r23,r3,r23
    8b04:	98bfffc5 	stb	r2,-1(r19)
    8b08:	bf04b03a 	or	r2,r23,fp
    8b0c:	9cffffc4 	addi	r19,r19,-1
    8b10:	103ff41e 	bne	r2,zero,8ae4 <___vfiprintf_internal_r+0xd44>
    8b14:	94f9c83a 	sub	fp,r18,r19
    8b18:	db400015 	stw	r13,0(sp)
    8b1c:	003f0106 	br	8724 <___vfiprintf_internal_r+0x984>
    8b20:	d9800a04 	addi	r6,sp,40
    8b24:	a80b883a 	mov	r5,r21
    8b28:	b009883a 	mov	r4,r22
    8b2c:	0007c940 	call	7c94 <__sprint_r.part.0>
    8b30:	103da826 	beq	r2,zero,81d4 <___vfiprintf_internal_r+0x434>
    8b34:	003dad06 	br	81ec <___vfiprintf_internal_r+0x44c>
    8b38:	03800044 	movi	r14,1
    8b3c:	0009883a 	mov	r4,zero
    8b40:	9021883a 	mov	r16,r18
    8b44:	003f7506 	br	891c <___vfiprintf_internal_r+0xb7c>
    8b48:	10009026 	beq	r2,zero,8d8c <___vfiprintf_internal_r+0xfec>
    8b4c:	d9800a04 	addi	r6,sp,40
    8b50:	a80b883a 	mov	r5,r21
    8b54:	b009883a 	mov	r4,r22
    8b58:	da000615 	stw	r8,24(sp)
    8b5c:	db400315 	stw	r13,12(sp)
    8b60:	db800215 	stw	r14,8(sp)
    8b64:	0007c940 	call	7c94 <__sprint_r.part.0>
    8b68:	103da01e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8b6c:	d9000b17 	ldw	r4,44(sp)
    8b70:	d8800c17 	ldw	r2,48(sp)
    8b74:	da000617 	ldw	r8,24(sp)
    8b78:	db400317 	ldw	r13,12(sp)
    8b7c:	db800217 	ldw	r14,8(sp)
    8b80:	d9801904 	addi	r6,sp,100
    8b84:	21400044 	addi	r5,r4,1
    8b88:	9021883a 	mov	r16,r18
    8b8c:	003d5a06 	br	80f8 <___vfiprintf_internal_r+0x358>
    8b90:	d8800984 	addi	r2,sp,38
    8b94:	d8801715 	stw	r2,92(sp)
    8b98:	00800084 	movi	r2,2
    8b9c:	d8801815 	stw	r2,96(sp)
    8ba0:	d9801904 	addi	r6,sp,100
    8ba4:	01400044 	movi	r5,1
    8ba8:	3021883a 	mov	r16,r6
    8bac:	2809883a 	mov	r4,r5
    8bb0:	21400044 	addi	r5,r4,1
    8bb4:	81800204 	addi	r6,r16,8
    8bb8:	003d6806 	br	815c <___vfiprintf_internal_r+0x3bc>
    8bbc:	db400017 	ldw	r13,0(sp)
    8bc0:	003ebb06 	br	86b0 <___vfiprintf_internal_r+0x910>
    8bc4:	9027883a 	mov	r19,r18
    8bc8:	b809883a 	mov	r4,r23
    8bcc:	e00b883a 	mov	r5,fp
    8bd0:	01800284 	movi	r6,10
    8bd4:	000f883a 	mov	r7,zero
    8bd8:	db800315 	stw	r14,12(sp)
    8bdc:	da000215 	stw	r8,8(sp)
    8be0:	db400015 	stw	r13,0(sp)
    8be4:	000b3e00 	call	b3e0 <__umoddi3>
    8be8:	10800c04 	addi	r2,r2,48
    8bec:	b809883a 	mov	r4,r23
    8bf0:	e00b883a 	mov	r5,fp
    8bf4:	98bfffc5 	stb	r2,-1(r19)
    8bf8:	01800284 	movi	r6,10
    8bfc:	000f883a 	mov	r7,zero
    8c00:	000ae500 	call	ae50 <__udivdi3>
    8c04:	e009883a 	mov	r4,fp
    8c08:	b80b883a 	mov	r5,r23
    8c0c:	db400017 	ldw	r13,0(sp)
    8c10:	da000217 	ldw	r8,8(sp)
    8c14:	db800317 	ldw	r14,12(sp)
    8c18:	9cffffc4 	addi	r19,r19,-1
    8c1c:	102f883a 	mov	r23,r2
    8c20:	1839883a 	mov	fp,r3
    8c24:	203fe81e 	bne	r4,zero,8bc8 <___vfiprintf_internal_r+0xe28>
    8c28:	294002a8 	cmpgeui	r5,r5,10
    8c2c:	283fe61e 	bne	r5,zero,8bc8 <___vfiprintf_internal_r+0xe28>
    8c30:	94f9c83a 	sub	fp,r18,r19
    8c34:	003ebb06 	br	8724 <___vfiprintf_internal_r+0x984>
    8c38:	19400450 	cmplti	r5,r3,17
    8c3c:	01c000b4 	movhi	r7,2
    8c40:	2801061e 	bne	r5,zero,905c <___vfiprintf_internal_r+0x12bc>
    8c44:	39eec804 	addi	r7,r7,-17632
    8c48:	03c00404 	movi	r15,16
    8c4c:	00000706 	br	8c6c <___vfiprintf_internal_r+0xecc>
    8c50:	27c00084 	addi	ra,r4,2
    8c54:	84000204 	addi	r16,r16,8
    8c58:	3009883a 	mov	r4,r6
    8c5c:	18fffc04 	addi	r3,r3,-16
    8c60:	19400448 	cmpgei	r5,r3,17
    8c64:	28002026 	beq	r5,zero,8ce8 <___vfiprintf_internal_r+0xf48>
    8c68:	21800044 	addi	r6,r4,1
    8c6c:	10800404 	addi	r2,r2,16
    8c70:	81c00015 	stw	r7,0(r16)
    8c74:	83c00115 	stw	r15,4(r16)
    8c78:	d8800c15 	stw	r2,48(sp)
    8c7c:	d9800b15 	stw	r6,44(sp)
    8c80:	31400208 	cmpgei	r5,r6,8
    8c84:	283ff226 	beq	r5,zero,8c50 <___vfiprintf_internal_r+0xeb0>
    8c88:	d9800a04 	addi	r6,sp,40
    8c8c:	a80b883a 	mov	r5,r21
    8c90:	b009883a 	mov	r4,r22
    8c94:	10001f26 	beq	r2,zero,8d14 <___vfiprintf_internal_r+0xf74>
    8c98:	d9c00815 	stw	r7,32(sp)
    8c9c:	d8c00715 	stw	r3,28(sp)
    8ca0:	da000615 	stw	r8,24(sp)
    8ca4:	db400315 	stw	r13,12(sp)
    8ca8:	db800215 	stw	r14,8(sp)
    8cac:	0007c940 	call	7c94 <__sprint_r.part.0>
    8cb0:	103d4e1e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8cb4:	d8c00717 	ldw	r3,28(sp)
    8cb8:	d9000b17 	ldw	r4,44(sp)
    8cbc:	d8800c17 	ldw	r2,48(sp)
    8cc0:	18fffc04 	addi	r3,r3,-16
    8cc4:	19400448 	cmpgei	r5,r3,17
    8cc8:	d9c00817 	ldw	r7,32(sp)
    8ccc:	da000617 	ldw	r8,24(sp)
    8cd0:	db400317 	ldw	r13,12(sp)
    8cd4:	db800217 	ldw	r14,8(sp)
    8cd8:	9021883a 	mov	r16,r18
    8cdc:	27c00044 	addi	ra,r4,1
    8ce0:	03c00404 	movi	r15,16
    8ce4:	283fe01e 	bne	r5,zero,8c68 <___vfiprintf_internal_r+0xec8>
    8ce8:	10c5883a 	add	r2,r2,r3
    8cec:	80c00115 	stw	r3,4(r16)
    8cf0:	81c00015 	stw	r7,0(r16)
    8cf4:	d8800c15 	stw	r2,48(sp)
    8cf8:	dfc00b15 	stw	ra,44(sp)
    8cfc:	f8c00208 	cmpgei	r3,ra,8
    8d00:	18002d1e 	bne	r3,zero,8db8 <___vfiprintf_internal_r+0x1018>
    8d04:	84000204 	addi	r16,r16,8
    8d08:	f9400044 	addi	r5,ra,1
    8d0c:	f809883a 	mov	r4,ra
    8d10:	003ce906 	br	80b8 <___vfiprintf_internal_r+0x318>
    8d14:	0009883a 	mov	r4,zero
    8d18:	07c00044 	movi	ra,1
    8d1c:	9021883a 	mov	r16,r18
    8d20:	003fce06 	br	8c5c <___vfiprintf_internal_r+0xebc>
    8d24:	8dc0010e 	bge	r17,r23,8d2c <___vfiprintf_internal_r+0xf8c>
    8d28:	b823883a 	mov	r17,r23
    8d2c:	d8800117 	ldw	r2,4(sp)
    8d30:	1445883a 	add	r2,r2,r17
    8d34:	d8800115 	stw	r2,4(sp)
    8d38:	003d2606 	br	81d4 <___vfiprintf_internal_r+0x434>
    8d3c:	10007626 	beq	r2,zero,8f18 <___vfiprintf_internal_r+0x1178>
    8d40:	d9800a04 	addi	r6,sp,40
    8d44:	a80b883a 	mov	r5,r21
    8d48:	b009883a 	mov	r4,r22
    8d4c:	0007c940 	call	7c94 <__sprint_r.part.0>
    8d50:	103d261e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8d54:	d9400b17 	ldw	r5,44(sp)
    8d58:	d8800c17 	ldw	r2,48(sp)
    8d5c:	d9801904 	addi	r6,sp,100
    8d60:	29400044 	addi	r5,r5,1
    8d64:	9021883a 	mov	r16,r18
    8d68:	003d0006 	br	816c <___vfiprintf_internal_r+0x3cc>
    8d6c:	d8000b15 	stw	zero,44(sp)
    8d70:	9021883a 	mov	r16,r18
    8d74:	003d7806 	br	8358 <___vfiprintf_internal_r+0x5b8>
    8d78:	4000ac1e 	bne	r8,zero,902c <___vfiprintf_internal_r+0x128c>
    8d7c:	0011883a 	mov	r8,zero
    8d80:	0039883a 	mov	fp,zero
    8d84:	9027883a 	mov	r19,r18
    8d88:	003e6606 	br	8724 <___vfiprintf_internal_r+0x984>
    8d8c:	7000411e 	bne	r14,zero,8e94 <___vfiprintf_internal_r+0x10f4>
    8d90:	0009883a 	mov	r4,zero
    8d94:	d9801904 	addi	r6,sp,100
    8d98:	01400044 	movi	r5,1
    8d9c:	9021883a 	mov	r16,r18
    8da0:	003cee06 	br	815c <___vfiprintf_internal_r+0x3bc>
    8da4:	d9801904 	addi	r6,sp,100
    8da8:	01400044 	movi	r5,1
    8dac:	0009883a 	mov	r4,zero
    8db0:	9021883a 	mov	r16,r18
    8db4:	003ce906 	br	815c <___vfiprintf_internal_r+0x3bc>
    8db8:	10004a26 	beq	r2,zero,8ee4 <___vfiprintf_internal_r+0x1144>
    8dbc:	d9800a04 	addi	r6,sp,40
    8dc0:	a80b883a 	mov	r5,r21
    8dc4:	b009883a 	mov	r4,r22
    8dc8:	da000615 	stw	r8,24(sp)
    8dcc:	db400315 	stw	r13,12(sp)
    8dd0:	db800215 	stw	r14,8(sp)
    8dd4:	0007c940 	call	7c94 <__sprint_r.part.0>
    8dd8:	103d041e 	bne	r2,zero,81ec <___vfiprintf_internal_r+0x44c>
    8ddc:	d9000b17 	ldw	r4,44(sp)
    8de0:	d8800c17 	ldw	r2,48(sp)
    8de4:	da000617 	ldw	r8,24(sp)
    8de8:	db400317 	ldw	r13,12(sp)
    8dec:	db800217 	ldw	r14,8(sp)
    8df0:	9021883a 	mov	r16,r18
    8df4:	21400044 	addi	r5,r4,1
    8df8:	003caf06 	br	80b8 <___vfiprintf_internal_r+0x318>
    8dfc:	9027883a 	mov	r19,r18
    8e00:	003e4806 	br	8724 <___vfiprintf_internal_r+0x984>
    8e04:	71400044 	addi	r5,r14,1
    8e08:	69800204 	addi	r6,r13,8
    8e0c:	7009883a 	mov	r4,r14
    8e10:	6821883a 	mov	r16,r13
    8e14:	003cd306 	br	8164 <___vfiprintf_internal_r+0x3c4>
    8e18:	25c00017 	ldw	r23,0(r4)
    8e1c:	d8c00415 	stw	r3,16(sp)
    8e20:	b839d7fa 	srai	fp,r23,31
    8e24:	e005883a 	mov	r2,fp
    8e28:	003db606 	br	8504 <___vfiprintf_internal_r+0x764>
    8e2c:	00c00c04 	movi	r3,48
    8e30:	d88009c5 	stb	r2,39(sp)
    8e34:	d8c00985 	stb	r3,38(sp)
    8e38:	6b400094 	ori	r13,r13,2
    8e3c:	00800084 	movi	r2,2
    8e40:	003d2706 	br	82e0 <___vfiprintf_internal_r+0x540>
    8e44:	25c00017 	ldw	r23,0(r4)
    8e48:	0039883a 	mov	fp,zero
    8e4c:	d8c00415 	stw	r3,16(sp)
    8e50:	0005883a 	mov	r2,zero
    8e54:	003d2206 	br	82e0 <___vfiprintf_internal_r+0x540>
    8e58:	d9400117 	ldw	r5,4(sp)
    8e5c:	d9000415 	stw	r4,16(sp)
    8e60:	2805d7fa 	srai	r2,r5,31
    8e64:	19400015 	stw	r5,0(r3)
    8e68:	18800115 	stw	r2,4(r3)
    8e6c:	003bf506 	br	7e44 <___vfiprintf_internal_r+0xa4>
    8e70:	2dc00017 	ldw	r23,0(r5)
    8e74:	0039883a 	mov	fp,zero
    8e78:	d9000415 	stw	r4,16(sp)
    8e7c:	003dc306 	br	858c <___vfiprintf_internal_r+0x7ec>
    8e80:	25c00017 	ldw	r23,0(r4)
    8e84:	0039883a 	mov	fp,zero
    8e88:	d8c00415 	stw	r3,16(sp)
    8e8c:	00800044 	movi	r2,1
    8e90:	003d1306 	br	82e0 <___vfiprintf_internal_r+0x540>
    8e94:	d8800984 	addi	r2,sp,38
    8e98:	d8801715 	stw	r2,92(sp)
    8e9c:	00800084 	movi	r2,2
    8ea0:	d8801815 	stw	r2,96(sp)
    8ea4:	dc001904 	addi	r16,sp,100
    8ea8:	01000044 	movi	r4,1
    8eac:	003f4006 	br	8bb0 <___vfiprintf_internal_r+0xe10>
    8eb0:	0463c83a 	sub	r17,zero,r17
    8eb4:	d8c00415 	stw	r3,16(sp)
    8eb8:	003e3806 	br	879c <___vfiprintf_internal_r+0x9fc>
    8ebc:	9809883a 	mov	r4,r19
    8ec0:	d8c00215 	stw	r3,8(sp)
    8ec4:	db400015 	stw	r13,0(sp)
    8ec8:	0007bfc0 	call	7bfc <strlen>
    8ecc:	d8c00217 	ldw	r3,8(sp)
    8ed0:	db400017 	ldw	r13,0(sp)
    8ed4:	1039883a 	mov	fp,r2
    8ed8:	102f883a 	mov	r23,r2
    8edc:	d8c00415 	stw	r3,16(sp)
    8ee0:	003c6606 	br	807c <___vfiprintf_internal_r+0x2dc>
    8ee4:	d8c00947 	ldb	r3,37(sp)
    8ee8:	18004326 	beq	r3,zero,8ff8 <___vfiprintf_internal_r+0x1258>
    8eec:	d8800944 	addi	r2,sp,37
    8ef0:	d8801715 	stw	r2,92(sp)
    8ef4:	00800044 	movi	r2,1
    8ef8:	d8801815 	stw	r2,96(sp)
    8efc:	d9801904 	addi	r6,sp,100
    8f00:	01400044 	movi	r5,1
    8f04:	003c7806 	br	80e8 <___vfiprintf_internal_r+0x348>
    8f08:	d8800117 	ldw	r2,4(sp)
    8f0c:	18800015 	stw	r2,0(r3)
    8f10:	d9000415 	stw	r4,16(sp)
    8f14:	003bcb06 	br	7e44 <___vfiprintf_internal_r+0xa4>
    8f18:	00c00044 	movi	r3,1
    8f1c:	e005883a 	mov	r2,fp
    8f20:	dcc01715 	stw	r19,92(sp)
    8f24:	df001815 	stw	fp,96(sp)
    8f28:	df000c15 	stw	fp,48(sp)
    8f2c:	d8c00b15 	stw	r3,44(sp)
    8f30:	d9801904 	addi	r6,sp,100
    8f34:	003c9c06 	br	81a8 <___vfiprintf_internal_r+0x408>
    8f38:	a0800043 	ldbu	r2,1(r20)
    8f3c:	6b400814 	ori	r13,r13,32
    8f40:	a5000044 	addi	r20,r20,1
    8f44:	10803fcc 	andi	r2,r2,255
    8f48:	1080201c 	xori	r2,r2,128
    8f4c:	10bfe004 	addi	r2,r2,-128
    8f50:	003bd406 	br	7ea4 <___vfiprintf_internal_r+0x104>
    8f54:	408001f0 	cmpltui	r2,r8,7
    8f58:	4039883a 	mov	fp,r8
    8f5c:	10002426 	beq	r2,zero,8ff0 <___vfiprintf_internal_r+0x1250>
    8f60:	04c000b4 	movhi	r19,2
    8f64:	e02f883a 	mov	r23,fp
    8f68:	d8c00415 	stw	r3,16(sp)
    8f6c:	9cee4704 	addi	r19,r19,-18148
    8f70:	003c4206 	br	807c <___vfiprintf_internal_r+0x2dc>
    8f74:	d8c00417 	ldw	r3,16(sp)
    8f78:	0039883a 	mov	fp,zero
    8f7c:	d9000415 	stw	r4,16(sp)
    8f80:	1dc00017 	ldw	r23,0(r3)
    8f84:	003d8106 	br	858c <___vfiprintf_internal_r+0x7ec>
    8f88:	d8800417 	ldw	r2,16(sp)
    8f8c:	0039883a 	mov	fp,zero
    8f90:	d8c00415 	stw	r3,16(sp)
    8f94:	15c00017 	ldw	r23,0(r2)
    8f98:	0005883a 	mov	r2,zero
    8f9c:	003cd006 	br	82e0 <___vfiprintf_internal_r+0x540>
    8fa0:	d8800417 	ldw	r2,16(sp)
    8fa4:	d8c00415 	stw	r3,16(sp)
    8fa8:	15c00017 	ldw	r23,0(r2)
    8fac:	b839d7fa 	srai	fp,r23,31
    8fb0:	e005883a 	mov	r2,fp
    8fb4:	003d5306 	br	8504 <___vfiprintf_internal_r+0x764>
    8fb8:	d8800417 	ldw	r2,16(sp)
    8fbc:	0039883a 	mov	fp,zero
    8fc0:	d8c00415 	stw	r3,16(sp)
    8fc4:	15c00017 	ldw	r23,0(r2)
    8fc8:	00800044 	movi	r2,1
    8fcc:	003cc406 	br	82e0 <___vfiprintf_internal_r+0x540>
    8fd0:	3009883a 	mov	r4,r6
    8fd4:	39eec404 	addi	r7,r7,-17648
    8fd8:	003ead06 	br	8a90 <___vfiprintf_internal_r+0xcf0>
    8fdc:	d9801904 	addi	r6,sp,100
    8fe0:	01400044 	movi	r5,1
    8fe4:	0009883a 	mov	r4,zero
    8fe8:	9021883a 	mov	r16,r18
    8fec:	003c5d06 	br	8164 <___vfiprintf_internal_r+0x3c4>
    8ff0:	07000184 	movi	fp,6
    8ff4:	003fda06 	br	8f60 <___vfiprintf_internal_r+0x11c0>
    8ff8:	703ee51e 	bne	r14,zero,8b90 <___vfiprintf_internal_r+0xdf0>
    8ffc:	0009883a 	mov	r4,zero
    9000:	d9801904 	addi	r6,sp,100
    9004:	01400044 	movi	r5,1
    9008:	9021883a 	mov	r16,r18
    900c:	003c5506 	br	8164 <___vfiprintf_internal_r+0x3c4>
    9010:	d9800945 	stb	r6,37(sp)
    9014:	003c1306 	br	8064 <___vfiprintf_internal_r+0x2c4>
    9018:	d9800a04 	addi	r6,sp,40
    901c:	a80b883a 	mov	r5,r21
    9020:	b009883a 	mov	r4,r22
    9024:	0007c940 	call	7c94 <__sprint_r.part.0>
    9028:	003c7006 	br	81ec <___vfiprintf_internal_r+0x44c>
    902c:	db400017 	ldw	r13,0(sp)
    9030:	003d4106 	br	8538 <___vfiprintf_internal_r+0x798>
    9034:	402f883a 	mov	r23,r8
    9038:	d8c00415 	stw	r3,16(sp)
    903c:	4039883a 	mov	fp,r8
    9040:	003c0e06 	br	807c <___vfiprintf_internal_r+0x2dc>
    9044:	d9800945 	stb	r6,37(sp)
    9048:	003d2606 	br	84e4 <___vfiprintf_internal_r+0x744>
    904c:	d9800945 	stb	r6,37(sp)
    9050:	003d4406 	br	8564 <___vfiprintf_internal_r+0x7c4>
    9054:	d9800945 	stb	r6,37(sp)
    9058:	003d7c06 	br	864c <___vfiprintf_internal_r+0x8ac>
    905c:	303f883a 	mov	ra,r6
    9060:	39eec804 	addi	r7,r7,-17632
    9064:	003f2006 	br	8ce8 <___vfiprintf_internal_r+0xf48>
    9068:	d9800945 	stb	r6,37(sp)
    906c:	003df806 	br	8850 <___vfiprintf_internal_r+0xab0>
    9070:	d9800945 	stb	r6,37(sp)
    9074:	003e0806 	br	8898 <___vfiprintf_internal_r+0xaf8>
    9078:	21400044 	addi	r5,r4,1
    907c:	39eec804 	addi	r7,r7,-17632
    9080:	003d0506 	br	8498 <___vfiprintf_internal_r+0x6f8>
    9084:	00bfffc4 	movi	r2,-1
    9088:	d8800115 	stw	r2,4(sp)
    908c:	003c5a06 	br	81f8 <___vfiprintf_internal_r+0x458>
    9090:	01c000b4 	movhi	r7,2
    9094:	301b883a 	mov	r13,r6
    9098:	281d883a 	mov	r14,r5
    909c:	39eec404 	addi	r7,r7,-17648
    90a0:	003e3e06 	br	899c <___vfiprintf_internal_r+0xbfc>
    90a4:	d8800417 	ldw	r2,16(sp)
    90a8:	12000017 	ldw	r8,0(r2)
    90ac:	10c00104 	addi	r3,r2,4
    90b0:	4000010e 	bge	r8,zero,90b8 <___vfiprintf_internal_r+0x1318>
    90b4:	023fffc4 	movi	r8,-1
    90b8:	a0800043 	ldbu	r2,1(r20)
    90bc:	d8c00415 	stw	r3,16(sp)
    90c0:	2029883a 	mov	r20,r4
    90c4:	10803fcc 	andi	r2,r2,255
    90c8:	1080201c 	xori	r2,r2,128
    90cc:	10bfe004 	addi	r2,r2,-128
    90d0:	003b7406 	br	7ea4 <___vfiprintf_internal_r+0x104>

000090d4 <__vfiprintf_internal>:
    90d4:	00c000b4 	movhi	r3,2
    90d8:	2005883a 	mov	r2,r4
    90dc:	19381817 	ldw	r4,-8096(r3)
    90e0:	300f883a 	mov	r7,r6
    90e4:	280d883a 	mov	r6,r5
    90e8:	100b883a 	mov	r5,r2
    90ec:	0007da01 	jmpi	7da0 <___vfiprintf_internal_r>

000090f0 <__sbprintf>:
    90f0:	2880030b 	ldhu	r2,12(r5)
    90f4:	2b001917 	ldw	r12,100(r5)
    90f8:	2ac0038b 	ldhu	r11,14(r5)
    90fc:	2a800717 	ldw	r10,28(r5)
    9100:	2a400917 	ldw	r9,36(r5)
    9104:	defee204 	addi	sp,sp,-1144
    9108:	da001a04 	addi	r8,sp,104
    910c:	00c10004 	movi	r3,1024
    9110:	dc011a15 	stw	r16,1128(sp)
    9114:	10bfff4c 	andi	r2,r2,65533
    9118:	2821883a 	mov	r16,r5
    911c:	d80b883a 	mov	r5,sp
    9120:	dc811c15 	stw	r18,1136(sp)
    9124:	dc411b15 	stw	r17,1132(sp)
    9128:	dfc11d15 	stw	ra,1140(sp)
    912c:	2025883a 	mov	r18,r4
    9130:	d880030d 	sth	r2,12(sp)
    9134:	db001915 	stw	r12,100(sp)
    9138:	dac0038d 	sth	r11,14(sp)
    913c:	da800715 	stw	r10,28(sp)
    9140:	da400915 	stw	r9,36(sp)
    9144:	da000015 	stw	r8,0(sp)
    9148:	da000415 	stw	r8,16(sp)
    914c:	d8c00215 	stw	r3,8(sp)
    9150:	d8c00515 	stw	r3,20(sp)
    9154:	d8000615 	stw	zero,24(sp)
    9158:	0007da00 	call	7da0 <___vfiprintf_internal_r>
    915c:	1023883a 	mov	r17,r2
    9160:	10000d0e 	bge	r2,zero,9198 <__sbprintf+0xa8>
    9164:	d880030b 	ldhu	r2,12(sp)
    9168:	1080100c 	andi	r2,r2,64
    916c:	10000326 	beq	r2,zero,917c <__sbprintf+0x8c>
    9170:	8080030b 	ldhu	r2,12(r16)
    9174:	10801014 	ori	r2,r2,64
    9178:	8080030d 	sth	r2,12(r16)
    917c:	8805883a 	mov	r2,r17
    9180:	dfc11d17 	ldw	ra,1140(sp)
    9184:	dc811c17 	ldw	r18,1136(sp)
    9188:	dc411b17 	ldw	r17,1132(sp)
    918c:	dc011a17 	ldw	r16,1128(sp)
    9190:	dec11e04 	addi	sp,sp,1144
    9194:	f800283a 	ret
    9198:	d80b883a 	mov	r5,sp
    919c:	9009883a 	mov	r4,r18
    91a0:	00052c40 	call	52c4 <_fflush_r>
    91a4:	103fef26 	beq	r2,zero,9164 <__sbprintf+0x74>
    91a8:	047fffc4 	movi	r17,-1
    91ac:	003fed06 	br	9164 <__sbprintf+0x74>

000091b0 <_write_r>:
    91b0:	2807883a 	mov	r3,r5
    91b4:	defffe04 	addi	sp,sp,-8
    91b8:	dc000015 	stw	r16,0(sp)
    91bc:	300b883a 	mov	r5,r6
    91c0:	008000b4 	movhi	r2,2
    91c4:	380d883a 	mov	r6,r7
    91c8:	2021883a 	mov	r16,r4
    91cc:	1809883a 	mov	r4,r3
    91d0:	dfc00115 	stw	ra,4(sp)
    91d4:	10003415 	stw	zero,208(r2)
    91d8:	000ee0c0 	call	ee0c <write>
    91dc:	10ffffd8 	cmpnei	r3,r2,-1
    91e0:	18000426 	beq	r3,zero,91f4 <_write_r+0x44>
    91e4:	dfc00117 	ldw	ra,4(sp)
    91e8:	dc000017 	ldw	r16,0(sp)
    91ec:	dec00204 	addi	sp,sp,8
    91f0:	f800283a 	ret
    91f4:	00c000b4 	movhi	r3,2
    91f8:	18c03417 	ldw	r3,208(r3)
    91fc:	183ff926 	beq	r3,zero,91e4 <_write_r+0x34>
    9200:	80c00015 	stw	r3,0(r16)
    9204:	dfc00117 	ldw	ra,4(sp)
    9208:	dc000017 	ldw	r16,0(sp)
    920c:	dec00204 	addi	sp,sp,8
    9210:	f800283a 	ret

00009214 <_close_r>:
    9214:	defffe04 	addi	sp,sp,-8
    9218:	dc000015 	stw	r16,0(sp)
    921c:	008000b4 	movhi	r2,2
    9220:	2021883a 	mov	r16,r4
    9224:	2809883a 	mov	r4,r5
    9228:	dfc00115 	stw	ra,4(sp)
    922c:	10003415 	stw	zero,208(r2)
    9230:	000e0380 	call	e038 <close>
    9234:	10ffffd8 	cmpnei	r3,r2,-1
    9238:	18000426 	beq	r3,zero,924c <_close_r+0x38>
    923c:	dfc00117 	ldw	ra,4(sp)
    9240:	dc000017 	ldw	r16,0(sp)
    9244:	dec00204 	addi	sp,sp,8
    9248:	f800283a 	ret
    924c:	00c000b4 	movhi	r3,2
    9250:	18c03417 	ldw	r3,208(r3)
    9254:	183ff926 	beq	r3,zero,923c <_close_r+0x28>
    9258:	80c00015 	stw	r3,0(r16)
    925c:	dfc00117 	ldw	ra,4(sp)
    9260:	dc000017 	ldw	r16,0(sp)
    9264:	dec00204 	addi	sp,sp,8
    9268:	f800283a 	ret

0000926c <__assert_func>:
    926c:	008000b4 	movhi	r2,2
    9270:	12381817 	ldw	r8,-8096(r2)
    9274:	defffc04 	addi	sp,sp,-16
    9278:	3807883a 	mov	r3,r7
    927c:	3005883a 	mov	r2,r6
    9280:	dfc00315 	stw	ra,12(sp)
    9284:	42400317 	ldw	r9,12(r8)
    9288:	200f883a 	mov	r7,r4
    928c:	2811883a 	mov	r8,r5
    9290:	180d883a 	mov	r6,r3
    9294:	10000a26 	beq	r2,zero,92c0 <__assert_func+0x54>
    9298:	00c000b4 	movhi	r3,2
    929c:	18eecc04 	addi	r3,r3,-17616
    92a0:	014000b4 	movhi	r5,2
    92a4:	296ed004 	addi	r5,r5,-17600
    92a8:	4809883a 	mov	r4,r9
    92ac:	d8c00115 	stw	r3,4(sp)
    92b0:	da000015 	stw	r8,0(sp)
    92b4:	d8800215 	stw	r2,8(sp)
    92b8:	00095580 	call	9558 <fiprintf>
    92bc:	000a8e80 	call	a8e8 <abort>
    92c0:	00c000b4 	movhi	r3,2
    92c4:	18eecf04 	addi	r3,r3,-17604
    92c8:	1805883a 	mov	r2,r3
    92cc:	003ff406 	br	92a0 <__assert_func+0x34>

000092d0 <__assert>:
    92d0:	deffff04 	addi	sp,sp,-4
    92d4:	300f883a 	mov	r7,r6
    92d8:	000d883a 	mov	r6,zero
    92dc:	dfc00015 	stw	ra,0(sp)
    92e0:	000926c0 	call	926c <__assert_func>

000092e4 <_calloc_r>:
    92e4:	298b383a 	mul	r5,r5,r6
    92e8:	deffff04 	addi	sp,sp,-4
    92ec:	dfc00015 	stw	ra,0(sp)
    92f0:	0005f640 	call	5f64 <_malloc_r>
    92f4:	1009883a 	mov	r4,r2
    92f8:	10000c26 	beq	r2,zero,932c <_calloc_r+0x48>
    92fc:	11bfff17 	ldw	r6,-4(r2)
    9300:	00bfff04 	movi	r2,-4
    9304:	308c703a 	and	r6,r6,r2
    9308:	31bfff04 	addi	r6,r6,-4
    930c:	30800968 	cmpgeui	r2,r6,37
    9310:	1000141e 	bne	r2,zero,9364 <_calloc_r+0x80>
    9314:	30800530 	cmpltui	r2,r6,20
    9318:	10000826 	beq	r2,zero,933c <_calloc_r+0x58>
    931c:	2005883a 	mov	r2,r4
    9320:	10000015 	stw	zero,0(r2)
    9324:	10000115 	stw	zero,4(r2)
    9328:	10000215 	stw	zero,8(r2)
    932c:	2005883a 	mov	r2,r4
    9330:	dfc00017 	ldw	ra,0(sp)
    9334:	dec00104 	addi	sp,sp,4
    9338:	f800283a 	ret
    933c:	20000015 	stw	zero,0(r4)
    9340:	20000115 	stw	zero,4(r4)
    9344:	30800728 	cmpgeui	r2,r6,28
    9348:	10000d26 	beq	r2,zero,9380 <_calloc_r+0x9c>
    934c:	20000215 	stw	zero,8(r4)
    9350:	20000315 	stw	zero,12(r4)
    9354:	31800920 	cmpeqi	r6,r6,36
    9358:	30000b1e 	bne	r6,zero,9388 <_calloc_r+0xa4>
    935c:	20800404 	addi	r2,r4,16
    9360:	003fef06 	br	9320 <_calloc_r+0x3c>
    9364:	000b883a 	mov	r5,zero
    9368:	00068140 	call	6814 <memset>
    936c:	1009883a 	mov	r4,r2
    9370:	2005883a 	mov	r2,r4
    9374:	dfc00017 	ldw	ra,0(sp)
    9378:	dec00104 	addi	sp,sp,4
    937c:	f800283a 	ret
    9380:	20800204 	addi	r2,r4,8
    9384:	003fe606 	br	9320 <_calloc_r+0x3c>
    9388:	20000415 	stw	zero,16(r4)
    938c:	20800604 	addi	r2,r4,24
    9390:	20000515 	stw	zero,20(r4)
    9394:	003fe206 	br	9320 <_calloc_r+0x3c>

00009398 <_fclose_r.part.0>:
    9398:	defffc04 	addi	sp,sp,-16
    939c:	dc800215 	stw	r18,8(sp)
    93a0:	dc400115 	stw	r17,4(sp)
    93a4:	dc000015 	stw	r16,0(sp)
    93a8:	dfc00315 	stw	ra,12(sp)
    93ac:	2821883a 	mov	r16,r5
    93b0:	2023883a 	mov	r17,r4
    93b4:	000509c0 	call	509c <__sflush_r>
    93b8:	80c00b17 	ldw	r3,44(r16)
    93bc:	1025883a 	mov	r18,r2
    93c0:	18000426 	beq	r3,zero,93d4 <_fclose_r.part.0+0x3c>
    93c4:	81400717 	ldw	r5,28(r16)
    93c8:	8809883a 	mov	r4,r17
    93cc:	183ee83a 	callr	r3
    93d0:	10001916 	blt	r2,zero,9438 <_fclose_r.part.0+0xa0>
    93d4:	8080030b 	ldhu	r2,12(r16)
    93d8:	1080200c 	andi	r2,r2,128
    93dc:	10001a1e 	bne	r2,zero,9448 <_fclose_r.part.0+0xb0>
    93e0:	81400c17 	ldw	r5,48(r16)
    93e4:	28000526 	beq	r5,zero,93fc <_fclose_r.part.0+0x64>
    93e8:	80801004 	addi	r2,r16,64
    93ec:	28800226 	beq	r5,r2,93f8 <_fclose_r.part.0+0x60>
    93f0:	8809883a 	mov	r4,r17
    93f4:	00058600 	call	5860 <_free_r>
    93f8:	80000c15 	stw	zero,48(r16)
    93fc:	81401117 	ldw	r5,68(r16)
    9400:	28000326 	beq	r5,zero,9410 <_fclose_r.part.0+0x78>
    9404:	8809883a 	mov	r4,r17
    9408:	00058600 	call	5860 <_free_r>
    940c:	80001115 	stw	zero,68(r16)
    9410:	000570c0 	call	570c <__sfp_lock_acquire>
    9414:	8000030d 	sth	zero,12(r16)
    9418:	00057100 	call	5710 <__sfp_lock_release>
    941c:	9005883a 	mov	r2,r18
    9420:	dfc00317 	ldw	ra,12(sp)
    9424:	dc800217 	ldw	r18,8(sp)
    9428:	dc400117 	ldw	r17,4(sp)
    942c:	dc000017 	ldw	r16,0(sp)
    9430:	dec00404 	addi	sp,sp,16
    9434:	f800283a 	ret
    9438:	8080030b 	ldhu	r2,12(r16)
    943c:	04bfffc4 	movi	r18,-1
    9440:	1080200c 	andi	r2,r2,128
    9444:	103fe626 	beq	r2,zero,93e0 <_fclose_r.part.0+0x48>
    9448:	81400417 	ldw	r5,16(r16)
    944c:	8809883a 	mov	r4,r17
    9450:	00058600 	call	5860 <_free_r>
    9454:	003fe206 	br	93e0 <_fclose_r.part.0+0x48>

00009458 <_fclose_r>:
    9458:	28001926 	beq	r5,zero,94c0 <_fclose_r+0x68>
    945c:	defffd04 	addi	sp,sp,-12
    9460:	dc000115 	stw	r16,4(sp)
    9464:	dfc00215 	stw	ra,8(sp)
    9468:	2021883a 	mov	r16,r4
    946c:	20000226 	beq	r4,zero,9478 <_fclose_r+0x20>
    9470:	20800e17 	ldw	r2,56(r4)
    9474:	10000c26 	beq	r2,zero,94a8 <_fclose_r+0x50>
    9478:	2880030f 	ldh	r2,12(r5)
    947c:	1000051e 	bne	r2,zero,9494 <_fclose_r+0x3c>
    9480:	0005883a 	mov	r2,zero
    9484:	dfc00217 	ldw	ra,8(sp)
    9488:	dc000117 	ldw	r16,4(sp)
    948c:	dec00304 	addi	sp,sp,12
    9490:	f800283a 	ret
    9494:	8009883a 	mov	r4,r16
    9498:	dfc00217 	ldw	ra,8(sp)
    949c:	dc000117 	ldw	r16,4(sp)
    94a0:	dec00304 	addi	sp,sp,12
    94a4:	00093981 	jmpi	9398 <_fclose_r.part.0>
    94a8:	d9400015 	stw	r5,0(sp)
    94ac:	00056fc0 	call	56fc <__sinit>
    94b0:	d9400017 	ldw	r5,0(sp)
    94b4:	2880030f 	ldh	r2,12(r5)
    94b8:	103ff126 	beq	r2,zero,9480 <_fclose_r+0x28>
    94bc:	003ff506 	br	9494 <_fclose_r+0x3c>
    94c0:	0005883a 	mov	r2,zero
    94c4:	f800283a 	ret

000094c8 <fclose>:
    94c8:	20000826 	beq	r4,zero,94ec <fclose+0x24>
    94cc:	008000b4 	movhi	r2,2
    94d0:	200b883a 	mov	r5,r4
    94d4:	11381817 	ldw	r4,-8096(r2)
    94d8:	20000226 	beq	r4,zero,94e4 <fclose+0x1c>
    94dc:	20800e17 	ldw	r2,56(r4)
    94e0:	10000526 	beq	r2,zero,94f8 <fclose+0x30>
    94e4:	2880030f 	ldh	r2,12(r5)
    94e8:	1000021e 	bne	r2,zero,94f4 <fclose+0x2c>
    94ec:	0005883a 	mov	r2,zero
    94f0:	f800283a 	ret
    94f4:	00093981 	jmpi	9398 <_fclose_r.part.0>
    94f8:	defffd04 	addi	sp,sp,-12
    94fc:	d9400115 	stw	r5,4(sp)
    9500:	d9000015 	stw	r4,0(sp)
    9504:	dfc00215 	stw	ra,8(sp)
    9508:	00056fc0 	call	56fc <__sinit>
    950c:	d9400117 	ldw	r5,4(sp)
    9510:	d9000017 	ldw	r4,0(sp)
    9514:	2880030f 	ldh	r2,12(r5)
    9518:	10000326 	beq	r2,zero,9528 <fclose+0x60>
    951c:	dfc00217 	ldw	ra,8(sp)
    9520:	dec00304 	addi	sp,sp,12
    9524:	00093981 	jmpi	9398 <_fclose_r.part.0>
    9528:	0005883a 	mov	r2,zero
    952c:	dfc00217 	ldw	ra,8(sp)
    9530:	dec00304 	addi	sp,sp,12
    9534:	f800283a 	ret

00009538 <_fiprintf_r>:
    9538:	defffe04 	addi	sp,sp,-8
    953c:	dfc00015 	stw	ra,0(sp)
    9540:	d9c00115 	stw	r7,4(sp)
    9544:	d9c00104 	addi	r7,sp,4
    9548:	000a6540 	call	a654 <_vfiprintf_r>
    954c:	dfc00017 	ldw	ra,0(sp)
    9550:	dec00204 	addi	sp,sp,8
    9554:	f800283a 	ret

00009558 <fiprintf>:
    9558:	defffd04 	addi	sp,sp,-12
    955c:	2005883a 	mov	r2,r4
    9560:	dfc00015 	stw	ra,0(sp)
    9564:	d9800115 	stw	r6,4(sp)
    9568:	d9c00215 	stw	r7,8(sp)
    956c:	00c000b4 	movhi	r3,2
    9570:	19381817 	ldw	r4,-8096(r3)
    9574:	280d883a 	mov	r6,r5
    9578:	d9c00104 	addi	r7,sp,4
    957c:	100b883a 	mov	r5,r2
    9580:	000a6540 	call	a654 <_vfiprintf_r>
    9584:	dfc00017 	ldw	ra,0(sp)
    9588:	dec00304 	addi	sp,sp,12
    958c:	f800283a 	ret

00009590 <__fputwc>:
    9590:	defff904 	addi	sp,sp,-28
    9594:	dcc00415 	stw	r19,16(sp)
    9598:	dc800315 	stw	r18,12(sp)
    959c:	dc000115 	stw	r16,4(sp)
    95a0:	dfc00615 	stw	ra,24(sp)
    95a4:	dd000515 	stw	r20,20(sp)
    95a8:	dc400215 	stw	r17,8(sp)
    95ac:	2025883a 	mov	r18,r4
    95b0:	2827883a 	mov	r19,r5
    95b4:	3021883a 	mov	r16,r6
    95b8:	0009d740 	call	9d74 <__locale_mb_cur_max>
    95bc:	10800058 	cmpnei	r2,r2,1
    95c0:	1000071e 	bne	r2,zero,95e0 <__fputwc+0x50>
    95c4:	98bfffc4 	addi	r2,r19,-1
    95c8:	10803fe8 	cmpgeui	r2,r2,255
    95cc:	1000041e 	bne	r2,zero,95e0 <__fputwc+0x50>
    95d0:	980b883a 	mov	r5,r19
    95d4:	dcc000c5 	stb	r19,3(sp)
    95d8:	05000044 	movi	r20,1
    95dc:	00000a06 	br	9608 <__fputwc+0x78>
    95e0:	81c01704 	addi	r7,r16,92
    95e4:	980d883a 	mov	r6,r19
    95e8:	d94000c4 	addi	r5,sp,3
    95ec:	9009883a 	mov	r4,r18
    95f0:	000a7b80 	call	a7b8 <_wcrtomb_r>
    95f4:	1029883a 	mov	r20,r2
    95f8:	10bfffd8 	cmpnei	r2,r2,-1
    95fc:	10003926 	beq	r2,zero,96e4 <__fputwc+0x154>
    9600:	a0001f26 	beq	r20,zero,9680 <__fputwc+0xf0>
    9604:	d94000c3 	ldbu	r5,3(sp)
    9608:	0023883a 	mov	r17,zero
    960c:	00000a06 	br	9638 <__fputwc+0xa8>
    9610:	80800017 	ldw	r2,0(r16)
    9614:	11400005 	stb	r5,0(r2)
    9618:	80c00017 	ldw	r3,0(r16)
    961c:	18c00044 	addi	r3,r3,1
    9620:	80c00015 	stw	r3,0(r16)
    9624:	8c400044 	addi	r17,r17,1
    9628:	d88000c4 	addi	r2,sp,3
    962c:	1447883a 	add	r3,r2,r17
    9630:	8d00132e 	bgeu	r17,r20,9680 <__fputwc+0xf0>
    9634:	19400003 	ldbu	r5,0(r3)
    9638:	80c00217 	ldw	r3,8(r16)
    963c:	18ffffc4 	addi	r3,r3,-1
    9640:	80c00215 	stw	r3,8(r16)
    9644:	183ff20e 	bge	r3,zero,9610 <__fputwc+0x80>
    9648:	80800617 	ldw	r2,24(r16)
    964c:	18801616 	blt	r3,r2,96a8 <__fputwc+0x118>
    9650:	80800017 	ldw	r2,0(r16)
    9654:	11400005 	stb	r5,0(r2)
    9658:	80800017 	ldw	r2,0(r16)
    965c:	10c00003 	ldbu	r3,0(r2)
    9660:	10800044 	addi	r2,r2,1
    9664:	18c002a0 	cmpeqi	r3,r3,10
    9668:	1800171e 	bne	r3,zero,96c8 <__fputwc+0x138>
    966c:	80800015 	stw	r2,0(r16)
    9670:	8c400044 	addi	r17,r17,1
    9674:	d88000c4 	addi	r2,sp,3
    9678:	1447883a 	add	r3,r2,r17
    967c:	8d3fed36 	bltu	r17,r20,9634 <__fputwc+0xa4>
    9680:	9829883a 	mov	r20,r19
    9684:	a005883a 	mov	r2,r20
    9688:	dfc00617 	ldw	ra,24(sp)
    968c:	dd000517 	ldw	r20,20(sp)
    9690:	dcc00417 	ldw	r19,16(sp)
    9694:	dc800317 	ldw	r18,12(sp)
    9698:	dc400217 	ldw	r17,8(sp)
    969c:	dc000117 	ldw	r16,4(sp)
    96a0:	dec00704 	addi	sp,sp,28
    96a4:	f800283a 	ret
    96a8:	29403fcc 	andi	r5,r5,255
    96ac:	800d883a 	mov	r6,r16
    96b0:	9009883a 	mov	r4,r18
    96b4:	000a6580 	call	a658 <__swbuf_r>
    96b8:	10bfffe0 	cmpeqi	r2,r2,-1
    96bc:	103fd926 	beq	r2,zero,9624 <__fputwc+0x94>
    96c0:	053fffc4 	movi	r20,-1
    96c4:	003fef06 	br	9684 <__fputwc+0xf4>
    96c8:	800d883a 	mov	r6,r16
    96cc:	01400284 	movi	r5,10
    96d0:	9009883a 	mov	r4,r18
    96d4:	000a6580 	call	a658 <__swbuf_r>
    96d8:	10bfffe0 	cmpeqi	r2,r2,-1
    96dc:	103fd126 	beq	r2,zero,9624 <__fputwc+0x94>
    96e0:	003ff706 	br	96c0 <__fputwc+0x130>
    96e4:	8080030b 	ldhu	r2,12(r16)
    96e8:	10801014 	ori	r2,r2,64
    96ec:	8080030d 	sth	r2,12(r16)
    96f0:	003fe406 	br	9684 <__fputwc+0xf4>

000096f4 <_fputwc_r>:
    96f4:	3080030b 	ldhu	r2,12(r6)
    96f8:	10c8000c 	andi	r3,r2,8192
    96fc:	1800051e 	bne	r3,zero,9714 <_fputwc_r+0x20>
    9700:	30c01917 	ldw	r3,100(r6)
    9704:	10880014 	ori	r2,r2,8192
    9708:	3080030d 	sth	r2,12(r6)
    970c:	18880014 	ori	r2,r3,8192
    9710:	30801915 	stw	r2,100(r6)
    9714:	00095901 	jmpi	9590 <__fputwc>

00009718 <fputwc>:
    9718:	defffc04 	addi	sp,sp,-16
    971c:	008000b4 	movhi	r2,2
    9720:	dc000215 	stw	r16,8(sp)
    9724:	14381817 	ldw	r16,-8096(r2)
    9728:	dfc00315 	stw	ra,12(sp)
    972c:	280d883a 	mov	r6,r5
    9730:	200b883a 	mov	r5,r4
    9734:	80000226 	beq	r16,zero,9740 <fputwc+0x28>
    9738:	80800e17 	ldw	r2,56(r16)
    973c:	10000d26 	beq	r2,zero,9774 <fputwc+0x5c>
    9740:	3080030b 	ldhu	r2,12(r6)
    9744:	10c8000c 	andi	r3,r2,8192
    9748:	1800051e 	bne	r3,zero,9760 <fputwc+0x48>
    974c:	30c01917 	ldw	r3,100(r6)
    9750:	10880014 	ori	r2,r2,8192
    9754:	3080030d 	sth	r2,12(r6)
    9758:	18880014 	ori	r2,r3,8192
    975c:	30801915 	stw	r2,100(r6)
    9760:	8009883a 	mov	r4,r16
    9764:	dfc00317 	ldw	ra,12(sp)
    9768:	dc000217 	ldw	r16,8(sp)
    976c:	dec00404 	addi	sp,sp,16
    9770:	00095901 	jmpi	9590 <__fputwc>
    9774:	d9000015 	stw	r4,0(sp)
    9778:	8009883a 	mov	r4,r16
    977c:	d9800115 	stw	r6,4(sp)
    9780:	00056fc0 	call	56fc <__sinit>
    9784:	d9800117 	ldw	r6,4(sp)
    9788:	d9400017 	ldw	r5,0(sp)
    978c:	003fec06 	br	9740 <fputwc+0x28>

00009790 <_fstat_r>:
    9790:	2807883a 	mov	r3,r5
    9794:	defffe04 	addi	sp,sp,-8
    9798:	dc000015 	stw	r16,0(sp)
    979c:	008000b4 	movhi	r2,2
    97a0:	300b883a 	mov	r5,r6
    97a4:	2021883a 	mov	r16,r4
    97a8:	1809883a 	mov	r4,r3
    97ac:	dfc00115 	stw	ra,4(sp)
    97b0:	10003415 	stw	zero,208(r2)
    97b4:	000e1a80 	call	e1a8 <fstat>
    97b8:	10ffffd8 	cmpnei	r3,r2,-1
    97bc:	18000426 	beq	r3,zero,97d0 <_fstat_r+0x40>
    97c0:	dfc00117 	ldw	ra,4(sp)
    97c4:	dc000017 	ldw	r16,0(sp)
    97c8:	dec00204 	addi	sp,sp,8
    97cc:	f800283a 	ret
    97d0:	00c000b4 	movhi	r3,2
    97d4:	18c03417 	ldw	r3,208(r3)
    97d8:	183ff926 	beq	r3,zero,97c0 <_fstat_r+0x30>
    97dc:	80c00015 	stw	r3,0(r16)
    97e0:	dfc00117 	ldw	ra,4(sp)
    97e4:	dc000017 	ldw	r16,0(sp)
    97e8:	dec00204 	addi	sp,sp,8
    97ec:	f800283a 	ret

000097f0 <__sfvwrite_r>:
    97f0:	30800217 	ldw	r2,8(r6)
    97f4:	1000a226 	beq	r2,zero,9a80 <__sfvwrite_r+0x290>
    97f8:	29c0030b 	ldhu	r7,12(r5)
    97fc:	defff404 	addi	sp,sp,-48
    9800:	ddc00915 	stw	r23,36(sp)
    9804:	dd400715 	stw	r21,28(sp)
    9808:	dc000215 	stw	r16,8(sp)
    980c:	dfc00b15 	stw	ra,44(sp)
    9810:	df000a15 	stw	fp,40(sp)
    9814:	dd800815 	stw	r22,32(sp)
    9818:	dd000615 	stw	r20,24(sp)
    981c:	dcc00515 	stw	r19,20(sp)
    9820:	dc800415 	stw	r18,16(sp)
    9824:	dc400315 	stw	r17,12(sp)
    9828:	3880020c 	andi	r2,r7,8
    982c:	302f883a 	mov	r23,r6
    9830:	202b883a 	mov	r21,r4
    9834:	2821883a 	mov	r16,r5
    9838:	10002226 	beq	r2,zero,98c4 <__sfvwrite_r+0xd4>
    983c:	28800417 	ldw	r2,16(r5)
    9840:	10002026 	beq	r2,zero,98c4 <__sfvwrite_r+0xd4>
    9844:	3880008c 	andi	r2,r7,2
    9848:	bc400017 	ldw	r17,0(r23)
    984c:	10002526 	beq	r2,zero,98e4 <__sfvwrite_r+0xf4>
    9850:	80800917 	ldw	r2,36(r16)
    9854:	81400717 	ldw	r5,28(r16)
    9858:	05200034 	movhi	r20,32768
    985c:	0027883a 	mov	r19,zero
    9860:	0025883a 	mov	r18,zero
    9864:	a53f0004 	addi	r20,r20,-1024
    9868:	980d883a 	mov	r6,r19
    986c:	a809883a 	mov	r4,r21
    9870:	90001026 	beq	r18,zero,98b4 <__sfvwrite_r+0xc4>
    9874:	900f883a 	mov	r7,r18
    9878:	a480012e 	bgeu	r20,r18,9880 <__sfvwrite_r+0x90>
    987c:	a00f883a 	mov	r7,r20
    9880:	103ee83a 	callr	r2
    9884:	0080790e 	bge	zero,r2,9a6c <__sfvwrite_r+0x27c>
    9888:	b9000217 	ldw	r4,8(r23)
    988c:	98a7883a 	add	r19,r19,r2
    9890:	90a5c83a 	sub	r18,r18,r2
    9894:	2085c83a 	sub	r2,r4,r2
    9898:	b8800215 	stw	r2,8(r23)
    989c:	10006226 	beq	r2,zero,9a28 <__sfvwrite_r+0x238>
    98a0:	80800917 	ldw	r2,36(r16)
    98a4:	81400717 	ldw	r5,28(r16)
    98a8:	980d883a 	mov	r6,r19
    98ac:	a809883a 	mov	r4,r21
    98b0:	903ff01e 	bne	r18,zero,9874 <__sfvwrite_r+0x84>
    98b4:	8cc00017 	ldw	r19,0(r17)
    98b8:	8c800117 	ldw	r18,4(r17)
    98bc:	8c400204 	addi	r17,r17,8
    98c0:	003fe906 	br	9868 <__sfvwrite_r+0x78>
    98c4:	800b883a 	mov	r5,r16
    98c8:	a809883a 	mov	r4,r21
    98cc:	00035f40 	call	35f4 <__swsetup_r>
    98d0:	1000f31e 	bne	r2,zero,9ca0 <__sfvwrite_r+0x4b0>
    98d4:	81c0030b 	ldhu	r7,12(r16)
    98d8:	bc400017 	ldw	r17,0(r23)
    98dc:	3880008c 	andi	r2,r7,2
    98e0:	103fdb1e 	bne	r2,zero,9850 <__sfvwrite_r+0x60>
    98e4:	3880004c 	andi	r2,r7,1
    98e8:	84800217 	ldw	r18,8(r16)
    98ec:	82000017 	ldw	r8,0(r16)
    98f0:	1000651e 	bne	r2,zero,9a88 <__sfvwrite_r+0x298>
    98f4:	00a00034 	movhi	r2,32768
    98f8:	10bfff84 	addi	r2,r2,-2
    98fc:	00e00034 	movhi	r3,32768
    9900:	d8800015 	stw	r2,0(sp)
    9904:	18bfffc4 	addi	r2,r3,-1
    9908:	0039883a 	mov	fp,zero
    990c:	0027883a 	mov	r19,zero
    9910:	d8800115 	stw	r2,4(sp)
    9914:	98004026 	beq	r19,zero,9a18 <__sfvwrite_r+0x228>
    9918:	3880800c 	andi	r2,r7,512
    991c:	10009626 	beq	r2,zero,9b78 <__sfvwrite_r+0x388>
    9920:	902d883a 	mov	r22,r18
    9924:	9c80ba36 	bltu	r19,r18,9c10 <__sfvwrite_r+0x420>
    9928:	3881200c 	andi	r2,r7,1152
    992c:	10002526 	beq	r2,zero,99c4 <__sfvwrite_r+0x1d4>
    9930:	81000517 	ldw	r4,20(r16)
    9934:	81400417 	ldw	r5,16(r16)
    9938:	98800044 	addi	r2,r19,1
    993c:	210000e4 	muli	r4,r4,3
    9940:	4165c83a 	sub	r18,r8,r5
    9944:	1485883a 	add	r2,r2,r18
    9948:	2028d7fa 	srli	r20,r4,31
    994c:	a109883a 	add	r4,r20,r4
    9950:	2029d07a 	srai	r20,r4,1
    9954:	a00d883a 	mov	r6,r20
    9958:	a080022e 	bgeu	r20,r2,9964 <__sfvwrite_r+0x174>
    995c:	1029883a 	mov	r20,r2
    9960:	100d883a 	mov	r6,r2
    9964:	39c1000c 	andi	r7,r7,1024
    9968:	3800bd26 	beq	r7,zero,9c60 <__sfvwrite_r+0x470>
    996c:	a809883a 	mov	r4,r21
    9970:	300b883a 	mov	r5,r6
    9974:	0005f640 	call	5f64 <_malloc_r>
    9978:	1009883a 	mov	r4,r2
    997c:	1000c426 	beq	r2,zero,9c90 <__sfvwrite_r+0x4a0>
    9980:	81400417 	ldw	r5,16(r16)
    9984:	900d883a 	mov	r6,r18
    9988:	00011f40 	call	11f4 <memcpy>
    998c:	1009883a 	mov	r4,r2
    9990:	8080030b 	ldhu	r2,12(r16)
    9994:	00fedfc4 	movi	r3,-1153
    9998:	10c4703a 	and	r2,r2,r3
    999c:	10802014 	ori	r2,r2,128
    99a0:	8080030d 	sth	r2,12(r16)
    99a4:	2491883a 	add	r8,r4,r18
    99a8:	a485c83a 	sub	r2,r20,r18
    99ac:	81000415 	stw	r4,16(r16)
    99b0:	82000015 	stw	r8,0(r16)
    99b4:	85000515 	stw	r20,20(r16)
    99b8:	9825883a 	mov	r18,r19
    99bc:	80800215 	stw	r2,8(r16)
    99c0:	982d883a 	mov	r22,r19
    99c4:	4009883a 	mov	r4,r8
    99c8:	b00d883a 	mov	r6,r22
    99cc:	e00b883a 	mov	r5,fp
    99d0:	0009ea80 	call	9ea8 <memmove>
    99d4:	81000217 	ldw	r4,8(r16)
    99d8:	80800017 	ldw	r2,0(r16)
    99dc:	9829883a 	mov	r20,r19
    99e0:	24a5c83a 	sub	r18,r4,r18
    99e4:	1585883a 	add	r2,r2,r22
    99e8:	84800215 	stw	r18,8(r16)
    99ec:	80800015 	stw	r2,0(r16)
    99f0:	0027883a 	mov	r19,zero
    99f4:	b8800217 	ldw	r2,8(r23)
    99f8:	e539883a 	add	fp,fp,r20
    99fc:	1529c83a 	sub	r20,r2,r20
    9a00:	bd000215 	stw	r20,8(r23)
    9a04:	a0000826 	beq	r20,zero,9a28 <__sfvwrite_r+0x238>
    9a08:	81c0030b 	ldhu	r7,12(r16)
    9a0c:	84800217 	ldw	r18,8(r16)
    9a10:	82000017 	ldw	r8,0(r16)
    9a14:	983fc01e 	bne	r19,zero,9918 <__sfvwrite_r+0x128>
    9a18:	8f000017 	ldw	fp,0(r17)
    9a1c:	8cc00117 	ldw	r19,4(r17)
    9a20:	8c400204 	addi	r17,r17,8
    9a24:	003fbb06 	br	9914 <__sfvwrite_r+0x124>
    9a28:	0005883a 	mov	r2,zero
    9a2c:	dfc00b17 	ldw	ra,44(sp)
    9a30:	df000a17 	ldw	fp,40(sp)
    9a34:	ddc00917 	ldw	r23,36(sp)
    9a38:	dd800817 	ldw	r22,32(sp)
    9a3c:	dd400717 	ldw	r21,28(sp)
    9a40:	dd000617 	ldw	r20,24(sp)
    9a44:	dcc00517 	ldw	r19,20(sp)
    9a48:	dc800417 	ldw	r18,16(sp)
    9a4c:	dc400317 	ldw	r17,12(sp)
    9a50:	dc000217 	ldw	r16,8(sp)
    9a54:	dec00c04 	addi	sp,sp,48
    9a58:	f800283a 	ret
    9a5c:	800b883a 	mov	r5,r16
    9a60:	a809883a 	mov	r4,r21
    9a64:	00052c40 	call	52c4 <_fflush_r>
    9a68:	10002026 	beq	r2,zero,9aec <__sfvwrite_r+0x2fc>
    9a6c:	8080030b 	ldhu	r2,12(r16)
    9a70:	10801014 	ori	r2,r2,64
    9a74:	8080030d 	sth	r2,12(r16)
    9a78:	00bfffc4 	movi	r2,-1
    9a7c:	003feb06 	br	9a2c <__sfvwrite_r+0x23c>
    9a80:	0005883a 	mov	r2,zero
    9a84:	f800283a 	ret
    9a88:	002d883a 	mov	r22,zero
    9a8c:	0027883a 	mov	r19,zero
    9a90:	0005883a 	mov	r2,zero
    9a94:	0039883a 	mov	fp,zero
    9a98:	b0001d26 	beq	r22,zero,9b10 <__sfvwrite_r+0x320>
    9a9c:	10002026 	beq	r2,zero,9b20 <__sfvwrite_r+0x330>
    9aa0:	9829883a 	mov	r20,r19
    9aa4:	b500012e 	bgeu	r22,r20,9aac <__sfvwrite_r+0x2bc>
    9aa8:	b029883a 	mov	r20,r22
    9aac:	80800417 	ldw	r2,16(r16)
    9ab0:	81c00517 	ldw	r7,20(r16)
    9ab4:	1200022e 	bgeu	r2,r8,9ac0 <__sfvwrite_r+0x2d0>
    9ab8:	3ca5883a 	add	r18,r7,r18
    9abc:	95002216 	blt	r18,r20,9b48 <__sfvwrite_r+0x358>
    9ac0:	a1c05616 	blt	r20,r7,9c1c <__sfvwrite_r+0x42c>
    9ac4:	80800917 	ldw	r2,36(r16)
    9ac8:	81400717 	ldw	r5,28(r16)
    9acc:	e00d883a 	mov	r6,fp
    9ad0:	a809883a 	mov	r4,r21
    9ad4:	103ee83a 	callr	r2
    9ad8:	1025883a 	mov	r18,r2
    9adc:	00bfe30e 	bge	zero,r2,9a6c <__sfvwrite_r+0x27c>
    9ae0:	9ca7c83a 	sub	r19,r19,r18
    9ae4:	983fdd26 	beq	r19,zero,9a5c <__sfvwrite_r+0x26c>
    9ae8:	00800044 	movi	r2,1
    9aec:	b9800217 	ldw	r6,8(r23)
    9af0:	e4b9883a 	add	fp,fp,r18
    9af4:	b4adc83a 	sub	r22,r22,r18
    9af8:	34a5c83a 	sub	r18,r6,r18
    9afc:	bc800215 	stw	r18,8(r23)
    9b00:	903fc926 	beq	r18,zero,9a28 <__sfvwrite_r+0x238>
    9b04:	84800217 	ldw	r18,8(r16)
    9b08:	82000017 	ldw	r8,0(r16)
    9b0c:	b03fe31e 	bne	r22,zero,9a9c <__sfvwrite_r+0x2ac>
    9b10:	8d800117 	ldw	r22,4(r17)
    9b14:	8f000017 	ldw	fp,0(r17)
    9b18:	8c400204 	addi	r17,r17,8
    9b1c:	b03ffc26 	beq	r22,zero,9b10 <__sfvwrite_r+0x320>
    9b20:	b00d883a 	mov	r6,r22
    9b24:	01400284 	movi	r5,10
    9b28:	e009883a 	mov	r4,fp
    9b2c:	da000015 	stw	r8,0(sp)
    9b30:	00067440 	call	6744 <memchr>
    9b34:	da000017 	ldw	r8,0(sp)
    9b38:	10004626 	beq	r2,zero,9c54 <__sfvwrite_r+0x464>
    9b3c:	10800044 	addi	r2,r2,1
    9b40:	1727c83a 	sub	r19,r2,fp
    9b44:	003fd606 	br	9aa0 <__sfvwrite_r+0x2b0>
    9b48:	e00b883a 	mov	r5,fp
    9b4c:	4009883a 	mov	r4,r8
    9b50:	900d883a 	mov	r6,r18
    9b54:	0009ea80 	call	9ea8 <memmove>
    9b58:	80800017 	ldw	r2,0(r16)
    9b5c:	800b883a 	mov	r5,r16
    9b60:	a809883a 	mov	r4,r21
    9b64:	1485883a 	add	r2,r2,r18
    9b68:	80800015 	stw	r2,0(r16)
    9b6c:	00052c40 	call	52c4 <_fflush_r>
    9b70:	103fdb26 	beq	r2,zero,9ae0 <__sfvwrite_r+0x2f0>
    9b74:	003fbd06 	br	9a6c <__sfvwrite_r+0x27c>
    9b78:	80800417 	ldw	r2,16(r16)
    9b7c:	12001136 	bltu	r2,r8,9bc4 <__sfvwrite_r+0x3d4>
    9b80:	85000517 	ldw	r20,20(r16)
    9b84:	9d000f36 	bltu	r19,r20,9bc4 <__sfvwrite_r+0x3d4>
    9b88:	d8800017 	ldw	r2,0(sp)
    9b8c:	14c02f2e 	bgeu	r2,r19,9c4c <__sfvwrite_r+0x45c>
    9b90:	d9000117 	ldw	r4,4(sp)
    9b94:	a00b883a 	mov	r5,r20
    9b98:	000b9140 	call	b914 <__divsi3>
    9b9c:	150f383a 	mul	r7,r2,r20
    9ba0:	82000917 	ldw	r8,36(r16)
    9ba4:	81400717 	ldw	r5,28(r16)
    9ba8:	e00d883a 	mov	r6,fp
    9bac:	a809883a 	mov	r4,r21
    9bb0:	403ee83a 	callr	r8
    9bb4:	1029883a 	mov	r20,r2
    9bb8:	00bfac0e 	bge	zero,r2,9a6c <__sfvwrite_r+0x27c>
    9bbc:	9d27c83a 	sub	r19,r19,r20
    9bc0:	003f8c06 	br	99f4 <__sfvwrite_r+0x204>
    9bc4:	9029883a 	mov	r20,r18
    9bc8:	9c80012e 	bgeu	r19,r18,9bd0 <__sfvwrite_r+0x3e0>
    9bcc:	9829883a 	mov	r20,r19
    9bd0:	4009883a 	mov	r4,r8
    9bd4:	a00d883a 	mov	r6,r20
    9bd8:	e00b883a 	mov	r5,fp
    9bdc:	0009ea80 	call	9ea8 <memmove>
    9be0:	80800217 	ldw	r2,8(r16)
    9be4:	81000017 	ldw	r4,0(r16)
    9be8:	1505c83a 	sub	r2,r2,r20
    9bec:	2509883a 	add	r4,r4,r20
    9bf0:	80800215 	stw	r2,8(r16)
    9bf4:	81000015 	stw	r4,0(r16)
    9bf8:	103ff01e 	bne	r2,zero,9bbc <__sfvwrite_r+0x3cc>
    9bfc:	800b883a 	mov	r5,r16
    9c00:	a809883a 	mov	r4,r21
    9c04:	00052c40 	call	52c4 <_fflush_r>
    9c08:	103fec26 	beq	r2,zero,9bbc <__sfvwrite_r+0x3cc>
    9c0c:	003f9706 	br	9a6c <__sfvwrite_r+0x27c>
    9c10:	9825883a 	mov	r18,r19
    9c14:	982d883a 	mov	r22,r19
    9c18:	003f6a06 	br	99c4 <__sfvwrite_r+0x1d4>
    9c1c:	4009883a 	mov	r4,r8
    9c20:	a00d883a 	mov	r6,r20
    9c24:	e00b883a 	mov	r5,fp
    9c28:	0009ea80 	call	9ea8 <memmove>
    9c2c:	81000217 	ldw	r4,8(r16)
    9c30:	80800017 	ldw	r2,0(r16)
    9c34:	a025883a 	mov	r18,r20
    9c38:	2509c83a 	sub	r4,r4,r20
    9c3c:	1505883a 	add	r2,r2,r20
    9c40:	81000215 	stw	r4,8(r16)
    9c44:	80800015 	stw	r2,0(r16)
    9c48:	003fa506 	br	9ae0 <__sfvwrite_r+0x2f0>
    9c4c:	9809883a 	mov	r4,r19
    9c50:	003fd006 	br	9b94 <__sfvwrite_r+0x3a4>
    9c54:	b5000044 	addi	r20,r22,1
    9c58:	a027883a 	mov	r19,r20
    9c5c:	003f9106 	br	9aa4 <__sfvwrite_r+0x2b4>
    9c60:	a809883a 	mov	r4,r21
    9c64:	000a0380 	call	a038 <_realloc_r>
    9c68:	1009883a 	mov	r4,r2
    9c6c:	103f4d1e 	bne	r2,zero,99a4 <__sfvwrite_r+0x1b4>
    9c70:	81400417 	ldw	r5,16(r16)
    9c74:	a809883a 	mov	r4,r21
    9c78:	00058600 	call	5860 <_free_r>
    9c7c:	8080030b 	ldhu	r2,12(r16)
    9c80:	00c00304 	movi	r3,12
    9c84:	a8c00015 	stw	r3,0(r21)
    9c88:	10bfdfcc 	andi	r2,r2,65407
    9c8c:	003f7806 	br	9a70 <__sfvwrite_r+0x280>
    9c90:	00c00304 	movi	r3,12
    9c94:	8080030b 	ldhu	r2,12(r16)
    9c98:	a8c00015 	stw	r3,0(r21)
    9c9c:	003f7406 	br	9a70 <__sfvwrite_r+0x280>
    9ca0:	00bfffc4 	movi	r2,-1
    9ca4:	003f6106 	br	9a2c <__sfvwrite_r+0x23c>

00009ca8 <_isatty_r>:
    9ca8:	defffe04 	addi	sp,sp,-8
    9cac:	dc000015 	stw	r16,0(sp)
    9cb0:	008000b4 	movhi	r2,2
    9cb4:	2021883a 	mov	r16,r4
    9cb8:	2809883a 	mov	r4,r5
    9cbc:	dfc00115 	stw	ra,4(sp)
    9cc0:	10003415 	stw	zero,208(r2)
    9cc4:	000e5140 	call	e514 <isatty>
    9cc8:	10ffffd8 	cmpnei	r3,r2,-1
    9ccc:	18000426 	beq	r3,zero,9ce0 <_isatty_r+0x38>
    9cd0:	dfc00117 	ldw	ra,4(sp)
    9cd4:	dc000017 	ldw	r16,0(sp)
    9cd8:	dec00204 	addi	sp,sp,8
    9cdc:	f800283a 	ret
    9ce0:	00c000b4 	movhi	r3,2
    9ce4:	18c03417 	ldw	r3,208(r3)
    9ce8:	183ff926 	beq	r3,zero,9cd0 <_isatty_r+0x28>
    9cec:	80c00015 	stw	r3,0(r16)
    9cf0:	dfc00117 	ldw	ra,4(sp)
    9cf4:	dc000017 	ldw	r16,0(sp)
    9cf8:	dec00204 	addi	sp,sp,8
    9cfc:	f800283a 	ret

00009d00 <_setlocale_r>:
    9d00:	30001626 	beq	r6,zero,9d5c <_setlocale_r+0x5c>
    9d04:	014000b4 	movhi	r5,2
    9d08:	defffe04 	addi	sp,sp,-8
    9d0c:	296edd04 	addi	r5,r5,-17548
    9d10:	3009883a 	mov	r4,r6
    9d14:	dc000015 	stw	r16,0(sp)
    9d18:	dfc00115 	stw	ra,4(sp)
    9d1c:	3021883a 	mov	r16,r6
    9d20:	000a59c0 	call	a59c <strcmp>
    9d24:	1000061e 	bne	r2,zero,9d40 <_setlocale_r+0x40>
    9d28:	008000b4 	movhi	r2,2
    9d2c:	10aedc04 	addi	r2,r2,-17552
    9d30:	dfc00117 	ldw	ra,4(sp)
    9d34:	dc000017 	ldw	r16,0(sp)
    9d38:	dec00204 	addi	sp,sp,8
    9d3c:	f800283a 	ret
    9d40:	80800003 	ldbu	r2,0(r16)
    9d44:	10bfef44 	addi	r2,r2,-67
    9d48:	10000726 	beq	r2,zero,9d68 <_setlocale_r+0x68>
    9d4c:	80800003 	ldbu	r2,0(r16)
    9d50:	103ff526 	beq	r2,zero,9d28 <_setlocale_r+0x28>
    9d54:	0005883a 	mov	r2,zero
    9d58:	003ff506 	br	9d30 <_setlocale_r+0x30>
    9d5c:	008000b4 	movhi	r2,2
    9d60:	10aedc04 	addi	r2,r2,-17552
    9d64:	f800283a 	ret
    9d68:	80800043 	ldbu	r2,1(r16)
    9d6c:	103fee26 	beq	r2,zero,9d28 <_setlocale_r+0x28>
    9d70:	003ff606 	br	9d4c <_setlocale_r+0x4c>

00009d74 <__locale_mb_cur_max>:
    9d74:	008000b4 	movhi	r2,2
    9d78:	10b2bc07 	ldb	r2,-13584(r2)
    9d7c:	f800283a 	ret

00009d80 <setlocale>:
    9d80:	28001626 	beq	r5,zero,9ddc <setlocale+0x5c>
    9d84:	defffe04 	addi	sp,sp,-8
    9d88:	dc000015 	stw	r16,0(sp)
    9d8c:	2821883a 	mov	r16,r5
    9d90:	014000b4 	movhi	r5,2
    9d94:	296edd04 	addi	r5,r5,-17548
    9d98:	8009883a 	mov	r4,r16
    9d9c:	dfc00115 	stw	ra,4(sp)
    9da0:	000a59c0 	call	a59c <strcmp>
    9da4:	1000061e 	bne	r2,zero,9dc0 <setlocale+0x40>
    9da8:	008000b4 	movhi	r2,2
    9dac:	10aedc04 	addi	r2,r2,-17552
    9db0:	dfc00117 	ldw	ra,4(sp)
    9db4:	dc000017 	ldw	r16,0(sp)
    9db8:	dec00204 	addi	sp,sp,8
    9dbc:	f800283a 	ret
    9dc0:	80800003 	ldbu	r2,0(r16)
    9dc4:	10bfef44 	addi	r2,r2,-67
    9dc8:	10000726 	beq	r2,zero,9de8 <setlocale+0x68>
    9dcc:	80800003 	ldbu	r2,0(r16)
    9dd0:	103ff526 	beq	r2,zero,9da8 <setlocale+0x28>
    9dd4:	0005883a 	mov	r2,zero
    9dd8:	003ff506 	br	9db0 <setlocale+0x30>
    9ddc:	008000b4 	movhi	r2,2
    9de0:	10aedc04 	addi	r2,r2,-17552
    9de4:	f800283a 	ret
    9de8:	80800043 	ldbu	r2,1(r16)
    9dec:	103fee26 	beq	r2,zero,9da8 <setlocale+0x28>
    9df0:	003ff606 	br	9dcc <setlocale+0x4c>

00009df4 <_lseek_r>:
    9df4:	2807883a 	mov	r3,r5
    9df8:	defffe04 	addi	sp,sp,-8
    9dfc:	dc000015 	stw	r16,0(sp)
    9e00:	300b883a 	mov	r5,r6
    9e04:	008000b4 	movhi	r2,2
    9e08:	380d883a 	mov	r6,r7
    9e0c:	2021883a 	mov	r16,r4
    9e10:	1809883a 	mov	r4,r3
    9e14:	dfc00115 	stw	ra,4(sp)
    9e18:	10003415 	stw	zero,208(r2)
    9e1c:	000e8480 	call	e848 <lseek>
    9e20:	10ffffd8 	cmpnei	r3,r2,-1
    9e24:	18000426 	beq	r3,zero,9e38 <_lseek_r+0x44>
    9e28:	dfc00117 	ldw	ra,4(sp)
    9e2c:	dc000017 	ldw	r16,0(sp)
    9e30:	dec00204 	addi	sp,sp,8
    9e34:	f800283a 	ret
    9e38:	00c000b4 	movhi	r3,2
    9e3c:	18c03417 	ldw	r3,208(r3)
    9e40:	183ff926 	beq	r3,zero,9e28 <_lseek_r+0x34>
    9e44:	80c00015 	stw	r3,0(r16)
    9e48:	dfc00117 	ldw	ra,4(sp)
    9e4c:	dc000017 	ldw	r16,0(sp)
    9e50:	dec00204 	addi	sp,sp,8
    9e54:	f800283a 	ret

00009e58 <_mbtowc_r>:
    9e58:	008000b4 	movhi	r2,2
    9e5c:	10b2ab17 	ldw	r2,-13652(r2)
    9e60:	1000683a 	jmp	r2

00009e64 <__ascii_mbtowc>:
    9e64:	deffff04 	addi	sp,sp,-4
    9e68:	28000826 	beq	r5,zero,9e8c <__ascii_mbtowc+0x28>
    9e6c:	30000926 	beq	r6,zero,9e94 <__ascii_mbtowc+0x30>
    9e70:	38000b26 	beq	r7,zero,9ea0 <__ascii_mbtowc+0x3c>
    9e74:	30800003 	ldbu	r2,0(r6)
    9e78:	28800015 	stw	r2,0(r5)
    9e7c:	30800003 	ldbu	r2,0(r6)
    9e80:	1004c03a 	cmpne	r2,r2,zero
    9e84:	dec00104 	addi	sp,sp,4
    9e88:	f800283a 	ret
    9e8c:	d80b883a 	mov	r5,sp
    9e90:	303ff71e 	bne	r6,zero,9e70 <__ascii_mbtowc+0xc>
    9e94:	0005883a 	mov	r2,zero
    9e98:	dec00104 	addi	sp,sp,4
    9e9c:	f800283a 	ret
    9ea0:	00bfff84 	movi	r2,-2
    9ea4:	003ff706 	br	9e84 <__ascii_mbtowc+0x20>

00009ea8 <memmove>:
    9ea8:	2005883a 	mov	r2,r4
    9eac:	29000a2e 	bgeu	r5,r4,9ed8 <memmove+0x30>
    9eb0:	2989883a 	add	r4,r5,r6
    9eb4:	1100082e 	bgeu	r2,r4,9ed8 <memmove+0x30>
    9eb8:	1187883a 	add	r3,r2,r6
    9ebc:	30003e26 	beq	r6,zero,9fb8 <memmove+0x110>
    9ec0:	217fffc3 	ldbu	r5,-1(r4)
    9ec4:	18ffffc4 	addi	r3,r3,-1
    9ec8:	213fffc4 	addi	r4,r4,-1
    9ecc:	19400005 	stb	r5,0(r3)
    9ed0:	10fffb1e 	bne	r2,r3,9ec0 <memmove+0x18>
    9ed4:	f800283a 	ret
    9ed8:	30c00430 	cmpltui	r3,r6,16
    9edc:	18000b26 	beq	r3,zero,9f0c <memmove+0x64>
    9ee0:	1007883a 	mov	r3,r2
    9ee4:	31ffffc4 	addi	r7,r6,-1
    9ee8:	30003726 	beq	r6,zero,9fc8 <memmove+0x120>
    9eec:	39c00044 	addi	r7,r7,1
    9ef0:	29cf883a 	add	r7,r5,r7
    9ef4:	29800003 	ldbu	r6,0(r5)
    9ef8:	29400044 	addi	r5,r5,1
    9efc:	18c00044 	addi	r3,r3,1
    9f00:	19bfffc5 	stb	r6,-1(r3)
    9f04:	29fffb1e 	bne	r5,r7,9ef4 <memmove+0x4c>
    9f08:	f800283a 	ret
    9f0c:	2886b03a 	or	r3,r5,r2
    9f10:	18c000cc 	andi	r3,r3,3
    9f14:	1800291e 	bne	r3,zero,9fbc <memmove+0x114>
    9f18:	327ffc04 	addi	r9,r6,-16
    9f1c:	4812d13a 	srli	r9,r9,4
    9f20:	280f883a 	mov	r7,r5
    9f24:	1007883a 	mov	r3,r2
    9f28:	4a400044 	addi	r9,r9,1
    9f2c:	4812913a 	slli	r9,r9,4
    9f30:	1251883a 	add	r8,r2,r9
    9f34:	39000017 	ldw	r4,0(r7)
    9f38:	39c00404 	addi	r7,r7,16
    9f3c:	18c00404 	addi	r3,r3,16
    9f40:	193ffc15 	stw	r4,-16(r3)
    9f44:	393ffd17 	ldw	r4,-12(r7)
    9f48:	193ffd15 	stw	r4,-12(r3)
    9f4c:	393ffe17 	ldw	r4,-8(r7)
    9f50:	193ffe15 	stw	r4,-8(r3)
    9f54:	393fff17 	ldw	r4,-4(r7)
    9f58:	193fff15 	stw	r4,-4(r3)
    9f5c:	40fff51e 	bne	r8,r3,9f34 <memmove+0x8c>
    9f60:	3100030c 	andi	r4,r6,12
    9f64:	2a4b883a 	add	r5,r5,r9
    9f68:	320003cc 	andi	r8,r6,15
    9f6c:	20001726 	beq	r4,zero,9fcc <memmove+0x124>
    9f70:	2813883a 	mov	r9,r5
    9f74:	180f883a 	mov	r7,r3
    9f78:	4a800017 	ldw	r10,0(r9)
    9f7c:	39c00104 	addi	r7,r7,4
    9f80:	41c9c83a 	sub	r4,r8,r7
    9f84:	1909883a 	add	r4,r3,r4
    9f88:	21000128 	cmpgeui	r4,r4,4
    9f8c:	3abfff15 	stw	r10,-4(r7)
    9f90:	4a400104 	addi	r9,r9,4
    9f94:	203ff81e 	bne	r4,zero,9f78 <memmove+0xd0>
    9f98:	413fff04 	addi	r4,r8,-4
    9f9c:	2008d0ba 	srli	r4,r4,2
    9fa0:	318000cc 	andi	r6,r6,3
    9fa4:	21000044 	addi	r4,r4,1
    9fa8:	200890ba 	slli	r4,r4,2
    9fac:	1907883a 	add	r3,r3,r4
    9fb0:	290b883a 	add	r5,r5,r4
    9fb4:	003fcb06 	br	9ee4 <memmove+0x3c>
    9fb8:	f800283a 	ret
    9fbc:	31ffffc4 	addi	r7,r6,-1
    9fc0:	1007883a 	mov	r3,r2
    9fc4:	003fc906 	br	9eec <memmove+0x44>
    9fc8:	f800283a 	ret
    9fcc:	400d883a 	mov	r6,r8
    9fd0:	003fc406 	br	9ee4 <memmove+0x3c>

00009fd4 <_read_r>:
    9fd4:	2807883a 	mov	r3,r5
    9fd8:	defffe04 	addi	sp,sp,-8
    9fdc:	dc000015 	stw	r16,0(sp)
    9fe0:	300b883a 	mov	r5,r6
    9fe4:	008000b4 	movhi	r2,2
    9fe8:	380d883a 	mov	r6,r7
    9fec:	2021883a 	mov	r16,r4
    9ff0:	1809883a 	mov	r4,r3
    9ff4:	dfc00115 	stw	ra,4(sp)
    9ff8:	10003415 	stw	zero,208(r2)
    9ffc:	000ea180 	call	ea18 <read>
    a000:	10ffffd8 	cmpnei	r3,r2,-1
    a004:	18000426 	beq	r3,zero,a018 <_read_r+0x44>
    a008:	dfc00117 	ldw	ra,4(sp)
    a00c:	dc000017 	ldw	r16,0(sp)
    a010:	dec00204 	addi	sp,sp,8
    a014:	f800283a 	ret
    a018:	00c000b4 	movhi	r3,2
    a01c:	18c03417 	ldw	r3,208(r3)
    a020:	183ff926 	beq	r3,zero,a008 <_read_r+0x34>
    a024:	80c00015 	stw	r3,0(r16)
    a028:	dfc00117 	ldw	ra,4(sp)
    a02c:	dc000017 	ldw	r16,0(sp)
    a030:	dec00204 	addi	sp,sp,8
    a034:	f800283a 	ret

0000a038 <_realloc_r>:
    a038:	defff504 	addi	sp,sp,-44
    a03c:	dc800315 	stw	r18,12(sp)
    a040:	dfc00a15 	stw	ra,40(sp)
    a044:	df000915 	stw	fp,36(sp)
    a048:	ddc00815 	stw	r23,32(sp)
    a04c:	dd800715 	stw	r22,28(sp)
    a050:	dd400615 	stw	r21,24(sp)
    a054:	dd000515 	stw	r20,20(sp)
    a058:	dcc00415 	stw	r19,16(sp)
    a05c:	dc400215 	stw	r17,8(sp)
    a060:	dc000115 	stw	r16,4(sp)
    a064:	3025883a 	mov	r18,r6
    a068:	28008b26 	beq	r5,zero,a298 <_realloc_r+0x260>
    a06c:	2821883a 	mov	r16,r5
    a070:	2027883a 	mov	r19,r4
    a074:	944002c4 	addi	r17,r18,11
    a078:	000f0240 	call	f024 <__malloc_lock>
    a07c:	888005f0 	cmpltui	r2,r17,23
    a080:	1000521e 	bne	r2,zero,a1cc <_realloc_r+0x194>
    a084:	017ffe04 	movi	r5,-8
    a088:	8962703a 	and	r17,r17,r5
    a08c:	8807883a 	mov	r3,r17
    a090:	88005116 	blt	r17,zero,a1d8 <_realloc_r+0x1a0>
    a094:	8c805036 	bltu	r17,r18,a1d8 <_realloc_r+0x1a0>
    a098:	80bfff17 	ldw	r2,-4(r16)
    a09c:	017fff04 	movi	r5,-4
    a0a0:	857ffe04 	addi	r21,r16,-8
    a0a4:	1168703a 	and	r20,r2,r5
    a0a8:	ad2d883a 	add	r22,r21,r20
    a0ac:	a0c0390e 	bge	r20,r3,a194 <_realloc_r+0x15c>
    a0b0:	070000b4 	movhi	fp,2
    a0b4:	e7317004 	addi	fp,fp,-14912
    a0b8:	e2000217 	ldw	r8,8(fp)
    a0bc:	b1000117 	ldw	r4,4(r22)
    a0c0:	45808e26 	beq	r8,r22,a2fc <_realloc_r+0x2c4>
    a0c4:	01bfff84 	movi	r6,-2
    a0c8:	218c703a 	and	r6,r4,r6
    a0cc:	b18d883a 	add	r6,r22,r6
    a0d0:	31800117 	ldw	r6,4(r6)
    a0d4:	3180004c 	andi	r6,r6,1
    a0d8:	30004f1e 	bne	r6,zero,a218 <_realloc_r+0x1e0>
    a0dc:	2148703a 	and	r4,r4,r5
    a0e0:	a10b883a 	add	r5,r20,r4
    a0e4:	28c0bf0e 	bge	r5,r3,a3e4 <_realloc_r+0x3ac>
    a0e8:	1080004c 	andi	r2,r2,1
    a0ec:	10004c1e 	bne	r2,zero,a220 <_realloc_r+0x1e8>
    a0f0:	81fffe17 	ldw	r7,-8(r16)
    a0f4:	00bfff04 	movi	r2,-4
    a0f8:	a9cfc83a 	sub	r7,r21,r7
    a0fc:	39400117 	ldw	r5,4(r7)
    a100:	288a703a 	and	r5,r5,r2
    a104:	b0000426 	beq	r22,zero,a118 <_realloc_r+0xe0>
    a108:	a16f883a 	add	r23,r20,r5
    a10c:	b92f883a 	add	r23,r23,r4
    a110:	4580bf26 	beq	r8,r22,a410 <_realloc_r+0x3d8>
    a114:	b8c0930e 	bge	r23,r3,a364 <_realloc_r+0x32c>
    a118:	38004126 	beq	r7,zero,a220 <_realloc_r+0x1e8>
    a11c:	a16f883a 	add	r23,r20,r5
    a120:	b8c03f16 	blt	r23,r3,a220 <_realloc_r+0x1e8>
    a124:	38800317 	ldw	r2,12(r7)
    a128:	38c00217 	ldw	r3,8(r7)
    a12c:	a1bfff04 	addi	r6,r20,-4
    a130:	31400968 	cmpgeui	r5,r6,37
    a134:	18800315 	stw	r2,12(r3)
    a138:	10c00215 	stw	r3,8(r2)
    a13c:	39000204 	addi	r4,r7,8
    a140:	3ded883a 	add	r22,r7,r23
    a144:	2800941e 	bne	r5,zero,a398 <_realloc_r+0x360>
    a148:	30800530 	cmpltui	r2,r6,20
    a14c:	80c00017 	ldw	r3,0(r16)
    a150:	1000df1e 	bne	r2,zero,a4d0 <_realloc_r+0x498>
    a154:	38c00215 	stw	r3,8(r7)
    a158:	80c00117 	ldw	r3,4(r16)
    a15c:	30800728 	cmpgeui	r2,r6,28
    a160:	38c00315 	stw	r3,12(r7)
    a164:	1000dc1e 	bne	r2,zero,a4d8 <_realloc_r+0x4a0>
    a168:	80c00217 	ldw	r3,8(r16)
    a16c:	38800404 	addi	r2,r7,16
    a170:	84000204 	addi	r16,r16,8
    a174:	10c00015 	stw	r3,0(r2)
    a178:	80c00117 	ldw	r3,4(r16)
    a17c:	b829883a 	mov	r20,r23
    a180:	382b883a 	mov	r21,r7
    a184:	10c00115 	stw	r3,4(r2)
    a188:	80c00217 	ldw	r3,8(r16)
    a18c:	2021883a 	mov	r16,r4
    a190:	10c00215 	stw	r3,8(r2)
    a194:	a9800117 	ldw	r6,4(r21)
    a198:	a445c83a 	sub	r2,r20,r17
    a19c:	10c00430 	cmpltui	r3,r2,16
    a1a0:	3180004c 	andi	r6,r6,1
    a1a4:	18004926 	beq	r3,zero,a2cc <_realloc_r+0x294>
    a1a8:	a18cb03a 	or	r6,r20,r6
    a1ac:	a9800115 	stw	r6,4(r21)
    a1b0:	b0800117 	ldw	r2,4(r22)
    a1b4:	10800054 	ori	r2,r2,1
    a1b8:	b0800115 	stw	r2,4(r22)
    a1bc:	9809883a 	mov	r4,r19
    a1c0:	000f14c0 	call	f14c <__malloc_unlock>
    a1c4:	8025883a 	mov	r18,r16
    a1c8:	00000606 	br	a1e4 <_realloc_r+0x1ac>
    a1cc:	04400404 	movi	r17,16
    a1d0:	00c00404 	movi	r3,16
    a1d4:	8cbfb02e 	bgeu	r17,r18,a098 <_realloc_r+0x60>
    a1d8:	00800304 	movi	r2,12
    a1dc:	98800015 	stw	r2,0(r19)
    a1e0:	0025883a 	mov	r18,zero
    a1e4:	9005883a 	mov	r2,r18
    a1e8:	dfc00a17 	ldw	ra,40(sp)
    a1ec:	df000917 	ldw	fp,36(sp)
    a1f0:	ddc00817 	ldw	r23,32(sp)
    a1f4:	dd800717 	ldw	r22,28(sp)
    a1f8:	dd400617 	ldw	r21,24(sp)
    a1fc:	dd000517 	ldw	r20,20(sp)
    a200:	dcc00417 	ldw	r19,16(sp)
    a204:	dc800317 	ldw	r18,12(sp)
    a208:	dc400217 	ldw	r17,8(sp)
    a20c:	dc000117 	ldw	r16,4(sp)
    a210:	dec00b04 	addi	sp,sp,44
    a214:	f800283a 	ret
    a218:	1080004c 	andi	r2,r2,1
    a21c:	10006c26 	beq	r2,zero,a3d0 <_realloc_r+0x398>
    a220:	900b883a 	mov	r5,r18
    a224:	9809883a 	mov	r4,r19
    a228:	0005f640 	call	5f64 <_malloc_r>
    a22c:	1025883a 	mov	r18,r2
    a230:	10001626 	beq	r2,zero,a28c <_realloc_r+0x254>
    a234:	80bfff17 	ldw	r2,-4(r16)
    a238:	013fff84 	movi	r4,-2
    a23c:	90fffe04 	addi	r3,r18,-8
    a240:	1104703a 	and	r2,r2,r4
    a244:	a885883a 	add	r2,r21,r2
    a248:	10c05b26 	beq	r2,r3,a3b8 <_realloc_r+0x380>
    a24c:	a1bfff04 	addi	r6,r20,-4
    a250:	30800968 	cmpgeui	r2,r6,37
    a254:	10006a1e 	bne	r2,zero,a400 <_realloc_r+0x3c8>
    a258:	30800530 	cmpltui	r2,r6,20
    a25c:	81000017 	ldw	r4,0(r16)
    a260:	10003726 	beq	r2,zero,a340 <_realloc_r+0x308>
    a264:	9005883a 	mov	r2,r18
    a268:	8007883a 	mov	r3,r16
    a26c:	11000015 	stw	r4,0(r2)
    a270:	19000117 	ldw	r4,4(r3)
    a274:	11000115 	stw	r4,4(r2)
    a278:	18c00217 	ldw	r3,8(r3)
    a27c:	10c00215 	stw	r3,8(r2)
    a280:	800b883a 	mov	r5,r16
    a284:	9809883a 	mov	r4,r19
    a288:	00058600 	call	5860 <_free_r>
    a28c:	9809883a 	mov	r4,r19
    a290:	000f14c0 	call	f14c <__malloc_unlock>
    a294:	003fd306 	br	a1e4 <_realloc_r+0x1ac>
    a298:	300b883a 	mov	r5,r6
    a29c:	dfc00a17 	ldw	ra,40(sp)
    a2a0:	df000917 	ldw	fp,36(sp)
    a2a4:	ddc00817 	ldw	r23,32(sp)
    a2a8:	dd800717 	ldw	r22,28(sp)
    a2ac:	dd400617 	ldw	r21,24(sp)
    a2b0:	dd000517 	ldw	r20,20(sp)
    a2b4:	dcc00417 	ldw	r19,16(sp)
    a2b8:	dc800317 	ldw	r18,12(sp)
    a2bc:	dc400217 	ldw	r17,8(sp)
    a2c0:	dc000117 	ldw	r16,4(sp)
    a2c4:	dec00b04 	addi	sp,sp,44
    a2c8:	0005f641 	jmpi	5f64 <_malloc_r>
    a2cc:	344cb03a 	or	r6,r6,r17
    a2d0:	a9800115 	stw	r6,4(r21)
    a2d4:	ac4b883a 	add	r5,r21,r17
    a2d8:	10800054 	ori	r2,r2,1
    a2dc:	28800115 	stw	r2,4(r5)
    a2e0:	b0800117 	ldw	r2,4(r22)
    a2e4:	29400204 	addi	r5,r5,8
    a2e8:	9809883a 	mov	r4,r19
    a2ec:	10800054 	ori	r2,r2,1
    a2f0:	b0800115 	stw	r2,4(r22)
    a2f4:	00058600 	call	5860 <_free_r>
    a2f8:	003fb006 	br	a1bc <_realloc_r+0x184>
    a2fc:	2148703a 	and	r4,r4,r5
    a300:	a10b883a 	add	r5,r20,r4
    a304:	89800404 	addi	r6,r17,16
    a308:	29bf7716 	blt	r5,r6,a0e8 <_realloc_r+0xb0>
    a30c:	ac6b883a 	add	r21,r21,r17
    a310:	2c45c83a 	sub	r2,r5,r17
    a314:	e5400215 	stw	r21,8(fp)
    a318:	10800054 	ori	r2,r2,1
    a31c:	a8800115 	stw	r2,4(r21)
    a320:	80bfff17 	ldw	r2,-4(r16)
    a324:	9809883a 	mov	r4,r19
    a328:	8025883a 	mov	r18,r16
    a32c:	1080004c 	andi	r2,r2,1
    a330:	1462b03a 	or	r17,r2,r17
    a334:	847fff15 	stw	r17,-4(r16)
    a338:	000f14c0 	call	f14c <__malloc_unlock>
    a33c:	003fa906 	br	a1e4 <_realloc_r+0x1ac>
    a340:	91000015 	stw	r4,0(r18)
    a344:	80c00117 	ldw	r3,4(r16)
    a348:	30800728 	cmpgeui	r2,r6,28
    a34c:	90c00115 	stw	r3,4(r18)
    a350:	1000551e 	bne	r2,zero,a4a8 <_realloc_r+0x470>
    a354:	81000217 	ldw	r4,8(r16)
    a358:	80c00204 	addi	r3,r16,8
    a35c:	90800204 	addi	r2,r18,8
    a360:	003fc206 	br	a26c <_realloc_r+0x234>
    a364:	b0800317 	ldw	r2,12(r22)
    a368:	b0c00217 	ldw	r3,8(r22)
    a36c:	a1bfff04 	addi	r6,r20,-4
    a370:	31400968 	cmpgeui	r5,r6,37
    a374:	18800315 	stw	r2,12(r3)
    a378:	10c00215 	stw	r3,8(r2)
    a37c:	38c00217 	ldw	r3,8(r7)
    a380:	38800317 	ldw	r2,12(r7)
    a384:	39000204 	addi	r4,r7,8
    a388:	3ded883a 	add	r22,r7,r23
    a38c:	18800315 	stw	r2,12(r3)
    a390:	10c00215 	stw	r3,8(r2)
    a394:	283f6c26 	beq	r5,zero,a148 <_realloc_r+0x110>
    a398:	800b883a 	mov	r5,r16
    a39c:	d9c00015 	stw	r7,0(sp)
    a3a0:	0009ea80 	call	9ea8 <memmove>
    a3a4:	d9c00017 	ldw	r7,0(sp)
    a3a8:	1021883a 	mov	r16,r2
    a3ac:	b829883a 	mov	r20,r23
    a3b0:	382b883a 	mov	r21,r7
    a3b4:	003f7706 	br	a194 <_realloc_r+0x15c>
    a3b8:	90bfff17 	ldw	r2,-4(r18)
    a3bc:	00ffff04 	movi	r3,-4
    a3c0:	10c4703a 	and	r2,r2,r3
    a3c4:	a0a9883a 	add	r20,r20,r2
    a3c8:	ad2d883a 	add	r22,r21,r20
    a3cc:	003f7106 	br	a194 <_realloc_r+0x15c>
    a3d0:	81fffe17 	ldw	r7,-8(r16)
    a3d4:	a9cfc83a 	sub	r7,r21,r7
    a3d8:	38800117 	ldw	r2,4(r7)
    a3dc:	114a703a 	and	r5,r2,r5
    a3e0:	003f4d06 	br	a118 <_realloc_r+0xe0>
    a3e4:	b0800317 	ldw	r2,12(r22)
    a3e8:	b0c00217 	ldw	r3,8(r22)
    a3ec:	2829883a 	mov	r20,r5
    a3f0:	a96d883a 	add	r22,r21,r5
    a3f4:	18800315 	stw	r2,12(r3)
    a3f8:	10c00215 	stw	r3,8(r2)
    a3fc:	003f6506 	br	a194 <_realloc_r+0x15c>
    a400:	800b883a 	mov	r5,r16
    a404:	9009883a 	mov	r4,r18
    a408:	0009ea80 	call	9ea8 <memmove>
    a40c:	003f9c06 	br	a280 <_realloc_r+0x248>
    a410:	88800404 	addi	r2,r17,16
    a414:	b8bf4016 	blt	r23,r2,a118 <_realloc_r+0xe0>
    a418:	38800317 	ldw	r2,12(r7)
    a41c:	38c00217 	ldw	r3,8(r7)
    a420:	a1bfff04 	addi	r6,r20,-4
    a424:	31000968 	cmpgeui	r4,r6,37
    a428:	18800315 	stw	r2,12(r3)
    a42c:	10c00215 	stw	r3,8(r2)
    a430:	3c800204 	addi	r18,r7,8
    a434:	20003b1e 	bne	r4,zero,a524 <_realloc_r+0x4ec>
    a438:	30800530 	cmpltui	r2,r6,20
    a43c:	80c00017 	ldw	r3,0(r16)
    a440:	1000361e 	bne	r2,zero,a51c <_realloc_r+0x4e4>
    a444:	38c00215 	stw	r3,8(r7)
    a448:	80c00117 	ldw	r3,4(r16)
    a44c:	30800728 	cmpgeui	r2,r6,28
    a450:	38c00315 	stw	r3,12(r7)
    a454:	1000401e 	bne	r2,zero,a558 <_realloc_r+0x520>
    a458:	80c00217 	ldw	r3,8(r16)
    a45c:	38800404 	addi	r2,r7,16
    a460:	84000204 	addi	r16,r16,8
    a464:	10c00015 	stw	r3,0(r2)
    a468:	80c00117 	ldw	r3,4(r16)
    a46c:	10c00115 	stw	r3,4(r2)
    a470:	80c00217 	ldw	r3,8(r16)
    a474:	10c00215 	stw	r3,8(r2)
    a478:	3c47883a 	add	r3,r7,r17
    a47c:	bc45c83a 	sub	r2,r23,r17
    a480:	e0c00215 	stw	r3,8(fp)
    a484:	10800054 	ori	r2,r2,1
    a488:	18800115 	stw	r2,4(r3)
    a48c:	38800117 	ldw	r2,4(r7)
    a490:	9809883a 	mov	r4,r19
    a494:	1080004c 	andi	r2,r2,1
    a498:	1462b03a 	or	r17,r2,r17
    a49c:	3c400115 	stw	r17,4(r7)
    a4a0:	000f14c0 	call	f14c <__malloc_unlock>
    a4a4:	003f4f06 	br	a1e4 <_realloc_r+0x1ac>
    a4a8:	80800217 	ldw	r2,8(r16)
    a4ac:	31800920 	cmpeqi	r6,r6,36
    a4b0:	90800215 	stw	r2,8(r18)
    a4b4:	80800317 	ldw	r2,12(r16)
    a4b8:	90800315 	stw	r2,12(r18)
    a4bc:	81000417 	ldw	r4,16(r16)
    a4c0:	30000f1e 	bne	r6,zero,a500 <_realloc_r+0x4c8>
    a4c4:	80c00404 	addi	r3,r16,16
    a4c8:	90800404 	addi	r2,r18,16
    a4cc:	003f6706 	br	a26c <_realloc_r+0x234>
    a4d0:	2005883a 	mov	r2,r4
    a4d4:	003f2706 	br	a174 <_realloc_r+0x13c>
    a4d8:	80800217 	ldw	r2,8(r16)
    a4dc:	31800920 	cmpeqi	r6,r6,36
    a4e0:	38800415 	stw	r2,16(r7)
    a4e4:	80800317 	ldw	r2,12(r16)
    a4e8:	38800515 	stw	r2,20(r7)
    a4ec:	80c00417 	ldw	r3,16(r16)
    a4f0:	3000121e 	bne	r6,zero,a53c <_realloc_r+0x504>
    a4f4:	38800604 	addi	r2,r7,24
    a4f8:	84000404 	addi	r16,r16,16
    a4fc:	003f1d06 	br	a174 <_realloc_r+0x13c>
    a500:	91000415 	stw	r4,16(r18)
    a504:	81000517 	ldw	r4,20(r16)
    a508:	80c00604 	addi	r3,r16,24
    a50c:	90800604 	addi	r2,r18,24
    a510:	91000515 	stw	r4,20(r18)
    a514:	81000617 	ldw	r4,24(r16)
    a518:	003f5406 	br	a26c <_realloc_r+0x234>
    a51c:	9005883a 	mov	r2,r18
    a520:	003fd006 	br	a464 <_realloc_r+0x42c>
    a524:	800b883a 	mov	r5,r16
    a528:	9009883a 	mov	r4,r18
    a52c:	d9c00015 	stw	r7,0(sp)
    a530:	0009ea80 	call	9ea8 <memmove>
    a534:	d9c00017 	ldw	r7,0(sp)
    a538:	003fcf06 	br	a478 <_realloc_r+0x440>
    a53c:	84000604 	addi	r16,r16,24
    a540:	38c00615 	stw	r3,24(r7)
    a544:	80ffff17 	ldw	r3,-4(r16)
    a548:	38800804 	addi	r2,r7,32
    a54c:	38c00715 	stw	r3,28(r7)
    a550:	80c00017 	ldw	r3,0(r16)
    a554:	003f0706 	br	a174 <_realloc_r+0x13c>
    a558:	80800217 	ldw	r2,8(r16)
    a55c:	31800920 	cmpeqi	r6,r6,36
    a560:	38800415 	stw	r2,16(r7)
    a564:	80800317 	ldw	r2,12(r16)
    a568:	38800515 	stw	r2,20(r7)
    a56c:	80c00417 	ldw	r3,16(r16)
    a570:	3000031e 	bne	r6,zero,a580 <_realloc_r+0x548>
    a574:	38800604 	addi	r2,r7,24
    a578:	84000404 	addi	r16,r16,16
    a57c:	003fb906 	br	a464 <_realloc_r+0x42c>
    a580:	84000604 	addi	r16,r16,24
    a584:	38c00615 	stw	r3,24(r7)
    a588:	80ffff17 	ldw	r3,-4(r16)
    a58c:	38800804 	addi	r2,r7,32
    a590:	38c00715 	stw	r3,28(r7)
    a594:	80c00017 	ldw	r3,0(r16)
    a598:	003fb206 	br	a464 <_realloc_r+0x42c>

0000a59c <strcmp>:
    a59c:	2144b03a 	or	r2,r4,r5
    a5a0:	108000cc 	andi	r2,r2,3
    a5a4:	1000141e 	bne	r2,zero,a5f8 <strcmp+0x5c>
    a5a8:	20800017 	ldw	r2,0(r4)
    a5ac:	28c00017 	ldw	r3,0(r5)
    a5b0:	10c0111e 	bne	r2,r3,a5f8 <strcmp+0x5c>
    a5b4:	01ffbff4 	movhi	r7,65279
    a5b8:	01a02074 	movhi	r6,32897
    a5bc:	39ffbfc4 	addi	r7,r7,-257
    a5c0:	31a02004 	addi	r6,r6,-32640
    a5c4:	00000306 	br	a5d4 <strcmp+0x38>
    a5c8:	20800017 	ldw	r2,0(r4)
    a5cc:	28c00017 	ldw	r3,0(r5)
    a5d0:	10c0091e 	bne	r2,r3,a5f8 <strcmp+0x5c>
    a5d4:	11c7883a 	add	r3,r2,r7
    a5d8:	0084303a 	nor	r2,zero,r2
    a5dc:	1884703a 	and	r2,r3,r2
    a5e0:	1184703a 	and	r2,r2,r6
    a5e4:	21000104 	addi	r4,r4,4
    a5e8:	29400104 	addi	r5,r5,4
    a5ec:	103ff626 	beq	r2,zero,a5c8 <strcmp+0x2c>
    a5f0:	0005883a 	mov	r2,zero
    a5f4:	f800283a 	ret
    a5f8:	20c00003 	ldbu	r3,0(r4)
    a5fc:	18803fcc 	andi	r2,r3,255
    a600:	1080201c 	xori	r2,r2,128
    a604:	10bfe004 	addi	r2,r2,-128
    a608:	1000071e 	bne	r2,zero,a628 <strcmp+0x8c>
    a60c:	00000a06 	br	a638 <strcmp+0x9c>
    a610:	20c00003 	ldbu	r3,0(r4)
    a614:	29400044 	addi	r5,r5,1
    a618:	18803fcc 	andi	r2,r3,255
    a61c:	1080201c 	xori	r2,r2,128
    a620:	10bfe004 	addi	r2,r2,-128
    a624:	10000726 	beq	r2,zero,a644 <strcmp+0xa8>
    a628:	29800007 	ldb	r6,0(r5)
    a62c:	21000044 	addi	r4,r4,1
    a630:	30bff726 	beq	r6,r2,a610 <strcmp+0x74>
    a634:	18803fcc 	andi	r2,r3,255
    a638:	28c00003 	ldbu	r3,0(r5)
    a63c:	10c5c83a 	sub	r2,r2,r3
    a640:	f800283a 	ret
    a644:	28c00003 	ldbu	r3,0(r5)
    a648:	0005883a 	mov	r2,zero
    a64c:	10c5c83a 	sub	r2,r2,r3
    a650:	f800283a 	ret

0000a654 <_vfiprintf_r>:
    a654:	0007da01 	jmpi	7da0 <___vfiprintf_internal_r>

0000a658 <__swbuf_r>:
    a658:	defffb04 	addi	sp,sp,-20
    a65c:	dcc00315 	stw	r19,12(sp)
    a660:	dc400115 	stw	r17,4(sp)
    a664:	dc000015 	stw	r16,0(sp)
    a668:	dfc00415 	stw	ra,16(sp)
    a66c:	dc800215 	stw	r18,8(sp)
    a670:	2027883a 	mov	r19,r4
    a674:	2823883a 	mov	r17,r5
    a678:	3021883a 	mov	r16,r6
    a67c:	20000226 	beq	r4,zero,a688 <__swbuf_r+0x30>
    a680:	20800e17 	ldw	r2,56(r4)
    a684:	10003e26 	beq	r2,zero,a780 <__swbuf_r+0x128>
    a688:	80800617 	ldw	r2,24(r16)
    a68c:	80c0030b 	ldhu	r3,12(r16)
    a690:	80800215 	stw	r2,8(r16)
    a694:	1880020c 	andi	r2,r3,8
    a698:	10001f26 	beq	r2,zero,a718 <__swbuf_r+0xc0>
    a69c:	80800417 	ldw	r2,16(r16)
    a6a0:	10001d26 	beq	r2,zero,a718 <__swbuf_r+0xc0>
    a6a4:	1948000c 	andi	r5,r3,8192
    a6a8:	8c803fcc 	andi	r18,r17,255
    a6ac:	28002326 	beq	r5,zero,a73c <__swbuf_r+0xe4>
    a6b0:	80c00017 	ldw	r3,0(r16)
    a6b4:	81000517 	ldw	r4,20(r16)
    a6b8:	1885c83a 	sub	r2,r3,r2
    a6bc:	1100290e 	bge	r2,r4,a764 <__swbuf_r+0x10c>
    a6c0:	10800044 	addi	r2,r2,1
    a6c4:	81400217 	ldw	r5,8(r16)
    a6c8:	19000044 	addi	r4,r3,1
    a6cc:	81000015 	stw	r4,0(r16)
    a6d0:	297fffc4 	addi	r5,r5,-1
    a6d4:	81400215 	stw	r5,8(r16)
    a6d8:	1c400005 	stb	r17,0(r3)
    a6dc:	80c00517 	ldw	r3,20(r16)
    a6e0:	18802926 	beq	r3,r2,a788 <__swbuf_r+0x130>
    a6e4:	8080030b 	ldhu	r2,12(r16)
    a6e8:	1080004c 	andi	r2,r2,1
    a6ec:	10000226 	beq	r2,zero,a6f8 <__swbuf_r+0xa0>
    a6f0:	90800298 	cmpnei	r2,r18,10
    a6f4:	10002426 	beq	r2,zero,a788 <__swbuf_r+0x130>
    a6f8:	9005883a 	mov	r2,r18
    a6fc:	dfc00417 	ldw	ra,16(sp)
    a700:	dcc00317 	ldw	r19,12(sp)
    a704:	dc800217 	ldw	r18,8(sp)
    a708:	dc400117 	ldw	r17,4(sp)
    a70c:	dc000017 	ldw	r16,0(sp)
    a710:	dec00504 	addi	sp,sp,20
    a714:	f800283a 	ret
    a718:	800b883a 	mov	r5,r16
    a71c:	9809883a 	mov	r4,r19
    a720:	00035f40 	call	35f4 <__swsetup_r>
    a724:	10001c1e 	bne	r2,zero,a798 <__swbuf_r+0x140>
    a728:	80c0030b 	ldhu	r3,12(r16)
    a72c:	80800417 	ldw	r2,16(r16)
    a730:	8c803fcc 	andi	r18,r17,255
    a734:	1948000c 	andi	r5,r3,8192
    a738:	283fdd1e 	bne	r5,zero,a6b0 <__swbuf_r+0x58>
    a73c:	81001917 	ldw	r4,100(r16)
    a740:	18c80014 	ori	r3,r3,8192
    a744:	0177ffc4 	movi	r5,-8193
    a748:	2148703a 	and	r4,r4,r5
    a74c:	80c0030d 	sth	r3,12(r16)
    a750:	80c00017 	ldw	r3,0(r16)
    a754:	81001915 	stw	r4,100(r16)
    a758:	81000517 	ldw	r4,20(r16)
    a75c:	1885c83a 	sub	r2,r3,r2
    a760:	113fd716 	blt	r2,r4,a6c0 <__swbuf_r+0x68>
    a764:	800b883a 	mov	r5,r16
    a768:	9809883a 	mov	r4,r19
    a76c:	00052c40 	call	52c4 <_fflush_r>
    a770:	1000091e 	bne	r2,zero,a798 <__swbuf_r+0x140>
    a774:	80c00017 	ldw	r3,0(r16)
    a778:	00800044 	movi	r2,1
    a77c:	003fd106 	br	a6c4 <__swbuf_r+0x6c>
    a780:	00056fc0 	call	56fc <__sinit>
    a784:	003fc006 	br	a688 <__swbuf_r+0x30>
    a788:	800b883a 	mov	r5,r16
    a78c:	9809883a 	mov	r4,r19
    a790:	00052c40 	call	52c4 <_fflush_r>
    a794:	103fd826 	beq	r2,zero,a6f8 <__swbuf_r+0xa0>
    a798:	04bfffc4 	movi	r18,-1
    a79c:	003fd606 	br	a6f8 <__swbuf_r+0xa0>

0000a7a0 <__swbuf>:
    a7a0:	00c000b4 	movhi	r3,2
    a7a4:	2005883a 	mov	r2,r4
    a7a8:	19381817 	ldw	r4,-8096(r3)
    a7ac:	280d883a 	mov	r6,r5
    a7b0:	100b883a 	mov	r5,r2
    a7b4:	000a6581 	jmpi	a658 <__swbuf_r>

0000a7b8 <_wcrtomb_r>:
    a7b8:	defffa04 	addi	sp,sp,-24
    a7bc:	dc400415 	stw	r17,16(sp)
    a7c0:	dc000315 	stw	r16,12(sp)
    a7c4:	008000b4 	movhi	r2,2
    a7c8:	dfc00515 	stw	ra,20(sp)
    a7cc:	10b2aa17 	ldw	r2,-13656(r2)
    a7d0:	2023883a 	mov	r17,r4
    a7d4:	3821883a 	mov	r16,r7
    a7d8:	28000826 	beq	r5,zero,a7fc <_wcrtomb_r+0x44>
    a7dc:	103ee83a 	callr	r2
    a7e0:	10ffffd8 	cmpnei	r3,r2,-1
    a7e4:	18000a26 	beq	r3,zero,a810 <_wcrtomb_r+0x58>
    a7e8:	dfc00517 	ldw	ra,20(sp)
    a7ec:	dc400417 	ldw	r17,16(sp)
    a7f0:	dc000317 	ldw	r16,12(sp)
    a7f4:	dec00604 	addi	sp,sp,24
    a7f8:	f800283a 	ret
    a7fc:	000d883a 	mov	r6,zero
    a800:	d9400084 	addi	r5,sp,2
    a804:	103ee83a 	callr	r2
    a808:	10ffffd8 	cmpnei	r3,r2,-1
    a80c:	183ff61e 	bne	r3,zero,a7e8 <_wcrtomb_r+0x30>
    a810:	00802284 	movi	r2,138
    a814:	80000015 	stw	zero,0(r16)
    a818:	88800015 	stw	r2,0(r17)
    a81c:	00bfffc4 	movi	r2,-1
    a820:	003ff106 	br	a7e8 <_wcrtomb_r+0x30>

0000a824 <wcrtomb>:
    a824:	defffa04 	addi	sp,sp,-24
    a828:	00c000b4 	movhi	r3,2
    a82c:	dc400415 	stw	r17,16(sp)
    a830:	dc000315 	stw	r16,12(sp)
    a834:	1c781817 	ldw	r17,-8096(r3)
    a838:	dfc00515 	stw	ra,20(sp)
    a83c:	00c000b4 	movhi	r3,2
    a840:	18f2aa17 	ldw	r3,-13656(r3)
    a844:	3021883a 	mov	r16,r6
    a848:	20000c26 	beq	r4,zero,a87c <wcrtomb+0x58>
    a84c:	280d883a 	mov	r6,r5
    a850:	800f883a 	mov	r7,r16
    a854:	200b883a 	mov	r5,r4
    a858:	8809883a 	mov	r4,r17
    a85c:	183ee83a 	callr	r3
    a860:	10ffffd8 	cmpnei	r3,r2,-1
    a864:	18000c26 	beq	r3,zero,a898 <wcrtomb+0x74>
    a868:	dfc00517 	ldw	ra,20(sp)
    a86c:	dc400417 	ldw	r17,16(sp)
    a870:	dc000317 	ldw	r16,12(sp)
    a874:	dec00604 	addi	sp,sp,24
    a878:	f800283a 	ret
    a87c:	300f883a 	mov	r7,r6
    a880:	d9400084 	addi	r5,sp,2
    a884:	000d883a 	mov	r6,zero
    a888:	8809883a 	mov	r4,r17
    a88c:	183ee83a 	callr	r3
    a890:	10ffffd8 	cmpnei	r3,r2,-1
    a894:	183ff41e 	bne	r3,zero,a868 <wcrtomb+0x44>
    a898:	00802284 	movi	r2,138
    a89c:	80000015 	stw	zero,0(r16)
    a8a0:	88800015 	stw	r2,0(r17)
    a8a4:	00bfffc4 	movi	r2,-1
    a8a8:	003fef06 	br	a868 <wcrtomb+0x44>

0000a8ac <_wctomb_r>:
    a8ac:	008000b4 	movhi	r2,2
    a8b0:	10b2aa17 	ldw	r2,-13656(r2)
    a8b4:	1000683a 	jmp	r2

0000a8b8 <__ascii_wctomb>:
    a8b8:	28000926 	beq	r5,zero,a8e0 <__ascii_wctomb+0x28>
    a8bc:	30804030 	cmpltui	r2,r6,256
    a8c0:	10000326 	beq	r2,zero,a8d0 <__ascii_wctomb+0x18>
    a8c4:	29800005 	stb	r6,0(r5)
    a8c8:	00800044 	movi	r2,1
    a8cc:	f800283a 	ret
    a8d0:	00802284 	movi	r2,138
    a8d4:	20800015 	stw	r2,0(r4)
    a8d8:	00bfffc4 	movi	r2,-1
    a8dc:	f800283a 	ret
    a8e0:	0005883a 	mov	r2,zero
    a8e4:	f800283a 	ret

0000a8e8 <abort>:
    a8e8:	deffff04 	addi	sp,sp,-4
    a8ec:	01000184 	movi	r4,6
    a8f0:	dfc00015 	stw	ra,0(sp)
    a8f4:	000ab740 	call	ab74 <raise>
    a8f8:	01000044 	movi	r4,1
    a8fc:	000e1340 	call	e134 <_exit>

0000a900 <_init_signal_r>:
    a900:	2080b717 	ldw	r2,732(r4)
    a904:	10000226 	beq	r2,zero,a910 <_init_signal_r+0x10>
    a908:	0005883a 	mov	r2,zero
    a90c:	f800283a 	ret
    a910:	defffe04 	addi	sp,sp,-8
    a914:	01402004 	movi	r5,128
    a918:	dc000015 	stw	r16,0(sp)
    a91c:	dfc00115 	stw	ra,4(sp)
    a920:	2021883a 	mov	r16,r4
    a924:	0005f640 	call	5f64 <_malloc_r>
    a928:	8080b715 	stw	r2,732(r16)
    a92c:	1009883a 	mov	r4,r2
    a930:	10000826 	beq	r2,zero,a954 <_init_signal_r+0x54>
    a934:	01802004 	movi	r6,128
    a938:	000b883a 	mov	r5,zero
    a93c:	00068140 	call	6814 <memset>
    a940:	0005883a 	mov	r2,zero
    a944:	dfc00117 	ldw	ra,4(sp)
    a948:	dc000017 	ldw	r16,0(sp)
    a94c:	dec00204 	addi	sp,sp,8
    a950:	f800283a 	ret
    a954:	00bfffc4 	movi	r2,-1
    a958:	003ffa06 	br	a944 <_init_signal_r+0x44>

0000a95c <_signal_r>:
    a95c:	defffc04 	addi	sp,sp,-16
    a960:	dc400115 	stw	r17,4(sp)
    a964:	dfc00315 	stw	ra,12(sp)
    a968:	dc800215 	stw	r18,8(sp)
    a96c:	dc000015 	stw	r16,0(sp)
    a970:	28800830 	cmpltui	r2,r5,32
    a974:	2023883a 	mov	r17,r4
    a978:	10000e26 	beq	r2,zero,a9b4 <_signal_r+0x58>
    a97c:	20c0b717 	ldw	r3,732(r4)
    a980:	2821883a 	mov	r16,r5
    a984:	3025883a 	mov	r18,r6
    a988:	18000e26 	beq	r3,zero,a9c4 <_signal_r+0x68>
    a98c:	802090ba 	slli	r16,r16,2
    a990:	1c21883a 	add	r16,r3,r16
    a994:	80800017 	ldw	r2,0(r16)
    a998:	84800015 	stw	r18,0(r16)
    a99c:	dfc00317 	ldw	ra,12(sp)
    a9a0:	dc800217 	ldw	r18,8(sp)
    a9a4:	dc400117 	ldw	r17,4(sp)
    a9a8:	dc000017 	ldw	r16,0(sp)
    a9ac:	dec00404 	addi	sp,sp,16
    a9b0:	f800283a 	ret
    a9b4:	00800584 	movi	r2,22
    a9b8:	20800015 	stw	r2,0(r4)
    a9bc:	00bfffc4 	movi	r2,-1
    a9c0:	003ff606 	br	a99c <_signal_r+0x40>
    a9c4:	01402004 	movi	r5,128
    a9c8:	0005f640 	call	5f64 <_malloc_r>
    a9cc:	8880b715 	stw	r2,732(r17)
    a9d0:	10000626 	beq	r2,zero,a9ec <_signal_r+0x90>
    a9d4:	01802004 	movi	r6,128
    a9d8:	000b883a 	mov	r5,zero
    a9dc:	1009883a 	mov	r4,r2
    a9e0:	00068140 	call	6814 <memset>
    a9e4:	1007883a 	mov	r3,r2
    a9e8:	003fe806 	br	a98c <_signal_r+0x30>
    a9ec:	00bfffc4 	movi	r2,-1
    a9f0:	003fea06 	br	a99c <_signal_r+0x40>

0000a9f4 <_raise_r>:
    a9f4:	28800830 	cmpltui	r2,r5,32
    a9f8:	10002b26 	beq	r2,zero,aaa8 <_raise_r+0xb4>
    a9fc:	2080b717 	ldw	r2,732(r4)
    aa00:	defffd04 	addi	sp,sp,-12
    aa04:	dc000115 	stw	r16,4(sp)
    aa08:	dfc00215 	stw	ra,8(sp)
    aa0c:	2821883a 	mov	r16,r5
    aa10:	10001026 	beq	r2,zero,aa54 <_raise_r+0x60>
    aa14:	280690ba 	slli	r3,r5,2
    aa18:	10c5883a 	add	r2,r2,r3
    aa1c:	10c00017 	ldw	r3,0(r2)
    aa20:	18000c26 	beq	r3,zero,aa54 <_raise_r+0x60>
    aa24:	19400060 	cmpeqi	r5,r3,1
    aa28:	28001a1e 	bne	r5,zero,aa94 <_raise_r+0xa0>
    aa2c:	197fffd8 	cmpnei	r5,r3,-1
    aa30:	28001126 	beq	r5,zero,aa78 <_raise_r+0x84>
    aa34:	10000015 	stw	zero,0(r2)
    aa38:	8009883a 	mov	r4,r16
    aa3c:	183ee83a 	callr	r3
    aa40:	0005883a 	mov	r2,zero
    aa44:	dfc00217 	ldw	ra,8(sp)
    aa48:	dc000117 	ldw	r16,4(sp)
    aa4c:	dec00304 	addi	sp,sp,12
    aa50:	f800283a 	ret
    aa54:	d9000015 	stw	r4,0(sp)
    aa58:	000ae4c0 	call	ae4c <_getpid_r>
    aa5c:	d9000017 	ldw	r4,0(sp)
    aa60:	800d883a 	mov	r6,r16
    aa64:	100b883a 	mov	r5,r2
    aa68:	dfc00217 	ldw	ra,8(sp)
    aa6c:	dc000117 	ldw	r16,4(sp)
    aa70:	dec00304 	addi	sp,sp,12
    aa74:	000adec1 	jmpi	adec <_kill_r>
    aa78:	00800584 	movi	r2,22
    aa7c:	20800015 	stw	r2,0(r4)
    aa80:	00800044 	movi	r2,1
    aa84:	dfc00217 	ldw	ra,8(sp)
    aa88:	dc000117 	ldw	r16,4(sp)
    aa8c:	dec00304 	addi	sp,sp,12
    aa90:	f800283a 	ret
    aa94:	0005883a 	mov	r2,zero
    aa98:	dfc00217 	ldw	ra,8(sp)
    aa9c:	dc000117 	ldw	r16,4(sp)
    aaa0:	dec00304 	addi	sp,sp,12
    aaa4:	f800283a 	ret
    aaa8:	00800584 	movi	r2,22
    aaac:	20800015 	stw	r2,0(r4)
    aab0:	00bfffc4 	movi	r2,-1
    aab4:	f800283a 	ret

0000aab8 <__sigtramp_r>:
    aab8:	28800830 	cmpltui	r2,r5,32
    aabc:	10002b26 	beq	r2,zero,ab6c <__sigtramp_r+0xb4>
    aac0:	20c0b717 	ldw	r3,732(r4)
    aac4:	defffd04 	addi	sp,sp,-12
    aac8:	dc400115 	stw	r17,4(sp)
    aacc:	dc000015 	stw	r16,0(sp)
    aad0:	dfc00215 	stw	ra,8(sp)
    aad4:	2821883a 	mov	r16,r5
    aad8:	2023883a 	mov	r17,r4
    aadc:	18001326 	beq	r3,zero,ab2c <__sigtramp_r+0x74>
    aae0:	800490ba 	slli	r2,r16,2
    aae4:	1887883a 	add	r3,r3,r2
    aae8:	18800017 	ldw	r2,0(r3)
    aaec:	10000d26 	beq	r2,zero,ab24 <__sigtramp_r+0x6c>
    aaf0:	113fffe0 	cmpeqi	r4,r2,-1
    aaf4:	2000191e 	bne	r4,zero,ab5c <__sigtramp_r+0xa4>
    aaf8:	11000060 	cmpeqi	r4,r2,1
    aafc:	2000151e 	bne	r4,zero,ab54 <__sigtramp_r+0x9c>
    ab00:	18000015 	stw	zero,0(r3)
    ab04:	8009883a 	mov	r4,r16
    ab08:	103ee83a 	callr	r2
    ab0c:	0005883a 	mov	r2,zero
    ab10:	dfc00217 	ldw	ra,8(sp)
    ab14:	dc400117 	ldw	r17,4(sp)
    ab18:	dc000017 	ldw	r16,0(sp)
    ab1c:	dec00304 	addi	sp,sp,12
    ab20:	f800283a 	ret
    ab24:	00800044 	movi	r2,1
    ab28:	003ff906 	br	ab10 <__sigtramp_r+0x58>
    ab2c:	01402004 	movi	r5,128
    ab30:	0005f640 	call	5f64 <_malloc_r>
    ab34:	8880b715 	stw	r2,732(r17)
    ab38:	10000a26 	beq	r2,zero,ab64 <__sigtramp_r+0xac>
    ab3c:	01802004 	movi	r6,128
    ab40:	000b883a 	mov	r5,zero
    ab44:	1009883a 	mov	r4,r2
    ab48:	00068140 	call	6814 <memset>
    ab4c:	1007883a 	mov	r3,r2
    ab50:	003fe306 	br	aae0 <__sigtramp_r+0x28>
    ab54:	008000c4 	movi	r2,3
    ab58:	003fed06 	br	ab10 <__sigtramp_r+0x58>
    ab5c:	00800084 	movi	r2,2
    ab60:	003feb06 	br	ab10 <__sigtramp_r+0x58>
    ab64:	00bfffc4 	movi	r2,-1
    ab68:	003fe906 	br	ab10 <__sigtramp_r+0x58>
    ab6c:	00bfffc4 	movi	r2,-1
    ab70:	f800283a 	ret

0000ab74 <raise>:
    ab74:	defffd04 	addi	sp,sp,-12
    ab78:	dc400115 	stw	r17,4(sp)
    ab7c:	00c000b4 	movhi	r3,2
    ab80:	dfc00215 	stw	ra,8(sp)
    ab84:	dc000015 	stw	r16,0(sp)
    ab88:	20800830 	cmpltui	r2,r4,32
    ab8c:	1c781817 	ldw	r17,-8096(r3)
    ab90:	10002326 	beq	r2,zero,ac20 <raise+0xac>
    ab94:	8880b717 	ldw	r2,732(r17)
    ab98:	2021883a 	mov	r16,r4
    ab9c:	10001026 	beq	r2,zero,abe0 <raise+0x6c>
    aba0:	200690ba 	slli	r3,r4,2
    aba4:	10c5883a 	add	r2,r2,r3
    aba8:	10c00017 	ldw	r3,0(r2)
    abac:	18000c26 	beq	r3,zero,abe0 <raise+0x6c>
    abb0:	19400060 	cmpeqi	r5,r3,1
    abb4:	2800181e 	bne	r5,zero,ac18 <raise+0xa4>
    abb8:	197fffd8 	cmpnei	r5,r3,-1
    abbc:	28001226 	beq	r5,zero,ac08 <raise+0x94>
    abc0:	10000015 	stw	zero,0(r2)
    abc4:	183ee83a 	callr	r3
    abc8:	0005883a 	mov	r2,zero
    abcc:	dfc00217 	ldw	ra,8(sp)
    abd0:	dc400117 	ldw	r17,4(sp)
    abd4:	dc000017 	ldw	r16,0(sp)
    abd8:	dec00304 	addi	sp,sp,12
    abdc:	f800283a 	ret
    abe0:	8809883a 	mov	r4,r17
    abe4:	000ae4c0 	call	ae4c <_getpid_r>
    abe8:	800d883a 	mov	r6,r16
    abec:	100b883a 	mov	r5,r2
    abf0:	8809883a 	mov	r4,r17
    abf4:	dfc00217 	ldw	ra,8(sp)
    abf8:	dc400117 	ldw	r17,4(sp)
    abfc:	dc000017 	ldw	r16,0(sp)
    ac00:	dec00304 	addi	sp,sp,12
    ac04:	000adec1 	jmpi	adec <_kill_r>
    ac08:	00800584 	movi	r2,22
    ac0c:	88800015 	stw	r2,0(r17)
    ac10:	00800044 	movi	r2,1
    ac14:	003fed06 	br	abcc <raise+0x58>
    ac18:	0005883a 	mov	r2,zero
    ac1c:	003feb06 	br	abcc <raise+0x58>
    ac20:	00800584 	movi	r2,22
    ac24:	88800015 	stw	r2,0(r17)
    ac28:	00bfffc4 	movi	r2,-1
    ac2c:	003fe706 	br	abcc <raise+0x58>

0000ac30 <signal>:
    ac30:	defffc04 	addi	sp,sp,-16
    ac34:	dc800215 	stw	r18,8(sp)
    ac38:	00c000b4 	movhi	r3,2
    ac3c:	dfc00315 	stw	ra,12(sp)
    ac40:	dc400115 	stw	r17,4(sp)
    ac44:	dc000015 	stw	r16,0(sp)
    ac48:	20800830 	cmpltui	r2,r4,32
    ac4c:	1cb81817 	ldw	r18,-8096(r3)
    ac50:	10000e26 	beq	r2,zero,ac8c <signal+0x5c>
    ac54:	2021883a 	mov	r16,r4
    ac58:	9100b717 	ldw	r4,732(r18)
    ac5c:	2823883a 	mov	r17,r5
    ac60:	20000e26 	beq	r4,zero,ac9c <signal+0x6c>
    ac64:	802090ba 	slli	r16,r16,2
    ac68:	2421883a 	add	r16,r4,r16
    ac6c:	80800017 	ldw	r2,0(r16)
    ac70:	84400015 	stw	r17,0(r16)
    ac74:	dfc00317 	ldw	ra,12(sp)
    ac78:	dc800217 	ldw	r18,8(sp)
    ac7c:	dc400117 	ldw	r17,4(sp)
    ac80:	dc000017 	ldw	r16,0(sp)
    ac84:	dec00404 	addi	sp,sp,16
    ac88:	f800283a 	ret
    ac8c:	00800584 	movi	r2,22
    ac90:	90800015 	stw	r2,0(r18)
    ac94:	00bfffc4 	movi	r2,-1
    ac98:	003ff606 	br	ac74 <signal+0x44>
    ac9c:	9009883a 	mov	r4,r18
    aca0:	01402004 	movi	r5,128
    aca4:	0005f640 	call	5f64 <_malloc_r>
    aca8:	9080b715 	stw	r2,732(r18)
    acac:	1009883a 	mov	r4,r2
    acb0:	10000526 	beq	r2,zero,acc8 <signal+0x98>
    acb4:	01802004 	movi	r6,128
    acb8:	000b883a 	mov	r5,zero
    acbc:	00068140 	call	6814 <memset>
    acc0:	1009883a 	mov	r4,r2
    acc4:	003fe706 	br	ac64 <signal+0x34>
    acc8:	00bfffc4 	movi	r2,-1
    accc:	003fe906 	br	ac74 <signal+0x44>

0000acd0 <_init_signal>:
    acd0:	defffe04 	addi	sp,sp,-8
    acd4:	008000b4 	movhi	r2,2
    acd8:	dc000015 	stw	r16,0(sp)
    acdc:	14381817 	ldw	r16,-8096(r2)
    ace0:	dfc00115 	stw	ra,4(sp)
    ace4:	8080b717 	ldw	r2,732(r16)
    ace8:	10000526 	beq	r2,zero,ad00 <_init_signal+0x30>
    acec:	0005883a 	mov	r2,zero
    acf0:	dfc00117 	ldw	ra,4(sp)
    acf4:	dc000017 	ldw	r16,0(sp)
    acf8:	dec00204 	addi	sp,sp,8
    acfc:	f800283a 	ret
    ad00:	8009883a 	mov	r4,r16
    ad04:	01402004 	movi	r5,128
    ad08:	0005f640 	call	5f64 <_malloc_r>
    ad0c:	8080b715 	stw	r2,732(r16)
    ad10:	1009883a 	mov	r4,r2
    ad14:	10000426 	beq	r2,zero,ad28 <_init_signal+0x58>
    ad18:	01802004 	movi	r6,128
    ad1c:	000b883a 	mov	r5,zero
    ad20:	00068140 	call	6814 <memset>
    ad24:	003ff106 	br	acec <_init_signal+0x1c>
    ad28:	00bfffc4 	movi	r2,-1
    ad2c:	003ff006 	br	acf0 <_init_signal+0x20>

0000ad30 <__sigtramp>:
    ad30:	defffd04 	addi	sp,sp,-12
    ad34:	dc400115 	stw	r17,4(sp)
    ad38:	00c000b4 	movhi	r3,2
    ad3c:	dfc00215 	stw	ra,8(sp)
    ad40:	dc000015 	stw	r16,0(sp)
    ad44:	20800830 	cmpltui	r2,r4,32
    ad48:	1c781817 	ldw	r17,-8096(r3)
    ad4c:	10002526 	beq	r2,zero,ade4 <__sigtramp+0xb4>
    ad50:	88c0b717 	ldw	r3,732(r17)
    ad54:	2021883a 	mov	r16,r4
    ad58:	18001326 	beq	r3,zero,ada8 <__sigtramp+0x78>
    ad5c:	800890ba 	slli	r4,r16,2
    ad60:	1907883a 	add	r3,r3,r4
    ad64:	18800017 	ldw	r2,0(r3)
    ad68:	10000d26 	beq	r2,zero,ada0 <__sigtramp+0x70>
    ad6c:	113fffe0 	cmpeqi	r4,r2,-1
    ad70:	20001a1e 	bne	r4,zero,addc <__sigtramp+0xac>
    ad74:	11000060 	cmpeqi	r4,r2,1
    ad78:	2000161e 	bne	r4,zero,add4 <__sigtramp+0xa4>
    ad7c:	18000015 	stw	zero,0(r3)
    ad80:	8009883a 	mov	r4,r16
    ad84:	103ee83a 	callr	r2
    ad88:	0005883a 	mov	r2,zero
    ad8c:	dfc00217 	ldw	ra,8(sp)
    ad90:	dc400117 	ldw	r17,4(sp)
    ad94:	dc000017 	ldw	r16,0(sp)
    ad98:	dec00304 	addi	sp,sp,12
    ad9c:	f800283a 	ret
    ada0:	00800044 	movi	r2,1
    ada4:	003ff906 	br	ad8c <__sigtramp+0x5c>
    ada8:	01402004 	movi	r5,128
    adac:	8809883a 	mov	r4,r17
    adb0:	0005f640 	call	5f64 <_malloc_r>
    adb4:	8880b715 	stw	r2,732(r17)
    adb8:	10000a26 	beq	r2,zero,ade4 <__sigtramp+0xb4>
    adbc:	01802004 	movi	r6,128
    adc0:	000b883a 	mov	r5,zero
    adc4:	1009883a 	mov	r4,r2
    adc8:	00068140 	call	6814 <memset>
    adcc:	1007883a 	mov	r3,r2
    add0:	003fe206 	br	ad5c <__sigtramp+0x2c>
    add4:	008000c4 	movi	r2,3
    add8:	003fec06 	br	ad8c <__sigtramp+0x5c>
    addc:	00800084 	movi	r2,2
    ade0:	003fea06 	br	ad8c <__sigtramp+0x5c>
    ade4:	00bfffc4 	movi	r2,-1
    ade8:	003fe806 	br	ad8c <__sigtramp+0x5c>

0000adec <_kill_r>:
    adec:	2807883a 	mov	r3,r5
    adf0:	defffe04 	addi	sp,sp,-8
    adf4:	dc000015 	stw	r16,0(sp)
    adf8:	008000b4 	movhi	r2,2
    adfc:	300b883a 	mov	r5,r6
    ae00:	2021883a 	mov	r16,r4
    ae04:	1809883a 	mov	r4,r3
    ae08:	dfc00115 	stw	ra,4(sp)
    ae0c:	10003415 	stw	zero,208(r2)
    ae10:	000e5f40 	call	e5f4 <kill>
    ae14:	10ffffd8 	cmpnei	r3,r2,-1
    ae18:	18000426 	beq	r3,zero,ae2c <_kill_r+0x40>
    ae1c:	dfc00117 	ldw	ra,4(sp)
    ae20:	dc000017 	ldw	r16,0(sp)
    ae24:	dec00204 	addi	sp,sp,8
    ae28:	f800283a 	ret
    ae2c:	00c000b4 	movhi	r3,2
    ae30:	18c03417 	ldw	r3,208(r3)
    ae34:	183ff926 	beq	r3,zero,ae1c <_kill_r+0x30>
    ae38:	80c00015 	stw	r3,0(r16)
    ae3c:	dfc00117 	ldw	ra,4(sp)
    ae40:	dc000017 	ldw	r16,0(sp)
    ae44:	dec00204 	addi	sp,sp,8
    ae48:	f800283a 	ret

0000ae4c <_getpid_r>:
    ae4c:	000e2581 	jmpi	e258 <getpid>

0000ae50 <__udivdi3>:
    ae50:	defff504 	addi	sp,sp,-44
    ae54:	dcc00415 	stw	r19,16(sp)
    ae58:	dc000115 	stw	r16,4(sp)
    ae5c:	dfc00a15 	stw	ra,40(sp)
    ae60:	df000915 	stw	fp,36(sp)
    ae64:	ddc00815 	stw	r23,32(sp)
    ae68:	dd800715 	stw	r22,28(sp)
    ae6c:	dd400615 	stw	r21,24(sp)
    ae70:	dd000515 	stw	r20,20(sp)
    ae74:	dc800315 	stw	r18,12(sp)
    ae78:	dc400215 	stw	r17,8(sp)
    ae7c:	2027883a 	mov	r19,r4
    ae80:	2821883a 	mov	r16,r5
    ae84:	3800411e 	bne	r7,zero,af8c <__udivdi3+0x13c>
    ae88:	3829883a 	mov	r20,r7
    ae8c:	3023883a 	mov	r17,r6
    ae90:	2025883a 	mov	r18,r4
    ae94:	29805d2e 	bgeu	r5,r6,b00c <__udivdi3+0x1bc>
    ae98:	00bfffd4 	movui	r2,65535
    ae9c:	282b883a 	mov	r21,r5
    aea0:	1180a02e 	bgeu	r2,r6,b124 <__udivdi3+0x2d4>
    aea4:	00804034 	movhi	r2,256
    aea8:	30813636 	bltu	r6,r2,b384 <__udivdi3+0x534>
    aeac:	3006d63a 	srli	r3,r6,24
    aeb0:	05000604 	movi	r20,24
    aeb4:	008000b4 	movhi	r2,2
    aeb8:	1885883a 	add	r2,r3,r2
    aebc:	10af8103 	ldbu	r2,-16892(r2)
    aec0:	00c00804 	movi	r3,32
    aec4:	1505883a 	add	r2,r2,r20
    aec8:	1889c83a 	sub	r4,r3,r2
    aecc:	18800526 	beq	r3,r2,aee4 <__udivdi3+0x94>
    aed0:	8120983a 	sll	r16,r16,r4
    aed4:	9884d83a 	srl	r2,r19,r2
    aed8:	3122983a 	sll	r17,r6,r4
    aedc:	9924983a 	sll	r18,r19,r4
    aee0:	142ab03a 	or	r21,r2,r16
    aee4:	882cd43a 	srli	r22,r17,16
    aee8:	a809883a 	mov	r4,r21
    aeec:	8d3fffcc 	andi	r20,r17,65535
    aef0:	b00b883a 	mov	r5,r22
    aef4:	000ba6c0 	call	ba6c <__umodsi3>
    aef8:	a809883a 	mov	r4,r21
    aefc:	b00b883a 	mov	r5,r22
    af00:	1027883a 	mov	r19,r2
    af04:	000ba080 	call	ba08 <__udivsi3>
    af08:	9826943a 	slli	r19,r19,16
    af0c:	9008d43a 	srli	r4,r18,16
    af10:	1021883a 	mov	r16,r2
    af14:	a085383a 	mul	r2,r20,r2
    af18:	9908b03a 	or	r4,r19,r4
    af1c:	2080052e 	bgeu	r4,r2,af34 <__udivdi3+0xe4>
    af20:	2449883a 	add	r4,r4,r17
    af24:	80ffffc4 	addi	r3,r16,-1
    af28:	24400136 	bltu	r4,r17,af30 <__udivdi3+0xe0>
    af2c:	20812636 	bltu	r4,r2,b3c8 <__udivdi3+0x578>
    af30:	1821883a 	mov	r16,r3
    af34:	20a7c83a 	sub	r19,r4,r2
    af38:	9809883a 	mov	r4,r19
    af3c:	b00b883a 	mov	r5,r22
    af40:	000ba6c0 	call	ba6c <__umodsi3>
    af44:	9809883a 	mov	r4,r19
    af48:	b00b883a 	mov	r5,r22
    af4c:	1027883a 	mov	r19,r2
    af50:	9826943a 	slli	r19,r19,16
    af54:	000ba080 	call	ba08 <__udivsi3>
    af58:	a0a9383a 	mul	r20,r20,r2
    af5c:	94bfffcc 	andi	r18,r18,65535
    af60:	9ca4b03a 	or	r18,r19,r18
    af64:	9500052e 	bgeu	r18,r20,af7c <__udivdi3+0x12c>
    af68:	8ca5883a 	add	r18,r17,r18
    af6c:	10ffffc4 	addi	r3,r2,-1
    af70:	94400136 	bltu	r18,r17,af78 <__udivdi3+0x128>
    af74:	95011236 	bltu	r18,r20,b3c0 <__udivdi3+0x570>
    af78:	1805883a 	mov	r2,r3
    af7c:	8020943a 	slli	r16,r16,16
    af80:	0007883a 	mov	r3,zero
    af84:	8084b03a 	or	r2,r16,r2
    af88:	00000306 	br	af98 <__udivdi3+0x148>
    af8c:	29c00e2e 	bgeu	r5,r7,afc8 <__udivdi3+0x178>
    af90:	0007883a 	mov	r3,zero
    af94:	0005883a 	mov	r2,zero
    af98:	dfc00a17 	ldw	ra,40(sp)
    af9c:	df000917 	ldw	fp,36(sp)
    afa0:	ddc00817 	ldw	r23,32(sp)
    afa4:	dd800717 	ldw	r22,28(sp)
    afa8:	dd400617 	ldw	r21,24(sp)
    afac:	dd000517 	ldw	r20,20(sp)
    afb0:	dcc00417 	ldw	r19,16(sp)
    afb4:	dc800317 	ldw	r18,12(sp)
    afb8:	dc400217 	ldw	r17,8(sp)
    afbc:	dc000117 	ldw	r16,4(sp)
    afc0:	dec00b04 	addi	sp,sp,44
    afc4:	f800283a 	ret
    afc8:	00bfffd4 	movui	r2,65535
    afcc:	11c05a2e 	bgeu	r2,r7,b138 <__udivdi3+0x2e8>
    afd0:	00804034 	movhi	r2,256
    afd4:	3880dd36 	bltu	r7,r2,b34c <__udivdi3+0x4fc>
    afd8:	3804d63a 	srli	r2,r7,24
    afdc:	01000604 	movi	r4,24
    afe0:	00c000b4 	movhi	r3,2
    afe4:	10c7883a 	add	r3,r2,r3
    afe8:	18af8103 	ldbu	r2,-16892(r3)
    afec:	00c00804 	movi	r3,32
    aff0:	1105883a 	add	r2,r2,r4
    aff4:	18abc83a 	sub	r21,r3,r2
    aff8:	1880861e 	bne	r3,r2,b214 <__udivdi3+0x3c4>
    affc:	3c00d836 	bltu	r7,r16,b360 <__udivdi3+0x510>
    b000:	9985403a 	cmpgeu	r2,r19,r6
    b004:	0007883a 	mov	r3,zero
    b008:	003fe306 	br	af98 <__udivdi3+0x148>
    b00c:	3000041e 	bne	r6,zero,b020 <__udivdi3+0x1d0>
    b010:	000b883a 	mov	r5,zero
    b014:	01000044 	movi	r4,1
    b018:	000ba080 	call	ba08 <__udivsi3>
    b01c:	1023883a 	mov	r17,r2
    b020:	00bfffd4 	movui	r2,65535
    b024:	14403a2e 	bgeu	r2,r17,b110 <__udivdi3+0x2c0>
    b028:	00804034 	movhi	r2,256
    b02c:	8880d236 	bltu	r17,r2,b378 <__udivdi3+0x528>
    b030:	8806d63a 	srli	r3,r17,24
    b034:	05000604 	movi	r20,24
    b038:	008000b4 	movhi	r2,2
    b03c:	1885883a 	add	r2,r3,r2
    b040:	10af8103 	ldbu	r2,-16892(r2)
    b044:	00c00804 	movi	r3,32
    b048:	1505883a 	add	r2,r2,r20
    b04c:	188dc83a 	sub	r6,r3,r2
    b050:	18803e1e 	bne	r3,r2,b14c <__udivdi3+0x2fc>
    b054:	882ad43a 	srli	r21,r17,16
    b058:	8461c83a 	sub	r16,r16,r17
    b05c:	8cffffcc 	andi	r19,r17,65535
    b060:	00c00044 	movi	r3,1
    b064:	8009883a 	mov	r4,r16
    b068:	a80b883a 	mov	r5,r21
    b06c:	d8c00015 	stw	r3,0(sp)
    b070:	000ba6c0 	call	ba6c <__umodsi3>
    b074:	8009883a 	mov	r4,r16
    b078:	a80b883a 	mov	r5,r21
    b07c:	1021883a 	mov	r16,r2
    b080:	000ba080 	call	ba08 <__udivsi3>
    b084:	8020943a 	slli	r16,r16,16
    b088:	9008d43a 	srli	r4,r18,16
    b08c:	1029883a 	mov	r20,r2
    b090:	14c5383a 	mul	r2,r2,r19
    b094:	8108b03a 	or	r4,r16,r4
    b098:	d8c00017 	ldw	r3,0(sp)
    b09c:	2080052e 	bgeu	r4,r2,b0b4 <__udivdi3+0x264>
    b0a0:	2449883a 	add	r4,r4,r17
    b0a4:	a17fffc4 	addi	r5,r20,-1
    b0a8:	24400136 	bltu	r4,r17,b0b0 <__udivdi3+0x260>
    b0ac:	2080c936 	bltu	r4,r2,b3d4 <__udivdi3+0x584>
    b0b0:	2829883a 	mov	r20,r5
    b0b4:	20a1c83a 	sub	r16,r4,r2
    b0b8:	8009883a 	mov	r4,r16
    b0bc:	a80b883a 	mov	r5,r21
    b0c0:	d8c00015 	stw	r3,0(sp)
    b0c4:	000ba6c0 	call	ba6c <__umodsi3>
    b0c8:	8009883a 	mov	r4,r16
    b0cc:	a80b883a 	mov	r5,r21
    b0d0:	1021883a 	mov	r16,r2
    b0d4:	8020943a 	slli	r16,r16,16
    b0d8:	000ba080 	call	ba08 <__udivsi3>
    b0dc:	14e7383a 	mul	r19,r2,r19
    b0e0:	94bfffcc 	andi	r18,r18,65535
    b0e4:	84a4b03a 	or	r18,r16,r18
    b0e8:	d8c00017 	ldw	r3,0(sp)
    b0ec:	94c0052e 	bgeu	r18,r19,b104 <__udivdi3+0x2b4>
    b0f0:	8ca5883a 	add	r18,r17,r18
    b0f4:	113fffc4 	addi	r4,r2,-1
    b0f8:	94400136 	bltu	r18,r17,b100 <__udivdi3+0x2b0>
    b0fc:	94c0ae36 	bltu	r18,r19,b3b8 <__udivdi3+0x568>
    b100:	2005883a 	mov	r2,r4
    b104:	a00c943a 	slli	r6,r20,16
    b108:	3084b03a 	or	r2,r6,r2
    b10c:	003fa206 	br	af98 <__udivdi3+0x148>
    b110:	88804030 	cmpltui	r2,r17,256
    b114:	10009e1e 	bne	r2,zero,b390 <__udivdi3+0x540>
    b118:	8806d23a 	srli	r3,r17,8
    b11c:	05000204 	movi	r20,8
    b120:	003fc506 	br	b038 <__udivdi3+0x1e8>
    b124:	30804030 	cmpltui	r2,r6,256
    b128:	10008b1e 	bne	r2,zero,b358 <__udivdi3+0x508>
    b12c:	3006d23a 	srli	r3,r6,8
    b130:	05000204 	movi	r20,8
    b134:	003f5f06 	br	aeb4 <__udivdi3+0x64>
    b138:	38804030 	cmpltui	r2,r7,256
    b13c:	10008b1e 	bne	r2,zero,b36c <__udivdi3+0x51c>
    b140:	3804d23a 	srli	r2,r7,8
    b144:	01000204 	movi	r4,8
    b148:	003fa506 	br	afe0 <__udivdi3+0x190>
    b14c:	89a2983a 	sll	r17,r17,r6
    b150:	80acd83a 	srl	r22,r16,r2
    b154:	81a0983a 	sll	r16,r16,r6
    b158:	882ad43a 	srli	r21,r17,16
    b15c:	9884d83a 	srl	r2,r19,r2
    b160:	b009883a 	mov	r4,r22
    b164:	a80b883a 	mov	r5,r21
    b168:	99a4983a 	sll	r18,r19,r6
    b16c:	1428b03a 	or	r20,r2,r16
    b170:	000ba6c0 	call	ba6c <__umodsi3>
    b174:	b009883a 	mov	r4,r22
    b178:	a80b883a 	mov	r5,r21
    b17c:	1021883a 	mov	r16,r2
    b180:	000ba080 	call	ba08 <__udivsi3>
    b184:	8008943a 	slli	r4,r16,16
    b188:	a00ad43a 	srli	r5,r20,16
    b18c:	8cffffcc 	andi	r19,r17,65535
    b190:	98a1383a 	mul	r16,r19,r2
    b194:	2148b03a 	or	r4,r4,r5
    b198:	102d883a 	mov	r22,r2
    b19c:	2400062e 	bgeu	r4,r16,b1b8 <__udivdi3+0x368>
    b1a0:	2449883a 	add	r4,r4,r17
    b1a4:	10bfffc4 	addi	r2,r2,-1
    b1a8:	24408136 	bltu	r4,r17,b3b0 <__udivdi3+0x560>
    b1ac:	2400802e 	bgeu	r4,r16,b3b0 <__udivdi3+0x560>
    b1b0:	b5bfff84 	addi	r22,r22,-2
    b1b4:	2449883a 	add	r4,r4,r17
    b1b8:	2421c83a 	sub	r16,r4,r16
    b1bc:	8009883a 	mov	r4,r16
    b1c0:	a80b883a 	mov	r5,r21
    b1c4:	000ba6c0 	call	ba6c <__umodsi3>
    b1c8:	8009883a 	mov	r4,r16
    b1cc:	a80b883a 	mov	r5,r21
    b1d0:	1021883a 	mov	r16,r2
    b1d4:	8020943a 	slli	r16,r16,16
    b1d8:	000ba080 	call	ba08 <__udivsi3>
    b1dc:	9889383a 	mul	r4,r19,r2
    b1e0:	a53fffcc 	andi	r20,r20,65535
    b1e4:	8520b03a 	or	r16,r16,r20
    b1e8:	8100062e 	bgeu	r16,r4,b204 <__udivdi3+0x3b4>
    b1ec:	8461883a 	add	r16,r16,r17
    b1f0:	10ffffc4 	addi	r3,r2,-1
    b1f4:	84406a36 	bltu	r16,r17,b3a0 <__udivdi3+0x550>
    b1f8:	8100692e 	bgeu	r16,r4,b3a0 <__udivdi3+0x550>
    b1fc:	10bfff84 	addi	r2,r2,-2
    b200:	8461883a 	add	r16,r16,r17
    b204:	b006943a 	slli	r3,r22,16
    b208:	8121c83a 	sub	r16,r16,r4
    b20c:	1886b03a 	or	r3,r3,r2
    b210:	003f9406 	br	b064 <__udivdi3+0x214>
    b214:	30acd83a 	srl	r22,r6,r2
    b218:	3d4e983a 	sll	r7,r7,r21
    b21c:	80a4d83a 	srl	r18,r16,r2
    b220:	8546983a 	sll	r3,r16,r21
    b224:	b1ecb03a 	or	r22,r22,r7
    b228:	b038d43a 	srli	fp,r22,16
    b22c:	9884d83a 	srl	r2,r19,r2
    b230:	9009883a 	mov	r4,r18
    b234:	e00b883a 	mov	r5,fp
    b238:	10e2b03a 	or	r17,r2,r3
    b23c:	3568983a 	sll	r20,r6,r21
    b240:	000ba6c0 	call	ba6c <__umodsi3>
    b244:	9009883a 	mov	r4,r18
    b248:	e00b883a 	mov	r5,fp
    b24c:	1025883a 	mov	r18,r2
    b250:	000ba080 	call	ba08 <__udivsi3>
    b254:	9008943a 	slli	r4,r18,16
    b258:	8806d43a 	srli	r3,r17,16
    b25c:	b5ffffcc 	andi	r23,r22,65535
    b260:	b8a5383a 	mul	r18,r23,r2
    b264:	20c8b03a 	or	r4,r4,r3
    b268:	1021883a 	mov	r16,r2
    b26c:	2480062e 	bgeu	r4,r18,b288 <__udivdi3+0x438>
    b270:	2589883a 	add	r4,r4,r22
    b274:	10bfffc4 	addi	r2,r2,-1
    b278:	25804b36 	bltu	r4,r22,b3a8 <__udivdi3+0x558>
    b27c:	24804a2e 	bgeu	r4,r18,b3a8 <__udivdi3+0x558>
    b280:	843fff84 	addi	r16,r16,-2
    b284:	2589883a 	add	r4,r4,r22
    b288:	24a5c83a 	sub	r18,r4,r18
    b28c:	9009883a 	mov	r4,r18
    b290:	e00b883a 	mov	r5,fp
    b294:	000ba6c0 	call	ba6c <__umodsi3>
    b298:	9009883a 	mov	r4,r18
    b29c:	e00b883a 	mov	r5,fp
    b2a0:	1025883a 	mov	r18,r2
    b2a4:	9024943a 	slli	r18,r18,16
    b2a8:	000ba080 	call	ba08 <__udivsi3>
    b2ac:	b8af383a 	mul	r23,r23,r2
    b2b0:	8c7fffcc 	andi	r17,r17,65535
    b2b4:	9462b03a 	or	r17,r18,r17
    b2b8:	8dc0062e 	bgeu	r17,r23,b2d4 <__udivdi3+0x484>
    b2bc:	8da3883a 	add	r17,r17,r22
    b2c0:	10ffffc4 	addi	r3,r2,-1
    b2c4:	8d803436 	bltu	r17,r22,b398 <__udivdi3+0x548>
    b2c8:	8dc0332e 	bgeu	r17,r23,b398 <__udivdi3+0x548>
    b2cc:	10bfff84 	addi	r2,r2,-2
    b2d0:	8da3883a 	add	r17,r17,r22
    b2d4:	8020943a 	slli	r16,r16,16
    b2d8:	10ffffcc 	andi	r3,r2,65535
    b2dc:	a00ed43a 	srli	r7,r20,16
    b2e0:	8084b03a 	or	r2,r16,r2
    b2e4:	1008d43a 	srli	r4,r2,16
    b2e8:	a1bfffcc 	andi	r6,r20,65535
    b2ec:	1991383a 	mul	r8,r3,r6
    b2f0:	218d383a 	mul	r6,r4,r6
    b2f4:	19c7383a 	mul	r3,r3,r7
    b2f8:	400ad43a 	srli	r5,r8,16
    b2fc:	21c9383a 	mul	r4,r4,r7
    b300:	1987883a 	add	r3,r3,r6
    b304:	28c7883a 	add	r3,r5,r3
    b308:	8de3c83a 	sub	r17,r17,r23
    b30c:	1980022e 	bgeu	r3,r6,b318 <__udivdi3+0x4c8>
    b310:	01400074 	movhi	r5,1
    b314:	2149883a 	add	r4,r4,r5
    b318:	180ad43a 	srli	r5,r3,16
    b31c:	2909883a 	add	r4,r5,r4
    b320:	89000836 	bltu	r17,r4,b344 <__udivdi3+0x4f4>
    b324:	89000226 	beq	r17,r4,b330 <__udivdi3+0x4e0>
    b328:	0007883a 	mov	r3,zero
    b32c:	003f1a06 	br	af98 <__udivdi3+0x148>
    b330:	1806943a 	slli	r3,r3,16
    b334:	9d4c983a 	sll	r6,r19,r21
    b338:	423fffcc 	andi	r8,r8,65535
    b33c:	1a07883a 	add	r3,r3,r8
    b340:	30fff92e 	bgeu	r6,r3,b328 <__udivdi3+0x4d8>
    b344:	10bfffc4 	addi	r2,r2,-1
    b348:	003ff706 	br	b328 <__udivdi3+0x4d8>
    b34c:	3804d43a 	srli	r2,r7,16
    b350:	01000404 	movi	r4,16
    b354:	003f2206 	br	afe0 <__udivdi3+0x190>
    b358:	3007883a 	mov	r3,r6
    b35c:	003ed506 	br	aeb4 <__udivdi3+0x64>
    b360:	0007883a 	mov	r3,zero
    b364:	00800044 	movi	r2,1
    b368:	003f0b06 	br	af98 <__udivdi3+0x148>
    b36c:	3805883a 	mov	r2,r7
    b370:	0009883a 	mov	r4,zero
    b374:	003f1a06 	br	afe0 <__udivdi3+0x190>
    b378:	8806d43a 	srli	r3,r17,16
    b37c:	05000404 	movi	r20,16
    b380:	003f2d06 	br	b038 <__udivdi3+0x1e8>
    b384:	3006d43a 	srli	r3,r6,16
    b388:	05000404 	movi	r20,16
    b38c:	003ec906 	br	aeb4 <__udivdi3+0x64>
    b390:	8807883a 	mov	r3,r17
    b394:	003f2806 	br	b038 <__udivdi3+0x1e8>
    b398:	1805883a 	mov	r2,r3
    b39c:	003fcd06 	br	b2d4 <__udivdi3+0x484>
    b3a0:	1805883a 	mov	r2,r3
    b3a4:	003f9706 	br	b204 <__udivdi3+0x3b4>
    b3a8:	1021883a 	mov	r16,r2
    b3ac:	003fb606 	br	b288 <__udivdi3+0x438>
    b3b0:	102d883a 	mov	r22,r2
    b3b4:	003f8006 	br	b1b8 <__udivdi3+0x368>
    b3b8:	10bfff84 	addi	r2,r2,-2
    b3bc:	003f5106 	br	b104 <__udivdi3+0x2b4>
    b3c0:	10bfff84 	addi	r2,r2,-2
    b3c4:	003eed06 	br	af7c <__udivdi3+0x12c>
    b3c8:	843fff84 	addi	r16,r16,-2
    b3cc:	2449883a 	add	r4,r4,r17
    b3d0:	003ed806 	br	af34 <__udivdi3+0xe4>
    b3d4:	a53fff84 	addi	r20,r20,-2
    b3d8:	2449883a 	add	r4,r4,r17
    b3dc:	003f3506 	br	b0b4 <__udivdi3+0x264>

0000b3e0 <__umoddi3>:
    b3e0:	defff504 	addi	sp,sp,-44
    b3e4:	dc400215 	stw	r17,8(sp)
    b3e8:	dc000115 	stw	r16,4(sp)
    b3ec:	dfc00a15 	stw	ra,40(sp)
    b3f0:	df000915 	stw	fp,36(sp)
    b3f4:	ddc00815 	stw	r23,32(sp)
    b3f8:	dd800715 	stw	r22,28(sp)
    b3fc:	dd400615 	stw	r21,24(sp)
    b400:	dd000515 	stw	r20,20(sp)
    b404:	dcc00415 	stw	r19,16(sp)
    b408:	dc800315 	stw	r18,12(sp)
    b40c:	2823883a 	mov	r17,r5
    b410:	2021883a 	mov	r16,r4
    b414:	3800371e 	bne	r7,zero,b4f4 <__umoddi3+0x114>
    b418:	3825883a 	mov	r18,r7
    b41c:	3029883a 	mov	r20,r6
    b420:	2027883a 	mov	r19,r4
    b424:	2980572e 	bgeu	r5,r6,b584 <__umoddi3+0x1a4>
    b428:	00bfffd4 	movui	r2,65535
    b42c:	282b883a 	mov	r21,r5
    b430:	1180922e 	bgeu	r2,r6,b67c <__umoddi3+0x29c>
    b434:	00804034 	movhi	r2,256
    b438:	30812036 	bltu	r6,r2,b8bc <__umoddi3+0x4dc>
    b43c:	3006d63a 	srli	r3,r6,24
    b440:	04800604 	movi	r18,24
    b444:	008000b4 	movhi	r2,2
    b448:	1885883a 	add	r2,r3,r2
    b44c:	10af8103 	ldbu	r2,-16892(r2)
    b450:	00c00804 	movi	r3,32
    b454:	1485883a 	add	r2,r2,r18
    b458:	18a5c83a 	sub	r18,r3,r2
    b45c:	18800526 	beq	r3,r2,b474 <__umoddi3+0x94>
    b460:	8ca2983a 	sll	r17,r17,r18
    b464:	8084d83a 	srl	r2,r16,r2
    b468:	34a8983a 	sll	r20,r6,r18
    b46c:	84a6983a 	sll	r19,r16,r18
    b470:	146ab03a 	or	r21,r2,r17
    b474:	a02cd43a 	srli	r22,r20,16
    b478:	a809883a 	mov	r4,r21
    b47c:	a43fffcc 	andi	r16,r20,65535
    b480:	b00b883a 	mov	r5,r22
    b484:	000ba6c0 	call	ba6c <__umodsi3>
    b488:	a809883a 	mov	r4,r21
    b48c:	b00b883a 	mov	r5,r22
    b490:	1023883a 	mov	r17,r2
    b494:	000ba080 	call	ba08 <__udivsi3>
    b498:	8822943a 	slli	r17,r17,16
    b49c:	9808d43a 	srli	r4,r19,16
    b4a0:	80ab383a 	mul	r21,r16,r2
    b4a4:	8908b03a 	or	r4,r17,r4
    b4a8:	2540042e 	bgeu	r4,r21,b4bc <__umoddi3+0xdc>
    b4ac:	2509883a 	add	r4,r4,r20
    b4b0:	25000236 	bltu	r4,r20,b4bc <__umoddi3+0xdc>
    b4b4:	2540012e 	bgeu	r4,r21,b4bc <__umoddi3+0xdc>
    b4b8:	2509883a 	add	r4,r4,r20
    b4bc:	256bc83a 	sub	r21,r4,r21
    b4c0:	b00b883a 	mov	r5,r22
    b4c4:	a809883a 	mov	r4,r21
    b4c8:	000ba6c0 	call	ba6c <__umodsi3>
    b4cc:	1023883a 	mov	r17,r2
    b4d0:	b00b883a 	mov	r5,r22
    b4d4:	a809883a 	mov	r4,r21
    b4d8:	000ba080 	call	ba08 <__udivsi3>
    b4dc:	8822943a 	slli	r17,r17,16
    b4e0:	8085383a 	mul	r2,r16,r2
    b4e4:	98ffffcc 	andi	r3,r19,65535
    b4e8:	88c6b03a 	or	r3,r17,r3
    b4ec:	18805a2e 	bgeu	r3,r2,b658 <__umoddi3+0x278>
    b4f0:	00005506 	br	b648 <__umoddi3+0x268>
    b4f4:	2005883a 	mov	r2,r4
    b4f8:	29c00d2e 	bgeu	r5,r7,b530 <__umoddi3+0x150>
    b4fc:	2807883a 	mov	r3,r5
    b500:	dfc00a17 	ldw	ra,40(sp)
    b504:	df000917 	ldw	fp,36(sp)
    b508:	ddc00817 	ldw	r23,32(sp)
    b50c:	dd800717 	ldw	r22,28(sp)
    b510:	dd400617 	ldw	r21,24(sp)
    b514:	dd000517 	ldw	r20,20(sp)
    b518:	dcc00417 	ldw	r19,16(sp)
    b51c:	dc800317 	ldw	r18,12(sp)
    b520:	dc400217 	ldw	r17,8(sp)
    b524:	dc000117 	ldw	r16,4(sp)
    b528:	dec00b04 	addi	sp,sp,44
    b52c:	f800283a 	ret
    b530:	013fffd4 	movui	r4,65535
    b534:	2807883a 	mov	r3,r5
    b538:	21c0552e 	bgeu	r4,r7,b690 <__umoddi3+0x2b0>
    b53c:	01004034 	movhi	r4,256
    b540:	3900e336 	bltu	r7,r4,b8d0 <__umoddi3+0x4f0>
    b544:	3808d63a 	srli	r4,r7,24
    b548:	02000604 	movi	r8,24
    b54c:	014000b4 	movhi	r5,2
    b550:	214b883a 	add	r5,r4,r5
    b554:	2d6f8103 	ldbu	r21,-16892(r5)
    b558:	01000804 	movi	r4,32
    b55c:	aa2b883a 	add	r21,r21,r8
    b560:	2569c83a 	sub	r20,r4,r21
    b564:	25404f1e 	bne	r4,r21,b6a4 <__umoddi3+0x2c4>
    b568:	3c400136 	bltu	r7,r17,b570 <__umoddi3+0x190>
    b56c:	81bfe436 	bltu	r16,r6,b500 <__umoddi3+0x120>
    b570:	8185c83a 	sub	r2,r16,r6
    b574:	89cfc83a 	sub	r7,r17,r7
    b578:	8087803a 	cmpltu	r3,r16,r2
    b57c:	38c7c83a 	sub	r3,r7,r3
    b580:	003fdf06 	br	b500 <__umoddi3+0x120>
    b584:	3000041e 	bne	r6,zero,b598 <__umoddi3+0x1b8>
    b588:	000b883a 	mov	r5,zero
    b58c:	01000044 	movi	r4,1
    b590:	000ba080 	call	ba08 <__udivsi3>
    b594:	1029883a 	mov	r20,r2
    b598:	00bfffd4 	movui	r2,65535
    b59c:	1500322e 	bgeu	r2,r20,b668 <__umoddi3+0x288>
    b5a0:	00804034 	movhi	r2,256
    b5a4:	a080cd36 	bltu	r20,r2,b8dc <__umoddi3+0x4fc>
    b5a8:	a006d63a 	srli	r3,r20,24
    b5ac:	04800604 	movi	r18,24
    b5b0:	008000b4 	movhi	r2,2
    b5b4:	1885883a 	add	r2,r3,r2
    b5b8:	15af8103 	ldbu	r22,-16892(r2)
    b5bc:	00800804 	movi	r2,32
    b5c0:	b4ad883a 	add	r22,r22,r18
    b5c4:	15a5c83a 	sub	r18,r2,r22
    b5c8:	15808a1e 	bne	r2,r22,b7f4 <__umoddi3+0x414>
    b5cc:	a02ed43a 	srli	r23,r20,16
    b5d0:	8d23c83a 	sub	r17,r17,r20
    b5d4:	a57fffcc 	andi	r21,r20,65535
    b5d8:	b80b883a 	mov	r5,r23
    b5dc:	8809883a 	mov	r4,r17
    b5e0:	000ba6c0 	call	ba6c <__umodsi3>
    b5e4:	8809883a 	mov	r4,r17
    b5e8:	b80b883a 	mov	r5,r23
    b5ec:	102d883a 	mov	r22,r2
    b5f0:	000ba080 	call	ba08 <__udivsi3>
    b5f4:	b02c943a 	slli	r22,r22,16
    b5f8:	9808d43a 	srli	r4,r19,16
    b5fc:	1561383a 	mul	r16,r2,r21
    b600:	b108b03a 	or	r4,r22,r4
    b604:	2400032e 	bgeu	r4,r16,b614 <__umoddi3+0x234>
    b608:	2509883a 	add	r4,r4,r20
    b60c:	25000136 	bltu	r4,r20,b614 <__umoddi3+0x234>
    b610:	2400be36 	bltu	r4,r16,b90c <__umoddi3+0x52c>
    b614:	2421c83a 	sub	r16,r4,r16
    b618:	b80b883a 	mov	r5,r23
    b61c:	8009883a 	mov	r4,r16
    b620:	000ba6c0 	call	ba6c <__umodsi3>
    b624:	1023883a 	mov	r17,r2
    b628:	b80b883a 	mov	r5,r23
    b62c:	8009883a 	mov	r4,r16
    b630:	000ba080 	call	ba08 <__udivsi3>
    b634:	8822943a 	slli	r17,r17,16
    b638:	1545383a 	mul	r2,r2,r21
    b63c:	98ffffcc 	andi	r3,r19,65535
    b640:	88c6b03a 	or	r3,r17,r3
    b644:	1880042e 	bgeu	r3,r2,b658 <__umoddi3+0x278>
    b648:	1d07883a 	add	r3,r3,r20
    b64c:	1d000236 	bltu	r3,r20,b658 <__umoddi3+0x278>
    b650:	1880012e 	bgeu	r3,r2,b658 <__umoddi3+0x278>
    b654:	1d07883a 	add	r3,r3,r20
    b658:	1885c83a 	sub	r2,r3,r2
    b65c:	1484d83a 	srl	r2,r2,r18
    b660:	0007883a 	mov	r3,zero
    b664:	003fa606 	br	b500 <__umoddi3+0x120>
    b668:	a0804030 	cmpltui	r2,r20,256
    b66c:	10009e1e 	bne	r2,zero,b8e8 <__umoddi3+0x508>
    b670:	a006d23a 	srli	r3,r20,8
    b674:	04800204 	movi	r18,8
    b678:	003fcd06 	br	b5b0 <__umoddi3+0x1d0>
    b67c:	30804030 	cmpltui	r2,r6,256
    b680:	1000911e 	bne	r2,zero,b8c8 <__umoddi3+0x4e8>
    b684:	3006d23a 	srli	r3,r6,8
    b688:	04800204 	movi	r18,8
    b68c:	003f6d06 	br	b444 <__umoddi3+0x64>
    b690:	39004030 	cmpltui	r4,r7,256
    b694:	2000961e 	bne	r4,zero,b8f0 <__umoddi3+0x510>
    b698:	3808d23a 	srli	r4,r7,8
    b69c:	02000204 	movi	r8,8
    b6a0:	003faa06 	br	b54c <__umoddi3+0x16c>
    b6a4:	3d0e983a 	sll	r7,r7,r20
    b6a8:	3544d83a 	srl	r2,r6,r21
    b6ac:	8d64d83a 	srl	r18,r17,r21
    b6b0:	8d22983a 	sll	r17,r17,r20
    b6b4:	11eeb03a 	or	r23,r2,r7
    b6b8:	b838d43a 	srli	fp,r23,16
    b6bc:	8544d83a 	srl	r2,r16,r21
    b6c0:	9009883a 	mov	r4,r18
    b6c4:	e00b883a 	mov	r5,fp
    b6c8:	3526983a 	sll	r19,r6,r20
    b6cc:	1462b03a 	or	r17,r2,r17
    b6d0:	000ba6c0 	call	ba6c <__umodsi3>
    b6d4:	9009883a 	mov	r4,r18
    b6d8:	e00b883a 	mov	r5,fp
    b6dc:	1025883a 	mov	r18,r2
    b6e0:	000ba080 	call	ba08 <__udivsi3>
    b6e4:	9008943a 	slli	r4,r18,16
    b6e8:	8806d43a 	srli	r3,r17,16
    b6ec:	b9ffffcc 	andi	r7,r23,65535
    b6f0:	38a5383a 	mul	r18,r7,r2
    b6f4:	20c8b03a 	or	r4,r4,r3
    b6f8:	8520983a 	sll	r16,r16,r20
    b6fc:	102d883a 	mov	r22,r2
    b700:	2480062e 	bgeu	r4,r18,b71c <__umoddi3+0x33c>
    b704:	25c9883a 	add	r4,r4,r23
    b708:	10bfffc4 	addi	r2,r2,-1
    b70c:	25c07d36 	bltu	r4,r23,b904 <__umoddi3+0x524>
    b710:	24807c2e 	bgeu	r4,r18,b904 <__umoddi3+0x524>
    b714:	b5bfff84 	addi	r22,r22,-2
    b718:	25c9883a 	add	r4,r4,r23
    b71c:	24a5c83a 	sub	r18,r4,r18
    b720:	9009883a 	mov	r4,r18
    b724:	e00b883a 	mov	r5,fp
    b728:	d9c00015 	stw	r7,0(sp)
    b72c:	000ba6c0 	call	ba6c <__umodsi3>
    b730:	9009883a 	mov	r4,r18
    b734:	e00b883a 	mov	r5,fp
    b738:	1025883a 	mov	r18,r2
    b73c:	000ba080 	call	ba08 <__udivsi3>
    b740:	d9c00017 	ldw	r7,0(sp)
    b744:	9024943a 	slli	r18,r18,16
    b748:	8c7fffcc 	andi	r17,r17,65535
    b74c:	388f383a 	mul	r7,r7,r2
    b750:	9448b03a 	or	r4,r18,r17
    b754:	21c0062e 	bgeu	r4,r7,b770 <__umoddi3+0x390>
    b758:	25c9883a 	add	r4,r4,r23
    b75c:	10ffffc4 	addi	r3,r2,-1
    b760:	25c06636 	bltu	r4,r23,b8fc <__umoddi3+0x51c>
    b764:	21c0652e 	bgeu	r4,r7,b8fc <__umoddi3+0x51c>
    b768:	10bfff84 	addi	r2,r2,-2
    b76c:	25c9883a 	add	r4,r4,r23
    b770:	b00a943a 	slli	r5,r22,16
    b774:	11bfffcc 	andi	r6,r2,65535
    b778:	9806d43a 	srli	r3,r19,16
    b77c:	2884b03a 	or	r2,r5,r2
    b780:	102cd43a 	srli	r22,r2,16
    b784:	997fffcc 	andi	r5,r19,65535
    b788:	3151383a 	mul	r8,r6,r5
    b78c:	b14b383a 	mul	r5,r22,r5
    b790:	30cd383a 	mul	r6,r6,r3
    b794:	4004d43a 	srli	r2,r8,16
    b798:	b0ed383a 	mul	r22,r22,r3
    b79c:	314d883a 	add	r6,r6,r5
    b7a0:	1185883a 	add	r2,r2,r6
    b7a4:	21c9c83a 	sub	r4,r4,r7
    b7a8:	1140022e 	bgeu	r2,r5,b7b4 <__umoddi3+0x3d4>
    b7ac:	00c00074 	movhi	r3,1
    b7b0:	b0ed883a 	add	r22,r22,r3
    b7b4:	1006d43a 	srli	r3,r2,16
    b7b8:	1004943a 	slli	r2,r2,16
    b7bc:	423fffcc 	andi	r8,r8,65535
    b7c0:	1dad883a 	add	r22,r3,r22
    b7c4:	1205883a 	add	r2,r2,r8
    b7c8:	25803636 	bltu	r4,r22,b8a4 <__umoddi3+0x4c4>
    b7cc:	25803426 	beq	r4,r22,b8a0 <__umoddi3+0x4c0>
    b7d0:	8085c83a 	sub	r2,r16,r2
    b7d4:	8087803a 	cmpltu	r3,r16,r2
    b7d8:	2589c83a 	sub	r4,r4,r22
    b7dc:	20c7c83a 	sub	r3,r4,r3
    b7e0:	1d60983a 	sll	r16,r3,r21
    b7e4:	1504d83a 	srl	r2,r2,r20
    b7e8:	1d06d83a 	srl	r3,r3,r20
    b7ec:	8084b03a 	or	r2,r16,r2
    b7f0:	003f4306 	br	b500 <__umoddi3+0x120>
    b7f4:	a4a8983a 	sll	r20,r20,r18
    b7f8:	8daad83a 	srl	r21,r17,r22
    b7fc:	8ca2983a 	sll	r17,r17,r18
    b800:	a02ed43a 	srli	r23,r20,16
    b804:	a809883a 	mov	r4,r21
    b808:	85acd83a 	srl	r22,r16,r22
    b80c:	b80b883a 	mov	r5,r23
    b810:	000ba6c0 	call	ba6c <__umodsi3>
    b814:	a809883a 	mov	r4,r21
    b818:	b80b883a 	mov	r5,r23
    b81c:	b46cb03a 	or	r22,r22,r17
    b820:	1027883a 	mov	r19,r2
    b824:	000ba080 	call	ba08 <__udivsi3>
    b828:	9826943a 	slli	r19,r19,16
    b82c:	b008d43a 	srli	r4,r22,16
    b830:	a57fffcc 	andi	r21,r20,65535
    b834:	a8a3383a 	mul	r17,r21,r2
    b838:	9908b03a 	or	r4,r19,r4
    b83c:	84a6983a 	sll	r19,r16,r18
    b840:	2440042e 	bgeu	r4,r17,b854 <__umoddi3+0x474>
    b844:	2509883a 	add	r4,r4,r20
    b848:	25000236 	bltu	r4,r20,b854 <__umoddi3+0x474>
    b84c:	2440012e 	bgeu	r4,r17,b854 <__umoddi3+0x474>
    b850:	2509883a 	add	r4,r4,r20
    b854:	2463c83a 	sub	r17,r4,r17
    b858:	8809883a 	mov	r4,r17
    b85c:	b80b883a 	mov	r5,r23
    b860:	000ba6c0 	call	ba6c <__umodsi3>
    b864:	1021883a 	mov	r16,r2
    b868:	8809883a 	mov	r4,r17
    b86c:	b80b883a 	mov	r5,r23
    b870:	8020943a 	slli	r16,r16,16
    b874:	000ba080 	call	ba08 <__udivsi3>
    b878:	a885383a 	mul	r2,r21,r2
    b87c:	b47fffcc 	andi	r17,r22,65535
    b880:	8462b03a 	or	r17,r16,r17
    b884:	8880042e 	bgeu	r17,r2,b898 <__umoddi3+0x4b8>
    b888:	8d23883a 	add	r17,r17,r20
    b88c:	8d000236 	bltu	r17,r20,b898 <__umoddi3+0x4b8>
    b890:	8880012e 	bgeu	r17,r2,b898 <__umoddi3+0x4b8>
    b894:	8d23883a 	add	r17,r17,r20
    b898:	88a3c83a 	sub	r17,r17,r2
    b89c:	003f4e06 	br	b5d8 <__umoddi3+0x1f8>
    b8a0:	80bfcb2e 	bgeu	r16,r2,b7d0 <__umoddi3+0x3f0>
    b8a4:	14e7c83a 	sub	r19,r2,r19
    b8a8:	14c5803a 	cmpltu	r2,r2,r19
    b8ac:	15c5883a 	add	r2,r2,r23
    b8b0:	b0adc83a 	sub	r22,r22,r2
    b8b4:	9805883a 	mov	r2,r19
    b8b8:	003fc506 	br	b7d0 <__umoddi3+0x3f0>
    b8bc:	3006d43a 	srli	r3,r6,16
    b8c0:	04800404 	movi	r18,16
    b8c4:	003edf06 	br	b444 <__umoddi3+0x64>
    b8c8:	3007883a 	mov	r3,r6
    b8cc:	003edd06 	br	b444 <__umoddi3+0x64>
    b8d0:	3808d43a 	srli	r4,r7,16
    b8d4:	02000404 	movi	r8,16
    b8d8:	003f1c06 	br	b54c <__umoddi3+0x16c>
    b8dc:	a006d43a 	srli	r3,r20,16
    b8e0:	04800404 	movi	r18,16
    b8e4:	003f3206 	br	b5b0 <__umoddi3+0x1d0>
    b8e8:	a007883a 	mov	r3,r20
    b8ec:	003f3006 	br	b5b0 <__umoddi3+0x1d0>
    b8f0:	3809883a 	mov	r4,r7
    b8f4:	0011883a 	mov	r8,zero
    b8f8:	003f1406 	br	b54c <__umoddi3+0x16c>
    b8fc:	1805883a 	mov	r2,r3
    b900:	003f9b06 	br	b770 <__umoddi3+0x390>
    b904:	102d883a 	mov	r22,r2
    b908:	003f8406 	br	b71c <__umoddi3+0x33c>
    b90c:	2509883a 	add	r4,r4,r20
    b910:	003f4006 	br	b614 <__umoddi3+0x234>

0000b914 <__divsi3>:
    b914:	20001a16 	blt	r4,zero,b980 <__divsi3+0x6c>
    b918:	000f883a 	mov	r7,zero
    b91c:	2800020e 	bge	r5,zero,b928 <__divsi3+0x14>
    b920:	014bc83a 	sub	r5,zero,r5
    b924:	39c0005c 	xori	r7,r7,1
    b928:	200d883a 	mov	r6,r4
    b92c:	00c00044 	movi	r3,1
    b930:	2900092e 	bgeu	r5,r4,b958 <__divsi3+0x44>
    b934:	00800804 	movi	r2,32
    b938:	00c00044 	movi	r3,1
    b93c:	00000106 	br	b944 <__divsi3+0x30>
    b940:	10001226 	beq	r2,zero,b98c <__divsi3+0x78>
    b944:	294b883a 	add	r5,r5,r5
    b948:	10bfffc4 	addi	r2,r2,-1
    b94c:	18c7883a 	add	r3,r3,r3
    b950:	293ffb36 	bltu	r5,r4,b940 <__divsi3+0x2c>
    b954:	18000d26 	beq	r3,zero,b98c <__divsi3+0x78>
    b958:	0005883a 	mov	r2,zero
    b95c:	31400236 	bltu	r6,r5,b968 <__divsi3+0x54>
    b960:	314dc83a 	sub	r6,r6,r5
    b964:	10c4b03a 	or	r2,r2,r3
    b968:	1806d07a 	srli	r3,r3,1
    b96c:	280ad07a 	srli	r5,r5,1
    b970:	183ffa1e 	bne	r3,zero,b95c <__divsi3+0x48>
    b974:	38000126 	beq	r7,zero,b97c <__divsi3+0x68>
    b978:	0085c83a 	sub	r2,zero,r2
    b97c:	f800283a 	ret
    b980:	0109c83a 	sub	r4,zero,r4
    b984:	01c00044 	movi	r7,1
    b988:	003fe406 	br	b91c <__divsi3+0x8>
    b98c:	0005883a 	mov	r2,zero
    b990:	003ff806 	br	b974 <__divsi3+0x60>

0000b994 <__modsi3>:
    b994:	20001916 	blt	r4,zero,b9fc <__modsi3+0x68>
    b998:	000f883a 	mov	r7,zero
    b99c:	2005883a 	mov	r2,r4
    b9a0:	2800010e 	bge	r5,zero,b9a8 <__modsi3+0x14>
    b9a4:	014bc83a 	sub	r5,zero,r5
    b9a8:	00c00044 	movi	r3,1
    b9ac:	2900092e 	bgeu	r5,r4,b9d4 <__modsi3+0x40>
    b9b0:	01800804 	movi	r6,32
    b9b4:	00c00044 	movi	r3,1
    b9b8:	00000106 	br	b9c0 <__modsi3+0x2c>
    b9bc:	30000d26 	beq	r6,zero,b9f4 <__modsi3+0x60>
    b9c0:	294b883a 	add	r5,r5,r5
    b9c4:	31bfffc4 	addi	r6,r6,-1
    b9c8:	18c7883a 	add	r3,r3,r3
    b9cc:	293ffb36 	bltu	r5,r4,b9bc <__modsi3+0x28>
    b9d0:	18000826 	beq	r3,zero,b9f4 <__modsi3+0x60>
    b9d4:	1806d07a 	srli	r3,r3,1
    b9d8:	11400136 	bltu	r2,r5,b9e0 <__modsi3+0x4c>
    b9dc:	1145c83a 	sub	r2,r2,r5
    b9e0:	280ad07a 	srli	r5,r5,1
    b9e4:	183ffb1e 	bne	r3,zero,b9d4 <__modsi3+0x40>
    b9e8:	38000126 	beq	r7,zero,b9f0 <__modsi3+0x5c>
    b9ec:	0085c83a 	sub	r2,zero,r2
    b9f0:	f800283a 	ret
    b9f4:	2005883a 	mov	r2,r4
    b9f8:	003ffb06 	br	b9e8 <__modsi3+0x54>
    b9fc:	0109c83a 	sub	r4,zero,r4
    ba00:	01c00044 	movi	r7,1
    ba04:	003fe506 	br	b99c <__modsi3+0x8>

0000ba08 <__udivsi3>:
    ba08:	200d883a 	mov	r6,r4
    ba0c:	2900152e 	bgeu	r5,r4,ba64 <__udivsi3+0x5c>
    ba10:	28001416 	blt	r5,zero,ba64 <__udivsi3+0x5c>
    ba14:	00800804 	movi	r2,32
    ba18:	00c00044 	movi	r3,1
    ba1c:	00000206 	br	ba28 <__udivsi3+0x20>
    ba20:	10000e26 	beq	r2,zero,ba5c <__udivsi3+0x54>
    ba24:	28000516 	blt	r5,zero,ba3c <__udivsi3+0x34>
    ba28:	294b883a 	add	r5,r5,r5
    ba2c:	10bfffc4 	addi	r2,r2,-1
    ba30:	18c7883a 	add	r3,r3,r3
    ba34:	293ffa36 	bltu	r5,r4,ba20 <__udivsi3+0x18>
    ba38:	18000826 	beq	r3,zero,ba5c <__udivsi3+0x54>
    ba3c:	0005883a 	mov	r2,zero
    ba40:	31400236 	bltu	r6,r5,ba4c <__udivsi3+0x44>
    ba44:	314dc83a 	sub	r6,r6,r5
    ba48:	10c4b03a 	or	r2,r2,r3
    ba4c:	1806d07a 	srli	r3,r3,1
    ba50:	280ad07a 	srli	r5,r5,1
    ba54:	183ffa1e 	bne	r3,zero,ba40 <__udivsi3+0x38>
    ba58:	f800283a 	ret
    ba5c:	0005883a 	mov	r2,zero
    ba60:	f800283a 	ret
    ba64:	00c00044 	movi	r3,1
    ba68:	003ff406 	br	ba3c <__udivsi3+0x34>

0000ba6c <__umodsi3>:
    ba6c:	2005883a 	mov	r2,r4
    ba70:	2900132e 	bgeu	r5,r4,bac0 <__umodsi3+0x54>
    ba74:	28001216 	blt	r5,zero,bac0 <__umodsi3+0x54>
    ba78:	01800804 	movi	r6,32
    ba7c:	00c00044 	movi	r3,1
    ba80:	00000206 	br	ba8c <__umodsi3+0x20>
    ba84:	30000c26 	beq	r6,zero,bab8 <__umodsi3+0x4c>
    ba88:	28000516 	blt	r5,zero,baa0 <__umodsi3+0x34>
    ba8c:	294b883a 	add	r5,r5,r5
    ba90:	31bfffc4 	addi	r6,r6,-1
    ba94:	18c7883a 	add	r3,r3,r3
    ba98:	293ffa36 	bltu	r5,r4,ba84 <__umodsi3+0x18>
    ba9c:	18000626 	beq	r3,zero,bab8 <__umodsi3+0x4c>
    baa0:	1806d07a 	srli	r3,r3,1
    baa4:	11400136 	bltu	r2,r5,baac <__umodsi3+0x40>
    baa8:	1145c83a 	sub	r2,r2,r5
    baac:	280ad07a 	srli	r5,r5,1
    bab0:	183ffb1e 	bne	r3,zero,baa0 <__umodsi3+0x34>
    bab4:	f800283a 	ret
    bab8:	2005883a 	mov	r2,r4
    babc:	f800283a 	ret
    bac0:	00c00044 	movi	r3,1
    bac4:	003ff606 	br	baa0 <__umodsi3+0x34>

0000bac8 <__adddf3>:
    bac8:	02000434 	movhi	r8,16
    bacc:	423fffc4 	addi	r8,r8,-1
    bad0:	2806d53a 	srli	r3,r5,20
    bad4:	3804d53a 	srli	r2,r7,20
    bad8:	2a14703a 	and	r10,r5,r8
    badc:	3a12703a 	and	r9,r7,r8
    bae0:	280ad7fa 	srli	r5,r5,31
    bae4:	501490fa 	slli	r10,r10,3
    bae8:	2018d77a 	srli	r12,r4,29
    baec:	481290fa 	slli	r9,r9,3
    baf0:	3016d77a 	srli	r11,r6,29
    baf4:	380ed7fa 	srli	r7,r7,31
    baf8:	defffb04 	addi	sp,sp,-20
    bafc:	dc800215 	stw	r18,8(sp)
    bb00:	dc000015 	stw	r16,0(sp)
    bb04:	1c81ffcc 	andi	r18,r3,2047
    bb08:	1081ffcc 	andi	r2,r2,2047
    bb0c:	dfc00415 	stw	ra,16(sp)
    bb10:	dcc00315 	stw	r19,12(sp)
    bb14:	dc400115 	stw	r17,4(sp)
    bb18:	201c90fa 	slli	r14,r4,3
    bb1c:	301a90fa 	slli	r13,r6,3
    bb20:	2821883a 	mov	r16,r5
    bb24:	6294b03a 	or	r10,r12,r10
    bb28:	5a52b03a 	or	r9,r11,r9
    bb2c:	9087c83a 	sub	r3,r18,r2
    bb30:	29c06126 	beq	r5,r7,bcb8 <__adddf3+0x1f0>
    bb34:	00c0550e 	bge	zero,r3,bc8c <__adddf3+0x1c4>
    bb38:	10007326 	beq	r2,zero,bd08 <__adddf3+0x240>
    bb3c:	9081ffd8 	cmpnei	r2,r18,2047
    bb40:	1000bd26 	beq	r2,zero,be38 <__adddf3+0x370>
    bb44:	4a402034 	orhi	r9,r9,128
    bb48:	18800e48 	cmpgei	r2,r3,57
    bb4c:	1000ef1e 	bne	r2,zero,bf0c <__adddf3+0x444>
    bb50:	18800808 	cmpgei	r2,r3,32
    bb54:	1001321e 	bne	r2,zero,c020 <__adddf3+0x558>
    bb58:	00800804 	movi	r2,32
    bb5c:	10c5c83a 	sub	r2,r2,r3
    bb60:	68c8d83a 	srl	r4,r13,r3
    bb64:	48a2983a 	sll	r17,r9,r2
    bb68:	689a983a 	sll	r13,r13,r2
    bb6c:	48c6d83a 	srl	r3,r9,r3
    bb70:	8922b03a 	or	r17,r17,r4
    bb74:	681ac03a 	cmpne	r13,r13,zero
    bb78:	8b62b03a 	or	r17,r17,r13
    bb7c:	50d5c83a 	sub	r10,r10,r3
    bb80:	7463c83a 	sub	r17,r14,r17
    bb84:	7451803a 	cmpltu	r8,r14,r17
    bb88:	5211c83a 	sub	r8,r10,r8
    bb8c:	4080202c 	andhi	r2,r8,128
    bb90:	10008d26 	beq	r2,zero,bdc8 <__adddf3+0x300>
    bb94:	02402034 	movhi	r9,128
    bb98:	4a7fffc4 	addi	r9,r9,-1
    bb9c:	4266703a 	and	r19,r8,r9
    bba0:	9800b326 	beq	r19,zero,be70 <__adddf3+0x3a8>
    bba4:	9809883a 	mov	r4,r19
    bba8:	000dfa80 	call	dfa8 <__clzsi2>
    bbac:	10fffe04 	addi	r3,r2,-8
    bbb0:	02000804 	movi	r8,32
    bbb4:	40d1c83a 	sub	r8,r8,r3
    bbb8:	8a10d83a 	srl	r8,r17,r8
    bbbc:	98d2983a 	sll	r9,r19,r3
    bbc0:	88e2983a 	sll	r17,r17,r3
    bbc4:	4250b03a 	or	r8,r8,r9
    bbc8:	1c80b216 	blt	r3,r18,be94 <__adddf3+0x3cc>
    bbcc:	1c87c83a 	sub	r3,r3,r18
    bbd0:	19000044 	addi	r4,r3,1
    bbd4:	20800808 	cmpgei	r2,r4,32
    bbd8:	10006f1e 	bne	r2,zero,bd98 <__adddf3+0x2d0>
    bbdc:	00800804 	movi	r2,32
    bbe0:	1105c83a 	sub	r2,r2,r4
    bbe4:	8906d83a 	srl	r3,r17,r4
    bbe8:	88a2983a 	sll	r17,r17,r2
    bbec:	4084983a 	sll	r2,r8,r2
    bbf0:	4110d83a 	srl	r8,r8,r4
    bbf4:	8822c03a 	cmpne	r17,r17,zero
    bbf8:	10c4b03a 	or	r2,r2,r3
    bbfc:	1462b03a 	or	r17,r2,r17
    bc00:	0025883a 	mov	r18,zero
    bc04:	888001cc 	andi	r2,r17,7
    bc08:	10000726 	beq	r2,zero,bc28 <__adddf3+0x160>
    bc0c:	888003cc 	andi	r2,r17,15
    bc10:	10800120 	cmpeqi	r2,r2,4
    bc14:	1000041e 	bne	r2,zero,bc28 <__adddf3+0x160>
    bc18:	88c00104 	addi	r3,r17,4
    bc1c:	1c63803a 	cmpltu	r17,r3,r17
    bc20:	4451883a 	add	r8,r8,r17
    bc24:	1823883a 	mov	r17,r3
    bc28:	4080202c 	andhi	r2,r8,128
    bc2c:	10006826 	beq	r2,zero,bdd0 <__adddf3+0x308>
    bc30:	90c00044 	addi	r3,r18,1
    bc34:	1881ffe0 	cmpeqi	r2,r3,2047
    bc38:	18c1ffcc 	andi	r3,r3,2047
    bc3c:	10007a1e 	bne	r2,zero,be28 <__adddf3+0x360>
    bc40:	00bfe034 	movhi	r2,65408
    bc44:	10bfffc4 	addi	r2,r2,-1
    bc48:	4090703a 	and	r8,r8,r2
    bc4c:	4004977a 	slli	r2,r8,29
    bc50:	4010927a 	slli	r8,r8,9
    bc54:	8822d0fa 	srli	r17,r17,3
    bc58:	4010d33a 	srli	r8,r8,12
    bc5c:	1444b03a 	or	r2,r2,r17
    bc60:	1806953a 	slli	r3,r3,20
    bc64:	802097fa 	slli	r16,r16,31
    bc68:	1a06b03a 	or	r3,r3,r8
    bc6c:	1c06b03a 	or	r3,r3,r16
    bc70:	dfc00417 	ldw	ra,16(sp)
    bc74:	dcc00317 	ldw	r19,12(sp)
    bc78:	dc800217 	ldw	r18,8(sp)
    bc7c:	dc400117 	ldw	r17,4(sp)
    bc80:	dc000017 	ldw	r16,0(sp)
    bc84:	dec00504 	addi	sp,sp,20
    bc88:	f800283a 	ret
    bc8c:	18002626 	beq	r3,zero,bd28 <__adddf3+0x260>
    bc90:	1487c83a 	sub	r3,r2,r18
    bc94:	9000ba1e 	bne	r18,zero,bf80 <__adddf3+0x4b8>
    bc98:	5388b03a 	or	r4,r10,r14
    bc9c:	20011826 	beq	r4,zero,c100 <__adddf3+0x638>
    bca0:	193fffc4 	addi	r4,r3,-1
    bca4:	20015726 	beq	r4,zero,c204 <__adddf3+0x73c>
    bca8:	18c1ffd8 	cmpnei	r3,r3,2047
    bcac:	18013026 	beq	r3,zero,c170 <__adddf3+0x6a8>
    bcb0:	2007883a 	mov	r3,r4
    bcb4:	0000b506 	br	bf8c <__adddf3+0x4c4>
    bcb8:	00c07b0e 	bge	zero,r3,bea8 <__adddf3+0x3e0>
    bcbc:	10002e26 	beq	r2,zero,bd78 <__adddf3+0x2b0>
    bcc0:	9081ffd8 	cmpnei	r2,r18,2047
    bcc4:	10005c26 	beq	r2,zero,be38 <__adddf3+0x370>
    bcc8:	4a402034 	orhi	r9,r9,128
    bccc:	18800e48 	cmpgei	r2,r3,57
    bcd0:	10004b1e 	bne	r2,zero,be00 <__adddf3+0x338>
    bcd4:	18800808 	cmpgei	r2,r3,32
    bcd8:	1000ec26 	beq	r2,zero,c08c <__adddf3+0x5c4>
    bcdc:	1c7ff804 	addi	r17,r3,-32
    bce0:	19000820 	cmpeqi	r4,r3,32
    bce4:	4c44d83a 	srl	r2,r9,r17
    bce8:	2000041e 	bne	r4,zero,bcfc <__adddf3+0x234>
    bcec:	01001004 	movi	r4,64
    bcf0:	20c7c83a 	sub	r3,r4,r3
    bcf4:	48d2983a 	sll	r9,r9,r3
    bcf8:	6a5ab03a 	or	r13,r13,r9
    bcfc:	6822c03a 	cmpne	r17,r13,zero
    bd00:	88a2b03a 	or	r17,r17,r2
    bd04:	00004006 	br	be08 <__adddf3+0x340>
    bd08:	4b44b03a 	or	r2,r9,r13
    bd0c:	10008226 	beq	r2,zero,bf18 <__adddf3+0x450>
    bd10:	18bfffc4 	addi	r2,r3,-1
    bd14:	10011026 	beq	r2,zero,c158 <__adddf3+0x690>
    bd18:	18c1ffd8 	cmpnei	r3,r3,2047
    bd1c:	18004626 	beq	r3,zero,be38 <__adddf3+0x370>
    bd20:	1007883a 	mov	r3,r2
    bd24:	003f8806 	br	bb48 <__adddf3+0x80>
    bd28:	90800044 	addi	r2,r18,1
    bd2c:	1081ff8c 	andi	r2,r2,2046
    bd30:	1000a51e 	bne	r2,zero,bfc8 <__adddf3+0x500>
    bd34:	538ab03a 	or	r5,r10,r14
    bd38:	4b44b03a 	or	r2,r9,r13
    bd3c:	9000f81e 	bne	r18,zero,c120 <__adddf3+0x658>
    bd40:	28013726 	beq	r5,zero,c220 <__adddf3+0x758>
    bd44:	10011226 	beq	r2,zero,c190 <__adddf3+0x6c8>
    bd48:	7363c83a 	sub	r17,r14,r13
    bd4c:	7445803a 	cmpltu	r2,r14,r17
    bd50:	5251c83a 	sub	r8,r10,r9
    bd54:	4091c83a 	sub	r8,r8,r2
    bd58:	4080202c 	andhi	r2,r8,128
    bd5c:	10018f26 	beq	r2,zero,c39c <__adddf3+0x8d4>
    bd60:	6ba3c83a 	sub	r17,r13,r14
    bd64:	4a95c83a 	sub	r10,r9,r10
    bd68:	6c51803a 	cmpltu	r8,r13,r17
    bd6c:	5211c83a 	sub	r8,r10,r8
    bd70:	3821883a 	mov	r16,r7
    bd74:	003fa306 	br	bc04 <__adddf3+0x13c>
    bd78:	4b44b03a 	or	r2,r9,r13
    bd7c:	10006626 	beq	r2,zero,bf18 <__adddf3+0x450>
    bd80:	18bfffc4 	addi	r2,r3,-1
    bd84:	1000ec26 	beq	r2,zero,c138 <__adddf3+0x670>
    bd88:	18c1ffd8 	cmpnei	r3,r3,2047
    bd8c:	18012d26 	beq	r3,zero,c244 <__adddf3+0x77c>
    bd90:	1007883a 	mov	r3,r2
    bd94:	003fcd06 	br	bccc <__adddf3+0x204>
    bd98:	18fff844 	addi	r3,r3,-31
    bd9c:	20800820 	cmpeqi	r2,r4,32
    bda0:	40c6d83a 	srl	r3,r8,r3
    bda4:	1000041e 	bne	r2,zero,bdb8 <__adddf3+0x2f0>
    bda8:	00801004 	movi	r2,64
    bdac:	1109c83a 	sub	r4,r2,r4
    bdb0:	4110983a 	sll	r8,r8,r4
    bdb4:	8a22b03a 	or	r17,r17,r8
    bdb8:	8822c03a 	cmpne	r17,r17,zero
    bdbc:	88e2b03a 	or	r17,r17,r3
    bdc0:	0011883a 	mov	r8,zero
    bdc4:	0025883a 	mov	r18,zero
    bdc8:	888001cc 	andi	r2,r17,7
    bdcc:	103f8f1e 	bne	r2,zero,bc0c <__adddf3+0x144>
    bdd0:	8822d0fa 	srli	r17,r17,3
    bdd4:	4004977a 	slli	r2,r8,29
    bdd8:	4014d0fa 	srli	r10,r8,3
    bddc:	9007883a 	mov	r3,r18
    bde0:	8884b03a 	or	r2,r17,r2
    bde4:	1901ffe0 	cmpeqi	r4,r3,2047
    bde8:	2000191e 	bne	r4,zero,be50 <__adddf3+0x388>
    bdec:	02000434 	movhi	r8,16
    bdf0:	423fffc4 	addi	r8,r8,-1
    bdf4:	5210703a 	and	r8,r10,r8
    bdf8:	18c1ffcc 	andi	r3,r3,2047
    bdfc:	003f9806 	br	bc60 <__adddf3+0x198>
    be00:	4b62b03a 	or	r17,r9,r13
    be04:	8822c03a 	cmpne	r17,r17,zero
    be08:	8ba3883a 	add	r17,r17,r14
    be0c:	8b91803a 	cmpltu	r8,r17,r14
    be10:	4291883a 	add	r8,r8,r10
    be14:	4080202c 	andhi	r2,r8,128
    be18:	103feb26 	beq	r2,zero,bdc8 <__adddf3+0x300>
    be1c:	94800044 	addi	r18,r18,1
    be20:	9081ffe0 	cmpeqi	r2,r18,2047
    be24:	10007426 	beq	r2,zero,bff8 <__adddf3+0x530>
    be28:	00c1ffc4 	movi	r3,2047
    be2c:	0011883a 	mov	r8,zero
    be30:	0005883a 	mov	r2,zero
    be34:	003f8a06 	br	bc60 <__adddf3+0x198>
    be38:	500a977a 	slli	r5,r10,29
    be3c:	00c80034 	movhi	r3,8192
    be40:	18ffffc4 	addi	r3,r3,-1
    be44:	5014d0fa 	srli	r10,r10,3
    be48:	20c4703a 	and	r2,r4,r3
    be4c:	1144b03a 	or	r2,r2,r5
    be50:	1286b03a 	or	r3,r2,r10
    be54:	18015426 	beq	r3,zero,c3a8 <__adddf3+0x8e0>
    be58:	00c00434 	movhi	r3,16
    be5c:	18ffffc4 	addi	r3,r3,-1
    be60:	52000234 	orhi	r8,r10,8
    be64:	40d0703a 	and	r8,r8,r3
    be68:	00c1ffc4 	movi	r3,2047
    be6c:	003f7c06 	br	bc60 <__adddf3+0x198>
    be70:	8809883a 	mov	r4,r17
    be74:	000dfa80 	call	dfa8 <__clzsi2>
    be78:	10c00604 	addi	r3,r2,24
    be7c:	19000808 	cmpgei	r4,r3,32
    be80:	203f4b26 	beq	r4,zero,bbb0 <__adddf3+0xe8>
    be84:	123ffe04 	addi	r8,r2,-8
    be88:	8a10983a 	sll	r8,r17,r8
    be8c:	0023883a 	mov	r17,zero
    be90:	1cbf4e0e 	bge	r3,r18,bbcc <__adddf3+0x104>
    be94:	00bfe034 	movhi	r2,65408
    be98:	10bfffc4 	addi	r2,r2,-1
    be9c:	90e5c83a 	sub	r18,r18,r3
    bea0:	4090703a 	and	r8,r8,r2
    bea4:	003f5706 	br	bc04 <__adddf3+0x13c>
    bea8:	18002226 	beq	r3,zero,bf34 <__adddf3+0x46c>
    beac:	1487c83a 	sub	r3,r2,r18
    beb0:	90006e26 	beq	r18,zero,c06c <__adddf3+0x5a4>
    beb4:	1101ffd8 	cmpnei	r4,r2,2047
    beb8:	2000e926 	beq	r4,zero,c260 <__adddf3+0x798>
    bebc:	52802034 	orhi	r10,r10,128
    bec0:	19000e48 	cmpgei	r4,r3,57
    bec4:	2000b91e 	bne	r4,zero,c1ac <__adddf3+0x6e4>
    bec8:	19000808 	cmpgei	r4,r3,32
    becc:	2001101e 	bne	r4,zero,c310 <__adddf3+0x848>
    bed0:	01000804 	movi	r4,32
    bed4:	20c9c83a 	sub	r4,r4,r3
    bed8:	5122983a 	sll	r17,r10,r4
    bedc:	70cad83a 	srl	r5,r14,r3
    bee0:	7108983a 	sll	r4,r14,r4
    bee4:	50d4d83a 	srl	r10,r10,r3
    bee8:	8962b03a 	or	r17,r17,r5
    beec:	2008c03a 	cmpne	r4,r4,zero
    bef0:	8922b03a 	or	r17,r17,r4
    bef4:	4a93883a 	add	r9,r9,r10
    bef8:	8b63883a 	add	r17,r17,r13
    befc:	8b51803a 	cmpltu	r8,r17,r13
    bf00:	4251883a 	add	r8,r8,r9
    bf04:	1025883a 	mov	r18,r2
    bf08:	003fc206 	br	be14 <__adddf3+0x34c>
    bf0c:	4b62b03a 	or	r17,r9,r13
    bf10:	8822c03a 	cmpne	r17,r17,zero
    bf14:	003f1a06 	br	bb80 <__adddf3+0xb8>
    bf18:	500c977a 	slli	r6,r10,29
    bf1c:	01480034 	movhi	r5,8192
    bf20:	297fffc4 	addi	r5,r5,-1
    bf24:	2144703a 	and	r2,r4,r5
    bf28:	5014d0fa 	srli	r10,r10,3
    bf2c:	1184b03a 	or	r2,r2,r6
    bf30:	003fac06 	br	bde4 <__adddf3+0x31c>
    bf34:	90800044 	addi	r2,r18,1
    bf38:	1141ff8c 	andi	r5,r2,2046
    bf3c:	28005e1e 	bne	r5,zero,c0b8 <__adddf3+0x5f0>
    bf40:	5384b03a 	or	r2,r10,r14
    bf44:	9000a71e 	bne	r18,zero,c1e4 <__adddf3+0x71c>
    bf48:	1000e526 	beq	r2,zero,c2e0 <__adddf3+0x818>
    bf4c:	4b44b03a 	or	r2,r9,r13
    bf50:	10008f26 	beq	r2,zero,c190 <__adddf3+0x6c8>
    bf54:	7363883a 	add	r17,r14,r13
    bf58:	5255883a 	add	r10,r10,r9
    bf5c:	8b91803a 	cmpltu	r8,r17,r14
    bf60:	5211883a 	add	r8,r10,r8
    bf64:	4080202c 	andhi	r2,r8,128
    bf68:	103f9726 	beq	r2,zero,bdc8 <__adddf3+0x300>
    bf6c:	00bfe034 	movhi	r2,65408
    bf70:	10bfffc4 	addi	r2,r2,-1
    bf74:	4090703a 	and	r8,r8,r2
    bf78:	04800044 	movi	r18,1
    bf7c:	003f9206 	br	bdc8 <__adddf3+0x300>
    bf80:	1101ffd8 	cmpnei	r4,r2,2047
    bf84:	20007a26 	beq	r4,zero,c170 <__adddf3+0x6a8>
    bf88:	52802034 	orhi	r10,r10,128
    bf8c:	19000e48 	cmpgei	r4,r3,57
    bf90:	20002e1e 	bne	r4,zero,c04c <__adddf3+0x584>
    bf94:	19000808 	cmpgei	r4,r3,32
    bf98:	2000871e 	bne	r4,zero,c1b8 <__adddf3+0x6f0>
    bf9c:	01000804 	movi	r4,32
    bfa0:	20c9c83a 	sub	r4,r4,r3
    bfa4:	5122983a 	sll	r17,r10,r4
    bfa8:	70cad83a 	srl	r5,r14,r3
    bfac:	711c983a 	sll	r14,r14,r4
    bfb0:	50d4d83a 	srl	r10,r10,r3
    bfb4:	8962b03a 	or	r17,r17,r5
    bfb8:	701cc03a 	cmpne	r14,r14,zero
    bfbc:	8ba2b03a 	or	r17,r17,r14
    bfc0:	4a93c83a 	sub	r9,r9,r10
    bfc4:	00002306 	br	c054 <__adddf3+0x58c>
    bfc8:	7363c83a 	sub	r17,r14,r13
    bfcc:	5267c83a 	sub	r19,r10,r9
    bfd0:	7451803a 	cmpltu	r8,r14,r17
    bfd4:	9a27c83a 	sub	r19,r19,r8
    bfd8:	9880202c 	andhi	r2,r19,128
    bfdc:	1000421e 	bne	r2,zero,c0e8 <__adddf3+0x620>
    bfe0:	8cc4b03a 	or	r2,r17,r19
    bfe4:	103eee1e 	bne	r2,zero,bba0 <__adddf3+0xd8>
    bfe8:	0015883a 	mov	r10,zero
    bfec:	0021883a 	mov	r16,zero
    bff0:	003f7e06 	br	bdec <__adddf3+0x324>
    bff4:	04800084 	movi	r18,2
    bff8:	00bfe034 	movhi	r2,65408
    bffc:	10bfffc4 	addi	r2,r2,-1
    c000:	8806d07a 	srli	r3,r17,1
    c004:	4090703a 	and	r8,r8,r2
    c008:	400497fa 	slli	r2,r8,31
    c00c:	8c40004c 	andi	r17,r17,1
    c010:	1c62b03a 	or	r17,r3,r17
    c014:	4010d07a 	srli	r8,r8,1
    c018:	1462b03a 	or	r17,r2,r17
    c01c:	003ef906 	br	bc04 <__adddf3+0x13c>
    c020:	1c7ff804 	addi	r17,r3,-32
    c024:	19000820 	cmpeqi	r4,r3,32
    c028:	4c44d83a 	srl	r2,r9,r17
    c02c:	2000041e 	bne	r4,zero,c040 <__adddf3+0x578>
    c030:	01001004 	movi	r4,64
    c034:	20c7c83a 	sub	r3,r4,r3
    c038:	48d2983a 	sll	r9,r9,r3
    c03c:	6a5ab03a 	or	r13,r13,r9
    c040:	6822c03a 	cmpne	r17,r13,zero
    c044:	88a2b03a 	or	r17,r17,r2
    c048:	003ecd06 	br	bb80 <__adddf3+0xb8>
    c04c:	5394b03a 	or	r10,r10,r14
    c050:	5022c03a 	cmpne	r17,r10,zero
    c054:	6c63c83a 	sub	r17,r13,r17
    c058:	6c51803a 	cmpltu	r8,r13,r17
    c05c:	4a11c83a 	sub	r8,r9,r8
    c060:	3821883a 	mov	r16,r7
    c064:	1025883a 	mov	r18,r2
    c068:	003ec806 	br	bb8c <__adddf3+0xc4>
    c06c:	5388b03a 	or	r4,r10,r14
    c070:	20008226 	beq	r4,zero,c27c <__adddf3+0x7b4>
    c074:	193fffc4 	addi	r4,r3,-1
    c078:	2000b026 	beq	r4,zero,c33c <__adddf3+0x874>
    c07c:	18c1ffd8 	cmpnei	r3,r3,2047
    c080:	18007726 	beq	r3,zero,c260 <__adddf3+0x798>
    c084:	2007883a 	mov	r3,r4
    c088:	003f8d06 	br	bec0 <__adddf3+0x3f8>
    c08c:	00800804 	movi	r2,32
    c090:	10c5c83a 	sub	r2,r2,r3
    c094:	68c8d83a 	srl	r4,r13,r3
    c098:	48a2983a 	sll	r17,r9,r2
    c09c:	689a983a 	sll	r13,r13,r2
    c0a0:	48c6d83a 	srl	r3,r9,r3
    c0a4:	8922b03a 	or	r17,r17,r4
    c0a8:	681ac03a 	cmpne	r13,r13,zero
    c0ac:	8b62b03a 	or	r17,r17,r13
    c0b0:	50d5883a 	add	r10,r10,r3
    c0b4:	003f5406 	br	be08 <__adddf3+0x340>
    c0b8:	10c1ffe0 	cmpeqi	r3,r2,2047
    c0bc:	183f5a1e 	bne	r3,zero,be28 <__adddf3+0x360>
    c0c0:	7351883a 	add	r8,r14,r13
    c0c4:	4387803a 	cmpltu	r3,r8,r14
    c0c8:	5255883a 	add	r10,r10,r9
    c0cc:	50c7883a 	add	r3,r10,r3
    c0d0:	401ad07a 	srli	r13,r8,1
    c0d4:	182297fa 	slli	r17,r3,31
    c0d8:	1810d07a 	srli	r8,r3,1
    c0dc:	1025883a 	mov	r18,r2
    c0e0:	8b62b03a 	or	r17,r17,r13
    c0e4:	003f3806 	br	bdc8 <__adddf3+0x300>
    c0e8:	6ba3c83a 	sub	r17,r13,r14
    c0ec:	4a93c83a 	sub	r9,r9,r10
    c0f0:	6c51803a 	cmpltu	r8,r13,r17
    c0f4:	4a27c83a 	sub	r19,r9,r8
    c0f8:	3821883a 	mov	r16,r7
    c0fc:	003ea806 	br	bba0 <__adddf3+0xd8>
    c100:	480a977a 	slli	r5,r9,29
    c104:	01080034 	movhi	r4,8192
    c108:	213fffc4 	addi	r4,r4,-1
    c10c:	3104703a 	and	r2,r6,r4
    c110:	4814d0fa 	srli	r10,r9,3
    c114:	1144b03a 	or	r2,r2,r5
    c118:	3821883a 	mov	r16,r7
    c11c:	003f3106 	br	bde4 <__adddf3+0x31c>
    c120:	28005d1e 	bne	r5,zero,c298 <__adddf3+0x7d0>
    c124:	1000121e 	bne	r2,zero,c170 <__adddf3+0x6a8>
    c128:	0021883a 	mov	r16,zero
    c12c:	4015883a 	mov	r10,r8
    c130:	00bfffc4 	movi	r2,-1
    c134:	003f4806 	br	be58 <__adddf3+0x390>
    c138:	7363883a 	add	r17,r14,r13
    c13c:	5255883a 	add	r10,r10,r9
    c140:	8b91803a 	cmpltu	r8,r17,r14
    c144:	5211883a 	add	r8,r10,r8
    c148:	4080202c 	andhi	r2,r8,128
    c14c:	103fa91e 	bne	r2,zero,bff4 <__adddf3+0x52c>
    c150:	04800044 	movi	r18,1
    c154:	003f1c06 	br	bdc8 <__adddf3+0x300>
    c158:	7363c83a 	sub	r17,r14,r13
    c15c:	5255c83a 	sub	r10,r10,r9
    c160:	7451803a 	cmpltu	r8,r14,r17
    c164:	5211c83a 	sub	r8,r10,r8
    c168:	04800044 	movi	r18,1
    c16c:	003e8706 	br	bb8c <__adddf3+0xc4>
    c170:	4806977a 	slli	r3,r9,29
    c174:	00880034 	movhi	r2,8192
    c178:	10bfffc4 	addi	r2,r2,-1
    c17c:	3084703a 	and	r2,r6,r2
    c180:	4814d0fa 	srli	r10,r9,3
    c184:	10c4b03a 	or	r2,r2,r3
    c188:	3821883a 	mov	r16,r7
    c18c:	003f3006 	br	be50 <__adddf3+0x388>
    c190:	500a977a 	slli	r5,r10,29
    c194:	00880034 	movhi	r2,8192
    c198:	10bfffc4 	addi	r2,r2,-1
    c19c:	2084703a 	and	r2,r4,r2
    c1a0:	5014d0fa 	srli	r10,r10,3
    c1a4:	1144b03a 	or	r2,r2,r5
    c1a8:	003f1006 	br	bdec <__adddf3+0x324>
    c1ac:	5394b03a 	or	r10,r10,r14
    c1b0:	5022c03a 	cmpne	r17,r10,zero
    c1b4:	003f5006 	br	bef8 <__adddf3+0x430>
    c1b8:	1c7ff804 	addi	r17,r3,-32
    c1bc:	19400820 	cmpeqi	r5,r3,32
    c1c0:	5448d83a 	srl	r4,r10,r17
    c1c4:	2800041e 	bne	r5,zero,c1d8 <__adddf3+0x710>
    c1c8:	01401004 	movi	r5,64
    c1cc:	28c7c83a 	sub	r3,r5,r3
    c1d0:	50d4983a 	sll	r10,r10,r3
    c1d4:	729cb03a 	or	r14,r14,r10
    c1d8:	7022c03a 	cmpne	r17,r14,zero
    c1dc:	8922b03a 	or	r17,r17,r4
    c1e0:	003f9c06 	br	c054 <__adddf3+0x58c>
    c1e4:	10005a1e 	bne	r2,zero,c350 <__adddf3+0x888>
    c1e8:	4804977a 	slli	r2,r9,29
    c1ec:	00c80034 	movhi	r3,8192
    c1f0:	18ffffc4 	addi	r3,r3,-1
    c1f4:	30cc703a 	and	r6,r6,r3
    c1f8:	4814d0fa 	srli	r10,r9,3
    c1fc:	1184b03a 	or	r2,r2,r6
    c200:	003f1306 	br	be50 <__adddf3+0x388>
    c204:	6ba3c83a 	sub	r17,r13,r14
    c208:	4a95c83a 	sub	r10,r9,r10
    c20c:	6c51803a 	cmpltu	r8,r13,r17
    c210:	5211c83a 	sub	r8,r10,r8
    c214:	3821883a 	mov	r16,r7
    c218:	04800044 	movi	r18,1
    c21c:	003e5b06 	br	bb8c <__adddf3+0xc4>
    c220:	103f7126 	beq	r2,zero,bfe8 <__adddf3+0x520>
    c224:	4808977a 	slli	r4,r9,29
    c228:	00880034 	movhi	r2,8192
    c22c:	10bfffc4 	addi	r2,r2,-1
    c230:	3084703a 	and	r2,r6,r2
    c234:	4814d0fa 	srli	r10,r9,3
    c238:	1104b03a 	or	r2,r2,r4
    c23c:	3821883a 	mov	r16,r7
    c240:	003eea06 	br	bdec <__adddf3+0x324>
    c244:	5006977a 	slli	r3,r10,29
    c248:	00880034 	movhi	r2,8192
    c24c:	10bfffc4 	addi	r2,r2,-1
    c250:	2084703a 	and	r2,r4,r2
    c254:	5014d0fa 	srli	r10,r10,3
    c258:	10c4b03a 	or	r2,r2,r3
    c25c:	003efc06 	br	be50 <__adddf3+0x388>
    c260:	4806977a 	slli	r3,r9,29
    c264:	00880034 	movhi	r2,8192
    c268:	10bfffc4 	addi	r2,r2,-1
    c26c:	3084703a 	and	r2,r6,r2
    c270:	4814d0fa 	srli	r10,r9,3
    c274:	10c4b03a 	or	r2,r2,r3
    c278:	003ef506 	br	be50 <__adddf3+0x388>
    c27c:	4808977a 	slli	r4,r9,29
    c280:	00880034 	movhi	r2,8192
    c284:	10bfffc4 	addi	r2,r2,-1
    c288:	3084703a 	and	r2,r6,r2
    c28c:	4814d0fa 	srli	r10,r9,3
    c290:	1104b03a 	or	r2,r2,r4
    c294:	003ed306 	br	bde4 <__adddf3+0x31c>
    c298:	500a977a 	slli	r5,r10,29
    c29c:	5014d0fa 	srli	r10,r10,3
    c2a0:	10001626 	beq	r2,zero,c2fc <__adddf3+0x834>
    c2a4:	00c80034 	movhi	r3,8192
    c2a8:	18ffffc4 	addi	r3,r3,-1
    c2ac:	20c4703a 	and	r2,r4,r3
    c2b0:	5100022c 	andhi	r4,r10,8
    c2b4:	1144b03a 	or	r2,r2,r5
    c2b8:	203ee526 	beq	r4,zero,be50 <__adddf3+0x388>
    c2bc:	4808d0fa 	srli	r4,r9,3
    c2c0:	2140022c 	andhi	r5,r4,8
    c2c4:	283ee21e 	bne	r5,zero,be50 <__adddf3+0x388>
    c2c8:	4812977a 	slli	r9,r9,29
    c2cc:	30c4703a 	and	r2,r6,r3
    c2d0:	3821883a 	mov	r16,r7
    c2d4:	1244b03a 	or	r2,r2,r9
    c2d8:	2015883a 	mov	r10,r4
    c2dc:	003edc06 	br	be50 <__adddf3+0x388>
    c2e0:	4804977a 	slli	r2,r9,29
    c2e4:	01080034 	movhi	r4,8192
    c2e8:	213fffc4 	addi	r4,r4,-1
    c2ec:	310c703a 	and	r6,r6,r4
    c2f0:	4814d0fa 	srli	r10,r9,3
    c2f4:	1184b03a 	or	r2,r2,r6
    c2f8:	003ebc06 	br	bdec <__adddf3+0x324>
    c2fc:	00880034 	movhi	r2,8192
    c300:	10bfffc4 	addi	r2,r2,-1
    c304:	2084703a 	and	r2,r4,r2
    c308:	1144b03a 	or	r2,r2,r5
    c30c:	003ed006 	br	be50 <__adddf3+0x388>
    c310:	193ff804 	addi	r4,r3,-32
    c314:	19400820 	cmpeqi	r5,r3,32
    c318:	5108d83a 	srl	r4,r10,r4
    c31c:	2800041e 	bne	r5,zero,c330 <__adddf3+0x868>
    c320:	01401004 	movi	r5,64
    c324:	28c7c83a 	sub	r3,r5,r3
    c328:	50d4983a 	sll	r10,r10,r3
    c32c:	729cb03a 	or	r14,r14,r10
    c330:	7022c03a 	cmpne	r17,r14,zero
    c334:	8922b03a 	or	r17,r17,r4
    c338:	003eef06 	br	bef8 <__adddf3+0x430>
    c33c:	7363883a 	add	r17,r14,r13
    c340:	5255883a 	add	r10,r10,r9
    c344:	8b51803a 	cmpltu	r8,r17,r13
    c348:	5211883a 	add	r8,r10,r8
    c34c:	003f7e06 	br	c148 <__adddf3+0x680>
    c350:	4b50b03a 	or	r8,r9,r13
    c354:	500a977a 	slli	r5,r10,29
    c358:	5014d0fa 	srli	r10,r10,3
    c35c:	403fe726 	beq	r8,zero,c2fc <__adddf3+0x834>
    c360:	00c80034 	movhi	r3,8192
    c364:	18ffffc4 	addi	r3,r3,-1
    c368:	20c4703a 	and	r2,r4,r3
    c36c:	5100022c 	andhi	r4,r10,8
    c370:	1144b03a 	or	r2,r2,r5
    c374:	203eb626 	beq	r4,zero,be50 <__adddf3+0x388>
    c378:	4808d0fa 	srli	r4,r9,3
    c37c:	2140022c 	andhi	r5,r4,8
    c380:	283eb31e 	bne	r5,zero,be50 <__adddf3+0x388>
    c384:	4804977a 	slli	r2,r9,29
    c388:	30cc703a 	and	r6,r6,r3
    c38c:	3821883a 	mov	r16,r7
    c390:	3084b03a 	or	r2,r6,r2
    c394:	2015883a 	mov	r10,r4
    c398:	003ead06 	br	be50 <__adddf3+0x388>
    c39c:	8a04b03a 	or	r2,r17,r8
    c3a0:	103f1126 	beq	r2,zero,bfe8 <__adddf3+0x520>
    c3a4:	003e8806 	br	bdc8 <__adddf3+0x300>
    c3a8:	0005883a 	mov	r2,zero
    c3ac:	00c1ffc4 	movi	r3,2047
    c3b0:	0011883a 	mov	r8,zero
    c3b4:	003e2a06 	br	bc60 <__adddf3+0x198>

0000c3b8 <__divdf3>:
    c3b8:	2804d53a 	srli	r2,r5,20
    c3bc:	defff204 	addi	sp,sp,-56
    c3c0:	dc000415 	stw	r16,16(sp)
    c3c4:	04000434 	movhi	r16,16
    c3c8:	ddc00b15 	stw	r23,44(sp)
    c3cc:	dd800a15 	stw	r22,40(sp)
    c3d0:	dc800615 	stw	r18,24(sp)
    c3d4:	843fffc4 	addi	r16,r16,-1
    c3d8:	dfc00d15 	stw	ra,52(sp)
    c3dc:	df000c15 	stw	fp,48(sp)
    c3e0:	dd400915 	stw	r21,36(sp)
    c3e4:	dd000815 	stw	r20,32(sp)
    c3e8:	dcc00715 	stw	r19,28(sp)
    c3ec:	dc400515 	stw	r17,20(sp)
    c3f0:	1081ffcc 	andi	r2,r2,2047
    c3f4:	282cd7fa 	srli	r22,r5,31
    c3f8:	302f883a 	mov	r23,r6
    c3fc:	2025883a 	mov	r18,r4
    c400:	2c20703a 	and	r16,r5,r16
    c404:	10006a26 	beq	r2,zero,c5b0 <__divdf3+0x1f8>
    c408:	10c1ffe0 	cmpeqi	r3,r2,2047
    c40c:	18007d1e 	bne	r3,zero,c604 <__divdf3+0x24c>
    c410:	2028d77a 	srli	r20,r4,29
    c414:	800a90fa 	slli	r5,r16,3
    c418:	202490fa 	slli	r18,r4,3
    c41c:	14ff0044 	addi	r19,r2,-1023
    c420:	a14ab03a 	or	r5,r20,r5
    c424:	2d002034 	orhi	r20,r5,128
    c428:	0021883a 	mov	r16,zero
    c42c:	0039883a 	mov	fp,zero
    c430:	3804d53a 	srli	r2,r7,20
    c434:	00c00434 	movhi	r3,16
    c438:	18ffffc4 	addi	r3,r3,-1
    c43c:	1081ffcc 	andi	r2,r2,2047
    c440:	3810d7fa 	srli	r8,r7,31
    c444:	38e2703a 	and	r17,r7,r3
    c448:	10004626 	beq	r2,zero,c564 <__divdf3+0x1ac>
    c44c:	10c1ffe0 	cmpeqi	r3,r2,2047
    c450:	1800731e 	bne	r3,zero,c620 <__divdf3+0x268>
    c454:	880690fa 	slli	r3,r17,3
    c458:	b822d77a 	srli	r17,r23,29
    c45c:	b81290fa 	slli	r9,r23,3
    c460:	10bf0044 	addi	r2,r2,-1023
    c464:	88c6b03a 	or	r3,r17,r3
    c468:	1c402034 	orhi	r17,r3,128
    c46c:	98a7c83a 	sub	r19,r19,r2
    c470:	0007883a 	mov	r3,zero
    c474:	80800428 	cmpgeui	r2,r16,16
    c478:	b22af03a 	xor	r21,r22,r8
    c47c:	1000ab1e 	bne	r2,zero,c72c <__divdf3+0x374>
    c480:	800490ba 	slli	r2,r16,2
    c484:	01800074 	movhi	r6,1
    c488:	118d883a 	add	r6,r2,r6
    c48c:	30b12517 	ldw	r2,-15212(r6)
    c490:	1000683a 	jmp	r2
    c494:	0000c72c 	andhi	zero,zero,796
    c498:	0000c540 	call	c54 <lcdhex_display_task+0xd0>
    c49c:	0000c4f0 	cmpltui	zero,zero,787
    c4a0:	0000c550 	cmplti	zero,zero,789
    c4a4:	0000c4f0 	cmpltui	zero,zero,787
    c4a8:	0000c6d0 	cmplti	zero,zero,795
    c4ac:	0000c4f0 	cmpltui	zero,zero,787
    c4b0:	0000c550 	cmplti	zero,zero,789
    c4b4:	0000c540 	call	c54 <lcdhex_display_task+0xd0>
    c4b8:	0000c540 	call	c54 <lcdhex_display_task+0xd0>
    c4bc:	0000c6d0 	cmplti	zero,zero,795
    c4c0:	0000c550 	cmplti	zero,zero,789
    c4c4:	0000c4d4 	movui	zero,787
    c4c8:	0000c4d4 	movui	zero,787
    c4cc:	0000c4d4 	movui	zero,787
    c4d0:	0000c6e8 	cmpgeui	zero,zero,795
    c4d4:	b02b883a 	mov	r21,r22
    c4d8:	e08000a0 	cmpeqi	r2,fp,2
    c4dc:	1000181e 	bne	r2,zero,c540 <__divdf3+0x188>
    c4e0:	e08000e0 	cmpeqi	r2,fp,3
    c4e4:	1001c21e 	bne	r2,zero,cbf0 <__divdf3+0x838>
    c4e8:	e0800060 	cmpeqi	r2,fp,1
    c4ec:	10006526 	beq	r2,zero,c684 <__divdf3+0x2cc>
    c4f0:	0007883a 	mov	r3,zero
    c4f4:	000b883a 	mov	r5,zero
    c4f8:	0025883a 	mov	r18,zero
    c4fc:	1806953a 	slli	r3,r3,20
    c500:	a82a97fa 	slli	r21,r21,31
    c504:	9005883a 	mov	r2,r18
    c508:	1946b03a 	or	r3,r3,r5
    c50c:	1d46b03a 	or	r3,r3,r21
    c510:	dfc00d17 	ldw	ra,52(sp)
    c514:	df000c17 	ldw	fp,48(sp)
    c518:	ddc00b17 	ldw	r23,44(sp)
    c51c:	dd800a17 	ldw	r22,40(sp)
    c520:	dd400917 	ldw	r21,36(sp)
    c524:	dd000817 	ldw	r20,32(sp)
    c528:	dcc00717 	ldw	r19,28(sp)
    c52c:	dc800617 	ldw	r18,24(sp)
    c530:	dc400517 	ldw	r17,20(sp)
    c534:	dc000417 	ldw	r16,16(sp)
    c538:	dec00e04 	addi	sp,sp,56
    c53c:	f800283a 	ret
    c540:	00c1ffc4 	movi	r3,2047
    c544:	000b883a 	mov	r5,zero
    c548:	0025883a 	mov	r18,zero
    c54c:	003feb06 	br	c4fc <__divdf3+0x144>
    c550:	402b883a 	mov	r21,r8
    c554:	8829883a 	mov	r20,r17
    c558:	4825883a 	mov	r18,r9
    c55c:	1839883a 	mov	fp,r3
    c560:	003fdd06 	br	c4d8 <__divdf3+0x120>
    c564:	8dd2b03a 	or	r9,r17,r23
    c568:	48004226 	beq	r9,zero,c674 <__divdf3+0x2bc>
    c56c:	da000015 	stw	r8,0(sp)
    c570:	88013d26 	beq	r17,zero,ca68 <__divdf3+0x6b0>
    c574:	8809883a 	mov	r4,r17
    c578:	000dfa80 	call	dfa8 <__clzsi2>
    c57c:	da000017 	ldw	r8,0(sp)
    c580:	117ffd44 	addi	r5,r2,-11
    c584:	01000744 	movi	r4,29
    c588:	127ffe04 	addi	r9,r2,-8
    c58c:	2149c83a 	sub	r4,r4,r5
    c590:	8a46983a 	sll	r3,r17,r9
    c594:	b908d83a 	srl	r4,r23,r4
    c598:	ba52983a 	sll	r9,r23,r9
    c59c:	20e2b03a 	or	r17,r4,r3
    c5a0:	14c5883a 	add	r2,r2,r19
    c5a4:	14c0fcc4 	addi	r19,r2,1011
    c5a8:	0007883a 	mov	r3,zero
    c5ac:	003fb106 	br	c474 <__divdf3+0xbc>
    c5b0:	8128b03a 	or	r20,r16,r4
    c5b4:	2023883a 	mov	r17,r4
    c5b8:	a0002926 	beq	r20,zero,c660 <__divdf3+0x2a8>
    c5bc:	d9c00015 	stw	r7,0(sp)
    c5c0:	80013526 	beq	r16,zero,ca98 <__divdf3+0x6e0>
    c5c4:	8009883a 	mov	r4,r16
    c5c8:	000dfa80 	call	dfa8 <__clzsi2>
    c5cc:	d9c00017 	ldw	r7,0(sp)
    c5d0:	10fffd44 	addi	r3,r2,-11
    c5d4:	05000744 	movi	r20,29
    c5d8:	113ffe04 	addi	r4,r2,-8
    c5dc:	a0e9c83a 	sub	r20,r20,r3
    c5e0:	810a983a 	sll	r5,r16,r4
    c5e4:	8d28d83a 	srl	r20,r17,r20
    c5e8:	8924983a 	sll	r18,r17,r4
    c5ec:	a168b03a 	or	r20,r20,r5
    c5f0:	04ff0344 	movi	r19,-1011
    c5f4:	98a7c83a 	sub	r19,r19,r2
    c5f8:	0021883a 	mov	r16,zero
    c5fc:	0039883a 	mov	fp,zero
    c600:	003f8b06 	br	c430 <__divdf3+0x78>
    c604:	8128b03a 	or	r20,r16,r4
    c608:	a000101e 	bne	r20,zero,c64c <__divdf3+0x294>
    c60c:	0025883a 	mov	r18,zero
    c610:	04000204 	movi	r16,8
    c614:	04c1ffc4 	movi	r19,2047
    c618:	07000084 	movi	fp,2
    c61c:	003f8406 	br	c430 <__divdf3+0x78>
    c620:	8dd2b03a 	or	r9,r17,r23
    c624:	9cfe0044 	addi	r19,r19,-2047
    c628:	4800041e 	bne	r9,zero,c63c <__divdf3+0x284>
    c62c:	84000094 	ori	r16,r16,2
    c630:	0023883a 	mov	r17,zero
    c634:	00c00084 	movi	r3,2
    c638:	003f8e06 	br	c474 <__divdf3+0xbc>
    c63c:	840000d4 	ori	r16,r16,3
    c640:	b813883a 	mov	r9,r23
    c644:	00c000c4 	movi	r3,3
    c648:	003f8a06 	br	c474 <__divdf3+0xbc>
    c64c:	8029883a 	mov	r20,r16
    c650:	04c1ffc4 	movi	r19,2047
    c654:	04000304 	movi	r16,12
    c658:	070000c4 	movi	fp,3
    c65c:	003f7406 	br	c430 <__divdf3+0x78>
    c660:	0025883a 	mov	r18,zero
    c664:	04000104 	movi	r16,4
    c668:	0027883a 	mov	r19,zero
    c66c:	07000044 	movi	fp,1
    c670:	003f6f06 	br	c430 <__divdf3+0x78>
    c674:	84000054 	ori	r16,r16,1
    c678:	0023883a 	mov	r17,zero
    c67c:	00c00044 	movi	r3,1
    c680:	003f7c06 	br	c474 <__divdf3+0xbc>
    c684:	9c40ffc4 	addi	r17,r19,1023
    c688:	0440c70e 	bge	zero,r17,c9a8 <__divdf3+0x5f0>
    c68c:	908001cc 	andi	r2,r18,7
    c690:	1001331e 	bne	r2,zero,cb60 <__divdf3+0x7a8>
    c694:	900cd0fa 	srli	r6,r18,3
    c698:	a080402c 	andhi	r2,r20,256
    c69c:	10000426 	beq	r2,zero,c6b0 <__divdf3+0x2f8>
    c6a0:	00bfc034 	movhi	r2,65280
    c6a4:	10bfffc4 	addi	r2,r2,-1
    c6a8:	a0a8703a 	and	r20,r20,r2
    c6ac:	9c410004 	addi	r17,r19,1024
    c6b0:	8881ffc8 	cmpgei	r2,r17,2047
    c6b4:	103fa21e 	bne	r2,zero,c540 <__divdf3+0x188>
    c6b8:	a008977a 	slli	r4,r20,29
    c6bc:	a00a927a 	slli	r5,r20,9
    c6c0:	88c1ffcc 	andi	r3,r17,2047
    c6c4:	21a4b03a 	or	r18,r4,r6
    c6c8:	280ad33a 	srli	r5,r5,12
    c6cc:	003f8b06 	br	c4fc <__divdf3+0x144>
    c6d0:	01400434 	movhi	r5,16
    c6d4:	002b883a 	mov	r21,zero
    c6d8:	297fffc4 	addi	r5,r5,-1
    c6dc:	04bfffc4 	movi	r18,-1
    c6e0:	00c1ffc4 	movi	r3,2047
    c6e4:	003f8506 	br	c4fc <__divdf3+0x144>
    c6e8:	a080022c 	andhi	r2,r20,8
    c6ec:	10000926 	beq	r2,zero,c714 <__divdf3+0x35c>
    c6f0:	8880022c 	andhi	r2,r17,8
    c6f4:	1000071e 	bne	r2,zero,c714 <__divdf3+0x35c>
    c6f8:	00800434 	movhi	r2,16
    c6fc:	89400234 	orhi	r5,r17,8
    c700:	10bfffc4 	addi	r2,r2,-1
    c704:	288a703a 	and	r5,r5,r2
    c708:	402b883a 	mov	r21,r8
    c70c:	4825883a 	mov	r18,r9
    c710:	003ff306 	br	c6e0 <__divdf3+0x328>
    c714:	00800434 	movhi	r2,16
    c718:	a1400234 	orhi	r5,r20,8
    c71c:	10bfffc4 	addi	r2,r2,-1
    c720:	288a703a 	and	r5,r5,r2
    c724:	b02b883a 	mov	r21,r22
    c728:	003fed06 	br	c6e0 <__divdf3+0x328>
    c72c:	8d00c836 	bltu	r17,r20,ca50 <__divdf3+0x698>
    c730:	8d00c626 	beq	r17,r20,ca4c <__divdf3+0x694>
    c734:	9cffffc4 	addi	r19,r19,-1
    c738:	0021883a 	mov	r16,zero
    c73c:	8806923a 	slli	r3,r17,8
    c740:	480cd63a 	srli	r6,r9,24
    c744:	4804923a 	slli	r2,r9,8
    c748:	1838d43a 	srli	fp,r3,16
    c74c:	a009883a 	mov	r4,r20
    c750:	30ecb03a 	or	r22,r6,r3
    c754:	e00b883a 	mov	r5,fp
    c758:	d8800015 	stw	r2,0(sp)
    c75c:	000ba080 	call	ba08 <__udivsi3>
    c760:	a009883a 	mov	r4,r20
    c764:	e00b883a 	mov	r5,fp
    c768:	d8800115 	stw	r2,4(sp)
    c76c:	000ba6c0 	call	ba6c <__umodsi3>
    c770:	d8c00117 	ldw	r3,4(sp)
    c774:	1004943a 	slli	r2,r2,16
    c778:	9008d43a 	srli	r4,r18,16
    c77c:	b5ffffcc 	andi	r23,r22,65535
    c780:	b8e3383a 	mul	r17,r23,r3
    c784:	2088b03a 	or	r4,r4,r2
    c788:	2440042e 	bgeu	r4,r17,c79c <__divdf3+0x3e4>
    c78c:	2589883a 	add	r4,r4,r22
    c790:	18bfffc4 	addi	r2,r3,-1
    c794:	2580d32e 	bgeu	r4,r22,cae4 <__divdf3+0x72c>
    c798:	1007883a 	mov	r3,r2
    c79c:	2463c83a 	sub	r17,r4,r17
    c7a0:	e00b883a 	mov	r5,fp
    c7a4:	8809883a 	mov	r4,r17
    c7a8:	d8c00115 	stw	r3,4(sp)
    c7ac:	000ba080 	call	ba08 <__udivsi3>
    c7b0:	8809883a 	mov	r4,r17
    c7b4:	e00b883a 	mov	r5,fp
    c7b8:	1029883a 	mov	r20,r2
    c7bc:	000ba6c0 	call	ba6c <__umodsi3>
    c7c0:	1008943a 	slli	r4,r2,16
    c7c4:	bd13383a 	mul	r9,r23,r20
    c7c8:	94bfffcc 	andi	r18,r18,65535
    c7cc:	9108b03a 	or	r4,r18,r4
    c7d0:	d8c00117 	ldw	r3,4(sp)
    c7d4:	2240042e 	bgeu	r4,r9,c7e8 <__divdf3+0x430>
    c7d8:	2589883a 	add	r4,r4,r22
    c7dc:	a0bfffc4 	addi	r2,r20,-1
    c7e0:	2580bc2e 	bgeu	r4,r22,cad4 <__divdf3+0x71c>
    c7e4:	1029883a 	mov	r20,r2
    c7e8:	180a943a 	slli	r5,r3,16
    c7ec:	d8800017 	ldw	r2,0(sp)
    c7f0:	2249c83a 	sub	r4,r4,r9
    c7f4:	2d28b03a 	or	r20,r5,r20
    c7f8:	100ed43a 	srli	r7,r2,16
    c7fc:	123fffcc 	andi	r8,r2,65535
    c800:	a00ad43a 	srli	r5,r20,16
    c804:	a0bfffcc 	andi	r2,r20,65535
    c808:	1225383a 	mul	r18,r2,r8
    c80c:	2a15383a 	mul	r10,r5,r8
    c810:	3887383a 	mul	r3,r7,r2
    c814:	9004d43a 	srli	r2,r18,16
    c818:	29cb383a 	mul	r5,r5,r7
    c81c:	1a87883a 	add	r3,r3,r10
    c820:	10c5883a 	add	r2,r2,r3
    c824:	1280022e 	bgeu	r2,r10,c830 <__divdf3+0x478>
    c828:	00c00074 	movhi	r3,1
    c82c:	28cb883a 	add	r5,r5,r3
    c830:	1006d43a 	srli	r3,r2,16
    c834:	1004943a 	slli	r2,r2,16
    c838:	94bfffcc 	andi	r18,r18,65535
    c83c:	1947883a 	add	r3,r3,r5
    c840:	14a5883a 	add	r18,r2,r18
    c844:	20c07636 	bltu	r4,r3,ca20 <__divdf3+0x668>
    c848:	20c07426 	beq	r4,r3,ca1c <__divdf3+0x664>
    c84c:	84a5c83a 	sub	r18,r16,r18
    c850:	20c9c83a 	sub	r4,r4,r3
    c854:	84a1803a 	cmpltu	r16,r16,r18
    c858:	2421c83a 	sub	r16,r4,r16
    c85c:	9c40ffc4 	addi	r17,r19,1023
    c860:	b400ba26 	beq	r22,r16,cb4c <__divdf3+0x794>
    c864:	8009883a 	mov	r4,r16
    c868:	e00b883a 	mov	r5,fp
    c86c:	da000315 	stw	r8,12(sp)
    c870:	d9c00215 	stw	r7,8(sp)
    c874:	000ba080 	call	ba08 <__udivsi3>
    c878:	8009883a 	mov	r4,r16
    c87c:	e00b883a 	mov	r5,fp
    c880:	d8800115 	stw	r2,4(sp)
    c884:	000ba6c0 	call	ba6c <__umodsi3>
    c888:	da400117 	ldw	r9,4(sp)
    c88c:	1004943a 	slli	r2,r2,16
    c890:	9008d43a 	srli	r4,r18,16
    c894:	ba61383a 	mul	r16,r23,r9
    c898:	d9c00217 	ldw	r7,8(sp)
    c89c:	2088b03a 	or	r4,r4,r2
    c8a0:	da000317 	ldw	r8,12(sp)
    c8a4:	2400062e 	bgeu	r4,r16,c8c0 <__divdf3+0x508>
    c8a8:	2589883a 	add	r4,r4,r22
    c8ac:	48bfffc4 	addi	r2,r9,-1
    c8b0:	2580b536 	bltu	r4,r22,cb88 <__divdf3+0x7d0>
    c8b4:	2400b42e 	bgeu	r4,r16,cb88 <__divdf3+0x7d0>
    c8b8:	4a7fff84 	addi	r9,r9,-2
    c8bc:	2589883a 	add	r4,r4,r22
    c8c0:	2421c83a 	sub	r16,r4,r16
    c8c4:	8009883a 	mov	r4,r16
    c8c8:	e00b883a 	mov	r5,fp
    c8cc:	da000315 	stw	r8,12(sp)
    c8d0:	da400215 	stw	r9,8(sp)
    c8d4:	d9c00115 	stw	r7,4(sp)
    c8d8:	000ba080 	call	ba08 <__udivsi3>
    c8dc:	8009883a 	mov	r4,r16
    c8e0:	e00b883a 	mov	r5,fp
    c8e4:	1021883a 	mov	r16,r2
    c8e8:	000ba6c0 	call	ba6c <__umodsi3>
    c8ec:	1004943a 	slli	r2,r2,16
    c8f0:	bc2f383a 	mul	r23,r23,r16
    c8f4:	90ffffcc 	andi	r3,r18,65535
    c8f8:	1886b03a 	or	r3,r3,r2
    c8fc:	d9c00117 	ldw	r7,4(sp)
    c900:	da400217 	ldw	r9,8(sp)
    c904:	da000317 	ldw	r8,12(sp)
    c908:	1dc0062e 	bgeu	r3,r23,c924 <__divdf3+0x56c>
    c90c:	1d87883a 	add	r3,r3,r22
    c910:	80bfffc4 	addi	r2,r16,-1
    c914:	1d809a36 	bltu	r3,r22,cb80 <__divdf3+0x7c8>
    c918:	1dc0992e 	bgeu	r3,r23,cb80 <__divdf3+0x7c8>
    c91c:	843fff84 	addi	r16,r16,-2
    c920:	1d87883a 	add	r3,r3,r22
    c924:	4808943a 	slli	r4,r9,16
    c928:	1defc83a 	sub	r23,r3,r23
    c92c:	2424b03a 	or	r18,r4,r16
    c930:	900ad43a 	srli	r5,r18,16
    c934:	90bfffcc 	andi	r2,r18,65535
    c938:	4087383a 	mul	r3,r8,r2
    c93c:	3885383a 	mul	r2,r7,r2
    c940:	2a11383a 	mul	r8,r5,r8
    c944:	1808d43a 	srli	r4,r3,16
    c948:	394f383a 	mul	r7,r7,r5
    c94c:	1205883a 	add	r2,r2,r8
    c950:	2089883a 	add	r4,r4,r2
    c954:	2200022e 	bgeu	r4,r8,c960 <__divdf3+0x5a8>
    c958:	00800074 	movhi	r2,1
    c95c:	388f883a 	add	r7,r7,r2
    c960:	2004d43a 	srli	r2,r4,16
    c964:	2008943a 	slli	r4,r4,16
    c968:	18ffffcc 	andi	r3,r3,65535
    c96c:	11cf883a 	add	r7,r2,r7
    c970:	20c9883a 	add	r4,r4,r3
    c974:	b9c00436 	bltu	r23,r7,c988 <__divdf3+0x5d0>
    c978:	b9c00226 	beq	r23,r7,c984 <__divdf3+0x5cc>
    c97c:	94800054 	ori	r18,r18,1
    c980:	003f4106 	br	c688 <__divdf3+0x2d0>
    c984:	203f4026 	beq	r4,zero,c688 <__divdf3+0x2d0>
    c988:	b5ef883a 	add	r23,r22,r23
    c98c:	90bfffc4 	addi	r2,r18,-1
    c990:	bd806936 	bltu	r23,r22,cb38 <__divdf3+0x780>
    c994:	b9c08636 	bltu	r23,r7,cbb0 <__divdf3+0x7f8>
    c998:	b9c09a26 	beq	r23,r7,cc04 <__divdf3+0x84c>
    c99c:	1025883a 	mov	r18,r2
    c9a0:	003ff606 	br	c97c <__divdf3+0x5c4>
    c9a4:	04bfffc4 	movi	r18,-1
    c9a8:	01400044 	movi	r5,1
    c9ac:	2c4bc83a 	sub	r5,r5,r17
    c9b0:	28800e48 	cmpgei	r2,r5,57
    c9b4:	103ece1e 	bne	r2,zero,c4f0 <__divdf3+0x138>
    c9b8:	28800808 	cmpgei	r2,r5,32
    c9bc:	10004d1e 	bne	r2,zero,caf4 <__divdf3+0x73c>
    c9c0:	98810784 	addi	r2,r19,1054
    c9c4:	a086983a 	sll	r3,r20,r2
    c9c8:	9148d83a 	srl	r4,r18,r5
    c9cc:	9084983a 	sll	r2,r18,r2
    c9d0:	a14ad83a 	srl	r5,r20,r5
    c9d4:	1924b03a 	or	r18,r3,r4
    c9d8:	1004c03a 	cmpne	r2,r2,zero
    c9dc:	90a4b03a 	or	r18,r18,r2
    c9e0:	908001cc 	andi	r2,r18,7
    c9e4:	10000726 	beq	r2,zero,ca04 <__divdf3+0x64c>
    c9e8:	908003cc 	andi	r2,r18,15
    c9ec:	10800120 	cmpeqi	r2,r2,4
    c9f0:	1000041e 	bne	r2,zero,ca04 <__divdf3+0x64c>
    c9f4:	90800104 	addi	r2,r18,4
    c9f8:	14a5803a 	cmpltu	r18,r2,r18
    c9fc:	2c8b883a 	add	r5,r5,r18
    ca00:	1025883a 	mov	r18,r2
    ca04:	2880202c 	andhi	r2,r5,128
    ca08:	10007526 	beq	r2,zero,cbe0 <__divdf3+0x828>
    ca0c:	00c00044 	movi	r3,1
    ca10:	000b883a 	mov	r5,zero
    ca14:	0025883a 	mov	r18,zero
    ca18:	003eb806 	br	c4fc <__divdf3+0x144>
    ca1c:	84bf8b2e 	bgeu	r16,r18,c84c <__divdf3+0x494>
    ca20:	d8800017 	ldw	r2,0(sp)
    ca24:	80a1883a 	add	r16,r16,r2
    ca28:	8085803a 	cmpltu	r2,r16,r2
    ca2c:	1585883a 	add	r2,r2,r22
    ca30:	2089883a 	add	r4,r4,r2
    ca34:	a0bfffc4 	addi	r2,r20,-1
    ca38:	b100222e 	bgeu	r22,r4,cac4 <__divdf3+0x70c>
    ca3c:	20c05536 	bltu	r4,r3,cb94 <__divdf3+0x7dc>
    ca40:	19005326 	beq	r3,r4,cb90 <__divdf3+0x7d8>
    ca44:	1029883a 	mov	r20,r2
    ca48:	003f8006 	br	c84c <__divdf3+0x494>
    ca4c:	927f3936 	bltu	r18,r9,c734 <__divdf3+0x37c>
    ca50:	a00897fa 	slli	r4,r20,31
    ca54:	9004d07a 	srli	r2,r18,1
    ca58:	902097fa 	slli	r16,r18,31
    ca5c:	a028d07a 	srli	r20,r20,1
    ca60:	20a4b03a 	or	r18,r4,r2
    ca64:	003f3506 	br	c73c <__divdf3+0x384>
    ca68:	b809883a 	mov	r4,r23
    ca6c:	000dfa80 	call	dfa8 <__clzsi2>
    ca70:	11400544 	addi	r5,r2,21
    ca74:	29000748 	cmpgei	r4,r5,29
    ca78:	1007883a 	mov	r3,r2
    ca7c:	da000017 	ldw	r8,0(sp)
    ca80:	10800804 	addi	r2,r2,32
    ca84:	203ebf26 	beq	r4,zero,c584 <__divdf3+0x1cc>
    ca88:	18fffe04 	addi	r3,r3,-8
    ca8c:	b8e2983a 	sll	r17,r23,r3
    ca90:	0013883a 	mov	r9,zero
    ca94:	003ec206 	br	c5a0 <__divdf3+0x1e8>
    ca98:	000dfa80 	call	dfa8 <__clzsi2>
    ca9c:	10c00544 	addi	r3,r2,21
    caa0:	19000748 	cmpgei	r4,r3,29
    caa4:	100b883a 	mov	r5,r2
    caa8:	d9c00017 	ldw	r7,0(sp)
    caac:	10800804 	addi	r2,r2,32
    cab0:	203ec826 	beq	r4,zero,c5d4 <__divdf3+0x21c>
    cab4:	297ffe04 	addi	r5,r5,-8
    cab8:	9168983a 	sll	r20,r18,r5
    cabc:	0025883a 	mov	r18,zero
    cac0:	003ecb06 	br	c5f0 <__divdf3+0x238>
    cac4:	b13fdf1e 	bne	r22,r4,ca44 <__divdf3+0x68c>
    cac8:	d9400017 	ldw	r5,0(sp)
    cacc:	817fdd36 	bltu	r16,r5,ca44 <__divdf3+0x68c>
    cad0:	003fda06 	br	ca3c <__divdf3+0x684>
    cad4:	227f432e 	bgeu	r4,r9,c7e4 <__divdf3+0x42c>
    cad8:	a53fff84 	addi	r20,r20,-2
    cadc:	2589883a 	add	r4,r4,r22
    cae0:	003f4106 	br	c7e8 <__divdf3+0x430>
    cae4:	247f2c2e 	bgeu	r4,r17,c798 <__divdf3+0x3e0>
    cae8:	18ffff84 	addi	r3,r3,-2
    caec:	2589883a 	add	r4,r4,r22
    caf0:	003f2a06 	br	c79c <__divdf3+0x3e4>
    caf4:	00fff844 	movi	r3,-31
    caf8:	1c47c83a 	sub	r3,r3,r17
    cafc:	29400820 	cmpeqi	r5,r5,32
    cb00:	a0c6d83a 	srl	r3,r20,r3
    cb04:	2800031e 	bne	r5,zero,cb14 <__divdf3+0x75c>
    cb08:	99410f84 	addi	r5,r19,1086
    cb0c:	a14a983a 	sll	r5,r20,r5
    cb10:	9164b03a 	or	r18,r18,r5
    cb14:	9024c03a 	cmpne	r18,r18,zero
    cb18:	90e4b03a 	or	r18,r18,r3
    cb1c:	910001cc 	andi	r4,r18,7
    cb20:	20002b1e 	bne	r4,zero,cbd0 <__divdf3+0x818>
    cb24:	000b883a 	mov	r5,zero
    cb28:	9024d0fa 	srli	r18,r18,3
    cb2c:	0007883a 	mov	r3,zero
    cb30:	9124b03a 	or	r18,r18,r4
    cb34:	003e7106 	br	c4fc <__divdf3+0x144>
    cb38:	1025883a 	mov	r18,r2
    cb3c:	b9ff8f1e 	bne	r23,r7,c97c <__divdf3+0x5c4>
    cb40:	d8800017 	ldw	r2,0(sp)
    cb44:	20bf8d1e 	bne	r4,r2,c97c <__divdf3+0x5c4>
    cb48:	003ecf06 	br	c688 <__divdf3+0x2d0>
    cb4c:	047f950e 	bge	zero,r17,c9a4 <__divdf3+0x5ec>
    cb50:	000d883a 	mov	r6,zero
    cb54:	01000044 	movi	r4,1
    cb58:	a129883a 	add	r20,r20,r4
    cb5c:	003ece06 	br	c698 <__divdf3+0x2e0>
    cb60:	908003cc 	andi	r2,r18,15
    cb64:	10800118 	cmpnei	r2,r2,4
    cb68:	103eca26 	beq	r2,zero,c694 <__divdf3+0x2dc>
    cb6c:	91800104 	addi	r6,r18,4
    cb70:	013ffec4 	movi	r4,-5
    cb74:	300cd0fa 	srli	r6,r6,3
    cb78:	2489803a 	cmpltu	r4,r4,r18
    cb7c:	003ff606 	br	cb58 <__divdf3+0x7a0>
    cb80:	1021883a 	mov	r16,r2
    cb84:	003f6706 	br	c924 <__divdf3+0x56c>
    cb88:	1013883a 	mov	r9,r2
    cb8c:	003f4c06 	br	c8c0 <__divdf3+0x508>
    cb90:	84bfac2e 	bgeu	r16,r18,ca44 <__divdf3+0x68c>
    cb94:	d8800017 	ldw	r2,0(sp)
    cb98:	a53fff84 	addi	r20,r20,-2
    cb9c:	80a1883a 	add	r16,r16,r2
    cba0:	8085803a 	cmpltu	r2,r16,r2
    cba4:	1585883a 	add	r2,r2,r22
    cba8:	2089883a 	add	r4,r4,r2
    cbac:	003f2706 	br	c84c <__divdf3+0x494>
    cbb0:	d8c00017 	ldw	r3,0(sp)
    cbb4:	94bfff84 	addi	r18,r18,-2
    cbb8:	18c5883a 	add	r2,r3,r3
    cbbc:	10c7803a 	cmpltu	r3,r2,r3
    cbc0:	1d8d883a 	add	r6,r3,r22
    cbc4:	b9af883a 	add	r23,r23,r6
    cbc8:	d8800015 	stw	r2,0(sp)
    cbcc:	003fdb06 	br	cb3c <__divdf3+0x784>
    cbd0:	908003cc 	andi	r2,r18,15
    cbd4:	10800118 	cmpnei	r2,r2,4
    cbd8:	000b883a 	mov	r5,zero
    cbdc:	103f851e 	bne	r2,zero,c9f4 <__divdf3+0x63c>
    cbe0:	2804927a 	slli	r2,r5,9
    cbe4:	2808977a 	slli	r4,r5,29
    cbe8:	100ad33a 	srli	r5,r2,12
    cbec:	003fce06 	br	cb28 <__divdf3+0x770>
    cbf0:	00800434 	movhi	r2,16
    cbf4:	a1400234 	orhi	r5,r20,8
    cbf8:	10bfffc4 	addi	r2,r2,-1
    cbfc:	288a703a 	and	r5,r5,r2
    cc00:	003eb706 	br	c6e0 <__divdf3+0x328>
    cc04:	d8c00017 	ldw	r3,0(sp)
    cc08:	193fe936 	bltu	r3,r4,cbb0 <__divdf3+0x7f8>
    cc0c:	1025883a 	mov	r18,r2
    cc10:	003fcb06 	br	cb40 <__divdf3+0x788>

0000cc14 <__eqdf2>:
    cc14:	2810d53a 	srli	r8,r5,20
    cc18:	3806d53a 	srli	r3,r7,20
    cc1c:	00800434 	movhi	r2,16
    cc20:	4201ffcc 	andi	r8,r8,2047
    cc24:	10bfffc4 	addi	r2,r2,-1
    cc28:	4241ffd8 	cmpnei	r9,r8,2047
    cc2c:	2814d7fa 	srli	r10,r5,31
    cc30:	3816d7fa 	srli	r11,r7,31
    cc34:	288a703a 	and	r5,r5,r2
    cc38:	388e703a 	and	r7,r7,r2
    cc3c:	1881ffcc 	andi	r2,r3,2047
    cc40:	48000626 	beq	r9,zero,cc5c <__eqdf2+0x48>
    cc44:	10c1ffe0 	cmpeqi	r3,r2,2047
    cc48:	1800021e 	bne	r3,zero,cc54 <__eqdf2+0x40>
    cc4c:	4080011e 	bne	r8,r2,cc54 <__eqdf2+0x40>
    cc50:	29c00826 	beq	r5,r7,cc74 <__eqdf2+0x60>
    cc54:	00800044 	movi	r2,1
    cc58:	f800283a 	ret
    cc5c:	2906b03a 	or	r3,r5,r4
    cc60:	183ffc1e 	bne	r3,zero,cc54 <__eqdf2+0x40>
    cc64:	1081ffd8 	cmpnei	r2,r2,2047
    cc68:	103ffa1e 	bne	r2,zero,cc54 <__eqdf2+0x40>
    cc6c:	398eb03a 	or	r7,r7,r6
    cc70:	383ff81e 	bne	r7,zero,cc54 <__eqdf2+0x40>
    cc74:	21bff71e 	bne	r4,r6,cc54 <__eqdf2+0x40>
    cc78:	52c00426 	beq	r10,r11,cc8c <__eqdf2+0x78>
    cc7c:	403ff51e 	bne	r8,zero,cc54 <__eqdf2+0x40>
    cc80:	290ab03a 	or	r5,r5,r4
    cc84:	2804c03a 	cmpne	r2,r5,zero
    cc88:	f800283a 	ret
    cc8c:	0005883a 	mov	r2,zero
    cc90:	f800283a 	ret

0000cc94 <__gedf2>:
    cc94:	2810d53a 	srli	r8,r5,20
    cc98:	3812d53a 	srli	r9,r7,20
    cc9c:	00c00434 	movhi	r3,16
    cca0:	4201ffcc 	andi	r8,r8,2047
    cca4:	18ffffc4 	addi	r3,r3,-1
    cca8:	4281ffd8 	cmpnei	r10,r8,2047
    ccac:	2816d7fa 	srli	r11,r5,31
    ccb0:	3804d7fa 	srli	r2,r7,31
    ccb4:	28ca703a 	and	r5,r5,r3
    ccb8:	38ce703a 	and	r7,r7,r3
    ccbc:	48c1ffcc 	andi	r3,r9,2047
    ccc0:	50000a26 	beq	r10,zero,ccec <__gedf2+0x58>
    ccc4:	1a41ffd8 	cmpnei	r9,r3,2047
    ccc8:	48000c26 	beq	r9,zero,ccfc <__gedf2+0x68>
    cccc:	4000171e 	bne	r8,zero,cd2c <__gedf2+0x98>
    ccd0:	2912b03a 	or	r9,r5,r4
    ccd4:	1800121e 	bne	r3,zero,cd20 <__gedf2+0x8c>
    ccd8:	3994b03a 	or	r10,r7,r6
    ccdc:	5000101e 	bne	r10,zero,cd20 <__gedf2+0x8c>
    cce0:	48000a1e 	bne	r9,zero,cd0c <__gedf2+0x78>
    cce4:	0005883a 	mov	r2,zero
    cce8:	f800283a 	ret
    ccec:	2912b03a 	or	r9,r5,r4
    ccf0:	48001d1e 	bne	r9,zero,cd68 <__gedf2+0xd4>
    ccf4:	1a41ffe0 	cmpeqi	r9,r3,2047
    ccf8:	48000c26 	beq	r9,zero,cd2c <__gedf2+0x98>
    ccfc:	3992b03a 	or	r9,r7,r6
    cd00:	4800191e 	bne	r9,zero,cd68 <__gedf2+0xd4>
    cd04:	40000526 	beq	r8,zero,cd1c <__gedf2+0x88>
    cd08:	58800c26 	beq	r11,r2,cd3c <__gedf2+0xa8>
    cd0c:	00800044 	movi	r2,1
    cd10:	58000526 	beq	r11,zero,cd28 <__gedf2+0x94>
    cd14:	00bfffc4 	movi	r2,-1
    cd18:	f800283a 	ret
    cd1c:	2912b03a 	or	r9,r5,r4
    cd20:	483ff91e 	bne	r9,zero,cd08 <__gedf2+0x74>
    cd24:	103ffb26 	beq	r2,zero,cd14 <__gedf2+0x80>
    cd28:	f800283a 	ret
    cd2c:	183ff61e 	bne	r3,zero,cd08 <__gedf2+0x74>
    cd30:	3992b03a 	or	r9,r7,r6
    cd34:	483ff41e 	bne	r9,zero,cd08 <__gedf2+0x74>
    cd38:	003ff406 	br	cd0c <__gedf2+0x78>
    cd3c:	1a000716 	blt	r3,r8,cd5c <__gedf2+0xc8>
    cd40:	40fff816 	blt	r8,r3,cd24 <__gedf2+0x90>
    cd44:	397ff136 	bltu	r7,r5,cd0c <__gedf2+0x78>
    cd48:	29c00926 	beq	r5,r7,cd70 <__gedf2+0xdc>
    cd4c:	29ffe52e 	bgeu	r5,r7,cce4 <__gedf2+0x50>
    cd50:	583ff026 	beq	r11,zero,cd14 <__gedf2+0x80>
    cd54:	5805883a 	mov	r2,r11
    cd58:	f800283a 	ret
    cd5c:	103fed1e 	bne	r2,zero,cd14 <__gedf2+0x80>
    cd60:	00800044 	movi	r2,1
    cd64:	f800283a 	ret
    cd68:	00bfff84 	movi	r2,-2
    cd6c:	f800283a 	ret
    cd70:	313fe636 	bltu	r6,r4,cd0c <__gedf2+0x78>
    cd74:	21bfdb2e 	bgeu	r4,r6,cce4 <__gedf2+0x50>
    cd78:	003ff506 	br	cd50 <__gedf2+0xbc>

0000cd7c <__ledf2>:
    cd7c:	2810d53a 	srli	r8,r5,20
    cd80:	3812d53a 	srli	r9,r7,20
    cd84:	00c00434 	movhi	r3,16
    cd88:	4201ffcc 	andi	r8,r8,2047
    cd8c:	18ffffc4 	addi	r3,r3,-1
    cd90:	4281ffd8 	cmpnei	r10,r8,2047
    cd94:	2816d7fa 	srli	r11,r5,31
    cd98:	3804d7fa 	srli	r2,r7,31
    cd9c:	28ca703a 	and	r5,r5,r3
    cda0:	38ce703a 	and	r7,r7,r3
    cda4:	48c1ffcc 	andi	r3,r9,2047
    cda8:	50000a26 	beq	r10,zero,cdd4 <__ledf2+0x58>
    cdac:	1a41ffd8 	cmpnei	r9,r3,2047
    cdb0:	48000c26 	beq	r9,zero,cde4 <__ledf2+0x68>
    cdb4:	4000191e 	bne	r8,zero,ce1c <__ledf2+0xa0>
    cdb8:	2912b03a 	or	r9,r5,r4
    cdbc:	18000d1e 	bne	r3,zero,cdf4 <__ledf2+0x78>
    cdc0:	3994b03a 	or	r10,r7,r6
    cdc4:	50000b1e 	bne	r10,zero,cdf4 <__ledf2+0x78>
    cdc8:	48000c1e 	bne	r9,zero,cdfc <__ledf2+0x80>
    cdcc:	0005883a 	mov	r2,zero
    cdd0:	f800283a 	ret
    cdd4:	2912b03a 	or	r9,r5,r4
    cdd8:	48000c1e 	bne	r9,zero,ce0c <__ledf2+0x90>
    cddc:	1a41ffe0 	cmpeqi	r9,r3,2047
    cde0:	48000e26 	beq	r9,zero,ce1c <__ledf2+0xa0>
    cde4:	3992b03a 	or	r9,r7,r6
    cde8:	4800081e 	bne	r9,zero,ce0c <__ledf2+0x90>
    cdec:	4000021e 	bne	r8,zero,cdf8 <__ledf2+0x7c>
    cdf0:	2912b03a 	or	r9,r5,r4
    cdf4:	48000726 	beq	r9,zero,ce14 <__ledf2+0x98>
    cdf8:	58800c26 	beq	r11,r2,ce2c <__ledf2+0xb0>
    cdfc:	00800044 	movi	r2,1
    ce00:	58000526 	beq	r11,zero,ce18 <__ledf2+0x9c>
    ce04:	00bfffc4 	movi	r2,-1
    ce08:	f800283a 	ret
    ce0c:	00800084 	movi	r2,2
    ce10:	f800283a 	ret
    ce14:	103ffb26 	beq	r2,zero,ce04 <__ledf2+0x88>
    ce18:	f800283a 	ret
    ce1c:	183ff61e 	bne	r3,zero,cdf8 <__ledf2+0x7c>
    ce20:	3992b03a 	or	r9,r7,r6
    ce24:	483ff41e 	bne	r9,zero,cdf8 <__ledf2+0x7c>
    ce28:	003ff406 	br	cdfc <__ledf2+0x80>
    ce2c:	1a00030e 	bge	r3,r8,ce3c <__ledf2+0xc0>
    ce30:	103ff41e 	bne	r2,zero,ce04 <__ledf2+0x88>
    ce34:	00800044 	movi	r2,1
    ce38:	f800283a 	ret
    ce3c:	40fff516 	blt	r8,r3,ce14 <__ledf2+0x98>
    ce40:	397fee36 	bltu	r7,r5,cdfc <__ledf2+0x80>
    ce44:	29c00426 	beq	r5,r7,ce58 <__ledf2+0xdc>
    ce48:	29ffe02e 	bgeu	r5,r7,cdcc <__ledf2+0x50>
    ce4c:	583fed26 	beq	r11,zero,ce04 <__ledf2+0x88>
    ce50:	5805883a 	mov	r2,r11
    ce54:	f800283a 	ret
    ce58:	313fe836 	bltu	r6,r4,cdfc <__ledf2+0x80>
    ce5c:	21bfdb2e 	bgeu	r4,r6,cdcc <__ledf2+0x50>
    ce60:	003ffa06 	br	ce4c <__ledf2+0xd0>

0000ce64 <__muldf3>:
    ce64:	2804d53a 	srli	r2,r5,20
    ce68:	defff504 	addi	sp,sp,-44
    ce6c:	02000434 	movhi	r8,16
    ce70:	df000915 	stw	fp,36(sp)
    ce74:	dd000515 	stw	r20,20(sp)
    ce78:	dcc00415 	stw	r19,16(sp)
    ce7c:	dc000115 	stw	r16,4(sp)
    ce80:	423fffc4 	addi	r8,r8,-1
    ce84:	dfc00a15 	stw	ra,40(sp)
    ce88:	ddc00815 	stw	r23,32(sp)
    ce8c:	dd800715 	stw	r22,28(sp)
    ce90:	dd400615 	stw	r21,24(sp)
    ce94:	dc800315 	stw	r18,12(sp)
    ce98:	dc400215 	stw	r17,8(sp)
    ce9c:	1081ffcc 	andi	r2,r2,2047
    cea0:	2828d7fa 	srli	r20,r5,31
    cea4:	2027883a 	mov	r19,r4
    cea8:	3039883a 	mov	fp,r6
    ceac:	2a20703a 	and	r16,r5,r8
    ceb0:	1000e726 	beq	r2,zero,d250 <__muldf3+0x3ec>
    ceb4:	10c1ffe0 	cmpeqi	r3,r2,2047
    ceb8:	1800f91e 	bne	r3,zero,d2a0 <__muldf3+0x43c>
    cebc:	800a90fa 	slli	r5,r16,3
    cec0:	2020d77a 	srli	r16,r4,29
    cec4:	202490fa 	slli	r18,r4,3
    cec8:	14ff0044 	addi	r19,r2,-1023
    cecc:	8160b03a 	or	r16,r16,r5
    ced0:	84002034 	orhi	r16,r16,128
    ced4:	002b883a 	mov	r21,zero
    ced8:	002d883a 	mov	r22,zero
    cedc:	3804d53a 	srli	r2,r7,20
    cee0:	00c00434 	movhi	r3,16
    cee4:	18ffffc4 	addi	r3,r3,-1
    cee8:	1081ffcc 	andi	r2,r2,2047
    ceec:	382ed7fa 	srli	r23,r7,31
    cef0:	38e2703a 	and	r17,r7,r3
    cef4:	1000c526 	beq	r2,zero,d20c <__muldf3+0x3a8>
    cef8:	10c1ffe0 	cmpeqi	r3,r2,2047
    cefc:	1800ef1e 	bne	r3,zero,d2bc <__muldf3+0x458>
    cf00:	880690fa 	slli	r3,r17,3
    cf04:	e022d77a 	srli	r17,fp,29
    cf08:	e00a90fa 	slli	r5,fp,3
    cf0c:	10bf0044 	addi	r2,r2,-1023
    cf10:	88e2b03a 	or	r17,r17,r3
    cf14:	8c402034 	orhi	r17,r17,128
    cf18:	98a7883a 	add	r19,r19,r2
    cf1c:	0007883a 	mov	r3,zero
    cf20:	a8800428 	cmpgeui	r2,r21,16
    cf24:	a5ccf03a 	xor	r6,r20,r23
    cf28:	9a000044 	addi	r8,r19,1
    cf2c:	1000371e 	bne	r2,zero,d00c <__muldf3+0x1a8>
    cf30:	a80490ba 	slli	r2,r21,2
    cf34:	01000074 	movhi	r4,1
    cf38:	1109883a 	add	r4,r2,r4
    cf3c:	20b3d117 	ldw	r2,-12476(r4)
    cf40:	1000683a 	jmp	r2
    cf44:	0000d00c 	andi	zero,zero,832
    cf48:	0000cf88 	cmpgei	zero,zero,830
    cf4c:	0000cf88 	cmpgei	zero,zero,830
    cf50:	0000cf84 	movi	zero,830
    cf54:	0000cf94 	movui	zero,830
    cf58:	0000cf94 	movui	zero,830
    cf5c:	0000d330 	cmpltui	zero,zero,844
    cf60:	0000cf84 	movi	zero,830
    cf64:	0000cf94 	movui	zero,830
    cf68:	0000d330 	cmpltui	zero,zero,844
    cf6c:	0000cf94 	movui	zero,830
    cf70:	0000cf84 	movi	zero,830
    cf74:	0000d2d8 	cmpnei	zero,zero,843
    cf78:	0000d2d8 	cmpnei	zero,zero,843
    cf7c:	0000d2d8 	cmpnei	zero,zero,843
    cf80:	0000d3bc 	xorhi	zero,zero,846
    cf84:	b80d883a 	mov	r6,r23
    cf88:	8821883a 	mov	r16,r17
    cf8c:	2825883a 	mov	r18,r5
    cf90:	182d883a 	mov	r22,r3
    cf94:	b08000a0 	cmpeqi	r2,r22,2
    cf98:	1000181e 	bne	r2,zero,cffc <__muldf3+0x198>
    cf9c:	b08000e0 	cmpeqi	r2,r22,3
    cfa0:	1001481e 	bne	r2,zero,d4c4 <__muldf3+0x660>
    cfa4:	b0800060 	cmpeqi	r2,r22,1
    cfa8:	10007e26 	beq	r2,zero,d1a4 <__muldf3+0x340>
    cfac:	0007883a 	mov	r3,zero
    cfb0:	0021883a 	mov	r16,zero
    cfb4:	0025883a 	mov	r18,zero
    cfb8:	1806953a 	slli	r3,r3,20
    cfbc:	300c97fa 	slli	r6,r6,31
    cfc0:	9005883a 	mov	r2,r18
    cfc4:	1c06b03a 	or	r3,r3,r16
    cfc8:	1986b03a 	or	r3,r3,r6
    cfcc:	dfc00a17 	ldw	ra,40(sp)
    cfd0:	df000917 	ldw	fp,36(sp)
    cfd4:	ddc00817 	ldw	r23,32(sp)
    cfd8:	dd800717 	ldw	r22,28(sp)
    cfdc:	dd400617 	ldw	r21,24(sp)
    cfe0:	dd000517 	ldw	r20,20(sp)
    cfe4:	dcc00417 	ldw	r19,16(sp)
    cfe8:	dc800317 	ldw	r18,12(sp)
    cfec:	dc400217 	ldw	r17,8(sp)
    cff0:	dc000117 	ldw	r16,4(sp)
    cff4:	dec00b04 	addi	sp,sp,44
    cff8:	f800283a 	ret
    cffc:	00c1ffc4 	movi	r3,2047
    d000:	0021883a 	mov	r16,zero
    d004:	0025883a 	mov	r18,zero
    d008:	003feb06 	br	cfb8 <__muldf3+0x154>
    d00c:	9004d43a 	srli	r2,r18,16
    d010:	281ed43a 	srli	r15,r5,16
    d014:	94bfffcc 	andi	r18,r18,65535
    d018:	297fffcc 	andi	r5,r5,65535
    d01c:	2c89383a 	mul	r4,r5,r18
    d020:	114f383a 	mul	r7,r2,r5
    d024:	7c87383a 	mul	r3,r15,r18
    d028:	2012d43a 	srli	r9,r4,16
    d02c:	13dd383a 	mul	r14,r2,r15
    d030:	19c7883a 	add	r3,r3,r7
    d034:	48d3883a 	add	r9,r9,r3
    d038:	49c0022e 	bgeu	r9,r7,d044 <__muldf3+0x1e0>
    d03c:	00c00074 	movhi	r3,1
    d040:	70dd883a 	add	r14,r14,r3
    d044:	881ad43a 	srli	r13,r17,16
    d048:	8c7fffcc 	andi	r17,r17,65535
    d04c:	8c87383a 	mul	r3,r17,r18
    d050:	144f383a 	mul	r7,r2,r17
    d054:	6ca5383a 	mul	r18,r13,r18
    d058:	1816d43a 	srli	r11,r3,16
    d05c:	4814943a 	slli	r10,r9,16
    d060:	91e5883a 	add	r18,r18,r7
    d064:	213fffcc 	andi	r4,r4,65535
    d068:	5c97883a 	add	r11,r11,r18
    d06c:	4818d43a 	srli	r12,r9,16
    d070:	1345383a 	mul	r2,r2,r13
    d074:	5115883a 	add	r10,r10,r4
    d078:	59c0022e 	bgeu	r11,r7,d084 <__muldf3+0x220>
    d07c:	01000074 	movhi	r4,1
    d080:	1105883a 	add	r2,r2,r4
    d084:	8028d43a 	srli	r20,r16,16
    d088:	827fffcc 	andi	r9,r16,65535
    d08c:	2a6b383a 	mul	r21,r5,r9
    d090:	7a49383a 	mul	r4,r15,r9
    d094:	a14b383a 	mul	r5,r20,r5
    d098:	580e943a 	slli	r7,r11,16
    d09c:	a82cd43a 	srli	r22,r21,16
    d0a0:	5824d43a 	srli	r18,r11,16
    d0a4:	18ffffcc 	andi	r3,r3,65535
    d0a8:	2149883a 	add	r4,r4,r5
    d0ac:	38cf883a 	add	r7,r7,r3
    d0b0:	b109883a 	add	r4,r22,r4
    d0b4:	7d1f383a 	mul	r15,r15,r20
    d0b8:	9097883a 	add	r11,r18,r2
    d0bc:	61c7883a 	add	r3,r12,r7
    d0c0:	2140022e 	bgeu	r4,r5,d0cc <__muldf3+0x268>
    d0c4:	00800074 	movhi	r2,1
    d0c8:	789f883a 	add	r15,r15,r2
    d0cc:	8a65383a 	mul	r18,r17,r9
    d0d0:	6a53383a 	mul	r9,r13,r9
    d0d4:	a463383a 	mul	r17,r20,r17
    d0d8:	9020d43a 	srli	r16,r18,16
    d0dc:	200ad43a 	srli	r5,r4,16
    d0e0:	2008943a 	slli	r4,r4,16
    d0e4:	4c53883a 	add	r9,r9,r17
    d0e8:	ab3fffcc 	andi	r12,r21,65535
    d0ec:	8253883a 	add	r9,r16,r9
    d0f0:	6d1b383a 	mul	r13,r13,r20
    d0f4:	2bdf883a 	add	r15,r5,r15
    d0f8:	2309883a 	add	r4,r4,r12
    d0fc:	4c40022e 	bgeu	r9,r17,d108 <__muldf3+0x2a4>
    d100:	00800074 	movhi	r2,1
    d104:	689b883a 	add	r13,r13,r2
    d108:	4804943a 	slli	r2,r9,16
    d10c:	917fffcc 	andi	r5,r18,65535
    d110:	1b87883a 	add	r3,r3,r14
    d114:	1145883a 	add	r2,r2,r5
    d118:	19cf803a 	cmpltu	r7,r3,r7
    d11c:	12c5883a 	add	r2,r2,r11
    d120:	1907883a 	add	r3,r3,r4
    d124:	11dd883a 	add	r14,r2,r7
    d128:	1909803a 	cmpltu	r4,r3,r4
    d12c:	73cb883a 	add	r5,r14,r15
    d130:	4812d43a 	srli	r9,r9,16
    d134:	2919883a 	add	r12,r5,r4
    d138:	12c5803a 	cmpltu	r2,r2,r11
    d13c:	71e1803a 	cmpltu	r16,r14,r7
    d140:	1420b03a 	or	r16,r2,r16
    d144:	2bcb803a 	cmpltu	r5,r5,r15
    d148:	6109803a 	cmpltu	r4,r12,r4
    d14c:	2908b03a 	or	r4,r5,r4
    d150:	8261883a 	add	r16,r16,r9
    d154:	1824927a 	slli	r18,r3,9
    d158:	8121883a 	add	r16,r16,r4
    d15c:	8361883a 	add	r16,r16,r13
    d160:	8020927a 	slli	r16,r16,9
    d164:	1806d5fa 	srli	r3,r3,23
    d168:	600ad5fa 	srli	r5,r12,23
    d16c:	6004927a 	slli	r2,r12,9
    d170:	92a4b03a 	or	r18,r18,r10
    d174:	9024c03a 	cmpne	r18,r18,zero
    d178:	90e4b03a 	or	r18,r18,r3
    d17c:	80c0402c 	andhi	r3,r16,256
    d180:	90a4b03a 	or	r18,r18,r2
    d184:	8160b03a 	or	r16,r16,r5
    d188:	1800b326 	beq	r3,zero,d458 <__muldf3+0x5f4>
    d18c:	9006d07a 	srli	r3,r18,1
    d190:	800497fa 	slli	r2,r16,31
    d194:	9480004c 	andi	r18,r18,1
    d198:	8020d07a 	srli	r16,r16,1
    d19c:	1c86b03a 	or	r3,r3,r18
    d1a0:	18a4b03a 	or	r18,r3,r2
    d1a4:	4100ffc4 	addi	r4,r8,1023
    d1a8:	0100670e 	bge	zero,r4,d348 <__muldf3+0x4e4>
    d1ac:	908001cc 	andi	r2,r18,7
    d1b0:	10000726 	beq	r2,zero,d1d0 <__muldf3+0x36c>
    d1b4:	908003cc 	andi	r2,r18,15
    d1b8:	10800120 	cmpeqi	r2,r2,4
    d1bc:	1000041e 	bne	r2,zero,d1d0 <__muldf3+0x36c>
    d1c0:	90800104 	addi	r2,r18,4
    d1c4:	14a5803a 	cmpltu	r18,r2,r18
    d1c8:	84a1883a 	add	r16,r16,r18
    d1cc:	1025883a 	mov	r18,r2
    d1d0:	8080402c 	andhi	r2,r16,256
    d1d4:	10000426 	beq	r2,zero,d1e8 <__muldf3+0x384>
    d1d8:	00bfc034 	movhi	r2,65280
    d1dc:	10bfffc4 	addi	r2,r2,-1
    d1e0:	80a0703a 	and	r16,r16,r2
    d1e4:	41010004 	addi	r4,r8,1024
    d1e8:	2081ffc8 	cmpgei	r2,r4,2047
    d1ec:	103f831e 	bne	r2,zero,cffc <__muldf3+0x198>
    d1f0:	8004977a 	slli	r2,r16,29
    d1f4:	9024d0fa 	srli	r18,r18,3
    d1f8:	8020927a 	slli	r16,r16,9
    d1fc:	20c1ffcc 	andi	r3,r4,2047
    d200:	14a4b03a 	or	r18,r2,r18
    d204:	8020d33a 	srli	r16,r16,12
    d208:	003f6b06 	br	cfb8 <__muldf3+0x154>
    d20c:	8f0ab03a 	or	r5,r17,fp
    d210:	28004326 	beq	r5,zero,d320 <__muldf3+0x4bc>
    d214:	88008526 	beq	r17,zero,d42c <__muldf3+0x5c8>
    d218:	8809883a 	mov	r4,r17
    d21c:	000dfa80 	call	dfa8 <__clzsi2>
    d220:	11bffd44 	addi	r6,r2,-11
    d224:	01000744 	movi	r4,29
    d228:	117ffe04 	addi	r5,r2,-8
    d22c:	2189c83a 	sub	r4,r4,r6
    d230:	8962983a 	sll	r17,r17,r5
    d234:	e108d83a 	srl	r4,fp,r4
    d238:	e14a983a 	sll	r5,fp,r5
    d23c:	2462b03a 	or	r17,r4,r17
    d240:	9885c83a 	sub	r2,r19,r2
    d244:	14ff0344 	addi	r19,r2,-1011
    d248:	0007883a 	mov	r3,zero
    d24c:	003f3406 	br	cf20 <__muldf3+0xbc>
    d250:	8124b03a 	or	r18,r16,r4
    d254:	90002d26 	beq	r18,zero,d30c <__muldf3+0x4a8>
    d258:	d9c00015 	stw	r7,0(sp)
    d25c:	80006826 	beq	r16,zero,d400 <__muldf3+0x59c>
    d260:	8009883a 	mov	r4,r16
    d264:	000dfa80 	call	dfa8 <__clzsi2>
    d268:	d9c00017 	ldw	r7,0(sp)
    d26c:	113ffd44 	addi	r4,r2,-11
    d270:	00c00744 	movi	r3,29
    d274:	14bffe04 	addi	r18,r2,-8
    d278:	1907c83a 	sub	r3,r3,r4
    d27c:	84a0983a 	sll	r16,r16,r18
    d280:	98c6d83a 	srl	r3,r19,r3
    d284:	9ca4983a 	sll	r18,r19,r18
    d288:	1c20b03a 	or	r16,r3,r16
    d28c:	04ff0344 	movi	r19,-1011
    d290:	98a7c83a 	sub	r19,r19,r2
    d294:	002b883a 	mov	r21,zero
    d298:	002d883a 	mov	r22,zero
    d29c:	003f0f06 	br	cedc <__muldf3+0x78>
    d2a0:	8124b03a 	or	r18,r16,r4
    d2a4:	9000141e 	bne	r18,zero,d2f8 <__muldf3+0x494>
    d2a8:	0021883a 	mov	r16,zero
    d2ac:	05400204 	movi	r21,8
    d2b0:	04c1ffc4 	movi	r19,2047
    d2b4:	05800084 	movi	r22,2
    d2b8:	003f0806 	br	cedc <__muldf3+0x78>
    d2bc:	8f0ab03a 	or	r5,r17,fp
    d2c0:	9cc1ffc4 	addi	r19,r19,2047
    d2c4:	2800081e 	bne	r5,zero,d2e8 <__muldf3+0x484>
    d2c8:	ad400094 	ori	r21,r21,2
    d2cc:	0023883a 	mov	r17,zero
    d2d0:	00c00084 	movi	r3,2
    d2d4:	003f1206 	br	cf20 <__muldf3+0xbc>
    d2d8:	b08000a0 	cmpeqi	r2,r22,2
    d2dc:	a00d883a 	mov	r6,r20
    d2e0:	103f2e26 	beq	r2,zero,cf9c <__muldf3+0x138>
    d2e4:	003f4506 	br	cffc <__muldf3+0x198>
    d2e8:	ad4000d4 	ori	r21,r21,3
    d2ec:	e00b883a 	mov	r5,fp
    d2f0:	00c000c4 	movi	r3,3
    d2f4:	003f0a06 	br	cf20 <__muldf3+0xbc>
    d2f8:	2025883a 	mov	r18,r4
    d2fc:	05400304 	movi	r21,12
    d300:	04c1ffc4 	movi	r19,2047
    d304:	058000c4 	movi	r22,3
    d308:	003ef406 	br	cedc <__muldf3+0x78>
    d30c:	0021883a 	mov	r16,zero
    d310:	05400104 	movi	r21,4
    d314:	0027883a 	mov	r19,zero
    d318:	05800044 	movi	r22,1
    d31c:	003eef06 	br	cedc <__muldf3+0x78>
    d320:	ad400054 	ori	r21,r21,1
    d324:	0023883a 	mov	r17,zero
    d328:	00c00044 	movi	r3,1
    d32c:	003efc06 	br	cf20 <__muldf3+0xbc>
    d330:	04000434 	movhi	r16,16
    d334:	000d883a 	mov	r6,zero
    d338:	843fffc4 	addi	r16,r16,-1
    d33c:	04bfffc4 	movi	r18,-1
    d340:	00c1ffc4 	movi	r3,2047
    d344:	003f1c06 	br	cfb8 <__muldf3+0x154>
    d348:	00800044 	movi	r2,1
    d34c:	1105c83a 	sub	r2,r2,r4
    d350:	10c00e48 	cmpgei	r3,r2,57
    d354:	183f151e 	bne	r3,zero,cfac <__muldf3+0x148>
    d358:	10c00808 	cmpgei	r3,r2,32
    d35c:	1800401e 	bne	r3,zero,d460 <__muldf3+0x5fc>
    d360:	42010784 	addi	r8,r8,1054
    d364:	8206983a 	sll	r3,r16,r8
    d368:	9088d83a 	srl	r4,r18,r2
    d36c:	9210983a 	sll	r8,r18,r8
    d370:	80a0d83a 	srl	r16,r16,r2
    d374:	1904b03a 	or	r2,r3,r4
    d378:	4024c03a 	cmpne	r18,r8,zero
    d37c:	1484b03a 	or	r2,r2,r18
    d380:	10c001cc 	andi	r3,r2,7
    d384:	18000726 	beq	r3,zero,d3a4 <__muldf3+0x540>
    d388:	10c003cc 	andi	r3,r2,15
    d38c:	18c00120 	cmpeqi	r3,r3,4
    d390:	1800041e 	bne	r3,zero,d3a4 <__muldf3+0x540>
    d394:	10c00104 	addi	r3,r2,4
    d398:	1885803a 	cmpltu	r2,r3,r2
    d39c:	80a1883a 	add	r16,r16,r2
    d3a0:	1805883a 	mov	r2,r3
    d3a4:	80c0202c 	andhi	r3,r16,128
    d3a8:	18004226 	beq	r3,zero,d4b4 <__muldf3+0x650>
    d3ac:	00c00044 	movi	r3,1
    d3b0:	0021883a 	mov	r16,zero
    d3b4:	0025883a 	mov	r18,zero
    d3b8:	003eff06 	br	cfb8 <__muldf3+0x154>
    d3bc:	8080022c 	andhi	r2,r16,8
    d3c0:	10000926 	beq	r2,zero,d3e8 <__muldf3+0x584>
    d3c4:	8880022c 	andhi	r2,r17,8
    d3c8:	1000071e 	bne	r2,zero,d3e8 <__muldf3+0x584>
    d3cc:	00800434 	movhi	r2,16
    d3d0:	8c000234 	orhi	r16,r17,8
    d3d4:	10bfffc4 	addi	r2,r2,-1
    d3d8:	80a0703a 	and	r16,r16,r2
    d3dc:	b80d883a 	mov	r6,r23
    d3e0:	2825883a 	mov	r18,r5
    d3e4:	003fd606 	br	d340 <__muldf3+0x4dc>
    d3e8:	00800434 	movhi	r2,16
    d3ec:	84000234 	orhi	r16,r16,8
    d3f0:	10bfffc4 	addi	r2,r2,-1
    d3f4:	80a0703a 	and	r16,r16,r2
    d3f8:	a00d883a 	mov	r6,r20
    d3fc:	003fd006 	br	d340 <__muldf3+0x4dc>
    d400:	000dfa80 	call	dfa8 <__clzsi2>
    d404:	11000544 	addi	r4,r2,21
    d408:	21400748 	cmpgei	r5,r4,29
    d40c:	1007883a 	mov	r3,r2
    d410:	d9c00017 	ldw	r7,0(sp)
    d414:	10800804 	addi	r2,r2,32
    d418:	283f9526 	beq	r5,zero,d270 <__muldf3+0x40c>
    d41c:	18fffe04 	addi	r3,r3,-8
    d420:	98e0983a 	sll	r16,r19,r3
    d424:	0025883a 	mov	r18,zero
    d428:	003f9806 	br	d28c <__muldf3+0x428>
    d42c:	e009883a 	mov	r4,fp
    d430:	000dfa80 	call	dfa8 <__clzsi2>
    d434:	11800544 	addi	r6,r2,21
    d438:	31000748 	cmpgei	r4,r6,29
    d43c:	1007883a 	mov	r3,r2
    d440:	10800804 	addi	r2,r2,32
    d444:	203f7726 	beq	r4,zero,d224 <__muldf3+0x3c0>
    d448:	1c7ffe04 	addi	r17,r3,-8
    d44c:	e462983a 	sll	r17,fp,r17
    d450:	000b883a 	mov	r5,zero
    d454:	003f7a06 	br	d240 <__muldf3+0x3dc>
    d458:	9811883a 	mov	r8,r19
    d45c:	003f5106 	br	d1a4 <__muldf3+0x340>
    d460:	00fff844 	movi	r3,-31
    d464:	1907c83a 	sub	r3,r3,r4
    d468:	10800820 	cmpeqi	r2,r2,32
    d46c:	80c6d83a 	srl	r3,r16,r3
    d470:	1000031e 	bne	r2,zero,d480 <__muldf3+0x61c>
    d474:	42010f84 	addi	r8,r8,1086
    d478:	8220983a 	sll	r16,r16,r8
    d47c:	9424b03a 	or	r18,r18,r16
    d480:	9024c03a 	cmpne	r18,r18,zero
    d484:	90c4b03a 	or	r2,r18,r3
    d488:	148001cc 	andi	r18,r2,7
    d48c:	9000051e 	bne	r18,zero,d4a4 <__muldf3+0x640>
    d490:	0021883a 	mov	r16,zero
    d494:	1004d0fa 	srli	r2,r2,3
    d498:	0007883a 	mov	r3,zero
    d49c:	14a4b03a 	or	r18,r2,r18
    d4a0:	003ec506 	br	cfb8 <__muldf3+0x154>
    d4a4:	10c003cc 	andi	r3,r2,15
    d4a8:	18c00118 	cmpnei	r3,r3,4
    d4ac:	0021883a 	mov	r16,zero
    d4b0:	183fb81e 	bne	r3,zero,d394 <__muldf3+0x530>
    d4b4:	8006927a 	slli	r3,r16,9
    d4b8:	8024977a 	slli	r18,r16,29
    d4bc:	1820d33a 	srli	r16,r3,12
    d4c0:	003ff406 	br	d494 <__muldf3+0x630>
    d4c4:	00800434 	movhi	r2,16
    d4c8:	84000234 	orhi	r16,r16,8
    d4cc:	10bfffc4 	addi	r2,r2,-1
    d4d0:	80a0703a 	and	r16,r16,r2
    d4d4:	003f9a06 	br	d340 <__muldf3+0x4dc>

0000d4d8 <__subdf3>:
    d4d8:	00800434 	movhi	r2,16
    d4dc:	3810d53a 	srli	r8,r7,20
    d4e0:	10bfffc4 	addi	r2,r2,-1
    d4e4:	2806d53a 	srli	r3,r5,20
    d4e8:	2892703a 	and	r9,r5,r2
    d4ec:	3884703a 	and	r2,r7,r2
    d4f0:	280ad7fa 	srli	r5,r5,31
    d4f4:	481290fa 	slli	r9,r9,3
    d4f8:	2018d77a 	srli	r12,r4,29
    d4fc:	100490fa 	slli	r2,r2,3
    d500:	3016d77a 	srli	r11,r6,29
    d504:	defffb04 	addi	sp,sp,-20
    d508:	4201ffcc 	andi	r8,r8,2047
    d50c:	dc800215 	stw	r18,8(sp)
    d510:	dc400115 	stw	r17,4(sp)
    d514:	1c81ffcc 	andi	r18,r3,2047
    d518:	dfc00415 	stw	ra,16(sp)
    d51c:	dcc00315 	stw	r19,12(sp)
    d520:	dc000015 	stw	r16,0(sp)
    d524:	4281ffd8 	cmpnei	r10,r8,2047
    d528:	2823883a 	mov	r17,r5
    d52c:	201c90fa 	slli	r14,r4,3
    d530:	380ed7fa 	srli	r7,r7,31
    d534:	301a90fa 	slli	r13,r6,3
    d538:	29403fcc 	andi	r5,r5,255
    d53c:	6252b03a 	or	r9,r12,r9
    d540:	589eb03a 	or	r15,r11,r2
    d544:	9207c83a 	sub	r3,r18,r8
    d548:	50006826 	beq	r10,zero,d6ec <__subdf3+0x214>
    d54c:	3ac0005c 	xori	r11,r7,1
    d550:	2ac07326 	beq	r5,r11,d720 <__subdf3+0x248>
    d554:	00c0590e 	bge	zero,r3,d6bc <__subdf3+0x1e4>
    d558:	4000691e 	bne	r8,zero,d700 <__subdf3+0x228>
    d55c:	7b44b03a 	or	r2,r15,r13
    d560:	1000fb26 	beq	r2,zero,d950 <__subdf3+0x478>
    d564:	18bfffc4 	addi	r2,r3,-1
    d568:	10019126 	beq	r2,zero,dbb0 <__subdf3+0x6d8>
    d56c:	18c1ffd8 	cmpnei	r3,r3,2047
    d570:	1800c326 	beq	r3,zero,d880 <__subdf3+0x3a8>
    d574:	1007883a 	mov	r3,r2
    d578:	18800e48 	cmpgei	r2,r3,57
    d57c:	1000651e 	bne	r2,zero,d714 <__subdf3+0x23c>
    d580:	18800808 	cmpgei	r2,r3,32
    d584:	1001331e 	bne	r2,zero,da54 <__subdf3+0x57c>
    d588:	00800804 	movi	r2,32
    d58c:	10c5c83a 	sub	r2,r2,r3
    d590:	78a0983a 	sll	r16,r15,r2
    d594:	68c8d83a 	srl	r4,r13,r3
    d598:	689a983a 	sll	r13,r13,r2
    d59c:	78c4d83a 	srl	r2,r15,r3
    d5a0:	8120b03a 	or	r16,r16,r4
    d5a4:	681ac03a 	cmpne	r13,r13,zero
    d5a8:	8360b03a 	or	r16,r16,r13
    d5ac:	4893c83a 	sub	r9,r9,r2
    d5b0:	7421c83a 	sub	r16,r14,r16
    d5b4:	7409803a 	cmpltu	r4,r14,r16
    d5b8:	4909c83a 	sub	r4,r9,r4
    d5bc:	2080202c 	andhi	r2,r4,128
    d5c0:	10009326 	beq	r2,zero,d810 <__subdf3+0x338>
    d5c4:	04c02034 	movhi	r19,128
    d5c8:	9cffffc4 	addi	r19,r19,-1
    d5cc:	24e6703a 	and	r19,r4,r19
    d5d0:	9800b926 	beq	r19,zero,d8b8 <__subdf3+0x3e0>
    d5d4:	9809883a 	mov	r4,r19
    d5d8:	000dfa80 	call	dfa8 <__clzsi2>
    d5dc:	10fffe04 	addi	r3,r2,-8
    d5e0:	01000804 	movi	r4,32
    d5e4:	20c9c83a 	sub	r4,r4,r3
    d5e8:	8108d83a 	srl	r4,r16,r4
    d5ec:	98e6983a 	sll	r19,r19,r3
    d5f0:	80e0983a 	sll	r16,r16,r3
    d5f4:	24c8b03a 	or	r4,r4,r19
    d5f8:	1c80b816 	blt	r3,r18,d8dc <__subdf3+0x404>
    d5fc:	1c87c83a 	sub	r3,r3,r18
    d600:	19400044 	addi	r5,r3,1
    d604:	28800808 	cmpgei	r2,r5,32
    d608:	1000751e 	bne	r2,zero,d7e0 <__subdf3+0x308>
    d60c:	00800804 	movi	r2,32
    d610:	1145c83a 	sub	r2,r2,r5
    d614:	8146d83a 	srl	r3,r16,r5
    d618:	80a0983a 	sll	r16,r16,r2
    d61c:	2084983a 	sll	r2,r4,r2
    d620:	2148d83a 	srl	r4,r4,r5
    d624:	8020c03a 	cmpne	r16,r16,zero
    d628:	10c4b03a 	or	r2,r2,r3
    d62c:	1420b03a 	or	r16,r2,r16
    d630:	0025883a 	mov	r18,zero
    d634:	808001cc 	andi	r2,r16,7
    d638:	10000726 	beq	r2,zero,d658 <__subdf3+0x180>
    d63c:	808003cc 	andi	r2,r16,15
    d640:	10800120 	cmpeqi	r2,r2,4
    d644:	1000041e 	bne	r2,zero,d658 <__subdf3+0x180>
    d648:	80800104 	addi	r2,r16,4
    d64c:	1421803a 	cmpltu	r16,r2,r16
    d650:	2409883a 	add	r4,r4,r16
    d654:	1021883a 	mov	r16,r2
    d658:	2080202c 	andhi	r2,r4,128
    d65c:	10006e26 	beq	r2,zero,d818 <__subdf3+0x340>
    d660:	90c00044 	addi	r3,r18,1
    d664:	1881ffe0 	cmpeqi	r2,r3,2047
    d668:	18c1ffcc 	andi	r3,r3,2047
    d66c:	1000801e 	bne	r2,zero,d870 <__subdf3+0x398>
    d670:	00bfe034 	movhi	r2,65408
    d674:	10bfffc4 	addi	r2,r2,-1
    d678:	2088703a 	and	r4,r4,r2
    d67c:	2004977a 	slli	r2,r4,29
    d680:	2008927a 	slli	r4,r4,9
    d684:	8020d0fa 	srli	r16,r16,3
    d688:	2008d33a 	srli	r4,r4,12
    d68c:	1404b03a 	or	r2,r2,r16
    d690:	1806953a 	slli	r3,r3,20
    d694:	882297fa 	slli	r17,r17,31
    d698:	1906b03a 	or	r3,r3,r4
    d69c:	1c46b03a 	or	r3,r3,r17
    d6a0:	dfc00417 	ldw	ra,16(sp)
    d6a4:	dcc00317 	ldw	r19,12(sp)
    d6a8:	dc800217 	ldw	r18,8(sp)
    d6ac:	dc400117 	ldw	r17,4(sp)
    d6b0:	dc000017 	ldw	r16,0(sp)
    d6b4:	dec00504 	addi	sp,sp,20
    d6b8:	f800283a 	ret
    d6bc:	18002c26 	beq	r3,zero,d770 <__subdf3+0x298>
    d6c0:	4487c83a 	sub	r3,r8,r18
    d6c4:	5823883a 	mov	r17,r11
    d6c8:	9000bb1e 	bne	r18,zero,d9b8 <__subdf3+0x4e0>
    d6cc:	4b84b03a 	or	r2,r9,r14
    d6d0:	10011726 	beq	r2,zero,db30 <__subdf3+0x658>
    d6d4:	18bfffc4 	addi	r2,r3,-1
    d6d8:	10016326 	beq	r2,zero,dc68 <__subdf3+0x790>
    d6dc:	18c1ffd8 	cmpnei	r3,r3,2047
    d6e0:	18012c26 	beq	r3,zero,db94 <__subdf3+0x6bc>
    d6e4:	1007883a 	mov	r3,r2
    d6e8:	0000b506 	br	d9c0 <__subdf3+0x4e8>
    d6ec:	7b44b03a 	or	r2,r15,r13
    d6f0:	103f9626 	beq	r2,zero,d54c <__subdf3+0x74>
    d6f4:	3ac03fcc 	andi	r11,r7,255
    d6f8:	29c07d26 	beq	r5,r7,d8f0 <__subdf3+0x418>
    d6fc:	00ffef0e 	bge	zero,r3,d6bc <__subdf3+0x1e4>
    d700:	9081ffd8 	cmpnei	r2,r18,2047
    d704:	10005e26 	beq	r2,zero,d880 <__subdf3+0x3a8>
    d708:	18800e48 	cmpgei	r2,r3,57
    d70c:	7bc02034 	orhi	r15,r15,128
    d710:	103f9b26 	beq	r2,zero,d580 <__subdf3+0xa8>
    d714:	7b60b03a 	or	r16,r15,r13
    d718:	8020c03a 	cmpne	r16,r16,zero
    d71c:	003fa406 	br	d5b0 <__subdf3+0xd8>
    d720:	00c0730e 	bge	zero,r3,d8f0 <__subdf3+0x418>
    d724:	40002626 	beq	r8,zero,d7c0 <__subdf3+0x2e8>
    d728:	9081ffd8 	cmpnei	r2,r18,2047
    d72c:	10005426 	beq	r2,zero,d880 <__subdf3+0x3a8>
    d730:	7bc02034 	orhi	r15,r15,128
    d734:	18800e48 	cmpgei	r2,r3,57
    d738:	1000431e 	bne	r2,zero,d848 <__subdf3+0x370>
    d73c:	18800808 	cmpgei	r2,r3,32
    d740:	1000de26 	beq	r2,zero,dabc <__subdf3+0x5e4>
    d744:	1c3ff804 	addi	r16,r3,-32
    d748:	18800820 	cmpeqi	r2,r3,32
    d74c:	7c0ad83a 	srl	r5,r15,r16
    d750:	1000041e 	bne	r2,zero,d764 <__subdf3+0x28c>
    d754:	00801004 	movi	r2,64
    d758:	10c5c83a 	sub	r2,r2,r3
    d75c:	7884983a 	sll	r2,r15,r2
    d760:	689ab03a 	or	r13,r13,r2
    d764:	6820c03a 	cmpne	r16,r13,zero
    d768:	8160b03a 	or	r16,r16,r5
    d76c:	00003806 	br	d850 <__subdf3+0x378>
    d770:	90800044 	addi	r2,r18,1
    d774:	1081ff8c 	andi	r2,r2,2046
    d778:	1000a01e 	bne	r2,zero,d9fc <__subdf3+0x524>
    d77c:	4b8ab03a 	or	r5,r9,r14
    d780:	7b44b03a 	or	r2,r15,r13
    d784:	9000f11e 	bne	r18,zero,db4c <__subdf3+0x674>
    d788:	28012e26 	beq	r5,zero,dc44 <__subdf3+0x76c>
    d78c:	10010e26 	beq	r2,zero,dbc8 <__subdf3+0x6f0>
    d790:	7361c83a 	sub	r16,r14,r13
    d794:	7405803a 	cmpltu	r2,r14,r16
    d798:	4bc9c83a 	sub	r4,r9,r15
    d79c:	2089c83a 	sub	r4,r4,r2
    d7a0:	2080202c 	andhi	r2,r4,128
    d7a4:	10016d26 	beq	r2,zero,dd5c <__subdf3+0x884>
    d7a8:	6ba1c83a 	sub	r16,r13,r14
    d7ac:	7a49c83a 	sub	r4,r15,r9
    d7b0:	6c1b803a 	cmpltu	r13,r13,r16
    d7b4:	2349c83a 	sub	r4,r4,r13
    d7b8:	5823883a 	mov	r17,r11
    d7bc:	003f9d06 	br	d634 <__subdf3+0x15c>
    d7c0:	7b44b03a 	or	r2,r15,r13
    d7c4:	10006226 	beq	r2,zero,d950 <__subdf3+0x478>
    d7c8:	18bfffc4 	addi	r2,r3,-1
    d7cc:	1000e926 	beq	r2,zero,db74 <__subdf3+0x69c>
    d7d0:	18c1ffd8 	cmpnei	r3,r3,2047
    d7d4:	18012a26 	beq	r3,zero,dc80 <__subdf3+0x7a8>
    d7d8:	1007883a 	mov	r3,r2
    d7dc:	003fd506 	br	d734 <__subdf3+0x25c>
    d7e0:	18fff844 	addi	r3,r3,-31
    d7e4:	28800820 	cmpeqi	r2,r5,32
    d7e8:	20c6d83a 	srl	r3,r4,r3
    d7ec:	1000041e 	bne	r2,zero,d800 <__subdf3+0x328>
    d7f0:	00801004 	movi	r2,64
    d7f4:	114bc83a 	sub	r5,r2,r5
    d7f8:	2148983a 	sll	r4,r4,r5
    d7fc:	8120b03a 	or	r16,r16,r4
    d800:	8020c03a 	cmpne	r16,r16,zero
    d804:	80e0b03a 	or	r16,r16,r3
    d808:	0009883a 	mov	r4,zero
    d80c:	0025883a 	mov	r18,zero
    d810:	808001cc 	andi	r2,r16,7
    d814:	103f891e 	bne	r2,zero,d63c <__subdf3+0x164>
    d818:	8020d0fa 	srli	r16,r16,3
    d81c:	2004977a 	slli	r2,r4,29
    d820:	2012d0fa 	srli	r9,r4,3
    d824:	9007883a 	mov	r3,r18
    d828:	8084b03a 	or	r2,r16,r2
    d82c:	1901ffe0 	cmpeqi	r4,r3,2047
    d830:	2000191e 	bne	r4,zero,d898 <__subdf3+0x3c0>
    d834:	01000434 	movhi	r4,16
    d838:	213fffc4 	addi	r4,r4,-1
    d83c:	4908703a 	and	r4,r9,r4
    d840:	18c1ffcc 	andi	r3,r3,2047
    d844:	003f9206 	br	d690 <__subdf3+0x1b8>
    d848:	7b60b03a 	or	r16,r15,r13
    d84c:	8020c03a 	cmpne	r16,r16,zero
    d850:	83a1883a 	add	r16,r16,r14
    d854:	8389803a 	cmpltu	r4,r16,r14
    d858:	2249883a 	add	r4,r4,r9
    d85c:	2080202c 	andhi	r2,r4,128
    d860:	103feb26 	beq	r2,zero,d810 <__subdf3+0x338>
    d864:	94800044 	addi	r18,r18,1
    d868:	9081ffe0 	cmpeqi	r2,r18,2047
    d86c:	10006f26 	beq	r2,zero,da2c <__subdf3+0x554>
    d870:	00c1ffc4 	movi	r3,2047
    d874:	0009883a 	mov	r4,zero
    d878:	0005883a 	mov	r2,zero
    d87c:	003f8406 	br	d690 <__subdf3+0x1b8>
    d880:	4806977a 	slli	r3,r9,29
    d884:	00880034 	movhi	r2,8192
    d888:	10bfffc4 	addi	r2,r2,-1
    d88c:	4812d0fa 	srli	r9,r9,3
    d890:	2088703a 	and	r4,r4,r2
    d894:	20c4b03a 	or	r2,r4,r3
    d898:	4886b03a 	or	r3,r9,r2
    d89c:	18013726 	beq	r3,zero,dd7c <__subdf3+0x8a4>
    d8a0:	00c00434 	movhi	r3,16
    d8a4:	18ffffc4 	addi	r3,r3,-1
    d8a8:	49000234 	orhi	r4,r9,8
    d8ac:	20c8703a 	and	r4,r4,r3
    d8b0:	00c1ffc4 	movi	r3,2047
    d8b4:	003f7606 	br	d690 <__subdf3+0x1b8>
    d8b8:	8009883a 	mov	r4,r16
    d8bc:	000dfa80 	call	dfa8 <__clzsi2>
    d8c0:	10c00604 	addi	r3,r2,24
    d8c4:	19000808 	cmpgei	r4,r3,32
    d8c8:	203f4526 	beq	r4,zero,d5e0 <__subdf3+0x108>
    d8cc:	113ffe04 	addi	r4,r2,-8
    d8d0:	8108983a 	sll	r4,r16,r4
    d8d4:	0021883a 	mov	r16,zero
    d8d8:	1cbf480e 	bge	r3,r18,d5fc <__subdf3+0x124>
    d8dc:	00bfe034 	movhi	r2,65408
    d8e0:	10bfffc4 	addi	r2,r2,-1
    d8e4:	90e5c83a 	sub	r18,r18,r3
    d8e8:	2088703a 	and	r4,r4,r2
    d8ec:	003f5106 	br	d634 <__subdf3+0x15c>
    d8f0:	18001e26 	beq	r3,zero,d96c <__subdf3+0x494>
    d8f4:	4487c83a 	sub	r3,r8,r18
    d8f8:	90006826 	beq	r18,zero,da9c <__subdf3+0x5c4>
    d8fc:	5000a526 	beq	r10,zero,db94 <__subdf3+0x6bc>
    d900:	4a402034 	orhi	r9,r9,128
    d904:	18800e48 	cmpgei	r2,r3,57
    d908:	1000b61e 	bne	r2,zero,dbe4 <__subdf3+0x70c>
    d90c:	18800808 	cmpgei	r2,r3,32
    d910:	1001021e 	bne	r2,zero,dd1c <__subdf3+0x844>
    d914:	00800804 	movi	r2,32
    d918:	10c5c83a 	sub	r2,r2,r3
    d91c:	48a0983a 	sll	r16,r9,r2
    d920:	70c8d83a 	srl	r4,r14,r3
    d924:	7084983a 	sll	r2,r14,r2
    d928:	48d2d83a 	srl	r9,r9,r3
    d92c:	8120b03a 	or	r16,r16,r4
    d930:	1004c03a 	cmpne	r2,r2,zero
    d934:	80a0b03a 	or	r16,r16,r2
    d938:	7a5f883a 	add	r15,r15,r9
    d93c:	8361883a 	add	r16,r16,r13
    d940:	8349803a 	cmpltu	r4,r16,r13
    d944:	23c9883a 	add	r4,r4,r15
    d948:	4025883a 	mov	r18,r8
    d94c:	003fc306 	br	d85c <__subdf3+0x384>
    d950:	480a977a 	slli	r5,r9,29
    d954:	00880034 	movhi	r2,8192
    d958:	10bfffc4 	addi	r2,r2,-1
    d95c:	2088703a 	and	r4,r4,r2
    d960:	4812d0fa 	srli	r9,r9,3
    d964:	2144b03a 	or	r2,r4,r5
    d968:	003fb006 	br	d82c <__subdf3+0x354>
    d96c:	90800044 	addi	r2,r18,1
    d970:	1141ff8c 	andi	r5,r2,2046
    d974:	28005c1e 	bne	r5,zero,dae8 <__subdf3+0x610>
    d978:	4b84b03a 	or	r2,r9,r14
    d97c:	9000a71e 	bne	r18,zero,dc1c <__subdf3+0x744>
    d980:	1000df26 	beq	r2,zero,dd00 <__subdf3+0x828>
    d984:	7b44b03a 	or	r2,r15,r13
    d988:	10008f26 	beq	r2,zero,dbc8 <__subdf3+0x6f0>
    d98c:	7361883a 	add	r16,r14,r13
    d990:	4bc9883a 	add	r4,r9,r15
    d994:	839d803a 	cmpltu	r14,r16,r14
    d998:	2389883a 	add	r4,r4,r14
    d99c:	2080202c 	andhi	r2,r4,128
    d9a0:	103f9b26 	beq	r2,zero,d810 <__subdf3+0x338>
    d9a4:	00bfe034 	movhi	r2,65408
    d9a8:	10bfffc4 	addi	r2,r2,-1
    d9ac:	2088703a 	and	r4,r4,r2
    d9b0:	04800044 	movi	r18,1
    d9b4:	003f9606 	br	d810 <__subdf3+0x338>
    d9b8:	50007626 	beq	r10,zero,db94 <__subdf3+0x6bc>
    d9bc:	4a402034 	orhi	r9,r9,128
    d9c0:	18800e48 	cmpgei	r2,r3,57
    d9c4:	10002e1e 	bne	r2,zero,da80 <__subdf3+0x5a8>
    d9c8:	18800808 	cmpgei	r2,r3,32
    d9cc:	1000881e 	bne	r2,zero,dbf0 <__subdf3+0x718>
    d9d0:	00800804 	movi	r2,32
    d9d4:	10c5c83a 	sub	r2,r2,r3
    d9d8:	48a0983a 	sll	r16,r9,r2
    d9dc:	70c8d83a 	srl	r4,r14,r3
    d9e0:	709c983a 	sll	r14,r14,r2
    d9e4:	48d2d83a 	srl	r9,r9,r3
    d9e8:	8120b03a 	or	r16,r16,r4
    d9ec:	701cc03a 	cmpne	r14,r14,zero
    d9f0:	83a0b03a 	or	r16,r16,r14
    d9f4:	7a5fc83a 	sub	r15,r15,r9
    d9f8:	00002306 	br	da88 <__subdf3+0x5b0>
    d9fc:	7361c83a 	sub	r16,r14,r13
    da00:	4be7c83a 	sub	r19,r9,r15
    da04:	7409803a 	cmpltu	r4,r14,r16
    da08:	9927c83a 	sub	r19,r19,r4
    da0c:	9880202c 	andhi	r2,r19,128
    da10:	1000411e 	bne	r2,zero,db18 <__subdf3+0x640>
    da14:	84c4b03a 	or	r2,r16,r19
    da18:	103eed1e 	bne	r2,zero,d5d0 <__subdf3+0xf8>
    da1c:	0013883a 	mov	r9,zero
    da20:	0023883a 	mov	r17,zero
    da24:	003f8306 	br	d834 <__subdf3+0x35c>
    da28:	04800084 	movi	r18,2
    da2c:	00bfe034 	movhi	r2,65408
    da30:	10bfffc4 	addi	r2,r2,-1
    da34:	8006d07a 	srli	r3,r16,1
    da38:	2088703a 	and	r4,r4,r2
    da3c:	200497fa 	slli	r2,r4,31
    da40:	8400004c 	andi	r16,r16,1
    da44:	1c20b03a 	or	r16,r3,r16
    da48:	2008d07a 	srli	r4,r4,1
    da4c:	1420b03a 	or	r16,r2,r16
    da50:	003ef806 	br	d634 <__subdf3+0x15c>
    da54:	1c3ff804 	addi	r16,r3,-32
    da58:	18800820 	cmpeqi	r2,r3,32
    da5c:	7c0ad83a 	srl	r5,r15,r16
    da60:	1000041e 	bne	r2,zero,da74 <__subdf3+0x59c>
    da64:	00801004 	movi	r2,64
    da68:	10c5c83a 	sub	r2,r2,r3
    da6c:	7884983a 	sll	r2,r15,r2
    da70:	689ab03a 	or	r13,r13,r2
    da74:	6820c03a 	cmpne	r16,r13,zero
    da78:	8160b03a 	or	r16,r16,r5
    da7c:	003ecc06 	br	d5b0 <__subdf3+0xd8>
    da80:	4b92b03a 	or	r9,r9,r14
    da84:	4820c03a 	cmpne	r16,r9,zero
    da88:	6c21c83a 	sub	r16,r13,r16
    da8c:	6c09803a 	cmpltu	r4,r13,r16
    da90:	7909c83a 	sub	r4,r15,r4
    da94:	4025883a 	mov	r18,r8
    da98:	003ec806 	br	d5bc <__subdf3+0xe4>
    da9c:	4b84b03a 	or	r2,r9,r14
    daa0:	10007e26 	beq	r2,zero,dc9c <__subdf3+0x7c4>
    daa4:	18bfffc4 	addi	r2,r3,-1
    daa8:	1000a726 	beq	r2,zero,dd48 <__subdf3+0x870>
    daac:	18c1ffd8 	cmpnei	r3,r3,2047
    dab0:	18003826 	beq	r3,zero,db94 <__subdf3+0x6bc>
    dab4:	1007883a 	mov	r3,r2
    dab8:	003f9206 	br	d904 <__subdf3+0x42c>
    dabc:	00800804 	movi	r2,32
    dac0:	10c5c83a 	sub	r2,r2,r3
    dac4:	78a0983a 	sll	r16,r15,r2
    dac8:	68c8d83a 	srl	r4,r13,r3
    dacc:	689a983a 	sll	r13,r13,r2
    dad0:	78c4d83a 	srl	r2,r15,r3
    dad4:	8120b03a 	or	r16,r16,r4
    dad8:	681ac03a 	cmpne	r13,r13,zero
    dadc:	8360b03a 	or	r16,r16,r13
    dae0:	4893883a 	add	r9,r9,r2
    dae4:	003f5a06 	br	d850 <__subdf3+0x378>
    dae8:	10c1ffe0 	cmpeqi	r3,r2,2047
    daec:	183f601e 	bne	r3,zero,d870 <__subdf3+0x398>
    daf0:	735b883a 	add	r13,r14,r13
    daf4:	6b9d803a 	cmpltu	r14,r13,r14
    daf8:	4bc9883a 	add	r4,r9,r15
    dafc:	2389883a 	add	r4,r4,r14
    db00:	202097fa 	slli	r16,r4,31
    db04:	681ad07a 	srli	r13,r13,1
    db08:	2008d07a 	srli	r4,r4,1
    db0c:	1025883a 	mov	r18,r2
    db10:	8360b03a 	or	r16,r16,r13
    db14:	003f3e06 	br	d810 <__subdf3+0x338>
    db18:	6ba1c83a 	sub	r16,r13,r14
    db1c:	7a49c83a 	sub	r4,r15,r9
    db20:	6c1b803a 	cmpltu	r13,r13,r16
    db24:	2367c83a 	sub	r19,r4,r13
    db28:	5823883a 	mov	r17,r11
    db2c:	003ea806 	br	d5d0 <__subdf3+0xf8>
    db30:	7808977a 	slli	r4,r15,29
    db34:	00880034 	movhi	r2,8192
    db38:	10bfffc4 	addi	r2,r2,-1
    db3c:	308c703a 	and	r6,r6,r2
    db40:	7812d0fa 	srli	r9,r15,3
    db44:	3104b03a 	or	r2,r6,r4
    db48:	003f3806 	br	d82c <__subdf3+0x354>
    db4c:	28005a1e 	bne	r5,zero,dcb8 <__subdf3+0x7e0>
    db50:	10008526 	beq	r2,zero,dd68 <__subdf3+0x890>
    db54:	7806977a 	slli	r3,r15,29
    db58:	00880034 	movhi	r2,8192
    db5c:	10bfffc4 	addi	r2,r2,-1
    db60:	3084703a 	and	r2,r6,r2
    db64:	7812d0fa 	srli	r9,r15,3
    db68:	10c4b03a 	or	r2,r2,r3
    db6c:	5823883a 	mov	r17,r11
    db70:	003f4906 	br	d898 <__subdf3+0x3c0>
    db74:	7361883a 	add	r16,r14,r13
    db78:	4bc9883a 	add	r4,r9,r15
    db7c:	839d803a 	cmpltu	r14,r16,r14
    db80:	2389883a 	add	r4,r4,r14
    db84:	2080202c 	andhi	r2,r4,128
    db88:	103fa71e 	bne	r2,zero,da28 <__subdf3+0x550>
    db8c:	04800044 	movi	r18,1
    db90:	003f1f06 	br	d810 <__subdf3+0x338>
    db94:	7806977a 	slli	r3,r15,29
    db98:	00880034 	movhi	r2,8192
    db9c:	10bfffc4 	addi	r2,r2,-1
    dba0:	3084703a 	and	r2,r6,r2
    dba4:	7812d0fa 	srli	r9,r15,3
    dba8:	10c4b03a 	or	r2,r2,r3
    dbac:	003f3a06 	br	d898 <__subdf3+0x3c0>
    dbb0:	7361c83a 	sub	r16,r14,r13
    dbb4:	4bc9c83a 	sub	r4,r9,r15
    dbb8:	741d803a 	cmpltu	r14,r14,r16
    dbbc:	2389c83a 	sub	r4,r4,r14
    dbc0:	04800044 	movi	r18,1
    dbc4:	003e7d06 	br	d5bc <__subdf3+0xe4>
    dbc8:	480a977a 	slli	r5,r9,29
    dbcc:	00880034 	movhi	r2,8192
    dbd0:	10bfffc4 	addi	r2,r2,-1
    dbd4:	2084703a 	and	r2,r4,r2
    dbd8:	4812d0fa 	srli	r9,r9,3
    dbdc:	1144b03a 	or	r2,r2,r5
    dbe0:	003f1406 	br	d834 <__subdf3+0x35c>
    dbe4:	4b92b03a 	or	r9,r9,r14
    dbe8:	4820c03a 	cmpne	r16,r9,zero
    dbec:	003f5306 	br	d93c <__subdf3+0x464>
    dbf0:	1c3ff804 	addi	r16,r3,-32
    dbf4:	19000820 	cmpeqi	r4,r3,32
    dbf8:	4c04d83a 	srl	r2,r9,r16
    dbfc:	2000041e 	bne	r4,zero,dc10 <__subdf3+0x738>
    dc00:	01001004 	movi	r4,64
    dc04:	20c7c83a 	sub	r3,r4,r3
    dc08:	48d2983a 	sll	r9,r9,r3
    dc0c:	725cb03a 	or	r14,r14,r9
    dc10:	7020c03a 	cmpne	r16,r14,zero
    dc14:	80a0b03a 	or	r16,r16,r2
    dc18:	003f9b06 	br	da88 <__subdf3+0x5b0>
    dc1c:	103fdd26 	beq	r2,zero,db94 <__subdf3+0x6bc>
    dc20:	7b5ab03a 	or	r13,r15,r13
    dc24:	480a977a 	slli	r5,r9,29
    dc28:	4812d0fa 	srli	r9,r9,3
    dc2c:	6800251e 	bne	r13,zero,dcc4 <__subdf3+0x7ec>
    dc30:	00880034 	movhi	r2,8192
    dc34:	10bfffc4 	addi	r2,r2,-1
    dc38:	2084703a 	and	r2,r4,r2
    dc3c:	1144b03a 	or	r2,r2,r5
    dc40:	003f1506 	br	d898 <__subdf3+0x3c0>
    dc44:	103f7526 	beq	r2,zero,da1c <__subdf3+0x544>
    dc48:	7808977a 	slli	r4,r15,29
    dc4c:	00880034 	movhi	r2,8192
    dc50:	10bfffc4 	addi	r2,r2,-1
    dc54:	3084703a 	and	r2,r6,r2
    dc58:	7812d0fa 	srli	r9,r15,3
    dc5c:	1104b03a 	or	r2,r2,r4
    dc60:	5823883a 	mov	r17,r11
    dc64:	003ef306 	br	d834 <__subdf3+0x35c>
    dc68:	6ba1c83a 	sub	r16,r13,r14
    dc6c:	7a49c83a 	sub	r4,r15,r9
    dc70:	6c1b803a 	cmpltu	r13,r13,r16
    dc74:	2349c83a 	sub	r4,r4,r13
    dc78:	04800044 	movi	r18,1
    dc7c:	003e4f06 	br	d5bc <__subdf3+0xe4>
    dc80:	4806977a 	slli	r3,r9,29
    dc84:	00880034 	movhi	r2,8192
    dc88:	10bfffc4 	addi	r2,r2,-1
    dc8c:	2084703a 	and	r2,r4,r2
    dc90:	4812d0fa 	srli	r9,r9,3
    dc94:	10c4b03a 	or	r2,r2,r3
    dc98:	003eff06 	br	d898 <__subdf3+0x3c0>
    dc9c:	7808977a 	slli	r4,r15,29
    dca0:	00880034 	movhi	r2,8192
    dca4:	10bfffc4 	addi	r2,r2,-1
    dca8:	3084703a 	and	r2,r6,r2
    dcac:	7812d0fa 	srli	r9,r15,3
    dcb0:	1104b03a 	or	r2,r2,r4
    dcb4:	003edd06 	br	d82c <__subdf3+0x354>
    dcb8:	480a977a 	slli	r5,r9,29
    dcbc:	4812d0fa 	srli	r9,r9,3
    dcc0:	103fdb26 	beq	r2,zero,dc30 <__subdf3+0x758>
    dcc4:	00c80034 	movhi	r3,8192
    dcc8:	18ffffc4 	addi	r3,r3,-1
    dccc:	20c4703a 	and	r2,r4,r3
    dcd0:	4900022c 	andhi	r4,r9,8
    dcd4:	1144b03a 	or	r2,r2,r5
    dcd8:	203eef26 	beq	r4,zero,d898 <__subdf3+0x3c0>
    dcdc:	7808d0fa 	srli	r4,r15,3
    dce0:	2140022c 	andhi	r5,r4,8
    dce4:	283eec1e 	bne	r5,zero,d898 <__subdf3+0x3c0>
    dce8:	7804977a 	slli	r2,r15,29
    dcec:	30cc703a 	and	r6,r6,r3
    dcf0:	5823883a 	mov	r17,r11
    dcf4:	3084b03a 	or	r2,r6,r2
    dcf8:	2013883a 	mov	r9,r4
    dcfc:	003ee606 	br	d898 <__subdf3+0x3c0>
    dd00:	7808977a 	slli	r4,r15,29
    dd04:	00880034 	movhi	r2,8192
    dd08:	10bfffc4 	addi	r2,r2,-1
    dd0c:	3084703a 	and	r2,r6,r2
    dd10:	7812d0fa 	srli	r9,r15,3
    dd14:	1104b03a 	or	r2,r2,r4
    dd18:	003ec606 	br	d834 <__subdf3+0x35c>
    dd1c:	18bff804 	addi	r2,r3,-32
    dd20:	19000820 	cmpeqi	r4,r3,32
    dd24:	4884d83a 	srl	r2,r9,r2
    dd28:	2000041e 	bne	r4,zero,dd3c <__subdf3+0x864>
    dd2c:	01001004 	movi	r4,64
    dd30:	20c7c83a 	sub	r3,r4,r3
    dd34:	48d2983a 	sll	r9,r9,r3
    dd38:	725cb03a 	or	r14,r14,r9
    dd3c:	7020c03a 	cmpne	r16,r14,zero
    dd40:	80a0b03a 	or	r16,r16,r2
    dd44:	003efd06 	br	d93c <__subdf3+0x464>
    dd48:	7361883a 	add	r16,r14,r13
    dd4c:	4bc9883a 	add	r4,r9,r15
    dd50:	835b803a 	cmpltu	r13,r16,r13
    dd54:	2349883a 	add	r4,r4,r13
    dd58:	003f8a06 	br	db84 <__subdf3+0x6ac>
    dd5c:	8104b03a 	or	r2,r16,r4
    dd60:	103f2e26 	beq	r2,zero,da1c <__subdf3+0x544>
    dd64:	003eaa06 	br	d810 <__subdf3+0x338>
    dd68:	02400434 	movhi	r9,16
    dd6c:	0023883a 	mov	r17,zero
    dd70:	00bfffc4 	movi	r2,-1
    dd74:	4a7fffc4 	addi	r9,r9,-1
    dd78:	003ec906 	br	d8a0 <__subdf3+0x3c8>
    dd7c:	0005883a 	mov	r2,zero
    dd80:	00c1ffc4 	movi	r3,2047
    dd84:	0009883a 	mov	r4,zero
    dd88:	003e4106 	br	d690 <__subdf3+0x1b8>

0000dd8c <__unorddf2>:
    dd8c:	2806d53a 	srli	r3,r5,20
    dd90:	3810d53a 	srli	r8,r7,20
    dd94:	02400434 	movhi	r9,16
    dd98:	18c1ffcc 	andi	r3,r3,2047
    dd9c:	4a7fffc4 	addi	r9,r9,-1
    dda0:	18c1ffd8 	cmpnei	r3,r3,2047
    dda4:	2a4a703a 	and	r5,r5,r9
    dda8:	3a4e703a 	and	r7,r7,r9
    ddac:	4201ffcc 	andi	r8,r8,2047
    ddb0:	18000426 	beq	r3,zero,ddc4 <__unorddf2+0x38>
    ddb4:	4201ffd8 	cmpnei	r8,r8,2047
    ddb8:	40000626 	beq	r8,zero,ddd4 <__unorddf2+0x48>
    ddbc:	0005883a 	mov	r2,zero
    ddc0:	f800283a 	ret
    ddc4:	290ab03a 	or	r5,r5,r4
    ddc8:	283ffa26 	beq	r5,zero,ddb4 <__unorddf2+0x28>
    ddcc:	00800044 	movi	r2,1
    ddd0:	f800283a 	ret
    ddd4:	398eb03a 	or	r7,r7,r6
    ddd8:	3804c03a 	cmpne	r2,r7,zero
    dddc:	f800283a 	ret

0000dde0 <__fixdfsi>:
    dde0:	2806d53a 	srli	r3,r5,20
    dde4:	01800434 	movhi	r6,16
    dde8:	31bfffc4 	addi	r6,r6,-1
    ddec:	18c1ffcc 	andi	r3,r3,2047
    ddf0:	19c0ffd0 	cmplti	r7,r3,1023
    ddf4:	2810d7fa 	srli	r8,r5,31
    ddf8:	298a703a 	and	r5,r5,r6
    ddfc:	3800061e 	bne	r7,zero,de18 <__fixdfsi+0x38>
    de00:	18810790 	cmplti	r2,r3,1054
    de04:	1000061e 	bne	r2,zero,de20 <__fixdfsi+0x40>
    de08:	00a00034 	movhi	r2,32768
    de0c:	10bfffc4 	addi	r2,r2,-1
    de10:	4085883a 	add	r2,r8,r2
    de14:	f800283a 	ret
    de18:	0005883a 	mov	r2,zero
    de1c:	f800283a 	ret
    de20:	01810cc4 	movi	r6,1075
    de24:	30cdc83a 	sub	r6,r6,r3
    de28:	30800808 	cmpgei	r2,r6,32
    de2c:	29400434 	orhi	r5,r5,16
    de30:	1000071e 	bne	r2,zero,de50 <__fixdfsi+0x70>
    de34:	18befb44 	addi	r2,r3,-1043
    de38:	2884983a 	sll	r2,r5,r2
    de3c:	2188d83a 	srl	r4,r4,r6
    de40:	1104b03a 	or	r2,r2,r4
    de44:	403ff526 	beq	r8,zero,de1c <__fixdfsi+0x3c>
    de48:	0085c83a 	sub	r2,zero,r2
    de4c:	f800283a 	ret
    de50:	008104c4 	movi	r2,1043
    de54:	10c5c83a 	sub	r2,r2,r3
    de58:	2884d83a 	srl	r2,r5,r2
    de5c:	003ff906 	br	de44 <__fixdfsi+0x64>

0000de60 <__floatsidf>:
    de60:	defffd04 	addi	sp,sp,-12
    de64:	dfc00215 	stw	ra,8(sp)
    de68:	dc400115 	stw	r17,4(sp)
    de6c:	dc000015 	stw	r16,0(sp)
    de70:	20001326 	beq	r4,zero,dec0 <__floatsidf+0x60>
    de74:	2022d7fa 	srli	r17,r4,31
    de78:	2021883a 	mov	r16,r4
    de7c:	20002416 	blt	r4,zero,df10 <__floatsidf+0xb0>
    de80:	8009883a 	mov	r4,r16
    de84:	000dfa80 	call	dfa8 <__clzsi2>
    de88:	01010784 	movi	r4,1054
    de8c:	2089c83a 	sub	r4,r4,r2
    de90:	114002c8 	cmpgei	r5,r2,11
    de94:	20c1ffcc 	andi	r3,r4,2047
    de98:	2800161e 	bne	r5,zero,def4 <__floatsidf+0x94>
    de9c:	010002c4 	movi	r4,11
    dea0:	2089c83a 	sub	r4,r4,r2
    dea4:	810ad83a 	srl	r5,r16,r4
    dea8:	01000434 	movhi	r4,16
    deac:	10800544 	addi	r2,r2,21
    deb0:	213fffc4 	addi	r4,r4,-1
    deb4:	8084983a 	sll	r2,r16,r2
    deb8:	290a703a 	and	r5,r5,r4
    debc:	00000406 	br	ded0 <__floatsidf+0x70>
    dec0:	0023883a 	mov	r17,zero
    dec4:	0007883a 	mov	r3,zero
    dec8:	000b883a 	mov	r5,zero
    decc:	0005883a 	mov	r2,zero
    ded0:	1808953a 	slli	r4,r3,20
    ded4:	880697fa 	slli	r3,r17,31
    ded8:	2148b03a 	or	r4,r4,r5
    dedc:	20c6b03a 	or	r3,r4,r3
    dee0:	dfc00217 	ldw	ra,8(sp)
    dee4:	dc400117 	ldw	r17,4(sp)
    dee8:	dc000017 	ldw	r16,0(sp)
    deec:	dec00304 	addi	sp,sp,12
    def0:	f800283a 	ret
    def4:	10bffd44 	addi	r2,r2,-11
    def8:	808a983a 	sll	r5,r16,r2
    defc:	00800434 	movhi	r2,16
    df00:	10bfffc4 	addi	r2,r2,-1
    df04:	288a703a 	and	r5,r5,r2
    df08:	0005883a 	mov	r2,zero
    df0c:	003ff006 	br	ded0 <__floatsidf+0x70>
    df10:	0121c83a 	sub	r16,zero,r4
    df14:	003fda06 	br	de80 <__floatsidf+0x20>

0000df18 <__floatunsidf>:
    df18:	defffe04 	addi	sp,sp,-8
    df1c:	dc000015 	stw	r16,0(sp)
    df20:	dfc00115 	stw	ra,4(sp)
    df24:	2021883a 	mov	r16,r4
    df28:	20000f26 	beq	r4,zero,df68 <__floatunsidf+0x50>
    df2c:	000dfa80 	call	dfa8 <__clzsi2>
    df30:	00c10784 	movi	r3,1054
    df34:	1887c83a 	sub	r3,r3,r2
    df38:	110002c8 	cmpgei	r4,r2,11
    df3c:	18c1ffcc 	andi	r3,r3,2047
    df40:	2000121e 	bne	r4,zero,df8c <__floatunsidf+0x74>
    df44:	014002c4 	movi	r5,11
    df48:	288bc83a 	sub	r5,r5,r2
    df4c:	814ad83a 	srl	r5,r16,r5
    df50:	01000434 	movhi	r4,16
    df54:	10800544 	addi	r2,r2,21
    df58:	213fffc4 	addi	r4,r4,-1
    df5c:	80a0983a 	sll	r16,r16,r2
    df60:	290a703a 	and	r5,r5,r4
    df64:	00000206 	br	df70 <__floatunsidf+0x58>
    df68:	0007883a 	mov	r3,zero
    df6c:	000b883a 	mov	r5,zero
    df70:	1806953a 	slli	r3,r3,20
    df74:	8005883a 	mov	r2,r16
    df78:	1946b03a 	or	r3,r3,r5
    df7c:	dfc00117 	ldw	ra,4(sp)
    df80:	dc000017 	ldw	r16,0(sp)
    df84:	dec00204 	addi	sp,sp,8
    df88:	f800283a 	ret
    df8c:	117ffd44 	addi	r5,r2,-11
    df90:	814a983a 	sll	r5,r16,r5
    df94:	00800434 	movhi	r2,16
    df98:	10bfffc4 	addi	r2,r2,-1
    df9c:	288a703a 	and	r5,r5,r2
    dfa0:	0021883a 	mov	r16,zero
    dfa4:	003ff206 	br	df70 <__floatunsidf+0x58>

0000dfa8 <__clzsi2>:
    dfa8:	00bfffd4 	movui	r2,65535
    dfac:	11000436 	bltu	r2,r4,dfc0 <__clzsi2+0x18>
    dfb0:	20804030 	cmpltui	r2,r4,256
    dfb4:	10000e26 	beq	r2,zero,dff0 <__clzsi2+0x48>
    dfb8:	01400804 	movi	r5,32
    dfbc:	00000406 	br	dfd0 <__clzsi2+0x28>
    dfc0:	00804034 	movhi	r2,256
    dfc4:	20800736 	bltu	r4,r2,dfe4 <__clzsi2+0x3c>
    dfc8:	2008d63a 	srli	r4,r4,24
    dfcc:	01400204 	movi	r5,8
    dfd0:	00c000b4 	movhi	r3,2
    dfd4:	20c7883a 	add	r3,r4,r3
    dfd8:	18af8103 	ldbu	r2,-16892(r3)
    dfdc:	2885c83a 	sub	r2,r5,r2
    dfe0:	f800283a 	ret
    dfe4:	2008d43a 	srli	r4,r4,16
    dfe8:	01400404 	movi	r5,16
    dfec:	003ff806 	br	dfd0 <__clzsi2+0x28>
    dff0:	2008d23a 	srli	r4,r4,8
    dff4:	01400604 	movi	r5,24
    dff8:	003ff506 	br	dfd0 <__clzsi2+0x28>

0000dffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dffc:	defffe04 	addi	sp,sp,-8
    e000:	dfc00115 	stw	ra,4(sp)
    e004:	df000015 	stw	fp,0(sp)
    e008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e00c:	d0a00b17 	ldw	r2,-32724(gp)
    e010:	10000326 	beq	r2,zero,e020 <alt_get_errno+0x24>
    e014:	d0a00b17 	ldw	r2,-32724(gp)
    e018:	103ee83a 	callr	r2
    e01c:	00000106 	br	e024 <alt_get_errno+0x28>
    e020:	d0a81f04 	addi	r2,gp,-24452
}
    e024:	e037883a 	mov	sp,fp
    e028:	dfc00117 	ldw	ra,4(sp)
    e02c:	df000017 	ldw	fp,0(sp)
    e030:	dec00204 	addi	sp,sp,8
    e034:	f800283a 	ret

0000e038 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e038:	defffb04 	addi	sp,sp,-20
    e03c:	dfc00415 	stw	ra,16(sp)
    e040:	df000315 	stw	fp,12(sp)
    e044:	df000304 	addi	fp,sp,12
    e048:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e04c:	e0bffd17 	ldw	r2,-12(fp)
    e050:	10000616 	blt	r2,zero,e06c <close+0x34>
    e054:	e0bffd17 	ldw	r2,-12(fp)
    e058:	10c00324 	muli	r3,r2,12
    e05c:	008000b4 	movhi	r2,2
    e060:	10b2d704 	addi	r2,r2,-13476
    e064:	1885883a 	add	r2,r3,r2
    e068:	00000106 	br	e070 <close+0x38>
    e06c:	0005883a 	mov	r2,zero
    e070:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    e074:	e0bfff17 	ldw	r2,-4(fp)
    e078:	10001926 	beq	r2,zero,e0e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e07c:	e0bfff17 	ldw	r2,-4(fp)
    e080:	10800017 	ldw	r2,0(r2)
    e084:	10800417 	ldw	r2,16(r2)
    e088:	10000626 	beq	r2,zero,e0a4 <close+0x6c>
    e08c:	e0bfff17 	ldw	r2,-4(fp)
    e090:	10800017 	ldw	r2,0(r2)
    e094:	10800417 	ldw	r2,16(r2)
    e098:	e13fff17 	ldw	r4,-4(fp)
    e09c:	103ee83a 	callr	r2
    e0a0:	00000106 	br	e0a8 <close+0x70>
    e0a4:	0005883a 	mov	r2,zero
    e0a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e0ac:	e13ffd17 	ldw	r4,-12(fp)
    e0b0:	000eb140 	call	eb14 <alt_release_fd>
    if (rval < 0)
    e0b4:	e0bffe17 	ldw	r2,-8(fp)
    e0b8:	1000070e 	bge	r2,zero,e0d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e0bc:	000dffc0 	call	dffc <alt_get_errno>
    e0c0:	1007883a 	mov	r3,r2
    e0c4:	e0bffe17 	ldw	r2,-8(fp)
    e0c8:	0085c83a 	sub	r2,zero,r2
    e0cc:	18800015 	stw	r2,0(r3)
      return -1;
    e0d0:	00bfffc4 	movi	r2,-1
    e0d4:	00000706 	br	e0f4 <close+0xbc>
    }
    return 0;
    e0d8:	0005883a 	mov	r2,zero
    e0dc:	00000506 	br	e0f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e0e0:	000dffc0 	call	dffc <alt_get_errno>
    e0e4:	1007883a 	mov	r3,r2
    e0e8:	00801444 	movi	r2,81
    e0ec:	18800015 	stw	r2,0(r3)
    return -1;
    e0f0:	00bfffc4 	movi	r2,-1
  }
}
    e0f4:	e037883a 	mov	sp,fp
    e0f8:	dfc00117 	ldw	ra,4(sp)
    e0fc:	df000017 	ldw	fp,0(sp)
    e100:	dec00204 	addi	sp,sp,8
    e104:	f800283a 	ret

0000e108 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e108:	defffc04 	addi	sp,sp,-16
    e10c:	df000315 	stw	fp,12(sp)
    e110:	df000304 	addi	fp,sp,12
    e114:	e13fff15 	stw	r4,-4(fp)
    e118:	e17ffe15 	stw	r5,-8(fp)
    e11c:	e1bffd15 	stw	r6,-12(fp)
  return len;
    e120:	e0bffd17 	ldw	r2,-12(fp)
}
    e124:	e037883a 	mov	sp,fp
    e128:	df000017 	ldw	fp,0(sp)
    e12c:	dec00104 	addi	sp,sp,4
    e130:	f800283a 	ret

0000e134 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e134:	defffd04 	addi	sp,sp,-12
    e138:	df000215 	stw	fp,8(sp)
    e13c:	df000204 	addi	fp,sp,8
    e140:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    e144:	d0283845 	stb	zero,-24351(gp)
    e148:	e0bffe17 	ldw	r2,-8(fp)
    e14c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    e150:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e154:	10000226 	beq	r2,zero,e160 <_exit+0x2c>
    ALT_SIM_FAIL();
    e158:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    e15c:	00000106 	br	e164 <_exit+0x30>
    ALT_SIM_PASS();
    e160:	002af0b0 	cmpltui	zero,zero,43970
}
    e164:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e168:	003fff06 	br	e168 <_exit+0x34>

0000e16c <alt_get_errno>:
{
    e16c:	defffe04 	addi	sp,sp,-8
    e170:	dfc00115 	stw	ra,4(sp)
    e174:	df000015 	stw	fp,0(sp)
    e178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e17c:	d0a00b17 	ldw	r2,-32724(gp)
    e180:	10000326 	beq	r2,zero,e190 <alt_get_errno+0x24>
    e184:	d0a00b17 	ldw	r2,-32724(gp)
    e188:	103ee83a 	callr	r2
    e18c:	00000106 	br	e194 <alt_get_errno+0x28>
    e190:	d0a81f04 	addi	r2,gp,-24452
}
    e194:	e037883a 	mov	sp,fp
    e198:	dfc00117 	ldw	ra,4(sp)
    e19c:	df000017 	ldw	fp,0(sp)
    e1a0:	dec00204 	addi	sp,sp,8
    e1a4:	f800283a 	ret

0000e1a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e1a8:	defffb04 	addi	sp,sp,-20
    e1ac:	dfc00415 	stw	ra,16(sp)
    e1b0:	df000315 	stw	fp,12(sp)
    e1b4:	df000304 	addi	fp,sp,12
    e1b8:	e13ffe15 	stw	r4,-8(fp)
    e1bc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e1c0:	e0bffe17 	ldw	r2,-8(fp)
    e1c4:	10000616 	blt	r2,zero,e1e0 <fstat+0x38>
    e1c8:	e0bffe17 	ldw	r2,-8(fp)
    e1cc:	10c00324 	muli	r3,r2,12
    e1d0:	008000b4 	movhi	r2,2
    e1d4:	10b2d704 	addi	r2,r2,-13476
    e1d8:	1885883a 	add	r2,r3,r2
    e1dc:	00000106 	br	e1e4 <fstat+0x3c>
    e1e0:	0005883a 	mov	r2,zero
    e1e4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e1e8:	e0bfff17 	ldw	r2,-4(fp)
    e1ec:	10001026 	beq	r2,zero,e230 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e1f0:	e0bfff17 	ldw	r2,-4(fp)
    e1f4:	10800017 	ldw	r2,0(r2)
    e1f8:	10800817 	ldw	r2,32(r2)
    e1fc:	10000726 	beq	r2,zero,e21c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e200:	e0bfff17 	ldw	r2,-4(fp)
    e204:	10800017 	ldw	r2,0(r2)
    e208:	10800817 	ldw	r2,32(r2)
    e20c:	e17ffd17 	ldw	r5,-12(fp)
    e210:	e13fff17 	ldw	r4,-4(fp)
    e214:	103ee83a 	callr	r2
    e218:	00000a06 	br	e244 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e21c:	e0bffd17 	ldw	r2,-12(fp)
    e220:	00c80004 	movi	r3,8192
    e224:	10c00115 	stw	r3,4(r2)
      return 0;
    e228:	0005883a 	mov	r2,zero
    e22c:	00000506 	br	e244 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e230:	000e16c0 	call	e16c <alt_get_errno>
    e234:	1007883a 	mov	r3,r2
    e238:	00801444 	movi	r2,81
    e23c:	18800015 	stw	r2,0(r3)
    return -1;
    e240:	00bfffc4 	movi	r2,-1
  }
}
    e244:	e037883a 	mov	sp,fp
    e248:	dfc00117 	ldw	ra,4(sp)
    e24c:	df000017 	ldw	fp,0(sp)
    e250:	dec00204 	addi	sp,sp,8
    e254:	f800283a 	ret

0000e258 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    e258:	deffff04 	addi	sp,sp,-4
    e25c:	df000015 	stw	fp,0(sp)
    e260:	d839883a 	mov	fp,sp
  return 0;
    e264:	0005883a 	mov	r2,zero
}
    e268:	e037883a 	mov	sp,fp
    e26c:	df000017 	ldw	fp,0(sp)
    e270:	dec00104 	addi	sp,sp,4
    e274:	f800283a 	ret

0000e278 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    e278:	defff804 	addi	sp,sp,-32
    e27c:	dfc00715 	stw	ra,28(sp)
    e280:	df000615 	stw	fp,24(sp)
    e284:	dc000515 	stw	r16,20(sp)
    e288:	df000604 	addi	fp,sp,24
    e28c:	e13ffb15 	stw	r4,-20(fp)
    e290:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    e294:	e0bffa17 	ldw	r2,-24(fp)
    e298:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e29c:	d0a82b17 	ldw	r2,-24404(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    e2a0:	e0bffd15 	stw	r2,-12(fp)
  return _alt_tick_rate;
    e2a4:	d0a82a17 	ldw	r2,-24408(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    e2a8:	e0bffc15 	stw	r2,-16(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    e2ac:	e0bffc17 	ldw	r2,-16(fp)
    e2b0:	10008226 	beq	r2,zero,e4bc <gettimeofday+0x244>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    e2b4:	008000f4 	movhi	r2,3
    e2b8:	11307317 	ldw	r4,-15924(r2)
    e2bc:	008000f4 	movhi	r2,3
    e2c0:	11707417 	ldw	r5,-15920(r2)
    e2c4:	e0fffd17 	ldw	r3,-12(fp)
    e2c8:	e0bffc17 	ldw	r2,-16(fp)
    e2cc:	1885203a 	divu	r2,r3,r2
    e2d0:	1015883a 	mov	r10,r2
    e2d4:	0017883a 	mov	r11,zero
    e2d8:	2285883a 	add	r2,r4,r10
    e2dc:	111d803a 	cmpltu	r14,r2,r4
    e2e0:	2ac7883a 	add	r3,r5,r11
    e2e4:	70c9883a 	add	r4,r14,r3
    e2e8:	2007883a 	mov	r3,r4
    e2ec:	1009883a 	mov	r4,r2
    e2f0:	180b883a 	mov	r5,r3
    e2f4:	e0bffb17 	ldw	r2,-20(fp)
    e2f8:	11000015 	stw	r4,0(r2)
    e2fc:	11400115 	stw	r5,4(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    e300:	008000f4 	movhi	r2,3
    e304:	10b07517 	ldw	r2,-15916(r2)
    e308:	1021883a 	mov	r16,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    e30c:	e0bffd17 	ldw	r2,-12(fp)
    e310:	1011883a 	mov	r8,r2
    e314:	0013883a 	mov	r9,zero
    e318:	008003f4 	movhi	r2,15
    e31c:	10909004 	addi	r2,r2,16960
    e320:	e0fffc17 	ldw	r3,-16(fp)
    e324:	10c5203a 	divu	r2,r2,r3
    e328:	100d883a 	mov	r6,r2
    e32c:	000f883a 	mov	r7,zero
    e330:	4987383a 	mul	r3,r9,r6
    e334:	3a05383a 	mul	r2,r7,r8
    e338:	1885883a 	add	r2,r3,r2
    e33c:	4186383a 	mulxuu	r3,r8,r6
    e340:	4189383a 	mul	r4,r8,r6
    e344:	2019883a 	mov	r12,r4
    e348:	181b883a 	mov	r13,r3
    e34c:	1345883a 	add	r2,r2,r13
    e350:	101b883a 	mov	r13,r2
    e354:	018003f4 	movhi	r6,15
    e358:	31909004 	addi	r6,r6,16960
    e35c:	000f883a 	mov	r7,zero
    e360:	6009883a 	mov	r4,r12
    e364:	680b883a 	mov	r5,r13
    e368:	000b3e00 	call	b3e0 <__umoddi3>
    e36c:	1009883a 	mov	r4,r2
    e370:	180b883a 	mov	r5,r3
    e374:	2005883a 	mov	r2,r4
    e378:	2807883a 	mov	r3,r5
    ptimeval->tv_usec = alt_resettime.tv_usec +
    e37c:	8085883a 	add	r2,r16,r2
    e380:	1007883a 	mov	r3,r2
    e384:	e0bffb17 	ldw	r2,-20(fp)
    e388:	10c00215 	stw	r3,8(r2)
      
    while(ptimeval->tv_usec < 0) {
    e38c:	00002206 	br	e418 <gettimeofday+0x1a0>
      if (ptimeval->tv_sec <= 0)
    e390:	e13ffb17 	ldw	r4,-20(fp)
    e394:	20800017 	ldw	r2,0(r4)
    e398:	20c00117 	ldw	r3,4(r4)
    e39c:	00c00816 	blt	zero,r3,e3c0 <gettimeofday+0x148>
    e3a0:	1800011e 	bne	r3,zero,e3a8 <gettimeofday+0x130>
    e3a4:	1000061e 	bne	r2,zero,e3c0 <gettimeofday+0x148>
      {
          ptimeval->tv_sec = 0;
    e3a8:	e0bffb17 	ldw	r2,-20(fp)
    e3ac:	10000015 	stw	zero,0(r2)
    e3b0:	10000115 	stw	zero,4(r2)
          ptimeval->tv_usec = 0;
    e3b4:	e0bffb17 	ldw	r2,-20(fp)
    e3b8:	10000215 	stw	zero,8(r2)
          break;
    e3bc:	00001906 	br	e424 <gettimeofday+0x1ac>
      }
      else
      {
          ptimeval->tv_sec--;
    e3c0:	e0bffb17 	ldw	r2,-20(fp)
    e3c4:	11000017 	ldw	r4,0(r2)
    e3c8:	11400117 	ldw	r5,4(r2)
    e3cc:	01bfffc4 	movi	r6,-1
    e3d0:	01ffffc4 	movi	r7,-1
    e3d4:	2185883a 	add	r2,r4,r6
    e3d8:	1111803a 	cmpltu	r8,r2,r4
    e3dc:	29c7883a 	add	r3,r5,r7
    e3e0:	40c9883a 	add	r4,r8,r3
    e3e4:	2007883a 	mov	r3,r4
    e3e8:	1009883a 	mov	r4,r2
    e3ec:	180b883a 	mov	r5,r3
    e3f0:	e0bffb17 	ldw	r2,-20(fp)
    e3f4:	11000015 	stw	r4,0(r2)
    e3f8:	11400115 	stw	r5,4(r2)
          ptimeval->tv_usec += ALT_US;
    e3fc:	e0bffb17 	ldw	r2,-20(fp)
    e400:	10c00217 	ldw	r3,8(r2)
    e404:	008003f4 	movhi	r2,15
    e408:	10909004 	addi	r2,r2,16960
    e40c:	1887883a 	add	r3,r3,r2
    e410:	e0bffb17 	ldw	r2,-20(fp)
    e414:	10c00215 	stw	r3,8(r2)
    while(ptimeval->tv_usec < 0) {
    e418:	e0bffb17 	ldw	r2,-20(fp)
    e41c:	10800217 	ldw	r2,8(r2)
    e420:	103fdb16 	blt	r2,zero,e390 <gettimeofday+0x118>
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    e424:	00001606 	br	e480 <gettimeofday+0x208>
      ptimeval->tv_sec++;
    e428:	e0bffb17 	ldw	r2,-20(fp)
    e42c:	11000017 	ldw	r4,0(r2)
    e430:	11400117 	ldw	r5,4(r2)
    e434:	01800044 	movi	r6,1
    e438:	000f883a 	mov	r7,zero
    e43c:	2185883a 	add	r2,r4,r6
    e440:	1111803a 	cmpltu	r8,r2,r4
    e444:	29c7883a 	add	r3,r5,r7
    e448:	40c9883a 	add	r4,r8,r3
    e44c:	2007883a 	mov	r3,r4
    e450:	1009883a 	mov	r4,r2
    e454:	180b883a 	mov	r5,r3
    e458:	e0bffb17 	ldw	r2,-20(fp)
    e45c:	11000015 	stw	r4,0(r2)
    e460:	11400115 	stw	r5,4(r2)
      ptimeval->tv_usec -= ALT_US;
    e464:	e0bffb17 	ldw	r2,-20(fp)
    e468:	10c00217 	ldw	r3,8(r2)
    e46c:	00bffc74 	movhi	r2,65521
    e470:	10af7004 	addi	r2,r2,-16960
    e474:	1887883a 	add	r3,r3,r2
    e478:	e0bffb17 	ldw	r2,-20(fp)
    e47c:	10c00215 	stw	r3,8(r2)
    while(ptimeval->tv_usec >= ALT_US) {
    e480:	e0bffb17 	ldw	r2,-20(fp)
    e484:	10c00217 	ldw	r3,8(r2)
    e488:	008003f4 	movhi	r2,15
    e48c:	10908fc4 	addi	r2,r2,16959
    e490:	10ffe516 	blt	r2,r3,e428 <gettimeofday+0x1b0>
    }
      
    if (ptimezone)
    e494:	e0bffe17 	ldw	r2,-8(fp)
    e498:	10000626 	beq	r2,zero,e4b4 <gettimeofday+0x23c>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    e49c:	d0e82517 	ldw	r3,-24428(gp)
    e4a0:	e0bffe17 	ldw	r2,-8(fp)
    e4a4:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    e4a8:	d0e82617 	ldw	r3,-24424(gp)
    e4ac:	e0bffe17 	ldw	r2,-8(fp)
    e4b0:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    e4b4:	0005883a 	mov	r2,zero
    e4b8:	00000106 	br	e4c0 <gettimeofday+0x248>
  }

  return -ENOTSUP;
    e4bc:	00bfde84 	movi	r2,-134
}
    e4c0:	e6ffff04 	addi	sp,fp,-4
    e4c4:	dfc00217 	ldw	ra,8(sp)
    e4c8:	df000117 	ldw	fp,4(sp)
    e4cc:	dc000017 	ldw	r16,0(sp)
    e4d0:	dec00304 	addi	sp,sp,12
    e4d4:	f800283a 	ret

0000e4d8 <alt_get_errno>:
{
    e4d8:	defffe04 	addi	sp,sp,-8
    e4dc:	dfc00115 	stw	ra,4(sp)
    e4e0:	df000015 	stw	fp,0(sp)
    e4e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e4e8:	d0a00b17 	ldw	r2,-32724(gp)
    e4ec:	10000326 	beq	r2,zero,e4fc <alt_get_errno+0x24>
    e4f0:	d0a00b17 	ldw	r2,-32724(gp)
    e4f4:	103ee83a 	callr	r2
    e4f8:	00000106 	br	e500 <alt_get_errno+0x28>
    e4fc:	d0a81f04 	addi	r2,gp,-24452
}
    e500:	e037883a 	mov	sp,fp
    e504:	dfc00117 	ldw	ra,4(sp)
    e508:	df000017 	ldw	fp,0(sp)
    e50c:	dec00204 	addi	sp,sp,8
    e510:	f800283a 	ret

0000e514 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e514:	deffea04 	addi	sp,sp,-88
    e518:	dfc01515 	stw	ra,84(sp)
    e51c:	df001415 	stw	fp,80(sp)
    e520:	df001404 	addi	fp,sp,80
    e524:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e528:	e0bfec17 	ldw	r2,-80(fp)
    e52c:	10000616 	blt	r2,zero,e548 <isatty+0x34>
    e530:	e0bfec17 	ldw	r2,-80(fp)
    e534:	10c00324 	muli	r3,r2,12
    e538:	008000b4 	movhi	r2,2
    e53c:	10b2d704 	addi	r2,r2,-13476
    e540:	1885883a 	add	r2,r3,r2
    e544:	00000106 	br	e54c <isatty+0x38>
    e548:	0005883a 	mov	r2,zero
    e54c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    e550:	e0bfff17 	ldw	r2,-4(fp)
    e554:	10000e26 	beq	r2,zero,e590 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e558:	e0bfff17 	ldw	r2,-4(fp)
    e55c:	10800017 	ldw	r2,0(r2)
    e560:	10800817 	ldw	r2,32(r2)
    e564:	1000021e 	bne	r2,zero,e570 <isatty+0x5c>
    {
      return 1;
    e568:	00800044 	movi	r2,1
    e56c:	00000d06 	br	e5a4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e570:	e0bfed04 	addi	r2,fp,-76
    e574:	100b883a 	mov	r5,r2
    e578:	e13fec17 	ldw	r4,-80(fp)
    e57c:	000e1a80 	call	e1a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e580:	e0bfee17 	ldw	r2,-72(fp)
    e584:	10880020 	cmpeqi	r2,r2,8192
    e588:	10803fcc 	andi	r2,r2,255
    e58c:	00000506 	br	e5a4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e590:	000e4d80 	call	e4d8 <alt_get_errno>
    e594:	1007883a 	mov	r3,r2
    e598:	00801444 	movi	r2,81
    e59c:	18800015 	stw	r2,0(r3)
    return 0;
    e5a0:	0005883a 	mov	r2,zero
  }
}
    e5a4:	e037883a 	mov	sp,fp
    e5a8:	dfc00117 	ldw	ra,4(sp)
    e5ac:	df000017 	ldw	fp,0(sp)
    e5b0:	dec00204 	addi	sp,sp,8
    e5b4:	f800283a 	ret

0000e5b8 <alt_get_errno>:
{
    e5b8:	defffe04 	addi	sp,sp,-8
    e5bc:	dfc00115 	stw	ra,4(sp)
    e5c0:	df000015 	stw	fp,0(sp)
    e5c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e5c8:	d0a00b17 	ldw	r2,-32724(gp)
    e5cc:	10000326 	beq	r2,zero,e5dc <alt_get_errno+0x24>
    e5d0:	d0a00b17 	ldw	r2,-32724(gp)
    e5d4:	103ee83a 	callr	r2
    e5d8:	00000106 	br	e5e0 <alt_get_errno+0x28>
    e5dc:	d0a81f04 	addi	r2,gp,-24452
}
    e5e0:	e037883a 	mov	sp,fp
    e5e4:	dfc00117 	ldw	ra,4(sp)
    e5e8:	df000017 	ldw	fp,0(sp)
    e5ec:	dec00204 	addi	sp,sp,8
    e5f0:	f800283a 	ret

0000e5f4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    e5f4:	defffb04 	addi	sp,sp,-20
    e5f8:	dfc00415 	stw	ra,16(sp)
    e5fc:	df000315 	stw	fp,12(sp)
    e600:	df000304 	addi	fp,sp,12
    e604:	e13ffe15 	stw	r4,-8(fp)
    e608:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
    e60c:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
    e610:	e0bffe17 	ldw	r2,-8(fp)
    e614:	00802e16 	blt	zero,r2,e6d0 <kill+0xdc>
    e618:	e0bffd17 	ldw	r2,-12(fp)
    e61c:	10800828 	cmpgeui	r2,r2,32
    e620:	1000281e 	bne	r2,zero,e6c4 <kill+0xd0>
    e624:	e0bffd17 	ldw	r2,-12(fp)
    e628:	100690ba 	slli	r3,r2,2
    e62c:	00800074 	movhi	r2,1
    e630:	1885883a 	add	r2,r3,r2
    e634:	10b98f17 	ldw	r2,-6596(r2)
    e638:	1000683a 	jmp	r2
    e63c:	0000e6e4 	muli	zero,zero,923
    e640:	0000e6c4 	movi	zero,923
    e644:	0000e6c4 	movi	zero,923
    e648:	0000e6bc 	xorhi	zero,zero,922
    e64c:	0000e6bc 	xorhi	zero,zero,922
    e650:	0000e6bc 	xorhi	zero,zero,922
    e654:	0000e6bc 	xorhi	zero,zero,922
    e658:	0000e6c4 	movi	zero,923
    e65c:	0000e6bc 	xorhi	zero,zero,922
    e660:	0000e6bc 	xorhi	zero,zero,922
    e664:	0000e6bc 	xorhi	zero,zero,922
    e668:	0000e6bc 	xorhi	zero,zero,922
    e66c:	0000e6bc 	xorhi	zero,zero,922
    e670:	0000e6bc 	xorhi	zero,zero,922
    e674:	0000e6bc 	xorhi	zero,zero,922
    e678:	0000e6bc 	xorhi	zero,zero,922
    e67c:	0000e6e4 	muli	zero,zero,923
    e680:	0000e6c4 	movi	zero,923
    e684:	0000e6c4 	movi	zero,923
    e688:	0000e6c4 	movi	zero,923
    e68c:	0000e6e4 	muli	zero,zero,923
    e690:	0000e6c4 	movi	zero,923
    e694:	0000e6c4 	movi	zero,923
    e698:	0000e6bc 	xorhi	zero,zero,922
    e69c:	0000e6bc 	xorhi	zero,zero,922
    e6a0:	0000e6bc 	xorhi	zero,zero,922
    e6a4:	0000e6bc 	xorhi	zero,zero,922
    e6a8:	0000e6bc 	xorhi	zero,zero,922
    e6ac:	0000e6c4 	movi	zero,923
    e6b0:	0000e6c4 	movi	zero,923
    e6b4:	0000e6bc 	xorhi	zero,zero,922
    e6b8:	0000e6bc 	xorhi	zero,zero,922
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    e6bc:	0009883a 	mov	r4,zero
    e6c0:	000e1340 	call	e134 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    e6c4:	00800584 	movi	r2,22
    e6c8:	e0bfff15 	stw	r2,-4(fp)
    e6cc:	00000606 	br	e6e8 <kill+0xf4>
    }
  }

  else if (pid > 0)
    e6d0:	e0bffe17 	ldw	r2,-8(fp)
    e6d4:	0080040e 	bge	zero,r2,e6e8 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    e6d8:	008000c4 	movi	r2,3
    e6dc:	e0bfff15 	stw	r2,-4(fp)
    e6e0:	00000106 	br	e6e8 <kill+0xf4>
      break;
    e6e4:	0001883a 	nop
  }

  if (status)
    e6e8:	e0bfff17 	ldw	r2,-4(fp)
    e6ec:	10000626 	beq	r2,zero,e708 <kill+0x114>
  {
    ALT_ERRNO = status;
    e6f0:	000e5b80 	call	e5b8 <alt_get_errno>
    e6f4:	1007883a 	mov	r3,r2
    e6f8:	e0bfff17 	ldw	r2,-4(fp)
    e6fc:	18800015 	stw	r2,0(r3)
    return -1;
    e700:	00bfffc4 	movi	r2,-1
    e704:	00000106 	br	e70c <kill+0x118>
  }

  return 0;
    e708:	0005883a 	mov	r2,zero
}
    e70c:	e037883a 	mov	sp,fp
    e710:	dfc00117 	ldw	ra,4(sp)
    e714:	df000017 	ldw	fp,0(sp)
    e718:	dec00204 	addi	sp,sp,8
    e71c:	f800283a 	ret

0000e720 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    e720:	defffc04 	addi	sp,sp,-16
    e724:	df000315 	stw	fp,12(sp)
    e728:	df000304 	addi	fp,sp,12
    e72c:	e13fff15 	stw	r4,-4(fp)
    e730:	e17ffe15 	stw	r5,-8(fp)
    e734:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    e738:	e0fffe17 	ldw	r3,-8(fp)
    e73c:	e0bfff17 	ldw	r2,-4(fp)
    e740:	18800c26 	beq	r3,r2,e774 <alt_load_section+0x54>
  {
    while( to != end )
    e744:	00000806 	br	e768 <alt_load_section+0x48>
    {
      *to++ = *from++;
    e748:	e0ffff17 	ldw	r3,-4(fp)
    e74c:	18800104 	addi	r2,r3,4
    e750:	e0bfff15 	stw	r2,-4(fp)
    e754:	e0bffe17 	ldw	r2,-8(fp)
    e758:	11000104 	addi	r4,r2,4
    e75c:	e13ffe15 	stw	r4,-8(fp)
    e760:	18c00017 	ldw	r3,0(r3)
    e764:	10c00015 	stw	r3,0(r2)
    while( to != end )
    e768:	e0fffe17 	ldw	r3,-8(fp)
    e76c:	e0bffd17 	ldw	r2,-12(fp)
    e770:	18bff51e 	bne	r3,r2,e748 <alt_load_section+0x28>
    }
  }
}
    e774:	0001883a 	nop
    e778:	e037883a 	mov	sp,fp
    e77c:	df000017 	ldw	fp,0(sp)
    e780:	dec00104 	addi	sp,sp,4
    e784:	f800283a 	ret

0000e788 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e788:	defffe04 	addi	sp,sp,-8
    e78c:	dfc00115 	stw	ra,4(sp)
    e790:	df000015 	stw	fp,0(sp)
    e794:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    e798:	018000b4 	movhi	r6,2
    e79c:	31b84404 	addi	r6,r6,-7920
    e7a0:	014000b4 	movhi	r5,2
    e7a4:	29706704 	addi	r5,r5,-15972
    e7a8:	010000b4 	movhi	r4,2
    e7ac:	21384404 	addi	r4,r4,-7920
    e7b0:	000e7200 	call	e720 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    e7b4:	01800034 	movhi	r6,0
    e7b8:	31808f04 	addi	r6,r6,572
    e7bc:	01400034 	movhi	r5,0
    e7c0:	29400804 	addi	r5,r5,32
    e7c4:	01000034 	movhi	r4,0
    e7c8:	21000804 	addi	r4,r4,32
    e7cc:	000e7200 	call	e720 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    e7d0:	018000b4 	movhi	r6,2
    e7d4:	31b06704 	addi	r6,r6,-15972
    e7d8:	014000b4 	movhi	r5,2
    e7dc:	296dde04 	addi	r5,r5,-18568
    e7e0:	010000b4 	movhi	r4,2
    e7e4:	212dde04 	addi	r4,r4,-18568
    e7e8:	000e7200 	call	e720 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e7ec:	001a7100 	call	1a710 <alt_dcache_flush_all>
  alt_icache_flush_all();
    e7f0:	001a96c0 	call	1a96c <alt_icache_flush_all>
}
    e7f4:	0001883a 	nop
    e7f8:	e037883a 	mov	sp,fp
    e7fc:	dfc00117 	ldw	ra,4(sp)
    e800:	df000017 	ldw	fp,0(sp)
    e804:	dec00204 	addi	sp,sp,8
    e808:	f800283a 	ret

0000e80c <alt_get_errno>:
{
    e80c:	defffe04 	addi	sp,sp,-8
    e810:	dfc00115 	stw	ra,4(sp)
    e814:	df000015 	stw	fp,0(sp)
    e818:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e81c:	d0a00b17 	ldw	r2,-32724(gp)
    e820:	10000326 	beq	r2,zero,e830 <alt_get_errno+0x24>
    e824:	d0a00b17 	ldw	r2,-32724(gp)
    e828:	103ee83a 	callr	r2
    e82c:	00000106 	br	e834 <alt_get_errno+0x28>
    e830:	d0a81f04 	addi	r2,gp,-24452
}
    e834:	e037883a 	mov	sp,fp
    e838:	dfc00117 	ldw	ra,4(sp)
    e83c:	df000017 	ldw	fp,0(sp)
    e840:	dec00204 	addi	sp,sp,8
    e844:	f800283a 	ret

0000e848 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e848:	defff904 	addi	sp,sp,-28
    e84c:	dfc00615 	stw	ra,24(sp)
    e850:	df000515 	stw	fp,20(sp)
    e854:	df000504 	addi	fp,sp,20
    e858:	e13ffd15 	stw	r4,-12(fp)
    e85c:	e17ffc15 	stw	r5,-16(fp)
    e860:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    e864:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e868:	e0bffd17 	ldw	r2,-12(fp)
    e86c:	10000616 	blt	r2,zero,e888 <lseek+0x40>
    e870:	e0bffd17 	ldw	r2,-12(fp)
    e874:	10c00324 	muli	r3,r2,12
    e878:	008000b4 	movhi	r2,2
    e87c:	10b2d704 	addi	r2,r2,-13476
    e880:	1885883a 	add	r2,r3,r2
    e884:	00000106 	br	e88c <lseek+0x44>
    e888:	0005883a 	mov	r2,zero
    e88c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    e890:	e0bffe17 	ldw	r2,-8(fp)
    e894:	10001026 	beq	r2,zero,e8d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e898:	e0bffe17 	ldw	r2,-8(fp)
    e89c:	10800017 	ldw	r2,0(r2)
    e8a0:	10800717 	ldw	r2,28(r2)
    e8a4:	10000926 	beq	r2,zero,e8cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e8a8:	e0bffe17 	ldw	r2,-8(fp)
    e8ac:	10800017 	ldw	r2,0(r2)
    e8b0:	10800717 	ldw	r2,28(r2)
    e8b4:	e1bffb17 	ldw	r6,-20(fp)
    e8b8:	e17ffc17 	ldw	r5,-16(fp)
    e8bc:	e13ffe17 	ldw	r4,-8(fp)
    e8c0:	103ee83a 	callr	r2
    e8c4:	e0bfff15 	stw	r2,-4(fp)
    e8c8:	00000506 	br	e8e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    e8cc:	00bfde84 	movi	r2,-134
    e8d0:	e0bfff15 	stw	r2,-4(fp)
    e8d4:	00000206 	br	e8e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    e8d8:	00bfebc4 	movi	r2,-81
    e8dc:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    e8e0:	e0bfff17 	ldw	r2,-4(fp)
    e8e4:	1000070e 	bge	r2,zero,e904 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    e8e8:	000e80c0 	call	e80c <alt_get_errno>
    e8ec:	1007883a 	mov	r3,r2
    e8f0:	e0bfff17 	ldw	r2,-4(fp)
    e8f4:	0085c83a 	sub	r2,zero,r2
    e8f8:	18800015 	stw	r2,0(r3)
    rc = -1;
    e8fc:	00bfffc4 	movi	r2,-1
    e900:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    e904:	e0bfff17 	ldw	r2,-4(fp)
}
    e908:	e037883a 	mov	sp,fp
    e90c:	dfc00117 	ldw	ra,4(sp)
    e910:	df000017 	ldw	fp,0(sp)
    e914:	dec00204 	addi	sp,sp,8
    e918:	f800283a 	ret

0000e91c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e91c:	defffb04 	addi	sp,sp,-20
    e920:	dfc00415 	stw	ra,16(sp)
    e924:	df000315 	stw	fp,12(sp)
    e928:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e92c:	0009883a 	mov	r4,zero
    e930:	0017cac0 	call	17cac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e934:	000fac40 	call	fac4 <OSInit>
    e938:	01000044 	movi	r4,1
    e93c:	00156440 	call	15644 <OSSemCreate>
    e940:	d0a82c15 	stw	r2,-24400(gp)
    e944:	01000044 	movi	r4,1
    e948:	00156440 	call	15644 <OSSemCreate>
    e94c:	d0a82e15 	stw	r2,-24392(gp)
    e950:	d0a82404 	addi	r2,gp,-24432
    e954:	e0bffe15 	stw	r2,-8(fp)
    e958:	00800044 	movi	r2,1
    e95c:	e0bffd8d 	sth	r2,-10(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    e960:	e0bffd8b 	ldhu	r2,-10(fp)
    e964:	1009883a 	mov	r4,r2
    e968:	00156440 	call	15644 <OSSemCreate>
    e96c:	1007883a 	mov	r3,r2
    e970:	e0bffe17 	ldw	r2,-8(fp)
    e974:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
    e978:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e97c:	0017ce80 	call	17ce8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e980:	018000b4 	movhi	r6,2
    e984:	31afc404 	addi	r6,r6,-16624
    e988:	014000b4 	movhi	r5,2
    e98c:	296fc404 	addi	r5,r5,-16624
    e990:	010000b4 	movhi	r4,2
    e994:	212fc404 	addi	r4,r4,-16624
    e998:	001aa500 	call	1aa50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e99c:	001a8140 	call	1a814 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e9a0:	010000b4 	movhi	r4,2
    e9a4:	212a1e04 	addi	r4,r4,-22408
    e9a8:	001b5080 	call	1b508 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e9ac:	d0a82717 	ldw	r2,-24420(gp)
    e9b0:	d0e82817 	ldw	r3,-24416(gp)
    e9b4:	d1282917 	ldw	r4,-24412(gp)
    e9b8:	200d883a 	mov	r6,r4
    e9bc:	180b883a 	mov	r5,r3
    e9c0:	1009883a 	mov	r4,r2
    e9c4:	0000fcc0 	call	fcc <main>
    e9c8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    e9cc:	01000044 	movi	r4,1
    e9d0:	000e0380 	call	e038 <close>
  exit (result);
    e9d4:	e13fff17 	ldw	r4,-4(fp)
    e9d8:	001b51c0 	call	1b51c <exit>

0000e9dc <alt_get_errno>:
{
    e9dc:	defffe04 	addi	sp,sp,-8
    e9e0:	dfc00115 	stw	ra,4(sp)
    e9e4:	df000015 	stw	fp,0(sp)
    e9e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e9ec:	d0a00b17 	ldw	r2,-32724(gp)
    e9f0:	10000326 	beq	r2,zero,ea00 <alt_get_errno+0x24>
    e9f4:	d0a00b17 	ldw	r2,-32724(gp)
    e9f8:	103ee83a 	callr	r2
    e9fc:	00000106 	br	ea04 <alt_get_errno+0x28>
    ea00:	d0a81f04 	addi	r2,gp,-24452
}
    ea04:	e037883a 	mov	sp,fp
    ea08:	dfc00117 	ldw	ra,4(sp)
    ea0c:	df000017 	ldw	fp,0(sp)
    ea10:	dec00204 	addi	sp,sp,8
    ea14:	f800283a 	ret

0000ea18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ea18:	defff904 	addi	sp,sp,-28
    ea1c:	dfc00615 	stw	ra,24(sp)
    ea20:	df000515 	stw	fp,20(sp)
    ea24:	df000504 	addi	fp,sp,20
    ea28:	e13ffd15 	stw	r4,-12(fp)
    ea2c:	e17ffc15 	stw	r5,-16(fp)
    ea30:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea34:	e0bffd17 	ldw	r2,-12(fp)
    ea38:	10000616 	blt	r2,zero,ea54 <read+0x3c>
    ea3c:	e0bffd17 	ldw	r2,-12(fp)
    ea40:	10c00324 	muli	r3,r2,12
    ea44:	008000b4 	movhi	r2,2
    ea48:	10b2d704 	addi	r2,r2,-13476
    ea4c:	1885883a 	add	r2,r3,r2
    ea50:	00000106 	br	ea58 <read+0x40>
    ea54:	0005883a 	mov	r2,zero
    ea58:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    ea5c:	e0bfff17 	ldw	r2,-4(fp)
    ea60:	10002226 	beq	r2,zero,eaec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea64:	e0bfff17 	ldw	r2,-4(fp)
    ea68:	10800217 	ldw	r2,8(r2)
    ea6c:	108000cc 	andi	r2,r2,3
    ea70:	10800060 	cmpeqi	r2,r2,1
    ea74:	1000181e 	bne	r2,zero,ead8 <read+0xc0>
        (fd->dev->read))
    ea78:	e0bfff17 	ldw	r2,-4(fp)
    ea7c:	10800017 	ldw	r2,0(r2)
    ea80:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea84:	10001426 	beq	r2,zero,ead8 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ea88:	e0bfff17 	ldw	r2,-4(fp)
    ea8c:	10800017 	ldw	r2,0(r2)
    ea90:	10800517 	ldw	r2,20(r2)
    ea94:	e0fffb17 	ldw	r3,-20(fp)
    ea98:	180d883a 	mov	r6,r3
    ea9c:	e17ffc17 	ldw	r5,-16(fp)
    eaa0:	e13fff17 	ldw	r4,-4(fp)
    eaa4:	103ee83a 	callr	r2
    eaa8:	e0bffe15 	stw	r2,-8(fp)
    eaac:	e0bffe17 	ldw	r2,-8(fp)
    eab0:	1000070e 	bge	r2,zero,ead0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    eab4:	000e9dc0 	call	e9dc <alt_get_errno>
    eab8:	1007883a 	mov	r3,r2
    eabc:	e0bffe17 	ldw	r2,-8(fp)
    eac0:	0085c83a 	sub	r2,zero,r2
    eac4:	18800015 	stw	r2,0(r3)
          return -1;
    eac8:	00bfffc4 	movi	r2,-1
    eacc:	00000c06 	br	eb00 <read+0xe8>
        }
        return rval;
    ead0:	e0bffe17 	ldw	r2,-8(fp)
    ead4:	00000a06 	br	eb00 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ead8:	000e9dc0 	call	e9dc <alt_get_errno>
    eadc:	1007883a 	mov	r3,r2
    eae0:	00800344 	movi	r2,13
    eae4:	18800015 	stw	r2,0(r3)
    eae8:	00000406 	br	eafc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    eaec:	000e9dc0 	call	e9dc <alt_get_errno>
    eaf0:	1007883a 	mov	r3,r2
    eaf4:	00801444 	movi	r2,81
    eaf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eafc:	00bfffc4 	movi	r2,-1
}
    eb00:	e037883a 	mov	sp,fp
    eb04:	dfc00117 	ldw	ra,4(sp)
    eb08:	df000017 	ldw	fp,0(sp)
    eb0c:	dec00204 	addi	sp,sp,8
    eb10:	f800283a 	ret

0000eb14 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    eb14:	defffe04 	addi	sp,sp,-8
    eb18:	df000115 	stw	fp,4(sp)
    eb1c:	df000104 	addi	fp,sp,4
    eb20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    eb24:	e0bfff17 	ldw	r2,-4(fp)
    eb28:	108000d0 	cmplti	r2,r2,3
    eb2c:	10000a1e 	bne	r2,zero,eb58 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
    eb30:	e0bfff17 	ldw	r2,-4(fp)
    eb34:	10c00324 	muli	r3,r2,12
    eb38:	008000b4 	movhi	r2,2
    eb3c:	1885883a 	add	r2,r3,r2
    eb40:	1032d915 	stw	zero,-13468(r2)
    alt_fd_list[fd].dev      = 0;
    eb44:	e0bfff17 	ldw	r2,-4(fp)
    eb48:	10c00324 	muli	r3,r2,12
    eb4c:	008000b4 	movhi	r2,2
    eb50:	1885883a 	add	r2,r3,r2
    eb54:	1032d715 	stw	zero,-13476(r2)
  }
}
    eb58:	0001883a 	nop
    eb5c:	e037883a 	mov	sp,fp
    eb60:	df000017 	ldw	fp,0(sp)
    eb64:	dec00104 	addi	sp,sp,4
    eb68:	f800283a 	ret

0000eb6c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    eb6c:	defff904 	addi	sp,sp,-28
    eb70:	df000615 	stw	fp,24(sp)
    eb74:	df000604 	addi	fp,sp,24
    eb78:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    eb7c:	0005303a 	rdctl	r2,status
    eb80:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb84:	e0fffd17 	ldw	r3,-12(fp)
    eb88:	00bfff84 	movi	r2,-2
    eb8c:	1884703a 	and	r2,r3,r2
    eb90:	1001703a 	wrctl	status,r2
  return context;
    eb94:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    eb98:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eb9c:	d0a00c17 	ldw	r2,-32720(gp)
    eba0:	10c000c4 	addi	r3,r2,3
    eba4:	00bfff04 	movi	r2,-4
    eba8:	1884703a 	and	r2,r3,r2
    ebac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ebb0:	d0e00c17 	ldw	r3,-32720(gp)
    ebb4:	e0bffa17 	ldw	r2,-24(fp)
    ebb8:	1887883a 	add	r3,r3,r2
    ebbc:	00810034 	movhi	r2,1024
    ebc0:	10800004 	addi	r2,r2,0
    ebc4:	10c0072e 	bgeu	r2,r3,ebe4 <sbrk+0x78>
    ebc8:	e0bfff17 	ldw	r2,-4(fp)
    ebcc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    ebd0:	e0bffc17 	ldw	r2,-16(fp)
    ebd4:	1001703a 	wrctl	status,r2
}
    ebd8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ebdc:	00bfffc4 	movi	r2,-1
    ebe0:	00000c06 	br	ec14 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    ebe4:	d0a00c17 	ldw	r2,-32720(gp)
    ebe8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    ebec:	d0e00c17 	ldw	r3,-32720(gp)
    ebf0:	e0bffa17 	ldw	r2,-24(fp)
    ebf4:	1885883a 	add	r2,r3,r2
    ebf8:	d0a00c15 	stw	r2,-32720(gp)
    ebfc:	e0bfff17 	ldw	r2,-4(fp)
    ec00:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    ec04:	e0bffb17 	ldw	r2,-20(fp)
    ec08:	1001703a 	wrctl	status,r2
}
    ec0c:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ec10:	e0bffe17 	ldw	r2,-8(fp)
} 
    ec14:	e037883a 	mov	sp,fp
    ec18:	df000017 	ldw	fp,0(sp)
    ec1c:	dec00104 	addi	sp,sp,4
    ec20:	f800283a 	ret

0000ec24 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ec24:	defffa04 	addi	sp,sp,-24
    ec28:	df000515 	stw	fp,20(sp)
    ec2c:	df000504 	addi	fp,sp,20
    ec30:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    ec34:	0005303a 	rdctl	r2,status
    ec38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec3c:	e0fffc17 	ldw	r3,-16(fp)
    ec40:	00bfff84 	movi	r2,-2
    ec44:	1884703a 	and	r2,r3,r2
    ec48:	1001703a 	wrctl	status,r2
  return context;
    ec4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ec50:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    ec54:	e0bffb17 	ldw	r2,-20(fp)
    ec58:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ec5c:	e0bffd17 	ldw	r2,-12(fp)
    ec60:	10800017 	ldw	r2,0(r2)
    ec64:	e0fffd17 	ldw	r3,-12(fp)
    ec68:	18c00117 	ldw	r3,4(r3)
    ec6c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    ec70:	e0bffd17 	ldw	r2,-12(fp)
    ec74:	10800117 	ldw	r2,4(r2)
    ec78:	e0fffd17 	ldw	r3,-12(fp)
    ec7c:	18c00017 	ldw	r3,0(r3)
    ec80:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    ec84:	e0bffd17 	ldw	r2,-12(fp)
    ec88:	e0fffd17 	ldw	r3,-12(fp)
    ec8c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    ec90:	e0bffd17 	ldw	r2,-12(fp)
    ec94:	e0fffd17 	ldw	r3,-12(fp)
    ec98:	10c00015 	stw	r3,0(r2)
} 
    ec9c:	0001883a 	nop
    eca0:	e0bfff17 	ldw	r2,-4(fp)
    eca4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    eca8:	e0bffe17 	ldw	r2,-8(fp)
    ecac:	1001703a 	wrctl	status,r2
}
    ecb0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    ecb4:	0001883a 	nop
    ecb8:	e037883a 	mov	sp,fp
    ecbc:	df000017 	ldw	fp,0(sp)
    ecc0:	dec00104 	addi	sp,sp,4
    ecc4:	f800283a 	ret

0000ecc8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ecc8:	defffb04 	addi	sp,sp,-20
    eccc:	dfc00415 	stw	ra,16(sp)
    ecd0:	df000315 	stw	fp,12(sp)
    ecd4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ecd8:	d0a00d17 	ldw	r2,-32716(gp)
    ecdc:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ece0:	d0a82b17 	ldw	r2,-24404(gp)
    ece4:	10800044 	addi	r2,r2,1
    ece8:	d0a82b15 	stw	r2,-24404(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ecec:	00002e06 	br	eda8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    ecf0:	e0bfff17 	ldw	r2,-4(fp)
    ecf4:	10800017 	ldw	r2,0(r2)
    ecf8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    ecfc:	e0bfff17 	ldw	r2,-4(fp)
    ed00:	10800403 	ldbu	r2,16(r2)
    ed04:	10803fcc 	andi	r2,r2,255
    ed08:	10000426 	beq	r2,zero,ed1c <alt_tick+0x54>
    ed0c:	d0a82b17 	ldw	r2,-24404(gp)
    ed10:	1000021e 	bne	r2,zero,ed1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    ed14:	e0bfff17 	ldw	r2,-4(fp)
    ed18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    ed1c:	e0bfff17 	ldw	r2,-4(fp)
    ed20:	10800217 	ldw	r2,8(r2)
    ed24:	d0e82b17 	ldw	r3,-24404(gp)
    ed28:	18801d36 	bltu	r3,r2,eda0 <alt_tick+0xd8>
    ed2c:	e0bfff17 	ldw	r2,-4(fp)
    ed30:	10800403 	ldbu	r2,16(r2)
    ed34:	10803fcc 	andi	r2,r2,255
    ed38:	1000191e 	bne	r2,zero,eda0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    ed3c:	e0bfff17 	ldw	r2,-4(fp)
    ed40:	10800317 	ldw	r2,12(r2)
    ed44:	e0ffff17 	ldw	r3,-4(fp)
    ed48:	18c00517 	ldw	r3,20(r3)
    ed4c:	1809883a 	mov	r4,r3
    ed50:	103ee83a 	callr	r2
    ed54:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    ed58:	e0bffd17 	ldw	r2,-12(fp)
    ed5c:	1000031e 	bne	r2,zero,ed6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    ed60:	e13fff17 	ldw	r4,-4(fp)
    ed64:	000ec240 	call	ec24 <alt_alarm_stop>
    ed68:	00000d06 	br	eda0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    ed6c:	e0bfff17 	ldw	r2,-4(fp)
    ed70:	10c00217 	ldw	r3,8(r2)
    ed74:	e0bffd17 	ldw	r2,-12(fp)
    ed78:	1887883a 	add	r3,r3,r2
    ed7c:	e0bfff17 	ldw	r2,-4(fp)
    ed80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    ed84:	e0bfff17 	ldw	r2,-4(fp)
    ed88:	10c00217 	ldw	r3,8(r2)
    ed8c:	d0a82b17 	ldw	r2,-24404(gp)
    ed90:	1880032e 	bgeu	r3,r2,eda0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    ed94:	e0bfff17 	ldw	r2,-4(fp)
    ed98:	00c00044 	movi	r3,1
    ed9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    eda0:	e0bffe17 	ldw	r2,-8(fp)
    eda4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    eda8:	e0ffff17 	ldw	r3,-4(fp)
    edac:	d0a00d04 	addi	r2,gp,-32716
    edb0:	18bfcf1e 	bne	r3,r2,ecf0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    edb4:	000fef00 	call	fef0 <OSTimeTick>
}
    edb8:	0001883a 	nop
    edbc:	e037883a 	mov	sp,fp
    edc0:	dfc00117 	ldw	ra,4(sp)
    edc4:	df000017 	ldw	fp,0(sp)
    edc8:	dec00204 	addi	sp,sp,8
    edcc:	f800283a 	ret

0000edd0 <alt_get_errno>:
{
    edd0:	defffe04 	addi	sp,sp,-8
    edd4:	dfc00115 	stw	ra,4(sp)
    edd8:	df000015 	stw	fp,0(sp)
    eddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ede0:	d0a00b17 	ldw	r2,-32724(gp)
    ede4:	10000326 	beq	r2,zero,edf4 <alt_get_errno+0x24>
    ede8:	d0a00b17 	ldw	r2,-32724(gp)
    edec:	103ee83a 	callr	r2
    edf0:	00000106 	br	edf8 <alt_get_errno+0x28>
    edf4:	d0a81f04 	addi	r2,gp,-24452
}
    edf8:	e037883a 	mov	sp,fp
    edfc:	dfc00117 	ldw	ra,4(sp)
    ee00:	df000017 	ldw	fp,0(sp)
    ee04:	dec00204 	addi	sp,sp,8
    ee08:	f800283a 	ret

0000ee0c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ee0c:	defff904 	addi	sp,sp,-28
    ee10:	dfc00615 	stw	ra,24(sp)
    ee14:	df000515 	stw	fp,20(sp)
    ee18:	df000504 	addi	fp,sp,20
    ee1c:	e13ffd15 	stw	r4,-12(fp)
    ee20:	e17ffc15 	stw	r5,-16(fp)
    ee24:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee28:	e0bffd17 	ldw	r2,-12(fp)
    ee2c:	10000616 	blt	r2,zero,ee48 <write+0x3c>
    ee30:	e0bffd17 	ldw	r2,-12(fp)
    ee34:	10c00324 	muli	r3,r2,12
    ee38:	008000b4 	movhi	r2,2
    ee3c:	10b2d704 	addi	r2,r2,-13476
    ee40:	1885883a 	add	r2,r3,r2
    ee44:	00000106 	br	ee4c <write+0x40>
    ee48:	0005883a 	mov	r2,zero
    ee4c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    ee50:	e0bfff17 	ldw	r2,-4(fp)
    ee54:	10002126 	beq	r2,zero,eedc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ee58:	e0bfff17 	ldw	r2,-4(fp)
    ee5c:	10800217 	ldw	r2,8(r2)
    ee60:	108000cc 	andi	r2,r2,3
    ee64:	10001826 	beq	r2,zero,eec8 <write+0xbc>
    ee68:	e0bfff17 	ldw	r2,-4(fp)
    ee6c:	10800017 	ldw	r2,0(r2)
    ee70:	10800617 	ldw	r2,24(r2)
    ee74:	10001426 	beq	r2,zero,eec8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ee78:	e0bfff17 	ldw	r2,-4(fp)
    ee7c:	10800017 	ldw	r2,0(r2)
    ee80:	10800617 	ldw	r2,24(r2)
    ee84:	e0fffb17 	ldw	r3,-20(fp)
    ee88:	180d883a 	mov	r6,r3
    ee8c:	e17ffc17 	ldw	r5,-16(fp)
    ee90:	e13fff17 	ldw	r4,-4(fp)
    ee94:	103ee83a 	callr	r2
    ee98:	e0bffe15 	stw	r2,-8(fp)
    ee9c:	e0bffe17 	ldw	r2,-8(fp)
    eea0:	1000070e 	bge	r2,zero,eec0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    eea4:	000edd00 	call	edd0 <alt_get_errno>
    eea8:	1007883a 	mov	r3,r2
    eeac:	e0bffe17 	ldw	r2,-8(fp)
    eeb0:	0085c83a 	sub	r2,zero,r2
    eeb4:	18800015 	stw	r2,0(r3)
        return -1;
    eeb8:	00bfffc4 	movi	r2,-1
    eebc:	00000c06 	br	eef0 <write+0xe4>
      }
      return rval;
    eec0:	e0bffe17 	ldw	r2,-8(fp)
    eec4:	00000a06 	br	eef0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    eec8:	000edd00 	call	edd0 <alt_get_errno>
    eecc:	1007883a 	mov	r3,r2
    eed0:	00800344 	movi	r2,13
    eed4:	18800015 	stw	r2,0(r3)
    eed8:	00000406 	br	eeec <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eedc:	000edd00 	call	edd0 <alt_get_errno>
    eee0:	1007883a 	mov	r3,r2
    eee4:	00801444 	movi	r2,81
    eee8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    eeec:	00bfffc4 	movi	r2,-1
}
    eef0:	e037883a 	mov	sp,fp
    eef4:	dfc00117 	ldw	ra,4(sp)
    eef8:	df000017 	ldw	fp,0(sp)
    eefc:	dec00204 	addi	sp,sp,8
    ef00:	f800283a 	ret

0000ef04 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    ef04:	deffdf04 	addi	sp,sp,-132
    ef08:	dfc02015 	stw	ra,128(sp)
    ef0c:	df001f15 	stw	fp,124(sp)
    ef10:	df001f04 	addi	fp,sp,124
    ef14:	e13fe115 	stw	r4,-124(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ef18:	e0bfe404 	addi	r2,fp,-112
    ef1c:	100b883a 	mov	r5,r2
    ef20:	01003fc4 	movi	r4,255
    ef24:	00175e00 	call	175e0 <OSTaskQuery>
    ef28:	e0bfe245 	stb	r2,-119(fp)
  if (err != OS_NO_ERR)
    ef2c:	e0bfe243 	ldbu	r2,-119(fp)
    ef30:	10803fcc 	andi	r2,r2,255
    ef34:	10001d1e 	bne	r2,zero,efac <__env_lock+0xa8>
    return;

  id = tcb.OSTCBPrio;
    ef38:	e0bff083 	ldbu	r2,-62(fp)
    ef3c:	10803fcc 	andi	r2,r2,255
    ef40:	e0bfff15 	stw	r2,-4(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    ef44:	d0a82c17 	ldw	r2,-24400(gp)
    ef48:	e0ffe284 	addi	r3,fp,-118
    ef4c:	180b883a 	mov	r5,r3
    ef50:	1009883a 	mov	r4,r2
    ef54:	0015e140 	call	15e14 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    ef58:	e0bfe3c3 	ldbu	r2,-113(fp)
    ef5c:	10803fcc 	andi	r2,r2,255
    ef60:	10000726 	beq	r2,zero,ef80 <__env_lock+0x7c>
    ef64:	d0a00f17 	ldw	r2,-32708(gp)
    ef68:	e0ffff17 	ldw	r3,-4(fp)
    ef6c:	1880041e 	bne	r3,r2,ef80 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    ef70:	d0a82d17 	ldw	r2,-24396(gp)
    ef74:	10800044 	addi	r2,r2,1
    ef78:	d0a82d15 	stw	r2,-24396(gp)
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    ef7c:	00000c06 	br	efb0 <__env_lock+0xac>
    OSSemPend( alt_envsem, 0, &err );
    ef80:	d0a82c17 	ldw	r2,-24400(gp)
    ef84:	e0ffe244 	addi	r3,fp,-119
    ef88:	180d883a 	mov	r6,r3
    ef8c:	000b883a 	mov	r5,zero
    ef90:	1009883a 	mov	r4,r2
    ef94:	00159700 	call	15970 <OSSemPend>
    locks  = 1;
    ef98:	00800044 	movi	r2,1
    ef9c:	d0a82d15 	stw	r2,-24396(gp)
    lockid = id;
    efa0:	e0bfff17 	ldw	r2,-4(fp)
    efa4:	d0a00f15 	stw	r2,-32708(gp)
  return;
    efa8:	00000106 	br	efb0 <__env_lock+0xac>
    return;
    efac:	0001883a 	nop
}
    efb0:	e037883a 	mov	sp,fp
    efb4:	dfc00117 	ldw	ra,4(sp)
    efb8:	df000017 	ldw	fp,0(sp)
    efbc:	dec00204 	addi	sp,sp,8
    efc0:	f800283a 	ret

0000efc4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    efc4:	defffd04 	addi	sp,sp,-12
    efc8:	dfc00215 	stw	ra,8(sp)
    efcc:	df000115 	stw	fp,4(sp)
    efd0:	df000104 	addi	fp,sp,4
    efd4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    efd8:	d0a82d17 	ldw	r2,-24396(gp)
    efdc:	10000b26 	beq	r2,zero,f00c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    efe0:	d0a82d17 	ldw	r2,-24396(gp)
    efe4:	10bfffc4 	addi	r2,r2,-1
    efe8:	d0a82d15 	stw	r2,-24396(gp)
    efec:	d0a82d17 	ldw	r2,-24396(gp)
    eff0:	1000071e 	bne	r2,zero,f010 <__env_unlock+0x4c>
  {
    lockid = -1;
    eff4:	00bfffc4 	movi	r2,-1
    eff8:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    effc:	d0a82c17 	ldw	r2,-24400(gp)
    f000:	1009883a 	mov	r4,r2
    f004:	0015cf80 	call	15cf8 <OSSemPost>
    f008:	00000106 	br	f010 <__env_unlock+0x4c>
    return;
    f00c:	0001883a 	nop
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    f010:	e037883a 	mov	sp,fp
    f014:	dfc00117 	ldw	ra,4(sp)
    f018:	df000017 	ldw	fp,0(sp)
    f01c:	dec00204 	addi	sp,sp,8
    f020:	f800283a 	ret

0000f024 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    f024:	deffdb04 	addi	sp,sp,-148
    f028:	dfc02415 	stw	ra,144(sp)
    f02c:	df002315 	stw	fp,140(sp)
    f030:	df002304 	addi	fp,sp,140
    f034:	e13fdd15 	stw	r4,-140(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f038:	e03fff15 	stw	zero,-4(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    f03c:	d0a83843 	ldbu	r2,-24351(gp)
    f040:	10803fcc 	andi	r2,r2,255
    f044:	10800060 	cmpeqi	r2,r2,1
    f048:	10003826 	beq	r2,zero,f12c <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    f04c:	e0bfe004 	addi	r2,fp,-128
    f050:	100b883a 	mov	r5,r2
    f054:	01003fc4 	movi	r4,255
    f058:	00175e00 	call	175e0 <OSTaskQuery>
    f05c:	e0bfde45 	stb	r2,-135(fp)
  if (err != OS_NO_ERR)
    f060:	e0bfde43 	ldbu	r2,-135(fp)
    f064:	10803fcc 	andi	r2,r2,255
    f068:	1000321e 	bne	r2,zero,f134 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
    f06c:	e0bfec83 	ldbu	r2,-78(fp)
    f070:	10803fcc 	andi	r2,r2,255
    f074:	e0bffe15 	stw	r2,-8(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    f078:	d0a82e17 	ldw	r2,-24392(gp)
    f07c:	e0ffde84 	addi	r3,fp,-134
    f080:	180b883a 	mov	r5,r3
    f084:	1009883a 	mov	r4,r2
    f088:	0015e140 	call	15e14 <OSSemQuery>
  NIOS2_READ_STATUS (context);
    f08c:	0005303a 	rdctl	r2,status
    f090:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f094:	e0fffd17 	ldw	r3,-12(fp)
    f098:	00bfff84 	movi	r2,-2
    f09c:	1884703a 	and	r2,r3,r2
    f0a0:	1001703a 	wrctl	status,r2
  return context;
    f0a4:	e0bffd17 	ldw	r2,-12(fp)
  
  OS_ENTER_CRITICAL();
    f0a8:	e0bfff15 	stw	r2,-4(fp)

  if( !semdata.OSCnt && id == lockid ) 
    f0ac:	e0bfde8b 	ldhu	r2,-134(fp)
    f0b0:	10bfffcc 	andi	r2,r2,65535
    f0b4:	10000d1e 	bne	r2,zero,f0ec <__malloc_lock+0xc8>
    f0b8:	d0a01017 	ldw	r2,-32704(gp)
    f0bc:	e0fffe17 	ldw	r3,-8(fp)
    f0c0:	18800a1e 	bne	r3,r2,f0ec <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
    f0c4:	d0a82f17 	ldw	r2,-24388(gp)
    f0c8:	10800044 	addi	r2,r2,1
    f0cc:	d0a82f15 	stw	r2,-24388(gp)
    f0d0:	e0bfff17 	ldw	r2,-4(fp)
    f0d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    f0d8:	e0bffc17 	ldw	r2,-16(fp)
    f0dc:	1001703a 	wrctl	status,r2
}
    f0e0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    f0e4:	0001883a 	nop
    locks  = 1;
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    f0e8:	00001306 	br	f138 <__malloc_lock+0x114>
    f0ec:	e0bfff17 	ldw	r2,-4(fp)
    f0f0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    f0f4:	e0bffb17 	ldw	r2,-20(fp)
    f0f8:	1001703a 	wrctl	status,r2
}
    f0fc:	0001883a 	nop
    OSSemPend( alt_heapsem, 0, &err );
    f100:	d0a82e17 	ldw	r2,-24392(gp)
    f104:	e0ffde44 	addi	r3,fp,-135
    f108:	180d883a 	mov	r6,r3
    f10c:	000b883a 	mov	r5,zero
    f110:	1009883a 	mov	r4,r2
    f114:	00159700 	call	15970 <OSSemPend>
    locks  = 1;
    f118:	00800044 	movi	r2,1
    f11c:	d0a82f15 	stw	r2,-24388(gp)
    lockid = id;
    f120:	e0bffe17 	ldw	r2,-8(fp)
    f124:	d0a01015 	stw	r2,-32704(gp)
  return;
    f128:	00000306 	br	f138 <__malloc_lock+0x114>
      return;
    f12c:	0001883a 	nop
    f130:	00000106 	br	f138 <__malloc_lock+0x114>
    return;
    f134:	0001883a 	nop
}
    f138:	e037883a 	mov	sp,fp
    f13c:	dfc00117 	ldw	ra,4(sp)
    f140:	df000017 	ldw	fp,0(sp)
    f144:	dec00204 	addi	sp,sp,8
    f148:	f800283a 	ret

0000f14c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f14c:	defff804 	addi	sp,sp,-32
    f150:	dfc00715 	stw	ra,28(sp)
    f154:	df000615 	stw	fp,24(sp)
    f158:	df000604 	addi	fp,sp,24
    f15c:	e13ffa15 	stw	r4,-24(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f160:	e03fff15 	stw	zero,-4(fp)
#endif 

  if (OSRunning != OS_TRUE)
    f164:	d0a83843 	ldbu	r2,-24351(gp)
    f168:	10803fcc 	andi	r2,r2,255
    f16c:	10800060 	cmpeqi	r2,r2,1
    f170:	10002526 	beq	r2,zero,f208 <__malloc_unlock+0xbc>
  NIOS2_READ_STATUS (context);
    f174:	0005303a 	rdctl	r2,status
    f178:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f17c:	e0fffe17 	ldw	r3,-8(fp)
    f180:	00bfff84 	movi	r2,-2
    f184:	1884703a 	and	r2,r3,r2
    f188:	1001703a 	wrctl	status,r2
  return context;
    f18c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    f190:	e0bfff15 	stw	r2,-4(fp)
  if (locks == 0)
    f194:	d0a82f17 	ldw	r2,-24388(gp)
    f198:	1000061e 	bne	r2,zero,f1b4 <__malloc_unlock+0x68>
    f19c:	e0bfff17 	ldw	r2,-4(fp)
    f1a0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    f1a4:	e0bffd17 	ldw	r2,-12(fp)
    f1a8:	1001703a 	wrctl	status,r2
}
    f1ac:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
      return;
    f1b0:	00001606 	br	f20c <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    f1b4:	d0a82f17 	ldw	r2,-24388(gp)
    f1b8:	10bfffc4 	addi	r2,r2,-1
    f1bc:	d0a82f15 	stw	r2,-24388(gp)
    f1c0:	d0a82f17 	ldw	r2,-24388(gp)
    f1c4:	10000b1e 	bne	r2,zero,f1f4 <__malloc_unlock+0xa8>
  {
    lockid = -1;
    f1c8:	00bfffc4 	movi	r2,-1
    f1cc:	d0a01015 	stw	r2,-32704(gp)
    f1d0:	e0bfff17 	ldw	r2,-4(fp)
    f1d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    f1d8:	e0bffc17 	ldw	r2,-16(fp)
    f1dc:	1001703a 	wrctl	status,r2
}
    f1e0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    f1e4:	d0a82e17 	ldw	r2,-24392(gp)
    f1e8:	1009883a 	mov	r4,r2
    f1ec:	0015cf80 	call	15cf8 <OSSemPost>
    f1f0:	00000606 	br	f20c <__malloc_unlock+0xc0>
    f1f4:	e0bfff17 	ldw	r2,-4(fp)
    f1f8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    f1fc:	e0bffb17 	ldw	r2,-20(fp)
    f200:	1001703a 	wrctl	status,r2
}
    f204:	00000106 	br	f20c <__malloc_unlock+0xc0>
      return;
    f208:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    f20c:	e037883a 	mov	sp,fp
    f210:	dfc00117 	ldw	ra,4(sp)
    f214:	df000017 	ldw	fp,0(sp)
    f218:	dec00204 	addi	sp,sp,8
    f21c:	f800283a 	ret

0000f220 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    f220:	defff704 	addi	sp,sp,-36
    f224:	dfc00815 	stw	ra,32(sp)
    f228:	df000715 	stw	fp,28(sp)
    f22c:	df000704 	addi	fp,sp,28
    f230:	e13ffb15 	stw	r4,-20(fp)
    f234:	e17ffa15 	stw	r5,-24(fp)
    f238:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f23c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f240:	e0bff917 	ldw	r2,-28(fp)
    f244:	1000021e 	bne	r2,zero,f250 <OSEventNameGet+0x30>
        return (0);
    f248:	0005883a 	mov	r2,zero
    f24c:	00003806 	br	f330 <OSEventNameGet+0x110>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    f250:	e0bffb17 	ldw	r2,-20(fp)
    f254:	1000051e 	bne	r2,zero,f26c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    f258:	e0bff917 	ldw	r2,-28(fp)
    f25c:	00c00104 	movi	r3,4
    f260:	10c00005 	stb	r3,0(r2)
        return (0);
    f264:	0005883a 	mov	r2,zero
    f268:	00003106 	br	f330 <OSEventNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f26c:	e0bffa17 	ldw	r2,-24(fp)
    f270:	1000051e 	bne	r2,zero,f288 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    f274:	e0bff917 	ldw	r2,-28(fp)
    f278:	00c00304 	movi	r3,12
    f27c:	10c00005 	stb	r3,0(r2)
        return (0);
    f280:	0005883a 	mov	r2,zero
    f284:	00002a06 	br	f330 <OSEventNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f288:	d0a83643 	ldbu	r2,-24359(gp)
    f28c:	10803fcc 	andi	r2,r2,255
    f290:	10000526 	beq	r2,zero,f2a8 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    f294:	e0bff917 	ldw	r2,-28(fp)
    f298:	00c00444 	movi	r3,17
    f29c:	10c00005 	stb	r3,0(r2)
        return (0);
    f2a0:	0005883a 	mov	r2,zero
    f2a4:	00002206 	br	f330 <OSEventNameGet+0x110>
    }
    switch (pevent->OSEventType) {
    f2a8:	e0bffb17 	ldw	r2,-20(fp)
    f2ac:	10800003 	ldbu	r2,0(r2)
    f2b0:	10803fcc 	andi	r2,r2,255
    f2b4:	10bfffc4 	addi	r2,r2,-1
    f2b8:	10800128 	cmpgeui	r2,r2,4
    f2bc:	10000526 	beq	r2,zero,f2d4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    f2c0:	e0bff917 	ldw	r2,-28(fp)
    f2c4:	00c00044 	movi	r3,1
    f2c8:	10c00005 	stb	r3,0(r2)
             return (0);
    f2cc:	0005883a 	mov	r2,zero
    f2d0:	00001706 	br	f330 <OSEventNameGet+0x110>
             break;
    f2d4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    f2d8:	0005303a 	rdctl	r2,status
    f2dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2e0:	e0fffc17 	ldw	r3,-16(fp)
    f2e4:	00bfff84 	movi	r2,-2
    f2e8:	1884703a 	and	r2,r3,r2
    f2ec:	1001703a 	wrctl	status,r2
  return context;
    f2f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    f2f4:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    f2f8:	e0bffb17 	ldw	r2,-20(fp)
    f2fc:	10800384 	addi	r2,r2,14
    f300:	100b883a 	mov	r5,r2
    f304:	e13ffa17 	ldw	r4,-24(fp)
    f308:	0010cd00 	call	10cd0 <OS_StrCopy>
    f30c:	e0bffec5 	stb	r2,-5(fp)
    f310:	e0bfff17 	ldw	r2,-4(fp)
    f314:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    f318:	e0bffd17 	ldw	r2,-12(fp)
    f31c:	1001703a 	wrctl	status,r2
}
    f320:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f324:	e0bff917 	ldw	r2,-28(fp)
    f328:	10000005 	stb	zero,0(r2)
    return (len);
    f32c:	e0bffec3 	ldbu	r2,-5(fp)
}
    f330:	e037883a 	mov	sp,fp
    f334:	dfc00117 	ldw	ra,4(sp)
    f338:	df000017 	ldw	fp,0(sp)
    f33c:	dec00204 	addi	sp,sp,8
    f340:	f800283a 	ret

0000f344 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    f344:	defff604 	addi	sp,sp,-40
    f348:	dfc00915 	stw	ra,36(sp)
    f34c:	df000815 	stw	fp,32(sp)
    f350:	df000804 	addi	fp,sp,32
    f354:	e13ffa15 	stw	r4,-24(fp)
    f358:	e17ff915 	stw	r5,-28(fp)
    f35c:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f360:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    f364:	e0bff817 	ldw	r2,-32(fp)
    f368:	10004226 	beq	r2,zero,f474 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    f36c:	e0bffa17 	ldw	r2,-24(fp)
    f370:	1000041e 	bne	r2,zero,f384 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    f374:	e0bff817 	ldw	r2,-32(fp)
    f378:	00c00104 	movi	r3,4
    f37c:	10c00005 	stb	r3,0(r2)
        return;
    f380:	00003d06 	br	f478 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    f384:	e0bff917 	ldw	r2,-28(fp)
    f388:	1000041e 	bne	r2,zero,f39c <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    f38c:	e0bff817 	ldw	r2,-32(fp)
    f390:	00c00304 	movi	r3,12
    f394:	10c00005 	stb	r3,0(r2)
        return;
    f398:	00003706 	br	f478 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    f39c:	d0a83643 	ldbu	r2,-24359(gp)
    f3a0:	10803fcc 	andi	r2,r2,255
    f3a4:	10000426 	beq	r2,zero,f3b8 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    f3a8:	e0bff817 	ldw	r2,-32(fp)
    f3ac:	00c00484 	movi	r3,18
    f3b0:	10c00005 	stb	r3,0(r2)
        return;
    f3b4:	00003006 	br	f478 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
    f3b8:	e0bffa17 	ldw	r2,-24(fp)
    f3bc:	10800003 	ldbu	r2,0(r2)
    f3c0:	10803fcc 	andi	r2,r2,255
    f3c4:	10bfffc4 	addi	r2,r2,-1
    f3c8:	10800128 	cmpgeui	r2,r2,4
    f3cc:	10000426 	beq	r2,zero,f3e0 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    f3d0:	e0bff817 	ldw	r2,-32(fp)
    f3d4:	00c00044 	movi	r3,1
    f3d8:	10c00005 	stb	r3,0(r2)
             return;
    f3dc:	00002606 	br	f478 <OSEventNameSet+0x134>
             break;
    f3e0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    f3e4:	0005303a 	rdctl	r2,status
    f3e8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3ec:	e0fffd17 	ldw	r3,-12(fp)
    f3f0:	00bfff84 	movi	r2,-2
    f3f4:	1884703a 	and	r2,r3,r2
    f3f8:	1001703a 	wrctl	status,r2
  return context;
    f3fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    f400:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    f404:	e13ff917 	ldw	r4,-28(fp)
    f408:	0010d440 	call	10d44 <OS_StrLen>
    f40c:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    f410:	e0bffec3 	ldbu	r2,-5(fp)
    f414:	10800830 	cmpltui	r2,r2,32
    f418:	1000091e 	bne	r2,zero,f440 <OSEventNameSet+0xfc>
    f41c:	e0bfff17 	ldw	r2,-4(fp)
    f420:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    f424:	e0bffc17 	ldw	r2,-16(fp)
    f428:	1001703a 	wrctl	status,r2
}
    f42c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    f430:	e0bff817 	ldw	r2,-32(fp)
    f434:	00c002c4 	movi	r3,11
    f438:	10c00005 	stb	r3,0(r2)
        return;
    f43c:	00000e06 	br	f478 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    f440:	e0bffa17 	ldw	r2,-24(fp)
    f444:	10800384 	addi	r2,r2,14
    f448:	e17ff917 	ldw	r5,-28(fp)
    f44c:	1009883a 	mov	r4,r2
    f450:	0010cd00 	call	10cd0 <OS_StrCopy>
    f454:	e0bfff17 	ldw	r2,-4(fp)
    f458:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    f45c:	e0bffb17 	ldw	r2,-20(fp)
    f460:	1001703a 	wrctl	status,r2
}
    f464:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f468:	e0bff817 	ldw	r2,-32(fp)
    f46c:	10000005 	stb	zero,0(r2)
    f470:	00000106 	br	f478 <OSEventNameSet+0x134>
        return;
    f474:	0001883a 	nop
}
    f478:	e037883a 	mov	sp,fp
    f47c:	dfc00117 	ldw	ra,4(sp)
    f480:	df000017 	ldw	fp,0(sp)
    f484:	dec00204 	addi	sp,sp,8
    f488:	f800283a 	ret

0000f48c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    f48c:	deffed04 	addi	sp,sp,-76
    f490:	dfc01215 	stw	ra,72(sp)
    f494:	df001115 	stw	fp,68(sp)
    f498:	df001104 	addi	fp,sp,68
    f49c:	e13ff215 	stw	r4,-56(fp)
    f4a0:	e17ff115 	stw	r5,-60(fp)
    f4a4:	e1bff015 	stw	r6,-64(fp)
    f4a8:	3805883a 	mov	r2,r7
    f4ac:	e0bfef0d 	sth	r2,-68(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    f4b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    f4b4:	e0800217 	ldw	r2,8(fp)
    f4b8:	1000021e 	bne	r2,zero,f4c4 <OSEventPendMulti+0x38>
        return (0);
    f4bc:	0005883a 	mov	r2,zero
    f4c0:	00017b06 	br	fab0 <OSEventPendMulti+0x624>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    f4c4:	e0bff217 	ldw	r2,-56(fp)
    f4c8:	1000051e 	bne	r2,zero,f4e0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    f4cc:	e0800217 	ldw	r2,8(fp)
    f4d0:	00c00104 	movi	r3,4
    f4d4:	10c00005 	stb	r3,0(r2)
        return (0);
    f4d8:	0005883a 	mov	r2,zero
    f4dc:	00017406 	br	fab0 <OSEventPendMulti+0x624>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    f4e0:	e0bff117 	ldw	r2,-60(fp)
    f4e4:	1000051e 	bne	r2,zero,f4fc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    f4e8:	e0800217 	ldw	r2,8(fp)
    f4ec:	00c00104 	movi	r3,4
    f4f0:	10c00005 	stb	r3,0(r2)
        return (0);
    f4f4:	0005883a 	mov	r2,zero
    f4f8:	00016d06 	br	fab0 <OSEventPendMulti+0x624>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    f4fc:	e0bff017 	ldw	r2,-64(fp)
    f500:	1000051e 	bne	r2,zero,f518 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    f504:	e0800217 	ldw	r2,8(fp)
    f508:	00c00104 	movi	r3,4
    f50c:	10c00005 	stb	r3,0(r2)
        return (0);
    f510:	0005883a 	mov	r2,zero
    f514:	00016606 	br	fab0 <OSEventPendMulti+0x624>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    f518:	e0bff117 	ldw	r2,-60(fp)
    f51c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    f520:	e0bff217 	ldw	r2,-56(fp)
    f524:	e0bfff15 	stw	r2,-4(fp)
    pevent      = *pevents;
    f528:	e0bfff17 	ldw	r2,-4(fp)
    f52c:	10800017 	ldw	r2,0(r2)
    f530:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    f534:	00001b06 	br	f5a4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    f538:	e0bffe17 	ldw	r2,-8(fp)
    f53c:	10800003 	ldbu	r2,0(r2)
    f540:	10803fcc 	andi	r2,r2,255
    f544:	10c000e0 	cmpeqi	r3,r2,3
    f548:	18000b1e 	bne	r3,zero,f578 <OSEventPendMulti+0xec>
    f54c:	10c00108 	cmpgei	r3,r2,4
    f550:	1800041e 	bne	r3,zero,f564 <OSEventPendMulti+0xd8>
    f554:	10c00060 	cmpeqi	r3,r2,1
    f558:	1800091e 	bne	r3,zero,f580 <OSEventPendMulti+0xf4>
    f55c:	108000a0 	cmpeqi	r2,r2,2
    f560:	1000091e 	bne	r2,zero,f588 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    f564:	e0800217 	ldw	r2,8(fp)
    f568:	00c00044 	movi	r3,1
    f56c:	10c00005 	stb	r3,0(r2)
                 return (0);
    f570:	0005883a 	mov	r2,zero
    f574:	00014e06 	br	fab0 <OSEventPendMulti+0x624>
                 break;
    f578:	0001883a 	nop
    f57c:	00000306 	br	f58c <OSEventPendMulti+0x100>
                 break;
    f580:	0001883a 	nop
    f584:	00000106 	br	f58c <OSEventPendMulti+0x100>
                 break;
    f588:	0001883a 	nop
        }
        pevents++;
    f58c:	e0bfff17 	ldw	r2,-4(fp)
    f590:	10800104 	addi	r2,r2,4
    f594:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    f598:	e0bfff17 	ldw	r2,-4(fp)
    f59c:	10800017 	ldw	r2,0(r2)
    f5a0:	e0bffe15 	stw	r2,-8(fp)
    while  (pevent != (OS_EVENT *)0) {
    f5a4:	e0bffe17 	ldw	r2,-8(fp)
    f5a8:	103fe31e 	bne	r2,zero,f538 <OSEventPendMulti+0xac>
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    f5ac:	d0a83643 	ldbu	r2,-24359(gp)
    f5b0:	10803fcc 	andi	r2,r2,255
    f5b4:	10000526 	beq	r2,zero,f5cc <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    f5b8:	e0800217 	ldw	r2,8(fp)
    f5bc:	00c00084 	movi	r3,2
    f5c0:	10c00005 	stb	r3,0(r2)
        return (0);
    f5c4:	0005883a 	mov	r2,zero
    f5c8:	00013906 	br	fab0 <OSEventPendMulti+0x624>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    f5cc:	d0a83683 	ldbu	r2,-24358(gp)
    f5d0:	10803fcc 	andi	r2,r2,255
    f5d4:	10000526 	beq	r2,zero,f5ec <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    f5d8:	e0800217 	ldw	r2,8(fp)
    f5dc:	00c00344 	movi	r3,13
    f5e0:	10c00005 	stb	r3,0(r2)
        return (0);
    f5e4:	0005883a 	mov	r2,zero
    f5e8:	00013106 	br	fab0 <OSEventPendMulti+0x624>
  NIOS2_READ_STATUS (context);
    f5ec:	0005303a 	rdctl	r2,status
    f5f0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5f4:	e0fff917 	ldw	r3,-28(fp)
    f5f8:	00bfff84 	movi	r2,-2
    f5fc:	1884703a 	and	r2,r3,r2
    f600:	1001703a 	wrctl	status,r2
  return context;
    f604:	e0bff917 	ldw	r2,-28(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    f608:	e0bffb15 	stw	r2,-20(fp)
    events_rdy     =  OS_FALSE;
    f60c:	e03ffdc5 	stb	zero,-9(fp)
    events_rdy_nbr =  0;
    f610:	e03ffd0d 	sth	zero,-12(fp)
    events_stat    =  OS_STAT_RDY;
    f614:	e03ffcc5 	stb	zero,-13(fp)
    pevents        =  pevents_pend;
    f618:	e0bff217 	ldw	r2,-56(fp)
    f61c:	e0bfff15 	stw	r2,-4(fp)
    pevent         = *pevents;
    f620:	e0bfff17 	ldw	r2,-4(fp)
    f624:	10800017 	ldw	r2,0(r2)
    f628:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f62c:	00008406 	br	f840 <OSEventPendMulti+0x3b4>
        switch (pevent->OSEventType) {
    f630:	e0bffe17 	ldw	r2,-8(fp)
    f634:	10800003 	ldbu	r2,0(r2)
    f638:	10803fcc 	andi	r2,r2,255
    f63c:	10c000e0 	cmpeqi	r3,r2,3
    f640:	1800071e 	bne	r3,zero,f660 <OSEventPendMulti+0x1d4>
    f644:	10c00108 	cmpgei	r3,r2,4
    f648:	18006b1e 	bne	r3,zero,f7f8 <OSEventPendMulti+0x36c>
    f64c:	10c00060 	cmpeqi	r3,r2,1
    f650:	1800201e 	bne	r3,zero,f6d4 <OSEventPendMulti+0x248>
    f654:	108000a0 	cmpeqi	r2,r2,2
    f658:	1000381e 	bne	r2,zero,f73c <OSEventPendMulti+0x2b0>
    f65c:	00006606 	br	f7f8 <OSEventPendMulti+0x36c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    f660:	e0bffe17 	ldw	r2,-8(fp)
    f664:	1080020b 	ldhu	r2,8(r2)
    f668:	10bfffcc 	andi	r2,r2,65535
    f66c:	10001526 	beq	r2,zero,f6c4 <OSEventPendMulti+0x238>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    f670:	e0bffe17 	ldw	r2,-8(fp)
    f674:	1080020b 	ldhu	r2,8(r2)
    f678:	10bfffc4 	addi	r2,r2,-1
    f67c:	1007883a 	mov	r3,r2
    f680:	e0bffe17 	ldw	r2,-8(fp)
    f684:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    f688:	e0bff117 	ldw	r2,-60(fp)
    f68c:	10c00104 	addi	r3,r2,4
    f690:	e0fff115 	stw	r3,-60(fp)
    f694:	e0fffe17 	ldw	r3,-8(fp)
    f698:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    f69c:	00800044 	movi	r2,1
    f6a0:	e0bffdc5 	stb	r2,-9(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    f6a4:	e0bff017 	ldw	r2,-64(fp)
    f6a8:	10c00104 	addi	r3,r2,4
    f6ac:	e0fff015 	stw	r3,-64(fp)
    f6b0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    f6b4:	e0bffd0b 	ldhu	r2,-12(fp)
    f6b8:	10800044 	addi	r2,r2,1
    f6bc:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    f6c0:	00005906 	br	f828 <OSEventPendMulti+0x39c>
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    f6c4:	e0bffcc3 	ldbu	r2,-13(fp)
    f6c8:	10800054 	ori	r2,r2,1
    f6cc:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    f6d0:	00005506 	br	f828 <OSEventPendMulti+0x39c>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    f6d4:	e0bffe17 	ldw	r2,-8(fp)
    f6d8:	10800117 	ldw	r2,4(r2)
    f6dc:	10001326 	beq	r2,zero,f72c <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    f6e0:	e0bff017 	ldw	r2,-64(fp)
    f6e4:	10c00104 	addi	r3,r2,4
    f6e8:	e0fff015 	stw	r3,-64(fp)
    f6ec:	e0fffe17 	ldw	r3,-8(fp)
    f6f0:	18c00117 	ldw	r3,4(r3)
    f6f4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    f6f8:	e0bffe17 	ldw	r2,-8(fp)
    f6fc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    f700:	e0bff117 	ldw	r2,-60(fp)
    f704:	10c00104 	addi	r3,r2,4
    f708:	e0fff115 	stw	r3,-60(fp)
    f70c:	e0fffe17 	ldw	r3,-8(fp)
    f710:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    f714:	00800044 	movi	r2,1
    f718:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    f71c:	e0bffd0b 	ldhu	r2,-12(fp)
    f720:	10800044 	addi	r2,r2,1
    f724:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    f728:	00003f06 	br	f828 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    f72c:	e0bffcc3 	ldbu	r2,-13(fp)
    f730:	10800094 	ori	r2,r2,2
    f734:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    f738:	00003b06 	br	f828 <OSEventPendMulti+0x39c>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    f73c:	e0bffe17 	ldw	r2,-8(fp)
    f740:	10800117 	ldw	r2,4(r2)
    f744:	e0bffa15 	stw	r2,-24(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    f748:	e0bffa17 	ldw	r2,-24(fp)
    f74c:	1080058b 	ldhu	r2,22(r2)
    f750:	10bfffcc 	andi	r2,r2,65535
    f754:	10002426 	beq	r2,zero,f7e8 <OSEventPendMulti+0x35c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    f758:	e0bffa17 	ldw	r2,-24(fp)
    f75c:	10c00417 	ldw	r3,16(r2)
    f760:	19000104 	addi	r4,r3,4
    f764:	e0bffa17 	ldw	r2,-24(fp)
    f768:	11000415 	stw	r4,16(r2)
    f76c:	e0bff017 	ldw	r2,-64(fp)
    f770:	11000104 	addi	r4,r2,4
    f774:	e13ff015 	stw	r4,-64(fp)
    f778:	18c00017 	ldw	r3,0(r3)
    f77c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    f780:	e0bffa17 	ldw	r2,-24(fp)
    f784:	10c00417 	ldw	r3,16(r2)
    f788:	e0bffa17 	ldw	r2,-24(fp)
    f78c:	10800217 	ldw	r2,8(r2)
    f790:	1880041e 	bne	r3,r2,f7a4 <OSEventPendMulti+0x318>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    f794:	e0bffa17 	ldw	r2,-24(fp)
    f798:	10c00117 	ldw	r3,4(r2)
    f79c:	e0bffa17 	ldw	r2,-24(fp)
    f7a0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    f7a4:	e0bffa17 	ldw	r2,-24(fp)
    f7a8:	1080058b 	ldhu	r2,22(r2)
    f7ac:	10bfffc4 	addi	r2,r2,-1
    f7b0:	1007883a 	mov	r3,r2
    f7b4:	e0bffa17 	ldw	r2,-24(fp)
    f7b8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    f7bc:	e0bff117 	ldw	r2,-60(fp)
    f7c0:	10c00104 	addi	r3,r2,4
    f7c4:	e0fff115 	stw	r3,-60(fp)
    f7c8:	e0fffe17 	ldw	r3,-8(fp)
    f7cc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    f7d0:	00800044 	movi	r2,1
    f7d4:	e0bffdc5 	stb	r2,-9(fp)
                      events_rdy_nbr++;
    f7d8:	e0bffd0b 	ldhu	r2,-12(fp)
    f7dc:	10800044 	addi	r2,r2,1
    f7e0:	e0bffd0d 	sth	r2,-12(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    f7e4:	00001006 	br	f828 <OSEventPendMulti+0x39c>
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    f7e8:	e0bffcc3 	ldbu	r2,-13(fp)
    f7ec:	10800114 	ori	r2,r2,4
    f7f0:	e0bffcc5 	stb	r2,-13(fp)
                 break;
    f7f4:	00000c06 	br	f828 <OSEventPendMulti+0x39c>
    f7f8:	e0bffb17 	ldw	r2,-20(fp)
    f7fc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
    f800:	e0bff817 	ldw	r2,-32(fp)
    f804:	1001703a 	wrctl	status,r2
}
    f808:	0001883a 	nop

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    f80c:	e0bff117 	ldw	r2,-60(fp)
    f810:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    f814:	e0800217 	ldw	r2,8(fp)
    f818:	00c00044 	movi	r3,1
    f81c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    f820:	e0bffd0b 	ldhu	r2,-12(fp)
    f824:	0000a206 	br	fab0 <OSEventPendMulti+0x624>
        }
        pevents++;
    f828:	e0bfff17 	ldw	r2,-4(fp)
    f82c:	10800104 	addi	r2,r2,4
    f830:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
    f834:	e0bfff17 	ldw	r2,-4(fp)
    f838:	10800017 	ldw	r2,0(r2)
    f83c:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    f840:	e0bffe17 	ldw	r2,-8(fp)
    f844:	103f7a1e 	bne	r2,zero,f630 <OSEventPendMulti+0x1a4>
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    f848:	e0bffdc3 	ldbu	r2,-9(fp)
    f84c:	10800058 	cmpnei	r2,r2,1
    f850:	10000b1e 	bne	r2,zero,f880 <OSEventPendMulti+0x3f4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    f854:	e0bff117 	ldw	r2,-60(fp)
    f858:	10000015 	stw	zero,0(r2)
    f85c:	e0bffb17 	ldw	r2,-20(fp)
    f860:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
    f864:	e0bff717 	ldw	r2,-36(fp)
    f868:	1001703a 	wrctl	status,r2
}
    f86c:	0001883a 	nop
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    f870:	e0800217 	ldw	r2,8(fp)
    f874:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    f878:	e0bffd0b 	ldhu	r2,-12(fp)
    f87c:	00008c06 	br	fab0 <OSEventPendMulti+0x624>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    f880:	d0a83a17 	ldw	r2,-24344(gp)
    f884:	10800c03 	ldbu	r2,48(r2)
    f888:	e0fffcc3 	ldbu	r3,-13(fp)
    f88c:	1884b03a 	or	r2,r3,r2
    f890:	1009883a 	mov	r4,r2
    f894:	d0a83a17 	ldw	r2,-24344(gp)
    f898:	00ffe004 	movi	r3,-128
    f89c:	20c6b03a 	or	r3,r4,r3
    f8a0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    f8a4:	d0a83a17 	ldw	r2,-24344(gp)
    f8a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    f8ac:	d0a83a17 	ldw	r2,-24344(gp)
    f8b0:	e0ffef0b 	ldhu	r3,-68(fp)
    f8b4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    f8b8:	e13ff217 	ldw	r4,-56(fp)
    f8bc:	00103f40 	call	103f4 <OS_EventTaskWaitMulti>
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
    f8c8:	e0bff517 	ldw	r2,-44(fp)
    f8cc:	1001703a 	wrctl	status,r2
}
    f8d0:	0001883a 	nop

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    f8d4:	0010b980 	call	10b98 <OS_Sched>
  NIOS2_READ_STATUS (context);
    f8d8:	0005303a 	rdctl	r2,status
    f8dc:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8e0:	e0fff617 	ldw	r3,-40(fp)
    f8e4:	00bfff84 	movi	r2,-2
    f8e8:	1884703a 	and	r2,r3,r2
    f8ec:	1001703a 	wrctl	status,r2
  return context;
    f8f0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
    f8f4:	e0bffb15 	stw	r2,-20(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    f8f8:	d0a83a17 	ldw	r2,-24344(gp)
    f8fc:	10800c43 	ldbu	r2,49(r2)
    f900:	10803fcc 	andi	r2,r2,255
    f904:	10000226 	beq	r2,zero,f910 <OSEventPendMulti+0x484>
    f908:	10800098 	cmpnei	r2,r2,2
    f90c:	1000181e 	bne	r2,zero,f970 <OSEventPendMulti+0x4e4>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    f910:	d0a83a17 	ldw	r2,-24344(gp)
    f914:	10800717 	ldw	r2,28(r2)
    f918:	e0bffe15 	stw	r2,-8(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    f91c:	e0bffe17 	ldw	r2,-8(fp)
    f920:	10000b26 	beq	r2,zero,f950 <OSEventPendMulti+0x4c4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    f924:	e0bff117 	ldw	r2,-60(fp)
    f928:	10c00104 	addi	r3,r2,4
    f92c:	e0fff115 	stw	r3,-60(fp)
    f930:	e0fffe17 	ldw	r3,-8(fp)
    f934:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    f938:	e0bff117 	ldw	r2,-60(fp)
    f93c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    f940:	e0bffd0b 	ldhu	r2,-12(fp)
    f944:	10800044 	addi	r2,r2,1
    f948:	e0bffd0d 	sth	r2,-12(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    f94c:	00000d06 	br	f984 <OSEventPendMulti+0x4f8>
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    f950:	d0a83a17 	ldw	r2,-24344(gp)
    f954:	00c00044 	movi	r3,1
    f958:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f95c:	d0a83a17 	ldw	r2,-24344(gp)
    f960:	e17ff217 	ldw	r5,-56(fp)
    f964:	1009883a 	mov	r4,r2
    f968:	00105ec0 	call	105ec <OS_EventTaskRemoveMulti>
			 break;
    f96c:	00000506 	br	f984 <OSEventPendMulti+0x4f8>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    f970:	d0a83a17 	ldw	r2,-24344(gp)
    f974:	e17ff217 	ldw	r5,-56(fp)
    f978:	1009883a 	mov	r4,r2
    f97c:	00105ec0 	call	105ec <OS_EventTaskRemoveMulti>
             break;
    f980:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    f984:	d0a83a17 	ldw	r2,-24344(gp)
    f988:	10800c43 	ldbu	r2,49(r2)
    f98c:	10803fcc 	andi	r2,r2,255
    f990:	10000326 	beq	r2,zero,f9a0 <OSEventPendMulti+0x514>
    f994:	108000a0 	cmpeqi	r2,r2,2
    f998:	1000251e 	bne	r2,zero,fa30 <OSEventPendMulti+0x5a4>
    f99c:	00002c06 	br	fa50 <OSEventPendMulti+0x5c4>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    f9a0:	e0bffe17 	ldw	r2,-8(fp)
    f9a4:	10800003 	ldbu	r2,0(r2)
    f9a8:	10803fcc 	andi	r2,r2,255
    f9ac:	10c000c8 	cmpgei	r3,r2,3
    f9b0:	1800021e 	bne	r3,zero,f9bc <OSEventPendMulti+0x530>
    f9b4:	00800816 	blt	zero,r2,f9d8 <OSEventPendMulti+0x54c>
    f9b8:	00000e06 	br	f9f4 <OSEventPendMulti+0x568>
    f9bc:	108000d8 	cmpnei	r2,r2,3
    f9c0:	10000c1e 	bne	r2,zero,f9f4 <OSEventPendMulti+0x568>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    f9c4:	e0bff017 	ldw	r2,-64(fp)
    f9c8:	10c00104 	addi	r3,r2,4
    f9cc:	e0fff015 	stw	r3,-64(fp)
    f9d0:	10000015 	stw	zero,0(r2)
                      break;
    f9d4:	00001306 	br	fa24 <OSEventPendMulti+0x598>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    f9d8:	d0e83a17 	ldw	r3,-24344(gp)
    f9dc:	e0bff017 	ldw	r2,-64(fp)
    f9e0:	11000104 	addi	r4,r2,4
    f9e4:	e13ff015 	stw	r4,-64(fp)
    f9e8:	18c00917 	ldw	r3,36(r3)
    f9ec:	10c00015 	stw	r3,0(r2)
                      break;
    f9f0:	00000c06 	br	fa24 <OSEventPendMulti+0x598>
    f9f4:	e0bffb17 	ldw	r2,-20(fp)
    f9f8:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
    f9fc:	e0bff417 	ldw	r2,-48(fp)
    fa00:	1001703a 	wrctl	status,r2
}
    fa04:	0001883a 	nop

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    fa08:	e0bff117 	ldw	r2,-60(fp)
    fa0c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    fa10:	e0800217 	ldw	r2,8(fp)
    fa14:	00c00044 	movi	r3,1
    fa18:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    fa1c:	e0bffd0b 	ldhu	r2,-12(fp)
    fa20:	00002306 	br	fab0 <OSEventPendMulti+0x624>
             }
            *perr = OS_ERR_NONE;
    fa24:	e0800217 	ldw	r2,8(fp)
    fa28:	10000005 	stb	zero,0(r2)
             break;
    fa2c:	00001006 	br	fa70 <OSEventPendMulti+0x5e4>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    fa30:	e0bff017 	ldw	r2,-64(fp)
    fa34:	10c00104 	addi	r3,r2,4
    fa38:	e0fff015 	stw	r3,-64(fp)
    fa3c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    fa40:	e0800217 	ldw	r2,8(fp)
    fa44:	00c00384 	movi	r3,14
    fa48:	10c00005 	stb	r3,0(r2)
             break;
    fa4c:	00000806 	br	fa70 <OSEventPendMulti+0x5e4>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    fa50:	e0bff017 	ldw	r2,-64(fp)
    fa54:	10c00104 	addi	r3,r2,4
    fa58:	e0fff015 	stw	r3,-64(fp)
    fa5c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    fa60:	e0800217 	ldw	r2,8(fp)
    fa64:	00c00284 	movi	r3,10
    fa68:	10c00005 	stb	r3,0(r2)
             break;
    fa6c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    fa70:	d0a83a17 	ldw	r2,-24344(gp)
    fa74:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    fa78:	d0a83a17 	ldw	r2,-24344(gp)
    fa7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    fa80:	d0a83a17 	ldw	r2,-24344(gp)
    fa84:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    fa88:	d0a83a17 	ldw	r2,-24344(gp)
    fa8c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    fa90:	d0a83a17 	ldw	r2,-24344(gp)
    fa94:	10000915 	stw	zero,36(r2)
    fa98:	e0bffb17 	ldw	r2,-20(fp)
    fa9c:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
    faa0:	e0bff317 	ldw	r2,-52(fp)
    faa4:	1001703a 	wrctl	status,r2
}
    faa8:	0001883a 	nop
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    faac:	e0bffd0b 	ldhu	r2,-12(fp)
}
    fab0:	e037883a 	mov	sp,fp
    fab4:	dfc00117 	ldw	ra,4(sp)
    fab8:	df000017 	ldw	fp,0(sp)
    fabc:	dec00204 	addi	sp,sp,8
    fac0:	f800283a 	ret

0000fac4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    fac4:	defffe04 	addi	sp,sp,-8
    fac8:	dfc00115 	stw	ra,4(sp)
    facc:	df000015 	stw	fp,0(sp)
    fad0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    fad4:	001b17c0 	call	1b17c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    fad8:	00108340 	call	10834 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    fadc:	001087c0 	call	1087c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    fae0:	00109f00 	call	109f0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    fae4:	00107540 	call	10754 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    fae8:	001293c0 	call	1293c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    faec:	00132600 	call	13260 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    faf0:	00154e80 	call	154e8 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    faf4:	00108e80 	call	108e8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    faf8:	001096c0 	call	1096c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    fafc:	001b19c0 	call	1b19c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    fb00:	00112600 	call	11260 <OSDebugInit>
#endif
}
    fb04:	0001883a 	nop
    fb08:	e037883a 	mov	sp,fp
    fb0c:	dfc00117 	ldw	ra,4(sp)
    fb10:	df000017 	ldw	fp,0(sp)
    fb14:	dec00204 	addi	sp,sp,8
    fb18:	f800283a 	ret

0000fb1c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    fb1c:	deffff04 	addi	sp,sp,-4
    fb20:	df000015 	stw	fp,0(sp)
    fb24:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    fb28:	d0a83843 	ldbu	r2,-24351(gp)
    fb2c:	10803fcc 	andi	r2,r2,255
    fb30:	10800058 	cmpnei	r2,r2,1
    fb34:	1000071e 	bne	r2,zero,fb54 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    fb38:	d0a83643 	ldbu	r2,-24359(gp)
    fb3c:	10803fcc 	andi	r2,r2,255
    fb40:	10803fe0 	cmpeqi	r2,r2,255
    fb44:	1000031e 	bne	r2,zero,fb54 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    fb48:	d0a83643 	ldbu	r2,-24359(gp)
    fb4c:	10800044 	addi	r2,r2,1
    fb50:	d0a83645 	stb	r2,-24359(gp)
        }
    }
}
    fb54:	0001883a 	nop
    fb58:	e037883a 	mov	sp,fp
    fb5c:	df000017 	ldw	fp,0(sp)
    fb60:	dec00104 	addi	sp,sp,4
    fb64:	f800283a 	ret

0000fb68 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    fb68:	defffb04 	addi	sp,sp,-20
    fb6c:	dfc00415 	stw	ra,16(sp)
    fb70:	df000315 	stw	fp,12(sp)
    fb74:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fb78:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
    fb7c:	d0a83843 	ldbu	r2,-24351(gp)
    fb80:	10803fcc 	andi	r2,r2,255
    fb84:	10800058 	cmpnei	r2,r2,1
    fb88:	10002e1e 	bne	r2,zero,fc44 <OSIntExit+0xdc>
  NIOS2_READ_STATUS (context);
    fb8c:	0005303a 	rdctl	r2,status
    fb90:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb94:	e0fffe17 	ldw	r3,-8(fp)
    fb98:	00bfff84 	movi	r2,-2
    fb9c:	1884703a 	and	r2,r3,r2
    fba0:	1001703a 	wrctl	status,r2
  return context;
    fba4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    fba8:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    fbac:	d0a83643 	ldbu	r2,-24359(gp)
    fbb0:	10803fcc 	andi	r2,r2,255
    fbb4:	10000326 	beq	r2,zero,fbc4 <OSIntExit+0x5c>
            OSIntNesting--;
    fbb8:	d0a83643 	ldbu	r2,-24359(gp)
    fbbc:	10bfffc4 	addi	r2,r2,-1
    fbc0:	d0a83645 	stb	r2,-24359(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    fbc4:	d0a83643 	ldbu	r2,-24359(gp)
    fbc8:	10803fcc 	andi	r2,r2,255
    fbcc:	1000181e 	bne	r2,zero,fc30 <OSIntExit+0xc8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    fbd0:	d0a83683 	ldbu	r2,-24358(gp)
    fbd4:	10803fcc 	andi	r2,r2,255
    fbd8:	1000151e 	bne	r2,zero,fc30 <OSIntExit+0xc8>
                OS_SchedNew();
    fbdc:	0010c640 	call	10c64 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    fbe0:	d0e83703 	ldbu	r3,-24356(gp)
    fbe4:	d0a836c3 	ldbu	r2,-24357(gp)
    fbe8:	18c03fcc 	andi	r3,r3,255
    fbec:	10803fcc 	andi	r2,r2,255
    fbf0:	18800f26 	beq	r3,r2,fc30 <OSIntExit+0xc8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    fbf4:	d0a83703 	ldbu	r2,-24356(gp)
    fbf8:	10803fcc 	andi	r2,r2,255
    fbfc:	100690ba 	slli	r3,r2,2
    fc00:	008000f4 	movhi	r2,3
    fc04:	1885883a 	add	r2,r3,r2
    fc08:	10b82217 	ldw	r2,-8056(r2)
    fc0c:	d0a83c15 	stw	r2,-24336(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    fc10:	d0a83c17 	ldw	r2,-24336(gp)
    fc14:	10c00e17 	ldw	r3,56(r2)
    fc18:	18c00044 	addi	r3,r3,1
    fc1c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    fc20:	d0a83017 	ldw	r2,-24384(gp)
    fc24:	10800044 	addi	r2,r2,1
    fc28:	d0a83015 	stw	r2,-24384(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    fc2c:	001aeb80 	call	1aeb8 <OSCtxSw>
    fc30:	e0bfff17 	ldw	r2,-4(fp)
    fc34:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    fc38:	e0bffd17 	ldw	r2,-12(fp)
    fc3c:	1001703a 	wrctl	status,r2
}
    fc40:	0001883a 	nop
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    fc44:	0001883a 	nop
    fc48:	e037883a 	mov	sp,fp
    fc4c:	dfc00117 	ldw	ra,4(sp)
    fc50:	df000017 	ldw	fp,0(sp)
    fc54:	dec00204 	addi	sp,sp,8
    fc58:	f800283a 	ret

0000fc5c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    fc5c:	defffc04 	addi	sp,sp,-16
    fc60:	df000315 	stw	fp,12(sp)
    fc64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fc68:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    fc6c:	d0a83843 	ldbu	r2,-24351(gp)
    fc70:	10803fcc 	andi	r2,r2,255
    fc74:	10800058 	cmpnei	r2,r2,1
    fc78:	1000171e 	bne	r2,zero,fcd8 <OSSchedLock+0x7c>
  NIOS2_READ_STATUS (context);
    fc7c:	0005303a 	rdctl	r2,status
    fc80:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc84:	e0fffe17 	ldw	r3,-8(fp)
    fc88:	00bfff84 	movi	r2,-2
    fc8c:	1884703a 	and	r2,r3,r2
    fc90:	1001703a 	wrctl	status,r2
  return context;
    fc94:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    fc98:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    fc9c:	d0a83643 	ldbu	r2,-24359(gp)
    fca0:	10803fcc 	andi	r2,r2,255
    fca4:	1000071e 	bne	r2,zero,fcc4 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    fca8:	d0a83683 	ldbu	r2,-24358(gp)
    fcac:	10803fcc 	andi	r2,r2,255
    fcb0:	10803fe0 	cmpeqi	r2,r2,255
    fcb4:	1000031e 	bne	r2,zero,fcc4 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    fcb8:	d0a83683 	ldbu	r2,-24358(gp)
    fcbc:	10800044 	addi	r2,r2,1
    fcc0:	d0a83685 	stb	r2,-24358(gp)
    fcc4:	e0bfff17 	ldw	r2,-4(fp)
    fcc8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    fccc:	e0bffd17 	ldw	r2,-12(fp)
    fcd0:	1001703a 	wrctl	status,r2
}
    fcd4:	0001883a 	nop
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    fcd8:	0001883a 	nop
    fcdc:	e037883a 	mov	sp,fp
    fce0:	df000017 	ldw	fp,0(sp)
    fce4:	dec00104 	addi	sp,sp,4
    fce8:	f800283a 	ret

0000fcec <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    fcec:	defff804 	addi	sp,sp,-32
    fcf0:	dfc00715 	stw	ra,28(sp)
    fcf4:	df000615 	stw	fp,24(sp)
    fcf8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    fcfc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    fd00:	d0a83843 	ldbu	r2,-24351(gp)
    fd04:	10803fcc 	andi	r2,r2,255
    fd08:	10800058 	cmpnei	r2,r2,1
    fd0c:	10002a1e 	bne	r2,zero,fdb8 <OSSchedUnlock+0xcc>
  NIOS2_READ_STATUS (context);
    fd10:	0005303a 	rdctl	r2,status
    fd14:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd18:	e0fffe17 	ldw	r3,-8(fp)
    fd1c:	00bfff84 	movi	r2,-2
    fd20:	1884703a 	and	r2,r3,r2
    fd24:	1001703a 	wrctl	status,r2
  return context;
    fd28:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    fd2c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    fd30:	d0a83683 	ldbu	r2,-24358(gp)
    fd34:	10803fcc 	andi	r2,r2,255
    fd38:	10001a26 	beq	r2,zero,fda4 <OSSchedUnlock+0xb8>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    fd3c:	d0a83683 	ldbu	r2,-24358(gp)
    fd40:	10bfffc4 	addi	r2,r2,-1
    fd44:	d0a83685 	stb	r2,-24358(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    fd48:	d0a83683 	ldbu	r2,-24358(gp)
    fd4c:	10803fcc 	andi	r2,r2,255
    fd50:	10000f1e 	bne	r2,zero,fd90 <OSSchedUnlock+0xa4>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    fd54:	d0a83643 	ldbu	r2,-24359(gp)
    fd58:	10803fcc 	andi	r2,r2,255
    fd5c:	1000071e 	bne	r2,zero,fd7c <OSSchedUnlock+0x90>
    fd60:	e0bfff17 	ldw	r2,-4(fp)
    fd64:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
    fd68:	e0bffd17 	ldw	r2,-12(fp)
    fd6c:	1001703a 	wrctl	status,r2
}
    fd70:	0001883a 	nop
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    fd74:	0010b980 	call	10b98 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    fd78:	00000f06 	br	fdb8 <OSSchedUnlock+0xcc>
    fd7c:	e0bfff17 	ldw	r2,-4(fp)
    fd80:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    fd84:	e0bffc17 	ldw	r2,-16(fp)
    fd88:	1001703a 	wrctl	status,r2
}
    fd8c:	00000a06 	br	fdb8 <OSSchedUnlock+0xcc>
    fd90:	e0bfff17 	ldw	r2,-4(fp)
    fd94:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    fd98:	e0bffb17 	ldw	r2,-20(fp)
    fd9c:	1001703a 	wrctl	status,r2
}
    fda0:	00000506 	br	fdb8 <OSSchedUnlock+0xcc>
    fda4:	e0bfff17 	ldw	r2,-4(fp)
    fda8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    fdac:	e0bffa17 	ldw	r2,-24(fp)
    fdb0:	1001703a 	wrctl	status,r2
}
    fdb4:	0001883a 	nop
    fdb8:	0001883a 	nop
    fdbc:	e037883a 	mov	sp,fp
    fdc0:	dfc00117 	ldw	ra,4(sp)
    fdc4:	df000017 	ldw	fp,0(sp)
    fdc8:	dec00204 	addi	sp,sp,8
    fdcc:	f800283a 	ret

0000fdd0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    fdd0:	defffe04 	addi	sp,sp,-8
    fdd4:	dfc00115 	stw	ra,4(sp)
    fdd8:	df000015 	stw	fp,0(sp)
    fddc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    fde0:	d0a83843 	ldbu	r2,-24351(gp)
    fde4:	10803fcc 	andi	r2,r2,255
    fde8:	10000d1e 	bne	r2,zero,fe20 <OSStart+0x50>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    fdec:	0010c640 	call	10c64 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    fdf0:	d0a83703 	ldbu	r2,-24356(gp)
    fdf4:	d0a836c5 	stb	r2,-24357(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    fdf8:	d0a83703 	ldbu	r2,-24356(gp)
    fdfc:	10803fcc 	andi	r2,r2,255
    fe00:	100690ba 	slli	r3,r2,2
    fe04:	008000f4 	movhi	r2,3
    fe08:	1885883a 	add	r2,r3,r2
    fe0c:	10b82217 	ldw	r2,-8056(r2)
    fe10:	d0a83c15 	stw	r2,-24336(gp)
        OSTCBCur      = OSTCBHighRdy;
    fe14:	d0a83c17 	ldw	r2,-24336(gp)
    fe18:	d0a83a15 	stw	r2,-24344(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    fe1c:	001af440 	call	1af44 <OSStartHighRdy>
    }
}
    fe20:	0001883a 	nop
    fe24:	e037883a 	mov	sp,fp
    fe28:	dfc00117 	ldw	ra,4(sp)
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00204 	addi	sp,sp,8
    fe34:	f800283a 	ret

0000fe38 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    fe38:	defff904 	addi	sp,sp,-28
    fe3c:	dfc00615 	stw	ra,24(sp)
    fe40:	df000515 	stw	fp,20(sp)
    fe44:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fe48:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    fe4c:	01000084 	movi	r4,2
    fe50:	00177780 	call	17778 <OSTimeDly>
  NIOS2_READ_STATUS (context);
    fe54:	0005303a 	rdctl	r2,status
    fe58:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe5c:	e0fffb17 	ldw	r3,-20(fp)
    fe60:	00bfff84 	movi	r2,-2
    fe64:	1884703a 	and	r2,r3,r2
    fe68:	1001703a 	wrctl	status,r2
  return context;
    fe6c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    fe70:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    fe74:	d0283915 	stw	zero,-24348(gp)
    fe78:	e0bfff17 	ldw	r2,-4(fp)
    fe7c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    fe80:	e0bffc17 	ldw	r2,-16(fp)
    fe84:	1001703a 	wrctl	status,r2
}
    fe88:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    fe8c:	0009883a 	mov	r4,zero
    fe90:	00177780 	call	17778 <OSTimeDly>
  NIOS2_READ_STATUS (context);
    fe94:	0005303a 	rdctl	r2,status
    fe98:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe9c:	e0fffd17 	ldw	r3,-12(fp)
    fea0:	00bfff84 	movi	r2,-2
    fea4:	1884703a 	and	r2,r3,r2
    fea8:	1001703a 	wrctl	status,r2
  return context;
    feac:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    feb0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    feb4:	d0a83917 	ldw	r2,-24348(gp)
    feb8:	d0a83415 	stw	r2,-24368(gp)
    OSStatRdy    = OS_TRUE;
    febc:	00800044 	movi	r2,1
    fec0:	d0a83605 	stb	r2,-24360(gp)
    fec4:	e0bfff17 	ldw	r2,-4(fp)
    fec8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    fecc:	e0bffe17 	ldw	r2,-8(fp)
    fed0:	1001703a 	wrctl	status,r2
}
    fed4:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
    fed8:	0001883a 	nop
    fedc:	e037883a 	mov	sp,fp
    fee0:	dfc00117 	ldw	ra,4(sp)
    fee4:	df000017 	ldw	fp,0(sp)
    fee8:	dec00204 	addi	sp,sp,8
    feec:	f800283a 	ret

0000fef0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    fef0:	defff704 	addi	sp,sp,-36
    fef4:	dfc00815 	stw	ra,32(sp)
    fef8:	df000715 	stw	fp,28(sp)
    fefc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ff00:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    ff04:	001b15c0 	call	1b15c <OSTimeTickHook>
  NIOS2_READ_STATUS (context);
    ff08:	0005303a 	rdctl	r2,status
    ff0c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff10:	e0fffb17 	ldw	r3,-20(fp)
    ff14:	00bfff84 	movi	r2,-2
    ff18:	1884703a 	and	r2,r3,r2
    ff1c:	1001703a 	wrctl	status,r2
  return context;
    ff20:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    ff24:	e0bffd15 	stw	r2,-12(fp)
    OSTime++;
    ff28:	d0a84117 	ldw	r2,-24316(gp)
    ff2c:	10800044 	addi	r2,r2,1
    ff30:	d0a84115 	stw	r2,-24316(gp)
    ff34:	e0bffd17 	ldw	r2,-12(fp)
    ff38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	1001703a 	wrctl	status,r2
}
    ff44:	0001883a 	nop
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    ff48:	d0a83843 	ldbu	r2,-24351(gp)
    ff4c:	10803fcc 	andi	r2,r2,255
    ff50:	10800058 	cmpnei	r2,r2,1
    ff54:	10006e1e 	bne	r2,zero,10110 <OSTimeTick+0x220>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    ff58:	d0a83e03 	ldbu	r2,-24328(gp)
    ff5c:	10803fcc 	andi	r2,r2,255
    ff60:	10c000a0 	cmpeqi	r3,r2,2
    ff64:	18000b1e 	bne	r3,zero,ff94 <OSTimeTick+0xa4>
    ff68:	10c000c8 	cmpgei	r3,r2,3
    ff6c:	18000e1e 	bne	r3,zero,ffa8 <OSTimeTick+0xb8>
    ff70:	10000326 	beq	r2,zero,ff80 <OSTimeTick+0x90>
    ff74:	10800060 	cmpeqi	r2,r2,1
    ff78:	1000041e 	bne	r2,zero,ff8c <OSTimeTick+0x9c>
    ff7c:	00000a06 	br	ffa8 <OSTimeTick+0xb8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    ff80:	00800044 	movi	r2,1
    ff84:	e0bffec5 	stb	r2,-5(fp)
                 break;
    ff88:	00000b06 	br	ffb8 <OSTimeTick+0xc8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    ff8c:	e03ffec5 	stb	zero,-5(fp)
                 break;
    ff90:	00000906 	br	ffb8 <OSTimeTick+0xc8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    ff94:	00800044 	movi	r2,1
    ff98:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    ff9c:	00800044 	movi	r2,1
    ffa0:	d0a83e05 	stb	r2,-24328(gp)
                 break;
    ffa4:	00000406 	br	ffb8 <OSTimeTick+0xc8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    ffa8:	00800044 	movi	r2,1
    ffac:	e0bffec5 	stb	r2,-5(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    ffb0:	d0283e05 	stb	zero,-24328(gp)
                 break;
    ffb4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    ffb8:	e0bffec3 	ldbu	r2,-5(fp)
    ffbc:	10005326 	beq	r2,zero,1010c <OSTimeTick+0x21c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    ffc0:	d0a83d17 	ldw	r2,-24332(gp)
    ffc4:	e0bfff15 	stw	r2,-4(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ffc8:	00004a06 	br	100f4 <OSTimeTick+0x204>
  NIOS2_READ_STATUS (context);
    ffcc:	0005303a 	rdctl	r2,status
    ffd0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ffd4:	e0fffa17 	ldw	r3,-24(fp)
    ffd8:	00bfff84 	movi	r2,-2
    ffdc:	1884703a 	and	r2,r3,r2
    ffe0:	1001703a 	wrctl	status,r2
  return context;
    ffe4:	e0bffa17 	ldw	r2,-24(fp)
            OS_ENTER_CRITICAL();
    ffe8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    ffec:	e0bfff17 	ldw	r2,-4(fp)
    fff0:	10800b8b 	ldhu	r2,46(r2)
    fff4:	10bfffcc 	andi	r2,r2,65535
    fff8:	10003626 	beq	r2,zero,100d4 <OSTimeTick+0x1e4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    fffc:	e0bfff17 	ldw	r2,-4(fp)
   10000:	10800b8b 	ldhu	r2,46(r2)
   10004:	10bfffc4 	addi	r2,r2,-1
   10008:	1007883a 	mov	r3,r2
   1000c:	e0bfff17 	ldw	r2,-4(fp)
   10010:	10c00b8d 	sth	r3,46(r2)
   10014:	e0bfff17 	ldw	r2,-4(fp)
   10018:	10800b8b 	ldhu	r2,46(r2)
   1001c:	10bfffcc 	andi	r2,r2,65535
   10020:	10002c1e 	bne	r2,zero,100d4 <OSTimeTick+0x1e4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   10024:	e0bfff17 	ldw	r2,-4(fp)
   10028:	10800c03 	ldbu	r2,48(r2)
   1002c:	10803fcc 	andi	r2,r2,255
   10030:	10800dcc 	andi	r2,r2,55
   10034:	10000b26 	beq	r2,zero,10064 <OSTimeTick+0x174>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   10038:	e0bfff17 	ldw	r2,-4(fp)
   1003c:	10c00c03 	ldbu	r3,48(r2)
   10040:	00bff204 	movi	r2,-56
   10044:	1884703a 	and	r2,r3,r2
   10048:	1007883a 	mov	r3,r2
   1004c:	e0bfff17 	ldw	r2,-4(fp)
   10050:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   10054:	e0bfff17 	ldw	r2,-4(fp)
   10058:	00c00044 	movi	r3,1
   1005c:	10c00c45 	stb	r3,49(r2)
   10060:	00000206 	br	1006c <OSTimeTick+0x17c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   10064:	e0bfff17 	ldw	r2,-4(fp)
   10068:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1006c:	e0bfff17 	ldw	r2,-4(fp)
   10070:	10800c03 	ldbu	r2,48(r2)
   10074:	10803fcc 	andi	r2,r2,255
   10078:	1080020c 	andi	r2,r2,8
   1007c:	1000151e 	bne	r2,zero,100d4 <OSTimeTick+0x1e4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   10080:	e0bfff17 	ldw	r2,-4(fp)
   10084:	10c00d83 	ldbu	r3,54(r2)
   10088:	d0a83743 	ldbu	r2,-24355(gp)
   1008c:	1884b03a 	or	r2,r3,r2
   10090:	d0a83745 	stb	r2,-24355(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10094:	e0bfff17 	ldw	r2,-4(fp)
   10098:	10800d03 	ldbu	r2,52(r2)
   1009c:	10c03fcc 	andi	r3,r2,255
   100a0:	d0a83784 	addi	r2,gp,-24354
   100a4:	1885883a 	add	r2,r3,r2
   100a8:	11000003 	ldbu	r4,0(r2)
   100ac:	e0bfff17 	ldw	r2,-4(fp)
   100b0:	10800d43 	ldbu	r2,53(r2)
   100b4:	e0ffff17 	ldw	r3,-4(fp)
   100b8:	18c00d03 	ldbu	r3,52(r3)
   100bc:	18c03fcc 	andi	r3,r3,255
   100c0:	2084b03a 	or	r2,r4,r2
   100c4:	1009883a 	mov	r4,r2
   100c8:	d0a83784 	addi	r2,gp,-24354
   100cc:	1885883a 	add	r2,r3,r2
   100d0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   100d4:	e0bfff17 	ldw	r2,-4(fp)
   100d8:	10800517 	ldw	r2,20(r2)
   100dc:	e0bfff15 	stw	r2,-4(fp)
   100e0:	e0bffd17 	ldw	r2,-12(fp)
   100e4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   100e8:	e0bff917 	ldw	r2,-28(fp)
   100ec:	1001703a 	wrctl	status,r2
}
   100f0:	0001883a 	nop
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   100f4:	e0bfff17 	ldw	r2,-4(fp)
   100f8:	10800c83 	ldbu	r2,50(r2)
   100fc:	10803fcc 	andi	r2,r2,255
   10100:	10800518 	cmpnei	r2,r2,20
   10104:	103fb11e 	bne	r2,zero,ffcc <OSTimeTick+0xdc>
   10108:	00000106 	br	10110 <OSTimeTick+0x220>
            return;
   1010c:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
    }
}
   10110:	e037883a 	mov	sp,fp
   10114:	dfc00117 	ldw	ra,4(sp)
   10118:	df000017 	ldw	fp,0(sp)
   1011c:	dec00204 	addi	sp,sp,8
   10120:	f800283a 	ret

00010124 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   10124:	deffff04 	addi	sp,sp,-4
   10128:	df000015 	stw	fp,0(sp)
   1012c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   10130:	00804784 	movi	r2,286
}
   10134:	e037883a 	mov	sp,fp
   10138:	df000017 	ldw	fp,0(sp)
   1013c:	dec00104 	addi	sp,sp,4
   10140:	f800283a 	ret

00010144 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   10144:	deffff04 	addi	sp,sp,-4
   10148:	df000015 	stw	fp,0(sp)
   1014c:	d839883a 	mov	fp,sp
}
   10150:	0001883a 	nop
   10154:	e037883a 	mov	sp,fp
   10158:	df000017 	ldw	fp,0(sp)
   1015c:	dec00104 	addi	sp,sp,4
   10160:	f800283a 	ret

00010164 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   10164:	defff804 	addi	sp,sp,-32
   10168:	dfc00715 	stw	ra,28(sp)
   1016c:	df000615 	stw	fp,24(sp)
   10170:	df000604 	addi	fp,sp,24
   10174:	e13ffd15 	stw	r4,-12(fp)
   10178:	e17ffc15 	stw	r5,-16(fp)
   1017c:	3005883a 	mov	r2,r6
   10180:	3807883a 	mov	r3,r7
   10184:	e0bffb05 	stb	r2,-20(fp)
   10188:	1805883a 	mov	r2,r3
   1018c:	e0bffa05 	stb	r2,-24(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800283 	ldbu	r2,10(r2)
   10198:	10c03fcc 	andi	r3,r2,255
   1019c:	008000b4 	movhi	r2,2
   101a0:	1885883a 	add	r2,r3,r2
   101a4:	10afc803 	ldbu	r2,-16608(r2)
   101a8:	e0bfffc5 	stb	r2,-1(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   101ac:	e0bfffc3 	ldbu	r2,-1(fp)
   101b0:	e0fffd17 	ldw	r3,-12(fp)
   101b4:	1885883a 	add	r2,r3,r2
   101b8:	108002c3 	ldbu	r2,11(r2)
   101bc:	10c03fcc 	andi	r3,r2,255
   101c0:	008000b4 	movhi	r2,2
   101c4:	1885883a 	add	r2,r3,r2
   101c8:	10afc803 	ldbu	r2,-16608(r2)
   101cc:	e0bfff85 	stb	r2,-2(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   101d0:	e0bfffc3 	ldbu	r2,-1(fp)
   101d4:	100490fa 	slli	r2,r2,3
   101d8:	1007883a 	mov	r3,r2
   101dc:	e0bfff83 	ldbu	r2,-2(fp)
   101e0:	10c5883a 	add	r2,r2,r3
   101e4:	e0bfff45 	stb	r2,-3(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   101e8:	e0bfff43 	ldbu	r2,-3(fp)
   101ec:	100690ba 	slli	r3,r2,2
   101f0:	008000f4 	movhi	r2,3
   101f4:	1885883a 	add	r2,r3,r2
   101f8:	10b82217 	ldw	r2,-8056(r2)
   101fc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   10200:	e0bffe17 	ldw	r2,-8(fp)
   10204:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   10208:	e0bffe17 	ldw	r2,-8(fp)
   1020c:	e0fffc17 	ldw	r3,-16(fp)
   10210:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   10214:	e0bffe17 	ldw	r2,-8(fp)
   10218:	10800c03 	ldbu	r2,48(r2)
   1021c:	1007883a 	mov	r3,r2
   10220:	e0bffb03 	ldbu	r2,-20(fp)
   10224:	0084303a 	nor	r2,zero,r2
   10228:	1884703a 	and	r2,r3,r2
   1022c:	1007883a 	mov	r3,r2
   10230:	e0bffe17 	ldw	r2,-8(fp)
   10234:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   10238:	e0bffe17 	ldw	r2,-8(fp)
   1023c:	e0fffa03 	ldbu	r3,-24(fp)
   10240:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   10244:	e0bffe17 	ldw	r2,-8(fp)
   10248:	10800c03 	ldbu	r2,48(r2)
   1024c:	10803fcc 	andi	r2,r2,255
   10250:	1080020c 	andi	r2,r2,8
   10254:	1000111e 	bne	r2,zero,1029c <OS_EventTaskRdy+0x138>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   10258:	e0bffe17 	ldw	r2,-8(fp)
   1025c:	10c00d83 	ldbu	r3,54(r2)
   10260:	d0a83743 	ldbu	r2,-24355(gp)
   10264:	1884b03a 	or	r2,r3,r2
   10268:	d0a83745 	stb	r2,-24355(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   1026c:	e0ffffc3 	ldbu	r3,-1(fp)
   10270:	d0a83784 	addi	r2,gp,-24354
   10274:	1885883a 	add	r2,r3,r2
   10278:	11000003 	ldbu	r4,0(r2)
   1027c:	e0bffe17 	ldw	r2,-8(fp)
   10280:	10800d43 	ldbu	r2,53(r2)
   10284:	e0ffffc3 	ldbu	r3,-1(fp)
   10288:	2084b03a 	or	r2,r4,r2
   1028c:	1009883a 	mov	r4,r2
   10290:	d0a83784 	addi	r2,gp,-24354
   10294:	1885883a 	add	r2,r3,r2
   10298:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1029c:	e17ffd17 	ldw	r5,-12(fp)
   102a0:	e13ffe17 	ldw	r4,-8(fp)
   102a4:	001053c0 	call	1053c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   102a8:	e0bffe17 	ldw	r2,-8(fp)
   102ac:	10800817 	ldw	r2,32(r2)
   102b0:	10000826 	beq	r2,zero,102d4 <OS_EventTaskRdy+0x170>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   102b4:	e0bffe17 	ldw	r2,-8(fp)
   102b8:	10800817 	ldw	r2,32(r2)
   102bc:	100b883a 	mov	r5,r2
   102c0:	e13ffe17 	ldw	r4,-8(fp)
   102c4:	00105ec0 	call	105ec <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   102c8:	e0bffe17 	ldw	r2,-8(fp)
   102cc:	e0fffd17 	ldw	r3,-12(fp)
   102d0:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   102d4:	e0bfff43 	ldbu	r2,-3(fp)
}
   102d8:	e037883a 	mov	sp,fp
   102dc:	dfc00117 	ldw	ra,4(sp)
   102e0:	df000017 	ldw	fp,0(sp)
   102e4:	dec00204 	addi	sp,sp,8
   102e8:	f800283a 	ret

000102ec <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   102ec:	defffd04 	addi	sp,sp,-12
   102f0:	df000215 	stw	fp,8(sp)
   102f4:	df000204 	addi	fp,sp,8
   102f8:	e13ffe15 	stw	r4,-8(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   102fc:	d0a83a17 	ldw	r2,-24344(gp)
   10300:	e0fffe17 	ldw	r3,-8(fp)
   10304:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   10308:	d0a83a17 	ldw	r2,-24344(gp)
   1030c:	10800d03 	ldbu	r2,52(r2)
   10310:	10803fcc 	andi	r2,r2,255
   10314:	e0fffe17 	ldw	r3,-8(fp)
   10318:	1885883a 	add	r2,r3,r2
   1031c:	110002c3 	ldbu	r4,11(r2)
   10320:	d0a83a17 	ldw	r2,-24344(gp)
   10324:	10c00d43 	ldbu	r3,53(r2)
   10328:	d0a83a17 	ldw	r2,-24344(gp)
   1032c:	10800d03 	ldbu	r2,52(r2)
   10330:	10803fcc 	andi	r2,r2,255
   10334:	20c6b03a 	or	r3,r4,r3
   10338:	1809883a 	mov	r4,r3
   1033c:	e0fffe17 	ldw	r3,-8(fp)
   10340:	1885883a 	add	r2,r3,r2
   10344:	110002c5 	stb	r4,11(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10348:	e0bffe17 	ldw	r2,-8(fp)
   1034c:	10c00283 	ldbu	r3,10(r2)
   10350:	d0a83a17 	ldw	r2,-24344(gp)
   10354:	10800d83 	ldbu	r2,54(r2)
   10358:	1884b03a 	or	r2,r3,r2
   1035c:	1007883a 	mov	r3,r2
   10360:	e0bffe17 	ldw	r2,-8(fp)
   10364:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10368:	d0a83a17 	ldw	r2,-24344(gp)
   1036c:	10800d03 	ldbu	r2,52(r2)
   10370:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10374:	e0ffffc3 	ldbu	r3,-1(fp)
   10378:	d0a83784 	addi	r2,gp,-24354
   1037c:	1885883a 	add	r2,r3,r2
   10380:	10800003 	ldbu	r2,0(r2)
   10384:	1007883a 	mov	r3,r2
   10388:	d0a83a17 	ldw	r2,-24344(gp)
   1038c:	10800d43 	ldbu	r2,53(r2)
   10390:	0084303a 	nor	r2,zero,r2
   10394:	1884703a 	and	r2,r3,r2
   10398:	e0ffffc3 	ldbu	r3,-1(fp)
   1039c:	1009883a 	mov	r4,r2
   103a0:	d0a83784 	addi	r2,gp,-24354
   103a4:	1885883a 	add	r2,r3,r2
   103a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   103ac:	e0ffffc3 	ldbu	r3,-1(fp)
   103b0:	d0a83784 	addi	r2,gp,-24354
   103b4:	1885883a 	add	r2,r3,r2
   103b8:	10800003 	ldbu	r2,0(r2)
   103bc:	10803fcc 	andi	r2,r2,255
   103c0:	1000071e 	bne	r2,zero,103e0 <OS_EventTaskWait+0xf4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   103c4:	d0a83a17 	ldw	r2,-24344(gp)
   103c8:	10800d83 	ldbu	r2,54(r2)
   103cc:	0084303a 	nor	r2,zero,r2
   103d0:	1007883a 	mov	r3,r2
   103d4:	d0a83743 	ldbu	r2,-24355(gp)
   103d8:	1884703a 	and	r2,r3,r2
   103dc:	d0a83745 	stb	r2,-24355(gp)
    }
}
   103e0:	0001883a 	nop
   103e4:	e037883a 	mov	sp,fp
   103e8:	df000017 	ldw	fp,0(sp)
   103ec:	dec00104 	addi	sp,sp,4
   103f0:	f800283a 	ret

000103f4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   103f4:	defffb04 	addi	sp,sp,-20
   103f8:	df000415 	stw	fp,16(sp)
   103fc:	df000404 	addi	fp,sp,16
   10400:	e13ffc15 	stw	r4,-16(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   10404:	d0a83a17 	ldw	r2,-24344(gp)
   10408:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   1040c:	d0a83a17 	ldw	r2,-24344(gp)
   10410:	e0fffc17 	ldw	r3,-16(fp)
   10414:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   10418:	e0bffc17 	ldw	r2,-16(fp)
   1041c:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
   10420:	e0bfff17 	ldw	r2,-4(fp)
   10424:	10800017 	ldw	r2,0(r2)
   10428:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1042c:	00001e06 	br	104a8 <OS_EventTaskWaitMulti+0xb4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   10430:	d0a83a17 	ldw	r2,-24344(gp)
   10434:	10800d03 	ldbu	r2,52(r2)
   10438:	10803fcc 	andi	r2,r2,255
   1043c:	e0fffe17 	ldw	r3,-8(fp)
   10440:	1885883a 	add	r2,r3,r2
   10444:	110002c3 	ldbu	r4,11(r2)
   10448:	d0a83a17 	ldw	r2,-24344(gp)
   1044c:	10c00d43 	ldbu	r3,53(r2)
   10450:	d0a83a17 	ldw	r2,-24344(gp)
   10454:	10800d03 	ldbu	r2,52(r2)
   10458:	10803fcc 	andi	r2,r2,255
   1045c:	20c6b03a 	or	r3,r4,r3
   10460:	1809883a 	mov	r4,r3
   10464:	e0fffe17 	ldw	r3,-8(fp)
   10468:	1885883a 	add	r2,r3,r2
   1046c:	110002c5 	stb	r4,11(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10470:	e0bffe17 	ldw	r2,-8(fp)
   10474:	10c00283 	ldbu	r3,10(r2)
   10478:	d0a83a17 	ldw	r2,-24344(gp)
   1047c:	10800d83 	ldbu	r2,54(r2)
   10480:	1884b03a 	or	r2,r3,r2
   10484:	1007883a 	mov	r3,r2
   10488:	e0bffe17 	ldw	r2,-8(fp)
   1048c:	10c00285 	stb	r3,10(r2)
        pevents++;
   10490:	e0bfff17 	ldw	r2,-4(fp)
   10494:	10800104 	addi	r2,r2,4
   10498:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
   1049c:	e0bfff17 	ldw	r2,-4(fp)
   104a0:	10800017 	ldw	r2,0(r2)
   104a4:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   104a8:	e0bffe17 	ldw	r2,-8(fp)
   104ac:	103fe01e 	bne	r2,zero,10430 <OS_EventTaskWaitMulti+0x3c>
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   104b0:	d0a83a17 	ldw	r2,-24344(gp)
   104b4:	10800d03 	ldbu	r2,52(r2)
   104b8:	e0bffdc5 	stb	r2,-9(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   104bc:	e0fffdc3 	ldbu	r3,-9(fp)
   104c0:	d0a83784 	addi	r2,gp,-24354
   104c4:	1885883a 	add	r2,r3,r2
   104c8:	10800003 	ldbu	r2,0(r2)
   104cc:	1007883a 	mov	r3,r2
   104d0:	d0a83a17 	ldw	r2,-24344(gp)
   104d4:	10800d43 	ldbu	r2,53(r2)
   104d8:	0084303a 	nor	r2,zero,r2
   104dc:	1884703a 	and	r2,r3,r2
   104e0:	e0fffdc3 	ldbu	r3,-9(fp)
   104e4:	1009883a 	mov	r4,r2
   104e8:	d0a83784 	addi	r2,gp,-24354
   104ec:	1885883a 	add	r2,r3,r2
   104f0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   104f4:	e0fffdc3 	ldbu	r3,-9(fp)
   104f8:	d0a83784 	addi	r2,gp,-24354
   104fc:	1885883a 	add	r2,r3,r2
   10500:	10800003 	ldbu	r2,0(r2)
   10504:	10803fcc 	andi	r2,r2,255
   10508:	1000071e 	bne	r2,zero,10528 <OS_EventTaskWaitMulti+0x134>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1050c:	d0a83a17 	ldw	r2,-24344(gp)
   10510:	10800d83 	ldbu	r2,54(r2)
   10514:	0084303a 	nor	r2,zero,r2
   10518:	1007883a 	mov	r3,r2
   1051c:	d0a83743 	ldbu	r2,-24355(gp)
   10520:	1884703a 	and	r2,r3,r2
   10524:	d0a83745 	stb	r2,-24355(gp)
    }
}
   10528:	0001883a 	nop
   1052c:	e037883a 	mov	sp,fp
   10530:	df000017 	ldw	fp,0(sp)
   10534:	dec00104 	addi	sp,sp,4
   10538:	f800283a 	ret

0001053c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1053c:	defffc04 	addi	sp,sp,-16
   10540:	df000315 	stw	fp,12(sp)
   10544:	df000304 	addi	fp,sp,12
   10548:	e13ffe15 	stw	r4,-8(fp)
   1054c:	e17ffd15 	stw	r5,-12(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	10800d03 	ldbu	r2,52(r2)
   10558:	e0bfffc5 	stb	r2,-1(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1055c:	e0bfffc3 	ldbu	r2,-1(fp)
   10560:	e0fffd17 	ldw	r3,-12(fp)
   10564:	1885883a 	add	r2,r3,r2
   10568:	108002c3 	ldbu	r2,11(r2)
   1056c:	1007883a 	mov	r3,r2
   10570:	e0bffe17 	ldw	r2,-8(fp)
   10574:	10800d43 	ldbu	r2,53(r2)
   10578:	0084303a 	nor	r2,zero,r2
   1057c:	1884703a 	and	r2,r3,r2
   10580:	1007883a 	mov	r3,r2
   10584:	e0bfffc3 	ldbu	r2,-1(fp)
   10588:	1809883a 	mov	r4,r3
   1058c:	e0fffd17 	ldw	r3,-12(fp)
   10590:	1885883a 	add	r2,r3,r2
   10594:	110002c5 	stb	r4,11(r2)
    if (pevent->OSEventTbl[y] == 0) {
   10598:	e0bfffc3 	ldbu	r2,-1(fp)
   1059c:	e0fffd17 	ldw	r3,-12(fp)
   105a0:	1885883a 	add	r2,r3,r2
   105a4:	108002c3 	ldbu	r2,11(r2)
   105a8:	10803fcc 	andi	r2,r2,255
   105ac:	10000a1e 	bne	r2,zero,105d8 <OS_EventTaskRemove+0x9c>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   105b0:	e0bffd17 	ldw	r2,-12(fp)
   105b4:	10800283 	ldbu	r2,10(r2)
   105b8:	1007883a 	mov	r3,r2
   105bc:	e0bffe17 	ldw	r2,-8(fp)
   105c0:	10800d83 	ldbu	r2,54(r2)
   105c4:	0084303a 	nor	r2,zero,r2
   105c8:	1884703a 	and	r2,r3,r2
   105cc:	1007883a 	mov	r3,r2
   105d0:	e0bffd17 	ldw	r2,-12(fp)
   105d4:	10c00285 	stb	r3,10(r2)
    }
}
   105d8:	0001883a 	nop
   105dc:	e037883a 	mov	sp,fp
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00104 	addi	sp,sp,4
   105e8:	f800283a 	ret

000105ec <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   105ec:	defffa04 	addi	sp,sp,-24
   105f0:	df000515 	stw	fp,20(sp)
   105f4:	df000504 	addi	fp,sp,20
   105f8:	e13ffc15 	stw	r4,-16(fp)
   105fc:	e17ffb15 	stw	r5,-20(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   10600:	e0bffc17 	ldw	r2,-16(fp)
   10604:	10800d03 	ldbu	r2,52(r2)
   10608:	e0bffdc5 	stb	r2,-9(fp)
    bity    =  ptcb->OSTCBBitY;
   1060c:	e0bffc17 	ldw	r2,-16(fp)
   10610:	10800d83 	ldbu	r2,54(r2)
   10614:	e0bffd85 	stb	r2,-10(fp)
    bitx    =  ptcb->OSTCBBitX;
   10618:	e0bffc17 	ldw	r2,-16(fp)
   1061c:	10800d43 	ldbu	r2,53(r2)
   10620:	e0bffd45 	stb	r2,-11(fp)
    pevents =  pevents_multi;
   10624:	e0bffb17 	ldw	r2,-20(fp)
   10628:	e0bfff15 	stw	r2,-4(fp)
    pevent  = *pevents;
   1062c:	e0bfff17 	ldw	r2,-4(fp)
   10630:	10800017 	ldw	r2,0(r2)
   10634:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10638:	00002306 	br	106c8 <OS_EventTaskRemoveMulti+0xdc>
        pevent->OSEventTbl[y]  &= ~bitx;
   1063c:	e0bffdc3 	ldbu	r2,-9(fp)
   10640:	e0fffe17 	ldw	r3,-8(fp)
   10644:	1885883a 	add	r2,r3,r2
   10648:	108002c3 	ldbu	r2,11(r2)
   1064c:	1007883a 	mov	r3,r2
   10650:	e0bffd43 	ldbu	r2,-11(fp)
   10654:	0084303a 	nor	r2,zero,r2
   10658:	1884703a 	and	r2,r3,r2
   1065c:	1007883a 	mov	r3,r2
   10660:	e0bffdc3 	ldbu	r2,-9(fp)
   10664:	1809883a 	mov	r4,r3
   10668:	e0fffe17 	ldw	r3,-8(fp)
   1066c:	1885883a 	add	r2,r3,r2
   10670:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y] == 0) {
   10674:	e0bffdc3 	ldbu	r2,-9(fp)
   10678:	e0fffe17 	ldw	r3,-8(fp)
   1067c:	1885883a 	add	r2,r3,r2
   10680:	108002c3 	ldbu	r2,11(r2)
   10684:	10803fcc 	andi	r2,r2,255
   10688:	1000091e 	bne	r2,zero,106b0 <OS_EventTaskRemoveMulti+0xc4>
            pevent->OSEventGrp &= ~bity;
   1068c:	e0bffe17 	ldw	r2,-8(fp)
   10690:	10800283 	ldbu	r2,10(r2)
   10694:	1007883a 	mov	r3,r2
   10698:	e0bffd83 	ldbu	r2,-10(fp)
   1069c:	0084303a 	nor	r2,zero,r2
   106a0:	1884703a 	and	r2,r3,r2
   106a4:	1007883a 	mov	r3,r2
   106a8:	e0bffe17 	ldw	r2,-8(fp)
   106ac:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   106b0:	e0bfff17 	ldw	r2,-4(fp)
   106b4:	10800104 	addi	r2,r2,4
   106b8:	e0bfff15 	stw	r2,-4(fp)
        pevent = *pevents;
   106bc:	e0bfff17 	ldw	r2,-4(fp)
   106c0:	10800017 	ldw	r2,0(r2)
   106c4:	e0bffe15 	stw	r2,-8(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   106c8:	e0bffe17 	ldw	r2,-8(fp)
   106cc:	103fdb1e 	bne	r2,zero,1063c <OS_EventTaskRemoveMulti+0x50>
    }
}
   106d0:	0001883a 	nop
   106d4:	0001883a 	nop
   106d8:	e037883a 	mov	sp,fp
   106dc:	df000017 	ldw	fp,0(sp)
   106e0:	dec00104 	addi	sp,sp,4
   106e4:	f800283a 	ret

000106e8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   106e8:	defffc04 	addi	sp,sp,-16
   106ec:	df000315 	stw	fp,12(sp)
   106f0:	df000304 	addi	fp,sp,12
   106f4:	e13ffd15 	stw	r4,-12(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   106f8:	e0bffd17 	ldw	r2,-12(fp)
   106fc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   10700:	e0bffd17 	ldw	r2,-12(fp)
   10704:	108002c4 	addi	r2,r2,11
   10708:	e0bfff15 	stw	r2,-4(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1070c:	e03ffec5 	stb	zero,-5(fp)
   10710:	00000706 	br	10730 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   10714:	e0bfff17 	ldw	r2,-4(fp)
   10718:	10c00044 	addi	r3,r2,1
   1071c:	e0ffff15 	stw	r3,-4(fp)
   10720:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   10724:	e0bffec3 	ldbu	r2,-5(fp)
   10728:	10800044 	addi	r2,r2,1
   1072c:	e0bffec5 	stb	r2,-5(fp)
   10730:	e0bffec3 	ldbu	r2,-5(fp)
   10734:	108000f0 	cmpltui	r2,r2,3
   10738:	103ff61e 	bne	r2,zero,10714 <OS_EventWaitListInit+0x2c>
    }
}
   1073c:	0001883a 	nop
   10740:	0001883a 	nop
   10744:	e037883a 	mov	sp,fp
   10748:	df000017 	ldw	fp,0(sp)
   1074c:	dec00104 	addi	sp,sp,4
   10750:	f800283a 	ret

00010754 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   10754:	defffb04 	addi	sp,sp,-20
   10758:	dfc00415 	stw	ra,16(sp)
   1075c:	df000315 	stw	fp,12(sp)
   10760:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   10764:	0142d004 	movi	r5,2880
   10768:	010000f4 	movhi	r4,3
   1076c:	21307604 	addi	r4,r4,-15912
   10770:	0010ad40 	call	10ad4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   10774:	008000f4 	movhi	r2,3
   10778:	10b07604 	addi	r2,r2,-15912
   1077c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   10780:	008000f4 	movhi	r2,3
   10784:	10b08204 	addi	r2,r2,-15864
   10788:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1078c:	e03fff8d 	sth	zero,-2(fp)
   10790:	00001306 	br	107e0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   10794:	e0bffe17 	ldw	r2,-8(fp)
   10798:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1079c:	e0bffe17 	ldw	r2,-8(fp)
   107a0:	e0fffd17 	ldw	r3,-12(fp)
   107a4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   107a8:	e0bffe17 	ldw	r2,-8(fp)
   107ac:	00c00fc4 	movi	r3,63
   107b0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   107b4:	e0bffe17 	ldw	r2,-8(fp)
   107b8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   107bc:	e0bffe17 	ldw	r2,-8(fp)
   107c0:	10800c04 	addi	r2,r2,48
   107c4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   107c8:	e0bffd17 	ldw	r2,-12(fp)
   107cc:	10800c04 	addi	r2,r2,48
   107d0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   107d4:	e0bfff8b 	ldhu	r2,-2(fp)
   107d8:	10800044 	addi	r2,r2,1
   107dc:	e0bfff8d 	sth	r2,-2(fp)
   107e0:	e0bfff8b 	ldhu	r2,-2(fp)
   107e4:	10800ef0 	cmpltui	r2,r2,59
   107e8:	103fea1e 	bne	r2,zero,10794 <OS_InitEventList+0x40>
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   107ec:	e0bffe17 	ldw	r2,-8(fp)
   107f0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   107f4:	e0bffe17 	ldw	r2,-8(fp)
   107f8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   107fc:	e0bffe17 	ldw	r2,-8(fp)
   10800:	00c00fc4 	movi	r3,63
   10804:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   10808:	e0bffe17 	ldw	r2,-8(fp)
   1080c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   10810:	008000f4 	movhi	r2,3
   10814:	10b07604 	addi	r2,r2,-15912
   10818:	d0a83115 	stw	r2,-24380(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1081c:	0001883a 	nop
   10820:	e037883a 	mov	sp,fp
   10824:	dfc00117 	ldw	ra,4(sp)
   10828:	df000017 	ldw	fp,0(sp)
   1082c:	dec00204 	addi	sp,sp,8
   10830:	f800283a 	ret

00010834 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   10834:	deffff04 	addi	sp,sp,-4
   10838:	df000015 	stw	fp,0(sp)
   1083c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   10840:	d0284115 	stw	zero,-24316(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   10844:	d0283645 	stb	zero,-24359(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   10848:	d0283685 	stb	zero,-24358(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   1084c:	d0283885 	stb	zero,-24350(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   10850:	d0283845 	stb	zero,-24351(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   10854:	d0283015 	stw	zero,-24384(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   10858:	d0283915 	stw	zero,-24348(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   1085c:	d0283515 	stw	zero,-24364(gp)
    OSIdleCtrMax  = 0L;
   10860:	d0283415 	stw	zero,-24368(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   10864:	d0283605 	stb	zero,-24360(gp)
#endif
}
   10868:	0001883a 	nop
   1086c:	e037883a 	mov	sp,fp
   10870:	df000017 	ldw	fp,0(sp)
   10874:	dec00104 	addi	sp,sp,4
   10878:	f800283a 	ret

0001087c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1087c:	defffd04 	addi	sp,sp,-12
   10880:	df000215 	stw	fp,8(sp)
   10884:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   10888:	d0283745 	stb	zero,-24355(gp)
    prdytbl       = &OSRdyTbl[0];
   1088c:	d0a83784 	addi	r2,gp,-24354
   10890:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   10894:	e03fffc5 	stb	zero,-1(fp)
   10898:	00000706 	br	108b8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   1089c:	e0bffe17 	ldw	r2,-8(fp)
   108a0:	10c00044 	addi	r3,r2,1
   108a4:	e0fffe15 	stw	r3,-8(fp)
   108a8:	10000005 	stb	zero,0(r2)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   108ac:	e0bfffc3 	ldbu	r2,-1(fp)
   108b0:	10800044 	addi	r2,r2,1
   108b4:	e0bfffc5 	stb	r2,-1(fp)
   108b8:	e0bfffc3 	ldbu	r2,-1(fp)
   108bc:	108000f0 	cmpltui	r2,r2,3
   108c0:	103ff61e 	bne	r2,zero,1089c <OS_InitRdyList+0x20>
    }

    OSPrioCur     = 0;
   108c4:	d02836c5 	stb	zero,-24357(gp)
    OSPrioHighRdy = 0;
   108c8:	d0283705 	stb	zero,-24356(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   108cc:	d0283c15 	stw	zero,-24336(gp)
    OSTCBCur      = (OS_TCB *)0;
   108d0:	d0283a15 	stw	zero,-24344(gp)
}
   108d4:	0001883a 	nop
   108d8:	e037883a 	mov	sp,fp
   108dc:	df000017 	ldw	fp,0(sp)
   108e0:	dec00104 	addi	sp,sp,4
   108e4:	f800283a 	ret

000108e8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   108e8:	defff804 	addi	sp,sp,-32
   108ec:	dfc00715 	stw	ra,28(sp)
   108f0:	df000615 	stw	fp,24(sp)
   108f4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   108f8:	008000c4 	movi	r2,3
   108fc:	d8800415 	stw	r2,16(sp)
   10900:	d8000315 	stw	zero,12(sp)
   10904:	00808004 	movi	r2,512
   10908:	d8800215 	stw	r2,8(sp)
   1090c:	008000f4 	movhi	r2,3
   10910:	10b62204 	addi	r2,r2,-10104
   10914:	d8800115 	stw	r2,4(sp)
   10918:	00bfffd4 	movui	r2,65535
   1091c:	d8800015 	stw	r2,0(sp)
   10920:	01c00504 	movi	r7,20
   10924:	018000f4 	movhi	r6,3
   10928:	31b82104 	addi	r6,r6,-8060
   1092c:	000b883a 	mov	r5,zero
   10930:	01000074 	movhi	r4,1
   10934:	21036604 	addi	r4,r4,3480
   10938:	00166900 	call	16690 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1093c:	e0bfffc4 	addi	r2,fp,-1
   10940:	100d883a 	mov	r6,r2
   10944:	014000b4 	movhi	r5,2
   10948:	29700804 	addi	r5,r5,-16352
   1094c:	01000504 	movi	r4,20
   10950:	0016ea40 	call	16ea4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   10954:	0001883a 	nop
   10958:	e037883a 	mov	sp,fp
   1095c:	dfc00117 	ldw	ra,4(sp)
   10960:	df000017 	ldw	fp,0(sp)
   10964:	dec00204 	addi	sp,sp,8
   10968:	f800283a 	ret

0001096c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1096c:	defff804 	addi	sp,sp,-32
   10970:	dfc00715 	stw	ra,28(sp)
   10974:	df000615 	stw	fp,24(sp)
   10978:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1097c:	008000c4 	movi	r2,3
   10980:	d8800415 	stw	r2,16(sp)
   10984:	d8000315 	stw	zero,12(sp)
   10988:	00808004 	movi	r2,512
   1098c:	d8800215 	stw	r2,8(sp)
   10990:	008000f4 	movhi	r2,3
   10994:	10b42204 	addi	r2,r2,-12152
   10998:	d8800115 	stw	r2,4(sp)
   1099c:	00bfff94 	movui	r2,65534
   109a0:	d8800015 	stw	r2,0(sp)
   109a4:	01c004c4 	movi	r7,19
   109a8:	018000f4 	movhi	r6,3
   109ac:	31b62104 	addi	r6,r6,-10108
   109b0:	000b883a 	mov	r5,zero
   109b4:	01000074 	movhi	r4,1
   109b8:	21037e04 	addi	r4,r4,3576
   109bc:	00166900 	call	16690 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   109c0:	e0bfffc4 	addi	r2,fp,-1
   109c4:	100d883a 	mov	r6,r2
   109c8:	014000b4 	movhi	r5,2
   109cc:	29700c04 	addi	r5,r5,-16336
   109d0:	010004c4 	movi	r4,19
   109d4:	0016ea40 	call	16ea4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   109d8:	0001883a 	nop
   109dc:	e037883a 	mov	sp,fp
   109e0:	dfc00117 	ldw	ra,4(sp)
   109e4:	df000017 	ldw	fp,0(sp)
   109e8:	dec00204 	addi	sp,sp,8
   109ec:	f800283a 	ret

000109f0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   109f0:	defffb04 	addi	sp,sp,-20
   109f4:	dfc00415 	stw	ra,16(sp)
   109f8:	df000315 	stw	fp,12(sp)
   109fc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   10a00:	01414404 	movi	r5,1296
   10a04:	010000f4 	movhi	r4,3
   10a08:	21383704 	addi	r4,r4,-7972
   10a0c:	0010ad40 	call	10ad4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   10a10:	01401504 	movi	r5,84
   10a14:	010000f4 	movhi	r4,3
   10a18:	21382204 	addi	r4,r4,-8056
   10a1c:	0010ad40 	call	10ad4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   10a20:	008000f4 	movhi	r2,3
   10a24:	10b83704 	addi	r2,r2,-7972
   10a28:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   10a2c:	008000f4 	movhi	r2,3
   10a30:	10b85204 	addi	r2,r2,-7864
   10a34:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   10a38:	e03fffc5 	stb	zero,-1(fp)
   10a3c:	00001106 	br	10a84 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   10a40:	e0bffe17 	ldw	r2,-8(fp)
   10a44:	e0fffd17 	ldw	r3,-12(fp)
   10a48:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   10a4c:	e0bffe17 	ldw	r2,-8(fp)
   10a50:	00c00fc4 	movi	r3,63
   10a54:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   10a58:	e0bffe17 	ldw	r2,-8(fp)
   10a5c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   10a60:	e0bffe17 	ldw	r2,-8(fp)
   10a64:	10801b04 	addi	r2,r2,108
   10a68:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   10a6c:	e0bffd17 	ldw	r2,-12(fp)
   10a70:	10801b04 	addi	r2,r2,108
   10a74:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   10a78:	e0bfffc3 	ldbu	r2,-1(fp)
   10a7c:	10800044 	addi	r2,r2,1
   10a80:	e0bfffc5 	stb	r2,-1(fp)
   10a84:	e0bfffc3 	ldbu	r2,-1(fp)
   10a88:	108002f0 	cmpltui	r2,r2,11
   10a8c:	103fec1e 	bne	r2,zero,10a40 <OS_InitTCBList+0x50>
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   10a90:	e0bffe17 	ldw	r2,-8(fp)
   10a94:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   10a98:	e0bffe17 	ldw	r2,-8(fp)
   10a9c:	00c00fc4 	movi	r3,63
   10aa0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   10aa4:	e0bffe17 	ldw	r2,-8(fp)
   10aa8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   10aac:	d0283d15 	stw	zero,-24332(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   10ab0:	008000f4 	movhi	r2,3
   10ab4:	10b83704 	addi	r2,r2,-7972
   10ab8:	d0a83b15 	stw	r2,-24340(gp)
}
   10abc:	0001883a 	nop
   10ac0:	e037883a 	mov	sp,fp
   10ac4:	dfc00117 	ldw	ra,4(sp)
   10ac8:	df000017 	ldw	fp,0(sp)
   10acc:	dec00204 	addi	sp,sp,8
   10ad0:	f800283a 	ret

00010ad4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   10ad4:	defffd04 	addi	sp,sp,-12
   10ad8:	df000215 	stw	fp,8(sp)
   10adc:	df000204 	addi	fp,sp,8
   10ae0:	e13fff15 	stw	r4,-4(fp)
   10ae4:	2805883a 	mov	r2,r5
   10ae8:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
   10aec:	00000706 	br	10b0c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   10af0:	e0bfff17 	ldw	r2,-4(fp)
   10af4:	10c00044 	addi	r3,r2,1
   10af8:	e0ffff15 	stw	r3,-4(fp)
   10afc:	10000005 	stb	zero,0(r2)
        size--;
   10b00:	e0bffe0b 	ldhu	r2,-8(fp)
   10b04:	10bfffc4 	addi	r2,r2,-1
   10b08:	e0bffe0d 	sth	r2,-8(fp)
    while (size > 0) {
   10b0c:	e0bffe0b 	ldhu	r2,-8(fp)
   10b10:	103ff71e 	bne	r2,zero,10af0 <OS_MemClr+0x1c>
    }
}
   10b14:	0001883a 	nop
   10b18:	0001883a 	nop
   10b1c:	e037883a 	mov	sp,fp
   10b20:	df000017 	ldw	fp,0(sp)
   10b24:	dec00104 	addi	sp,sp,4
   10b28:	f800283a 	ret

00010b2c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   10b2c:	defffc04 	addi	sp,sp,-16
   10b30:	df000315 	stw	fp,12(sp)
   10b34:	df000304 	addi	fp,sp,12
   10b38:	e13fff15 	stw	r4,-4(fp)
   10b3c:	e17ffe15 	stw	r5,-8(fp)
   10b40:	3005883a 	mov	r2,r6
   10b44:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
   10b48:	00000b06 	br	10b78 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   10b4c:	e0fffe17 	ldw	r3,-8(fp)
   10b50:	18800044 	addi	r2,r3,1
   10b54:	e0bffe15 	stw	r2,-8(fp)
   10b58:	e0bfff17 	ldw	r2,-4(fp)
   10b5c:	11000044 	addi	r4,r2,1
   10b60:	e13fff15 	stw	r4,-4(fp)
   10b64:	18c00003 	ldbu	r3,0(r3)
   10b68:	10c00005 	stb	r3,0(r2)
        size--;
   10b6c:	e0bffd0b 	ldhu	r2,-12(fp)
   10b70:	10bfffc4 	addi	r2,r2,-1
   10b74:	e0bffd0d 	sth	r2,-12(fp)
    while (size > 0) {
   10b78:	e0bffd0b 	ldhu	r2,-12(fp)
   10b7c:	103ff31e 	bne	r2,zero,10b4c <OS_MemCopy+0x20>
    }
}
   10b80:	0001883a 	nop
   10b84:	0001883a 	nop
   10b88:	e037883a 	mov	sp,fp
   10b8c:	df000017 	ldw	fp,0(sp)
   10b90:	dec00104 	addi	sp,sp,4
   10b94:	f800283a 	ret

00010b98 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   10b98:	defffb04 	addi	sp,sp,-20
   10b9c:	dfc00415 	stw	ra,16(sp)
   10ba0:	df000315 	stw	fp,12(sp)
   10ba4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10ba8:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
   10bac:	0005303a 	rdctl	r2,status
   10bb0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10bb4:	e0fffe17 	ldw	r3,-8(fp)
   10bb8:	00bfff84 	movi	r2,-2
   10bbc:	1884703a 	and	r2,r3,r2
   10bc0:	1001703a 	wrctl	status,r2
  return context;
   10bc4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10bc8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   10bcc:	d0a83643 	ldbu	r2,-24359(gp)
   10bd0:	10803fcc 	andi	r2,r2,255
   10bd4:	1000181e 	bne	r2,zero,10c38 <OS_Sched+0xa0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   10bd8:	d0a83683 	ldbu	r2,-24358(gp)
   10bdc:	10803fcc 	andi	r2,r2,255
   10be0:	1000151e 	bne	r2,zero,10c38 <OS_Sched+0xa0>
            OS_SchedNew();
   10be4:	0010c640 	call	10c64 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   10be8:	d0e83703 	ldbu	r3,-24356(gp)
   10bec:	d0a836c3 	ldbu	r2,-24357(gp)
   10bf0:	18c03fcc 	andi	r3,r3,255
   10bf4:	10803fcc 	andi	r2,r2,255
   10bf8:	18800f26 	beq	r3,r2,10c38 <OS_Sched+0xa0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   10bfc:	d0a83703 	ldbu	r2,-24356(gp)
   10c00:	10803fcc 	andi	r2,r2,255
   10c04:	100690ba 	slli	r3,r2,2
   10c08:	008000f4 	movhi	r2,3
   10c0c:	1885883a 	add	r2,r3,r2
   10c10:	10b82217 	ldw	r2,-8056(r2)
   10c14:	d0a83c15 	stw	r2,-24336(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   10c18:	d0a83c17 	ldw	r2,-24336(gp)
   10c1c:	10c00e17 	ldw	r3,56(r2)
   10c20:	18c00044 	addi	r3,r3,1
   10c24:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   10c28:	d0a83017 	ldw	r2,-24384(gp)
   10c2c:	10800044 	addi	r2,r2,1
   10c30:	d0a83015 	stw	r2,-24384(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   10c34:	001aeb80 	call	1aeb8 <OSCtxSw>
   10c38:	e0bfff17 	ldw	r2,-4(fp)
   10c3c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   10c40:	e0bffd17 	ldw	r2,-12(fp)
   10c44:	1001703a 	wrctl	status,r2
}
   10c48:	0001883a 	nop
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   10c4c:	0001883a 	nop
   10c50:	e037883a 	mov	sp,fp
   10c54:	dfc00117 	ldw	ra,4(sp)
   10c58:	df000017 	ldw	fp,0(sp)
   10c5c:	dec00204 	addi	sp,sp,8
   10c60:	f800283a 	ret

00010c64 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   10c64:	defffe04 	addi	sp,sp,-8
   10c68:	df000115 	stw	fp,4(sp)
   10c6c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   10c70:	d0a83743 	ldbu	r2,-24355(gp)
   10c74:	10c03fcc 	andi	r3,r2,255
   10c78:	008000b4 	movhi	r2,2
   10c7c:	1885883a 	add	r2,r3,r2
   10c80:	10afc803 	ldbu	r2,-16608(r2)
   10c84:	e0bfffc5 	stb	r2,-1(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   10c88:	e0bfffc3 	ldbu	r2,-1(fp)
   10c8c:	100490fa 	slli	r2,r2,3
   10c90:	1009883a 	mov	r4,r2
   10c94:	e0ffffc3 	ldbu	r3,-1(fp)
   10c98:	d0a83784 	addi	r2,gp,-24354
   10c9c:	1885883a 	add	r2,r3,r2
   10ca0:	10800003 	ldbu	r2,0(r2)
   10ca4:	10c03fcc 	andi	r3,r2,255
   10ca8:	008000b4 	movhi	r2,2
   10cac:	1885883a 	add	r2,r3,r2
   10cb0:	10afc803 	ldbu	r2,-16608(r2)
   10cb4:	2085883a 	add	r2,r4,r2
   10cb8:	d0a83705 	stb	r2,-24356(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   10cbc:	0001883a 	nop
   10cc0:	e037883a 	mov	sp,fp
   10cc4:	df000017 	ldw	fp,0(sp)
   10cc8:	dec00104 	addi	sp,sp,4
   10ccc:	f800283a 	ret

00010cd0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   10cd0:	defffc04 	addi	sp,sp,-16
   10cd4:	df000315 	stw	fp,12(sp)
   10cd8:	df000304 	addi	fp,sp,12
   10cdc:	e13ffe15 	stw	r4,-8(fp)
   10ce0:	e17ffd15 	stw	r5,-12(fp)
    INT8U  len;


    len = 0;
   10ce4:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
   10ce8:	00000b06 	br	10d18 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   10cec:	e0fffd17 	ldw	r3,-12(fp)
   10cf0:	18800044 	addi	r2,r3,1
   10cf4:	e0bffd15 	stw	r2,-12(fp)
   10cf8:	e0bffe17 	ldw	r2,-8(fp)
   10cfc:	11000044 	addi	r4,r2,1
   10d00:	e13ffe15 	stw	r4,-8(fp)
   10d04:	18c00003 	ldbu	r3,0(r3)
   10d08:	10c00005 	stb	r3,0(r2)
        len++;
   10d0c:	e0bfffc3 	ldbu	r2,-1(fp)
   10d10:	10800044 	addi	r2,r2,1
   10d14:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
   10d18:	e0bffd17 	ldw	r2,-12(fp)
   10d1c:	10800003 	ldbu	r2,0(r2)
   10d20:	10803fcc 	andi	r2,r2,255
   10d24:	103ff11e 	bne	r2,zero,10cec <OS_StrCopy+0x1c>
    }
    *pdest = OS_ASCII_NUL;
   10d28:	e0bffe17 	ldw	r2,-8(fp)
   10d2c:	10000005 	stb	zero,0(r2)
    return (len);
   10d30:	e0bfffc3 	ldbu	r2,-1(fp)
}
   10d34:	e037883a 	mov	sp,fp
   10d38:	df000017 	ldw	fp,0(sp)
   10d3c:	dec00104 	addi	sp,sp,4
   10d40:	f800283a 	ret

00010d44 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   10d44:	defffd04 	addi	sp,sp,-12
   10d48:	df000215 	stw	fp,8(sp)
   10d4c:	df000204 	addi	fp,sp,8
   10d50:	e13ffe15 	stw	r4,-8(fp)
    INT8U  len;


    len = 0;
   10d54:	e03fffc5 	stb	zero,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
   10d58:	00000606 	br	10d74 <OS_StrLen+0x30>
        psrc++;
   10d5c:	e0bffe17 	ldw	r2,-8(fp)
   10d60:	10800044 	addi	r2,r2,1
   10d64:	e0bffe15 	stw	r2,-8(fp)
        len++;
   10d68:	e0bfffc3 	ldbu	r2,-1(fp)
   10d6c:	10800044 	addi	r2,r2,1
   10d70:	e0bfffc5 	stb	r2,-1(fp)
    while (*psrc != OS_ASCII_NUL) {
   10d74:	e0bffe17 	ldw	r2,-8(fp)
   10d78:	10800003 	ldbu	r2,0(r2)
   10d7c:	10803fcc 	andi	r2,r2,255
   10d80:	103ff61e 	bne	r2,zero,10d5c <OS_StrLen+0x18>
    }
    return (len);
   10d84:	e0bfffc3 	ldbu	r2,-1(fp)
}
   10d88:	e037883a 	mov	sp,fp
   10d8c:	df000017 	ldw	fp,0(sp)
   10d90:	dec00104 	addi	sp,sp,4
   10d94:	f800283a 	ret

00010d98 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   10d98:	defffa04 	addi	sp,sp,-24
   10d9c:	dfc00515 	stw	ra,20(sp)
   10da0:	df000415 	stw	fp,16(sp)
   10da4:	df000404 	addi	fp,sp,16
   10da8:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10dac:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
   10db0:	0005303a 	rdctl	r2,status
   10db4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10db8:	e0fffd17 	ldw	r3,-12(fp)
   10dbc:	00bfff84 	movi	r2,-2
   10dc0:	1884703a 	and	r2,r3,r2
   10dc4:	1001703a 	wrctl	status,r2
  return context;
   10dc8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   10dcc:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtr++;
   10dd0:	d0a83917 	ldw	r2,-24348(gp)
   10dd4:	10800044 	addi	r2,r2,1
   10dd8:	d0a83915 	stw	r2,-24348(gp)
   10ddc:	e0bfff17 	ldw	r2,-4(fp)
   10de0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   10de4:	e0bffe17 	ldw	r2,-8(fp)
   10de8:	1001703a 	wrctl	status,r2
}
   10dec:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   10df0:	001b1bc0 	call	1b1bc <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
   10df4:	003fee06 	br	10db0 <OS_TaskIdle+0x18>

00010df8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   10df8:	defffa04 	addi	sp,sp,-24
   10dfc:	dfc00515 	stw	ra,20(sp)
   10e00:	df000415 	stw	fp,16(sp)
   10e04:	df000404 	addi	fp,sp,16
   10e08:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10e0c:	e03fff15 	stw	zero,-4(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10e10:	00000206 	br	10e1c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10e14:	01000044 	movi	r4,1
   10e18:	00177780 	call	17778 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
   10e1c:	d0a83603 	ldbu	r2,-24360(gp)
   10e20:	10803fcc 	andi	r2,r2,255
   10e24:	103ffb26 	beq	r2,zero,10e14 <OS_TaskStat+0x1c>
    }
    OSIdleCtrMax /= 100L;
   10e28:	d0e83417 	ldw	r3,-24368(gp)
   10e2c:	00801904 	movi	r2,100
   10e30:	1885203a 	divu	r2,r3,r2
   10e34:	d0a83415 	stw	r2,-24368(gp)
    if (OSIdleCtrMax == 0L) {
   10e38:	d0a83417 	ldw	r2,-24368(gp)
   10e3c:	1000031e 	bne	r2,zero,10e4c <OS_TaskStat+0x54>
        OSCPUUsage = 0;
   10e40:	d0283305 	stb	zero,-24372(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   10e44:	01003fc4 	movi	r4,255
   10e48:	00173f80 	call	173f8 <OSTaskSuspend>
  NIOS2_READ_STATUS (context);
   10e4c:	0005303a 	rdctl	r2,status
   10e50:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e54:	e0fffd17 	ldw	r3,-12(fp)
   10e58:	00bfff84 	movi	r2,-2
   10e5c:	1884703a 	and	r2,r3,r2
   10e60:	1001703a 	wrctl	status,r2
  return context;
   10e64:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   10e68:	e0bfff15 	stw	r2,-4(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   10e6c:	d0a83917 	ldw	r2,-24348(gp)
   10e70:	d0a83515 	stw	r2,-24364(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   10e74:	d0283915 	stw	zero,-24348(gp)
   10e78:	e0bfff17 	ldw	r2,-4(fp)
   10e7c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   10e80:	e0bffe17 	ldw	r2,-8(fp)
   10e84:	1001703a 	wrctl	status,r2
}
   10e88:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   10e8c:	d0e83517 	ldw	r3,-24364(gp)
   10e90:	d0a83417 	ldw	r2,-24368(gp)
   10e94:	1885203a 	divu	r2,r3,r2
   10e98:	1007883a 	mov	r3,r2
   10e9c:	00801904 	movi	r2,100
   10ea0:	10c5c83a 	sub	r2,r2,r3
   10ea4:	d0a83305 	stb	r2,-24372(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   10ea8:	001b13c0 	call	1b13c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   10eac:	0010ebc0 	call	10ebc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   10eb0:	0009883a 	mov	r4,zero
   10eb4:	00177780 	call	17778 <OSTimeDly>
        OS_ENTER_CRITICAL();
   10eb8:	003fe406 	br	10e4c <OS_TaskStat+0x54>

00010ebc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   10ebc:	defffa04 	addi	sp,sp,-24
   10ec0:	dfc00515 	stw	ra,20(sp)
   10ec4:	df000415 	stw	fp,16(sp)
   10ec8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10ecc:	e03fffc5 	stb	zero,-1(fp)
   10ed0:	00002106 	br	10f58 <OS_TaskStatStkChk+0x9c>
        err = OSTaskStkChk(prio, &stk_data);
   10ed4:	e0bfffc3 	ldbu	r2,-1(fp)
   10ed8:	e0fffc04 	addi	r3,fp,-16
   10edc:	180b883a 	mov	r5,r3
   10ee0:	1009883a 	mov	r4,r2
   10ee4:	00172400 	call	17240 <OSTaskStkChk>
   10ee8:	e0bfff85 	stb	r2,-2(fp)
        if (err == OS_ERR_NONE) {
   10eec:	e0bfff83 	ldbu	r2,-2(fp)
   10ef0:	1000161e 	bne	r2,zero,10f4c <OS_TaskStatStkChk+0x90>
            ptcb = OSTCBPrioTbl[prio];
   10ef4:	e0bfffc3 	ldbu	r2,-1(fp)
   10ef8:	100690ba 	slli	r3,r2,2
   10efc:	008000f4 	movhi	r2,3
   10f00:	1885883a 	add	r2,r3,r2
   10f04:	10b82217 	ldw	r2,-8056(r2)
   10f08:	e0bffe15 	stw	r2,-8(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   10f0c:	e0bffe17 	ldw	r2,-8(fp)
   10f10:	10000e26 	beq	r2,zero,10f4c <OS_TaskStatStkChk+0x90>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10f14:	e0bffe17 	ldw	r2,-8(fp)
   10f18:	10800060 	cmpeqi	r2,r2,1
   10f1c:	10000b1e 	bne	r2,zero,10f4c <OS_TaskStatStkChk+0x90>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   10f20:	e0bffe17 	ldw	r2,-8(fp)
   10f24:	10c00217 	ldw	r3,8(r2)
   10f28:	e0bffe17 	ldw	r2,-8(fp)
   10f2c:	10800317 	ldw	r2,12(r2)
   10f30:	100490ba 	slli	r2,r2,2
   10f34:	1887883a 	add	r3,r3,r2
   10f38:	e0bffe17 	ldw	r2,-8(fp)
   10f3c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   10f40:	e0fffd17 	ldw	r3,-12(fp)
   10f44:	e0bffe17 	ldw	r2,-8(fp)
   10f48:	10c01215 	stw	r3,72(r2)
    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10f4c:	e0bfffc3 	ldbu	r2,-1(fp)
   10f50:	10800044 	addi	r2,r2,1
   10f54:	e0bfffc5 	stb	r2,-1(fp)
   10f58:	e0bfffc3 	ldbu	r2,-1(fp)
   10f5c:	10800570 	cmpltui	r2,r2,21
   10f60:	103fdc1e 	bne	r2,zero,10ed4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   10f64:	0001883a 	nop
   10f68:	0001883a 	nop
   10f6c:	e037883a 	mov	sp,fp
   10f70:	dfc00117 	ldw	ra,4(sp)
   10f74:	df000017 	ldw	fp,0(sp)
   10f78:	dec00204 	addi	sp,sp,8
   10f7c:	f800283a 	ret

00010f80 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   10f80:	defff204 	addi	sp,sp,-56
   10f84:	dfc00d15 	stw	ra,52(sp)
   10f88:	df000c15 	stw	fp,48(sp)
   10f8c:	df000c04 	addi	fp,sp,48
   10f90:	2007883a 	mov	r3,r4
   10f94:	e17ff715 	stw	r5,-36(fp)
   10f98:	e1bff615 	stw	r6,-40(fp)
   10f9c:	3809883a 	mov	r4,r7
   10fa0:	e0800417 	ldw	r2,16(fp)
   10fa4:	e0fff805 	stb	r3,-32(fp)
   10fa8:	2007883a 	mov	r3,r4
   10fac:	e0fff50d 	sth	r3,-44(fp)
   10fb0:	e0bff40d 	sth	r2,-48(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10fb4:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
   10fb8:	0005303a 	rdctl	r2,status
   10fbc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fc0:	e0fffd17 	ldw	r3,-12(fp)
   10fc4:	00bfff84 	movi	r2,-2
   10fc8:	1884703a 	and	r2,r3,r2
   10fcc:	1001703a 	wrctl	status,r2
  return context;
   10fd0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   10fd4:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   10fd8:	d0a83b17 	ldw	r2,-24340(gp)
   10fdc:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb != (OS_TCB *)0) {
   10fe0:	e0bffe17 	ldw	r2,-8(fp)
   10fe4:	10009326 	beq	r2,zero,11234 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   10fe8:	e0bffe17 	ldw	r2,-8(fp)
   10fec:	10800517 	ldw	r2,20(r2)
   10ff0:	d0a83b15 	stw	r2,-24340(gp)
   10ff4:	e0bfff17 	ldw	r2,-4(fp)
   10ff8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   10ffc:	e0bffb17 	ldw	r2,-20(fp)
   11000:	1001703a 	wrctl	status,r2
}
   11004:	0001883a 	nop
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   11008:	e0bffe17 	ldw	r2,-8(fp)
   1100c:	e0fff717 	ldw	r3,-36(fp)
   11010:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   11014:	e0bffe17 	ldw	r2,-8(fp)
   11018:	e0fff803 	ldbu	r3,-32(fp)
   1101c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   11020:	e0bffe17 	ldw	r2,-8(fp)
   11024:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   11028:	e0bffe17 	ldw	r2,-8(fp)
   1102c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   11030:	e0bffe17 	ldw	r2,-8(fp)
   11034:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   11038:	e0bffe17 	ldw	r2,-8(fp)
   1103c:	e0c00317 	ldw	r3,12(fp)
   11040:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   11044:	e0bffe17 	ldw	r2,-8(fp)
   11048:	e0c00217 	ldw	r3,8(fp)
   1104c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   11050:	e0bffe17 	ldw	r2,-8(fp)
   11054:	e0fff617 	ldw	r3,-40(fp)
   11058:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1105c:	e0bffe17 	ldw	r2,-8(fp)
   11060:	e0fff40b 	ldhu	r3,-48(fp)
   11064:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   11068:	e0bffe17 	ldw	r2,-8(fp)
   1106c:	e0fff50b 	ldhu	r3,-44(fp)
   11070:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   11074:	e0bffe17 	ldw	r2,-8(fp)
   11078:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1107c:	e0bff803 	ldbu	r2,-32(fp)
   11080:	1004d0fa 	srli	r2,r2,3
   11084:	1007883a 	mov	r3,r2
   11088:	e0bffe17 	ldw	r2,-8(fp)
   1108c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   11090:	e0bff803 	ldbu	r2,-32(fp)
   11094:	108001cc 	andi	r2,r2,7
   11098:	1007883a 	mov	r3,r2
   1109c:	e0bffe17 	ldw	r2,-8(fp)
   110a0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   110a4:	e0bffe17 	ldw	r2,-8(fp)
   110a8:	10800d03 	ldbu	r2,52(r2)
   110ac:	10803fcc 	andi	r2,r2,255
   110b0:	00c00044 	movi	r3,1
   110b4:	1884983a 	sll	r2,r3,r2
   110b8:	1007883a 	mov	r3,r2
   110bc:	e0bffe17 	ldw	r2,-8(fp)
   110c0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   110c4:	e0bffe17 	ldw	r2,-8(fp)
   110c8:	10800cc3 	ldbu	r2,51(r2)
   110cc:	10803fcc 	andi	r2,r2,255
   110d0:	00c00044 	movi	r3,1
   110d4:	1884983a 	sll	r2,r3,r2
   110d8:	1007883a 	mov	r3,r2
   110dc:	e0bffe17 	ldw	r2,-8(fp)
   110e0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   110e4:	e0bffe17 	ldw	r2,-8(fp)
   110e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   110ec:	e0bffe17 	ldw	r2,-8(fp)
   110f0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   110f4:	e0bffe17 	ldw	r2,-8(fp)
   110f8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   110fc:	e0bffe17 	ldw	r2,-8(fp)
   11100:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   11104:	e0bffe17 	ldw	r2,-8(fp)
   11108:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1110c:	e0bffe17 	ldw	r2,-8(fp)
   11110:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   11114:	e0bffe17 	ldw	r2,-8(fp)
   11118:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1111c:	e0bffe17 	ldw	r2,-8(fp)
   11120:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   11124:	e0bffe17 	ldw	r2,-8(fp)
   11128:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1112c:	e0bffe17 	ldw	r2,-8(fp)
   11130:	00c00fc4 	movi	r3,63
   11134:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   11138:	e0bffe17 	ldw	r2,-8(fp)
   1113c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   11140:	e13ffe17 	ldw	r4,-8(fp)
   11144:	001b1dc0 	call	1b1dc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   11148:	e13ffe17 	ldw	r4,-8(fp)
   1114c:	001b0d40 	call	1b0d4 <OSTaskCreateHook>
  NIOS2_READ_STATUS (context);
   11150:	0005303a 	rdctl	r2,status
   11154:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11158:	e0fffc17 	ldw	r3,-16(fp)
   1115c:	00bfff84 	movi	r2,-2
   11160:	1884703a 	and	r2,r3,r2
   11164:	1001703a 	wrctl	status,r2
  return context;
   11168:	e0bffc17 	ldw	r2,-16(fp)

        OS_ENTER_CRITICAL();
   1116c:	e0bfff15 	stw	r2,-4(fp)
        OSTCBPrioTbl[prio] = ptcb;
   11170:	e0bff803 	ldbu	r2,-32(fp)
   11174:	100890ba 	slli	r4,r2,2
   11178:	e0fffe17 	ldw	r3,-8(fp)
   1117c:	008000f4 	movhi	r2,3
   11180:	2085883a 	add	r2,r4,r2
   11184:	10f82215 	stw	r3,-8056(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   11188:	d0e83d17 	ldw	r3,-24332(gp)
   1118c:	e0bffe17 	ldw	r2,-8(fp)
   11190:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   11194:	e0bffe17 	ldw	r2,-8(fp)
   11198:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   1119c:	d0a83d17 	ldw	r2,-24332(gp)
   111a0:	10000326 	beq	r2,zero,111b0 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   111a4:	d0a83d17 	ldw	r2,-24332(gp)
   111a8:	e0fffe17 	ldw	r3,-8(fp)
   111ac:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   111b0:	e0bffe17 	ldw	r2,-8(fp)
   111b4:	d0a83d15 	stw	r2,-24332(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   111b8:	e0bffe17 	ldw	r2,-8(fp)
   111bc:	10c00d83 	ldbu	r3,54(r2)
   111c0:	d0a83743 	ldbu	r2,-24355(gp)
   111c4:	1884b03a 	or	r2,r3,r2
   111c8:	d0a83745 	stb	r2,-24355(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   111cc:	e0bffe17 	ldw	r2,-8(fp)
   111d0:	10800d03 	ldbu	r2,52(r2)
   111d4:	10c03fcc 	andi	r3,r2,255
   111d8:	d0a83784 	addi	r2,gp,-24354
   111dc:	1885883a 	add	r2,r3,r2
   111e0:	11000003 	ldbu	r4,0(r2)
   111e4:	e0bffe17 	ldw	r2,-8(fp)
   111e8:	10800d43 	ldbu	r2,53(r2)
   111ec:	e0fffe17 	ldw	r3,-8(fp)
   111f0:	18c00d03 	ldbu	r3,52(r3)
   111f4:	18c03fcc 	andi	r3,r3,255
   111f8:	2084b03a 	or	r2,r4,r2
   111fc:	1009883a 	mov	r4,r2
   11200:	d0a83784 	addi	r2,gp,-24354
   11204:	1885883a 	add	r2,r3,r2
   11208:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   1120c:	d0a83883 	ldbu	r2,-24350(gp)
   11210:	10800044 	addi	r2,r2,1
   11214:	d0a83885 	stb	r2,-24350(gp)
   11218:	e0bfff17 	ldw	r2,-4(fp)
   1121c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   11220:	e0bffa17 	ldw	r2,-24(fp)
   11224:	1001703a 	wrctl	status,r2
}
   11228:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1122c:	0005883a 	mov	r2,zero
   11230:	00000606 	br	1124c <OS_TCBInit+0x2cc>
   11234:	e0bfff17 	ldw	r2,-4(fp)
   11238:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   1123c:	e0bff917 	ldw	r2,-28(fp)
   11240:	1001703a 	wrctl	status,r2
}
   11244:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   11248:	00801084 	movi	r2,66
}
   1124c:	e037883a 	mov	sp,fp
   11250:	dfc00117 	ldw	ra,4(sp)
   11254:	df000017 	ldw	fp,0(sp)
   11258:	dec00204 	addi	sp,sp,8
   1125c:	f800283a 	ret

00011260 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   11260:	defffe04 	addi	sp,sp,-8
   11264:	df000115 	stw	fp,4(sp)
   11268:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1126c:	d0a01104 	addi	r2,gp,-32700
   11270:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   11274:	d0a01204 	addi	r2,gp,-32696
   11278:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1127c:	d0a01384 	addi	r2,gp,-32690
   11280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   11284:	d0a01404 	addi	r2,gp,-32688
   11288:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1128c:	d0a01304 	addi	r2,gp,-32692
   11290:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   11294:	d0a01484 	addi	r2,gp,-32686
   11298:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1129c:	d0a01504 	addi	r2,gp,-32684
   112a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   112a4:	d0a01584 	addi	r2,gp,-32682
   112a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   112ac:	d0a01604 	addi	r2,gp,-32680
   112b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   112b4:	d0a01684 	addi	r2,gp,-32678
   112b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   112bc:	d0a01704 	addi	r2,gp,-32676
   112c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   112c4:	d0a01784 	addi	r2,gp,-32674
   112c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   112cc:	d0a01804 	addi	r2,gp,-32672
   112d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   112d4:	d0a01884 	addi	r2,gp,-32670
   112d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   112dc:	d0a01904 	addi	r2,gp,-32668
   112e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   112e4:	d0a01984 	addi	r2,gp,-32666
   112e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   112ec:	d0a01a04 	addi	r2,gp,-32664
   112f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   112f4:	d0a01a84 	addi	r2,gp,-32662
   112f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   112fc:	d0a01b04 	addi	r2,gp,-32660
   11300:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   11304:	d0a01b84 	addi	r2,gp,-32658
   11308:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1130c:	d0a01c04 	addi	r2,gp,-32656
   11310:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   11314:	d0a01c84 	addi	r2,gp,-32654
   11318:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1131c:	d0a01d04 	addi	r2,gp,-32652
   11320:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   11324:	d0a01d84 	addi	r2,gp,-32650
   11328:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1132c:	d0a01e04 	addi	r2,gp,-32648
   11330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   11334:	d0a01e84 	addi	r2,gp,-32646
   11338:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1133c:	d0a01f04 	addi	r2,gp,-32644
   11340:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   11344:	d0a01f84 	addi	r2,gp,-32642
   11348:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1134c:	d0a02004 	addi	r2,gp,-32640
   11350:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   11354:	d0a02084 	addi	r2,gp,-32638
   11358:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1135c:	d0a02104 	addi	r2,gp,-32636
   11360:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   11364:	d0a02184 	addi	r2,gp,-32634
   11368:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1136c:	d0a02204 	addi	r2,gp,-32632
   11370:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   11374:	d0a02284 	addi	r2,gp,-32630
   11378:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1137c:	d0a02304 	addi	r2,gp,-32628
   11380:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   11384:	d0a02384 	addi	r2,gp,-32626
   11388:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1138c:	d0a02404 	addi	r2,gp,-32624
   11390:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   11394:	d0a02484 	addi	r2,gp,-32622
   11398:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1139c:	d0a02504 	addi	r2,gp,-32620
   113a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   113a4:	d0a02584 	addi	r2,gp,-32618
   113a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   113ac:	d0a02604 	addi	r2,gp,-32616
   113b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   113b4:	d0a02684 	addi	r2,gp,-32614
   113b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   113bc:	d0a02704 	addi	r2,gp,-32612
   113c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   113c4:	d0a02784 	addi	r2,gp,-32610
   113c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   113cc:	d0a02804 	addi	r2,gp,-32608
   113d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   113d4:	d0a02d04 	addi	r2,gp,-32588
   113d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   113dc:	0001883a 	nop
   113e0:	e037883a 	mov	sp,fp
   113e4:	df000017 	ldw	fp,0(sp)
   113e8:	dec00104 	addi	sp,sp,4
   113ec:	f800283a 	ret

000113f0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   113f0:	defff204 	addi	sp,sp,-56
   113f4:	df000d15 	stw	fp,52(sp)
   113f8:	df000d04 	addi	fp,sp,52
   113fc:	e13ff615 	stw	r4,-40(fp)
   11400:	2805883a 	mov	r2,r5
   11404:	3007883a 	mov	r3,r6
   11408:	e1fff315 	stw	r7,-52(fp)
   1140c:	e0bff50d 	sth	r2,-44(fp)
   11410:	1805883a 	mov	r2,r3
   11414:	e0bff405 	stb	r2,-48(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11418:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1141c:	e0bff317 	ldw	r2,-52(fp)
   11420:	1000021e 	bne	r2,zero,1142c <OSFlagAccept+0x3c>
        return ((OS_FLAGS)0);
   11424:	0005883a 	mov	r2,zero
   11428:	0000b606 	br	11704 <OSFlagAccept+0x314>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1142c:	e0bff617 	ldw	r2,-40(fp)
   11430:	1000051e 	bne	r2,zero,11448 <OSFlagAccept+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11434:	e0bff317 	ldw	r2,-52(fp)
   11438:	00c01b84 	movi	r3,110
   1143c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11440:	0005883a 	mov	r2,zero
   11444:	0000af06 	br	11704 <OSFlagAccept+0x314>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11448:	e0bff617 	ldw	r2,-40(fp)
   1144c:	10800003 	ldbu	r2,0(r2)
   11450:	10803fcc 	andi	r2,r2,255
   11454:	10800160 	cmpeqi	r2,r2,5
   11458:	1000051e 	bne	r2,zero,11470 <OSFlagAccept+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1145c:	e0bff317 	ldw	r2,-52(fp)
   11460:	00c00044 	movi	r3,1
   11464:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11468:	0005883a 	mov	r2,zero
   1146c:	0000a506 	br	11704 <OSFlagAccept+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11470:	e0fff403 	ldbu	r3,-48(fp)
   11474:	00bfe004 	movi	r2,-128
   11478:	1884703a 	and	r2,r3,r2
   1147c:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   11480:	e0bffdc3 	ldbu	r2,-9(fp)
   11484:	10000626 	beq	r2,zero,114a0 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   11488:	e0bff403 	ldbu	r2,-48(fp)
   1148c:	10801fcc 	andi	r2,r2,127
   11490:	e0bff405 	stb	r2,-48(fp)
        consume    = OS_TRUE;
   11494:	00800044 	movi	r2,1
   11498:	e0bfff45 	stb	r2,-3(fp)
   1149c:	00000106 	br	114a4 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   114a0:	e03fff45 	stb	zero,-3(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   114a4:	e0bff317 	ldw	r2,-52(fp)
   114a8:	10000005 	stb	zero,0(r2)
  NIOS2_READ_STATUS (context);
   114ac:	0005303a 	rdctl	r2,status
   114b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114b4:	e0fffc17 	ldw	r3,-16(fp)
   114b8:	00bfff84 	movi	r2,-2
   114bc:	1884703a 	and	r2,r3,r2
   114c0:	1001703a 	wrctl	status,r2
  return context;
   114c4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   114c8:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
   114cc:	e0bff403 	ldbu	r2,-48(fp)
   114d0:	10c000e0 	cmpeqi	r3,r2,3
   114d4:	1800281e 	bne	r3,zero,11578 <OSFlagAccept+0x188>
   114d8:	10c00108 	cmpgei	r3,r2,4
   114dc:	18007e1e 	bne	r3,zero,116d8 <OSFlagAccept+0x2e8>
   114e0:	10c000a0 	cmpeqi	r3,r2,2
   114e4:	1800061e 	bne	r3,zero,11500 <OSFlagAccept+0x110>
   114e8:	10c000c8 	cmpgei	r3,r2,3
   114ec:	18007a1e 	bne	r3,zero,116d8 <OSFlagAccept+0x2e8>
   114f0:	10003e26 	beq	r2,zero,115ec <OSFlagAccept+0x1fc>
   114f4:	10800060 	cmpeqi	r2,r2,1
   114f8:	10005a1e 	bne	r2,zero,11664 <OSFlagAccept+0x274>
   114fc:	00007606 	br	116d8 <OSFlagAccept+0x2e8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11500:	e0bff617 	ldw	r2,-40(fp)
   11504:	1080020b 	ldhu	r2,8(r2)
   11508:	e0fff50b 	ldhu	r3,-44(fp)
   1150c:	1884703a 	and	r2,r3,r2
   11510:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11514:	e0ffff8b 	ldhu	r3,-2(fp)
   11518:	e0bff50b 	ldhu	r2,-44(fp)
   1151c:	18800d1e 	bne	r3,r2,11554 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11520:	e0bfff43 	ldbu	r2,-3(fp)
   11524:	10800058 	cmpnei	r2,r2,1
   11528:	10000d1e 	bne	r2,zero,11560 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1152c:	e0bff617 	ldw	r2,-40(fp)
   11530:	1080020b 	ldhu	r2,8(r2)
   11534:	1007883a 	mov	r3,r2
   11538:	e0bfff8b 	ldhu	r2,-2(fp)
   1153c:	0084303a 	nor	r2,zero,r2
   11540:	1884703a 	and	r2,r3,r2
   11544:	1007883a 	mov	r3,r2
   11548:	e0bff617 	ldw	r2,-40(fp)
   1154c:	10c0020d 	sth	r3,8(r2)
   11550:	00000306 	br	11560 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11554:	e0bff317 	ldw	r2,-52(fp)
   11558:	00c01c04 	movi	r3,112
   1155c:	10c00005 	stb	r3,0(r2)
   11560:	e0bffe17 	ldw	r2,-8(fp)
   11564:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   11568:	e0bffb17 	ldw	r2,-20(fp)
   1156c:	1001703a 	wrctl	status,r2
}
   11570:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
   11574:	00006206 	br	11700 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11578:	e0bff617 	ldw	r2,-40(fp)
   1157c:	1080020b 	ldhu	r2,8(r2)
   11580:	e0fff50b 	ldhu	r3,-44(fp)
   11584:	1884703a 	and	r2,r3,r2
   11588:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1158c:	e0bfff8b 	ldhu	r2,-2(fp)
   11590:	10000d26 	beq	r2,zero,115c8 <OSFlagAccept+0x1d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11594:	e0bfff43 	ldbu	r2,-3(fp)
   11598:	10800058 	cmpnei	r2,r2,1
   1159c:	10000d1e 	bne	r2,zero,115d4 <OSFlagAccept+0x1e4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   115a0:	e0bff617 	ldw	r2,-40(fp)
   115a4:	1080020b 	ldhu	r2,8(r2)
   115a8:	1007883a 	mov	r3,r2
   115ac:	e0bfff8b 	ldhu	r2,-2(fp)
   115b0:	0084303a 	nor	r2,zero,r2
   115b4:	1884703a 	and	r2,r3,r2
   115b8:	1007883a 	mov	r3,r2
   115bc:	e0bff617 	ldw	r2,-40(fp)
   115c0:	10c0020d 	sth	r3,8(r2)
   115c4:	00000306 	br	115d4 <OSFlagAccept+0x1e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   115c8:	e0bff317 	ldw	r2,-52(fp)
   115cc:	00c01c04 	movi	r3,112
   115d0:	10c00005 	stb	r3,0(r2)
   115d4:	e0bffe17 	ldw	r2,-8(fp)
   115d8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   115dc:	e0bffa17 	ldw	r2,-24(fp)
   115e0:	1001703a 	wrctl	status,r2
}
   115e4:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
   115e8:	00004506 	br	11700 <OSFlagAccept+0x310>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   115ec:	e0bff617 	ldw	r2,-40(fp)
   115f0:	1080020b 	ldhu	r2,8(r2)
   115f4:	0084303a 	nor	r2,zero,r2
   115f8:	1007883a 	mov	r3,r2
   115fc:	e0bff50b 	ldhu	r2,-44(fp)
   11600:	1884703a 	and	r2,r3,r2
   11604:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11608:	e0ffff8b 	ldhu	r3,-2(fp)
   1160c:	e0bff50b 	ldhu	r2,-44(fp)
   11610:	18800b1e 	bne	r3,r2,11640 <OSFlagAccept+0x250>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11614:	e0bfff43 	ldbu	r2,-3(fp)
   11618:	10800058 	cmpnei	r2,r2,1
   1161c:	10000b1e 	bne	r2,zero,1164c <OSFlagAccept+0x25c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11620:	e0bff617 	ldw	r2,-40(fp)
   11624:	1080020b 	ldhu	r2,8(r2)
   11628:	e0ffff8b 	ldhu	r3,-2(fp)
   1162c:	1884b03a 	or	r2,r3,r2
   11630:	1007883a 	mov	r3,r2
   11634:	e0bff617 	ldw	r2,-40(fp)
   11638:	10c0020d 	sth	r3,8(r2)
   1163c:	00000306 	br	1164c <OSFlagAccept+0x25c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11640:	e0bff317 	ldw	r2,-52(fp)
   11644:	00c01c04 	movi	r3,112
   11648:	10c00005 	stb	r3,0(r2)
   1164c:	e0bffe17 	ldw	r2,-8(fp)
   11650:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   11654:	e0bff917 	ldw	r2,-28(fp)
   11658:	1001703a 	wrctl	status,r2
}
   1165c:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
   11660:	00002706 	br	11700 <OSFlagAccept+0x310>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11664:	e0bff617 	ldw	r2,-40(fp)
   11668:	1080020b 	ldhu	r2,8(r2)
   1166c:	0084303a 	nor	r2,zero,r2
   11670:	1007883a 	mov	r3,r2
   11674:	e0bff50b 	ldhu	r2,-44(fp)
   11678:	1884703a 	and	r2,r3,r2
   1167c:	e0bfff8d 	sth	r2,-2(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11680:	e0bfff8b 	ldhu	r2,-2(fp)
   11684:	10000b26 	beq	r2,zero,116b4 <OSFlagAccept+0x2c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11688:	e0bfff43 	ldbu	r2,-3(fp)
   1168c:	10800058 	cmpnei	r2,r2,1
   11690:	10000b1e 	bne	r2,zero,116c0 <OSFlagAccept+0x2d0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   11694:	e0bff617 	ldw	r2,-40(fp)
   11698:	1080020b 	ldhu	r2,8(r2)
   1169c:	e0ffff8b 	ldhu	r3,-2(fp)
   116a0:	1884b03a 	or	r2,r3,r2
   116a4:	1007883a 	mov	r3,r2
   116a8:	e0bff617 	ldw	r2,-40(fp)
   116ac:	10c0020d 	sth	r3,8(r2)
   116b0:	00000306 	br	116c0 <OSFlagAccept+0x2d0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   116b4:	e0bff317 	ldw	r2,-52(fp)
   116b8:	00c01c04 	movi	r3,112
   116bc:	10c00005 	stb	r3,0(r2)
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   116c8:	e0bff817 	ldw	r2,-32(fp)
   116cc:	1001703a 	wrctl	status,r2
}
   116d0:	0001883a 	nop
             }
             OS_EXIT_CRITICAL();
             break;
   116d4:	00000a06 	br	11700 <OSFlagAccept+0x310>
   116d8:	e0bffe17 	ldw	r2,-8(fp)
   116dc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   116e0:	e0bff717 	ldw	r2,-36(fp)
   116e4:	1001703a 	wrctl	status,r2
}
   116e8:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   116ec:	e03fff8d 	sth	zero,-2(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   116f0:	e0bff317 	ldw	r2,-52(fp)
   116f4:	00c01bc4 	movi	r3,111
   116f8:	10c00005 	stb	r3,0(r2)
             break;
   116fc:	0001883a 	nop
    }
    return (flags_rdy);
   11700:	e0bfff8b 	ldhu	r2,-2(fp)
}
   11704:	e037883a 	mov	sp,fp
   11708:	df000017 	ldw	fp,0(sp)
   1170c:	dec00104 	addi	sp,sp,4
   11710:	f800283a 	ret

00011714 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   11714:	defff804 	addi	sp,sp,-32
   11718:	df000715 	stw	fp,28(sp)
   1171c:	df000704 	addi	fp,sp,28
   11720:	2005883a 	mov	r2,r4
   11724:	e17ff915 	stw	r5,-28(fp)
   11728:	e0bffa0d 	sth	r2,-24(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1172c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   11730:	e0bff917 	ldw	r2,-28(fp)
   11734:	1000021e 	bne	r2,zero,11740 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   11738:	0005883a 	mov	r2,zero
   1173c:	00003506 	br	11814 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   11740:	d0a83643 	ldbu	r2,-24359(gp)
   11744:	10803fcc 	andi	r2,r2,255
   11748:	10000526 	beq	r2,zero,11760 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1174c:	e0bff917 	ldw	r2,-28(fp)
   11750:	00c00404 	movi	r3,16
   11754:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   11758:	0005883a 	mov	r2,zero
   1175c:	00002d06 	br	11814 <OSFlagCreate+0x100>
  NIOS2_READ_STATUS (context);
   11760:	0005303a 	rdctl	r2,status
   11764:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11768:	e0fffd17 	ldw	r3,-12(fp)
   1176c:	00bfff84 	movi	r2,-2
   11770:	1884703a 	and	r2,r3,r2
   11774:	1001703a 	wrctl	status,r2
  return context;
   11778:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1177c:	e0bfff15 	stw	r2,-4(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   11780:	d0a83217 	ldw	r2,-24376(gp)
   11784:	e0bffe15 	stw	r2,-8(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   11788:	e0bffe17 	ldw	r2,-8(fp)
   1178c:	10001826 	beq	r2,zero,117f0 <OSFlagCreate+0xdc>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   11790:	d0a83217 	ldw	r2,-24376(gp)
   11794:	10800117 	ldw	r2,4(r2)
   11798:	d0a83215 	stw	r2,-24376(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1179c:	e0bffe17 	ldw	r2,-8(fp)
   117a0:	00c00144 	movi	r3,5
   117a4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   117a8:	e0bffe17 	ldw	r2,-8(fp)
   117ac:	e0fffa0b 	ldhu	r3,-24(fp)
   117b0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   117b4:	e0bffe17 	ldw	r2,-8(fp)
   117b8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   117bc:	e0bffe17 	ldw	r2,-8(fp)
   117c0:	00c00fc4 	movi	r3,63
   117c4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   117c8:	e0bffe17 	ldw	r2,-8(fp)
   117cc:	100002c5 	stb	zero,11(r2)
   117d0:	e0bfff17 	ldw	r2,-4(fp)
   117d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   117d8:	e0bffc17 	ldw	r2,-16(fp)
   117dc:	1001703a 	wrctl	status,r2
}
   117e0:	0001883a 	nop
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   117e4:	e0bff917 	ldw	r2,-28(fp)
   117e8:	10000005 	stb	zero,0(r2)
   117ec:	00000806 	br	11810 <OSFlagCreate+0xfc>
   117f0:	e0bfff17 	ldw	r2,-4(fp)
   117f4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   117f8:	e0bffb17 	ldw	r2,-20(fp)
   117fc:	1001703a 	wrctl	status,r2
}
   11800:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   11804:	e0bff917 	ldw	r2,-28(fp)
   11808:	00c01c84 	movi	r3,114
   1180c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   11810:	e0bffe17 	ldw	r2,-8(fp)
}
   11814:	e037883a 	mov	sp,fp
   11818:	df000017 	ldw	fp,0(sp)
   1181c:	dec00104 	addi	sp,sp,4
   11820:	f800283a 	ret

00011824 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   11824:	defff204 	addi	sp,sp,-56
   11828:	dfc00d15 	stw	ra,52(sp)
   1182c:	df000c15 	stw	fp,48(sp)
   11830:	df000c04 	addi	fp,sp,48
   11834:	e13ff615 	stw	r4,-40(fp)
   11838:	2805883a 	mov	r2,r5
   1183c:	e1bff415 	stw	r6,-48(fp)
   11840:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11844:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11848:	e0bff417 	ldw	r2,-48(fp)
   1184c:	1000021e 	bne	r2,zero,11858 <OSFlagDel+0x34>
        return (pgrp);
   11850:	e0bff617 	ldw	r2,-40(fp)
   11854:	00008406 	br	11a68 <OSFlagDel+0x244>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11858:	e0bff617 	ldw	r2,-40(fp)
   1185c:	1000051e 	bne	r2,zero,11874 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11860:	e0bff417 	ldw	r2,-48(fp)
   11864:	00c01b84 	movi	r3,110
   11868:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1186c:	e0bff617 	ldw	r2,-40(fp)
   11870:	00007d06 	br	11a68 <OSFlagDel+0x244>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11874:	d0a83643 	ldbu	r2,-24359(gp)
   11878:	10803fcc 	andi	r2,r2,255
   1187c:	10000526 	beq	r2,zero,11894 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   11880:	e0bff417 	ldw	r2,-48(fp)
   11884:	00c003c4 	movi	r3,15
   11888:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1188c:	e0bff617 	ldw	r2,-40(fp)
   11890:	00007506 	br	11a68 <OSFlagDel+0x244>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   11894:	e0bff617 	ldw	r2,-40(fp)
   11898:	10800003 	ldbu	r2,0(r2)
   1189c:	10803fcc 	andi	r2,r2,255
   118a0:	10800160 	cmpeqi	r2,r2,5
   118a4:	1000051e 	bne	r2,zero,118bc <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   118a8:	e0bff417 	ldw	r2,-48(fp)
   118ac:	00c00044 	movi	r3,1
   118b0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   118b4:	e0bff617 	ldw	r2,-40(fp)
   118b8:	00006b06 	br	11a68 <OSFlagDel+0x244>
  NIOS2_READ_STATUS (context);
   118bc:	0005303a 	rdctl	r2,status
   118c0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118c4:	e0fffb17 	ldw	r3,-20(fp)
   118c8:	00bfff84 	movi	r2,-2
   118cc:	1884703a 	and	r2,r3,r2
   118d0:	1001703a 	wrctl	status,r2
  return context;
   118d4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   118d8:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   118dc:	e0bff617 	ldw	r2,-40(fp)
   118e0:	10800117 	ldw	r2,4(r2)
   118e4:	10000326 	beq	r2,zero,118f4 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   118e8:	00800044 	movi	r2,1
   118ec:	e0bfffc5 	stb	r2,-1(fp)
   118f0:	00000106 	br	118f8 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   118f4:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
   118f8:	e0bff503 	ldbu	r2,-44(fp)
   118fc:	10000326 	beq	r2,zero,1190c <OSFlagDel+0xe8>
   11900:	10800060 	cmpeqi	r2,r2,1
   11904:	1000251e 	bne	r2,zero,1199c <OSFlagDel+0x178>
   11908:	00004b06 	br	11a38 <OSFlagDel+0x214>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1190c:	e0bfffc3 	ldbu	r2,-1(fp)
   11910:	1000171e 	bne	r2,zero,11970 <OSFlagDel+0x14c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   11914:	e0bff617 	ldw	r2,-40(fp)
   11918:	00c00fc4 	movi	r3,63
   1191c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   11920:	e0bff617 	ldw	r2,-40(fp)
   11924:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11928:	e0bff617 	ldw	r2,-40(fp)
   1192c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   11930:	d0e83217 	ldw	r3,-24376(gp)
   11934:	e0bff617 	ldw	r2,-40(fp)
   11938:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1193c:	e0bff617 	ldw	r2,-40(fp)
   11940:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   11944:	e0bff617 	ldw	r2,-40(fp)
   11948:	d0a83215 	stw	r2,-24376(gp)
   1194c:	e0bffc17 	ldw	r2,-16(fp)
   11950:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   11954:	e0bffa17 	ldw	r2,-24(fp)
   11958:	1001703a 	wrctl	status,r2
}
   1195c:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   11960:	e0bff417 	ldw	r2,-48(fp)
   11964:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   11968:	e03ffd15 	stw	zero,-12(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1196c:	00003d06 	br	11a64 <OSFlagDel+0x240>
   11970:	e0bffc17 	ldw	r2,-16(fp)
   11974:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   11978:	e0bff917 	ldw	r2,-28(fp)
   1197c:	1001703a 	wrctl	status,r2
}
   11980:	0001883a 	nop
                 *perr                = OS_ERR_TASK_WAITING;
   11984:	e0bff417 	ldw	r2,-48(fp)
   11988:	00c01244 	movi	r3,73
   1198c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   11990:	e0bff617 	ldw	r2,-40(fp)
   11994:	e0bffd15 	stw	r2,-12(fp)
             break;
   11998:	00003206 	br	11a64 <OSFlagDel+0x240>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1199c:	e0bff617 	ldw	r2,-40(fp)
   119a0:	10800117 	ldw	r2,4(r2)
   119a4:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   119a8:	00000606 	br	119c4 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   119ac:	000b883a 	mov	r5,zero
   119b0:	e13ffe17 	ldw	r4,-8(fp)
   119b4:	0012a1c0 	call	12a1c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   119b8:	e0bffe17 	ldw	r2,-8(fp)
   119bc:	10800017 	ldw	r2,0(r2)
   119c0:	e0bffe15 	stw	r2,-8(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   119c4:	e0bffe17 	ldw	r2,-8(fp)
   119c8:	103ff81e 	bne	r2,zero,119ac <OSFlagDel+0x188>
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   119cc:	e0bff617 	ldw	r2,-40(fp)
   119d0:	00c00fc4 	movi	r3,63
   119d4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   119d8:	e0bff617 	ldw	r2,-40(fp)
   119dc:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   119e0:	e0bff617 	ldw	r2,-40(fp)
   119e4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   119e8:	d0e83217 	ldw	r3,-24376(gp)
   119ec:	e0bff617 	ldw	r2,-40(fp)
   119f0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   119f4:	e0bff617 	ldw	r2,-40(fp)
   119f8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   119fc:	e0bff617 	ldw	r2,-40(fp)
   11a00:	d0a83215 	stw	r2,-24376(gp)
   11a04:	e0bffc17 	ldw	r2,-16(fp)
   11a08:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   11a0c:	e0bff817 	ldw	r2,-32(fp)
   11a10:	1001703a 	wrctl	status,r2
}
   11a14:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   11a18:	e0bfffc3 	ldbu	r2,-1(fp)
   11a1c:	10800058 	cmpnei	r2,r2,1
   11a20:	1000011e 	bne	r2,zero,11a28 <OSFlagDel+0x204>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   11a24:	0010b980 	call	10b98 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   11a28:	e0bff417 	ldw	r2,-48(fp)
   11a2c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   11a30:	e03ffd15 	stw	zero,-12(fp)
             break;
   11a34:	00000b06 	br	11a64 <OSFlagDel+0x240>
   11a38:	e0bffc17 	ldw	r2,-16(fp)
   11a3c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   11a40:	e0bff717 	ldw	r2,-36(fp)
   11a44:	1001703a 	wrctl	status,r2
}
   11a48:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   11a4c:	e0bff417 	ldw	r2,-48(fp)
   11a50:	00c001c4 	movi	r3,7
   11a54:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   11a58:	e0bff617 	ldw	r2,-40(fp)
   11a5c:	e0bffd15 	stw	r2,-12(fp)
             break;
   11a60:	0001883a 	nop
    }
    return (pgrp_return);
   11a64:	e0bffd17 	ldw	r2,-12(fp)
}
   11a68:	e037883a 	mov	sp,fp
   11a6c:	dfc00117 	ldw	ra,4(sp)
   11a70:	df000017 	ldw	fp,0(sp)
   11a74:	dec00204 	addi	sp,sp,8
   11a78:	f800283a 	ret

00011a7c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   11a7c:	defff604 	addi	sp,sp,-40
   11a80:	dfc00915 	stw	ra,36(sp)
   11a84:	df000815 	stw	fp,32(sp)
   11a88:	df000804 	addi	fp,sp,32
   11a8c:	e13ffa15 	stw	r4,-24(fp)
   11a90:	e17ff915 	stw	r5,-28(fp)
   11a94:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11a98:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11a9c:	e0bff817 	ldw	r2,-32(fp)
   11aa0:	1000021e 	bne	r2,zero,11aac <OSFlagNameGet+0x30>
        return (0);
   11aa4:	0005883a 	mov	r2,zero
   11aa8:	00003b06 	br	11b98 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   11aac:	e0bffa17 	ldw	r2,-24(fp)
   11ab0:	1000051e 	bne	r2,zero,11ac8 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11ab4:	e0bff817 	ldw	r2,-32(fp)
   11ab8:	00c01b84 	movi	r3,110
   11abc:	10c00005 	stb	r3,0(r2)
        return (0);
   11ac0:	0005883a 	mov	r2,zero
   11ac4:	00003406 	br	11b98 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11ac8:	e0bff917 	ldw	r2,-28(fp)
   11acc:	1000051e 	bne	r2,zero,11ae4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11ad0:	e0bff817 	ldw	r2,-32(fp)
   11ad4:	00c00304 	movi	r3,12
   11ad8:	10c00005 	stb	r3,0(r2)
        return (0);
   11adc:	0005883a 	mov	r2,zero
   11ae0:	00002d06 	br	11b98 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11ae4:	d0a83643 	ldbu	r2,-24359(gp)
   11ae8:	10803fcc 	andi	r2,r2,255
   11aec:	10000526 	beq	r2,zero,11b04 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11af0:	e0bff817 	ldw	r2,-32(fp)
   11af4:	00c00444 	movi	r3,17
   11af8:	10c00005 	stb	r3,0(r2)
        return (0);
   11afc:	0005883a 	mov	r2,zero
   11b00:	00002506 	br	11b98 <OSFlagNameGet+0x11c>
  NIOS2_READ_STATUS (context);
   11b04:	0005303a 	rdctl	r2,status
   11b08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b0c:	e0fffd17 	ldw	r3,-12(fp)
   11b10:	00bfff84 	movi	r2,-2
   11b14:	1884703a 	and	r2,r3,r2
   11b18:	1001703a 	wrctl	status,r2
  return context;
   11b1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11b20:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11b24:	e0bffa17 	ldw	r2,-24(fp)
   11b28:	10800003 	ldbu	r2,0(r2)
   11b2c:	10803fcc 	andi	r2,r2,255
   11b30:	10800160 	cmpeqi	r2,r2,5
   11b34:	10000a1e 	bne	r2,zero,11b60 <OSFlagNameGet+0xe4>
   11b38:	e0bfff17 	ldw	r2,-4(fp)
   11b3c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   11b40:	e0bffc17 	ldw	r2,-16(fp)
   11b44:	1001703a 	wrctl	status,r2
}
   11b48:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   11b4c:	e0bff817 	ldw	r2,-32(fp)
   11b50:	00c00044 	movi	r3,1
   11b54:	10c00005 	stb	r3,0(r2)
        return (0);
   11b58:	0005883a 	mov	r2,zero
   11b5c:	00000e06 	br	11b98 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   11b60:	e0bffa17 	ldw	r2,-24(fp)
   11b64:	10800284 	addi	r2,r2,10
   11b68:	100b883a 	mov	r5,r2
   11b6c:	e13ff917 	ldw	r4,-28(fp)
   11b70:	0010cd00 	call	10cd0 <OS_StrCopy>
   11b74:	e0bffec5 	stb	r2,-5(fp)
   11b78:	e0bfff17 	ldw	r2,-4(fp)
   11b7c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   11b80:	e0bffb17 	ldw	r2,-20(fp)
   11b84:	1001703a 	wrctl	status,r2
}
   11b88:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11b8c:	e0bff817 	ldw	r2,-32(fp)
   11b90:	10000005 	stb	zero,0(r2)
    return (len);
   11b94:	e0bffec3 	ldbu	r2,-5(fp)
}
   11b98:	e037883a 	mov	sp,fp
   11b9c:	dfc00117 	ldw	ra,4(sp)
   11ba0:	df000017 	ldw	fp,0(sp)
   11ba4:	dec00204 	addi	sp,sp,8
   11ba8:	f800283a 	ret

00011bac <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   11bac:	defff504 	addi	sp,sp,-44
   11bb0:	dfc00a15 	stw	ra,40(sp)
   11bb4:	df000915 	stw	fp,36(sp)
   11bb8:	df000904 	addi	fp,sp,36
   11bbc:	e13ff915 	stw	r4,-28(fp)
   11bc0:	e17ff815 	stw	r5,-32(fp)
   11bc4:	e1bff715 	stw	r6,-36(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11bc8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11bcc:	e0bff717 	ldw	r2,-36(fp)
   11bd0:	10004526 	beq	r2,zero,11ce8 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   11bd4:	e0bff917 	ldw	r2,-28(fp)
   11bd8:	1000041e 	bne	r2,zero,11bec <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11bdc:	e0bff717 	ldw	r2,-36(fp)
   11be0:	00c01b84 	movi	r3,110
   11be4:	10c00005 	stb	r3,0(r2)
        return;
   11be8:	00004006 	br	11cec <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11bec:	e0bff817 	ldw	r2,-32(fp)
   11bf0:	1000041e 	bne	r2,zero,11c04 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11bf4:	e0bff717 	ldw	r2,-36(fp)
   11bf8:	00c00304 	movi	r3,12
   11bfc:	10c00005 	stb	r3,0(r2)
        return;
   11c00:	00003a06 	br	11cec <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11c04:	d0a83643 	ldbu	r2,-24359(gp)
   11c08:	10803fcc 	andi	r2,r2,255
   11c0c:	10000426 	beq	r2,zero,11c20 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11c10:	e0bff717 	ldw	r2,-36(fp)
   11c14:	00c00484 	movi	r3,18
   11c18:	10c00005 	stb	r3,0(r2)
        return;
   11c1c:	00003306 	br	11cec <OSFlagNameSet+0x140>
  NIOS2_READ_STATUS (context);
   11c20:	0005303a 	rdctl	r2,status
   11c24:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c28:	e0fffd17 	ldw	r3,-12(fp)
   11c2c:	00bfff84 	movi	r2,-2
   11c30:	1884703a 	and	r2,r3,r2
   11c34:	1001703a 	wrctl	status,r2
  return context;
   11c38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11c3c:	e0bfff15 	stw	r2,-4(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11c40:	e0bff917 	ldw	r2,-28(fp)
   11c44:	10800003 	ldbu	r2,0(r2)
   11c48:	10803fcc 	andi	r2,r2,255
   11c4c:	10800160 	cmpeqi	r2,r2,5
   11c50:	1000091e 	bne	r2,zero,11c78 <OSFlagNameSet+0xcc>
   11c54:	e0bfff17 	ldw	r2,-4(fp)
   11c58:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   11c5c:	e0bffc17 	ldw	r2,-16(fp)
   11c60:	1001703a 	wrctl	status,r2
}
   11c64:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   11c68:	e0bff717 	ldw	r2,-36(fp)
   11c6c:	00c00044 	movi	r3,1
   11c70:	10c00005 	stb	r3,0(r2)
        return;
   11c74:	00001d06 	br	11cec <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11c78:	e13ff817 	ldw	r4,-32(fp)
   11c7c:	0010d440 	call	10d44 <OS_StrLen>
   11c80:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   11c84:	e0bffec3 	ldbu	r2,-5(fp)
   11c88:	10800830 	cmpltui	r2,r2,32
   11c8c:	1000091e 	bne	r2,zero,11cb4 <OSFlagNameSet+0x108>
   11c90:	e0bfff17 	ldw	r2,-4(fp)
   11c94:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   11c98:	e0bffb17 	ldw	r2,-20(fp)
   11c9c:	1001703a 	wrctl	status,r2
}
   11ca0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   11ca4:	e0bff717 	ldw	r2,-36(fp)
   11ca8:	00c01cc4 	movi	r3,115
   11cac:	10c00005 	stb	r3,0(r2)
        return;
   11cb0:	00000e06 	br	11cec <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   11cb4:	e0bff917 	ldw	r2,-28(fp)
   11cb8:	10800284 	addi	r2,r2,10
   11cbc:	e17ff817 	ldw	r5,-32(fp)
   11cc0:	1009883a 	mov	r4,r2
   11cc4:	0010cd00 	call	10cd0 <OS_StrCopy>
   11cc8:	e0bfff17 	ldw	r2,-4(fp)
   11ccc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   11cd0:	e0bffa17 	ldw	r2,-24(fp)
   11cd4:	1001703a 	wrctl	status,r2
}
   11cd8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11cdc:	e0bff717 	ldw	r2,-36(fp)
   11ce0:	10000005 	stb	zero,0(r2)
    return;
   11ce4:	00000106 	br	11cec <OSFlagNameSet+0x140>
        return;
   11ce8:	0001883a 	nop
}
   11cec:	e037883a 	mov	sp,fp
   11cf0:	dfc00117 	ldw	ra,4(sp)
   11cf4:	df000017 	ldw	fp,0(sp)
   11cf8:	dec00204 	addi	sp,sp,8
   11cfc:	f800283a 	ret

00011d00 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   11d00:	deffe204 	addi	sp,sp,-120
   11d04:	dfc01d15 	stw	ra,116(sp)
   11d08:	df001c15 	stw	fp,112(sp)
   11d0c:	df001c04 	addi	fp,sp,112
   11d10:	e13fe815 	stw	r4,-96(fp)
   11d14:	2805883a 	mov	r2,r5
   11d18:	3009883a 	mov	r4,r6
   11d1c:	3807883a 	mov	r3,r7
   11d20:	e0bfe70d 	sth	r2,-100(fp)
   11d24:	2005883a 	mov	r2,r4
   11d28:	e0bfe605 	stb	r2,-104(fp)
   11d2c:	1805883a 	mov	r2,r3
   11d30:	e0bfe50d 	sth	r2,-108(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11d34:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11d38:	e0800217 	ldw	r2,8(fp)
   11d3c:	1000021e 	bne	r2,zero,11d48 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
   11d40:	0005883a 	mov	r2,zero
   11d44:	00016906 	br	122ec <OSFlagPend+0x5ec>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11d48:	e0bfe817 	ldw	r2,-96(fp)
   11d4c:	1000051e 	bne	r2,zero,11d64 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11d50:	e0800217 	ldw	r2,8(fp)
   11d54:	00c01b84 	movi	r3,110
   11d58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11d5c:	0005883a 	mov	r2,zero
   11d60:	00016206 	br	122ec <OSFlagPend+0x5ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11d64:	d0a83643 	ldbu	r2,-24359(gp)
   11d68:	10803fcc 	andi	r2,r2,255
   11d6c:	10000526 	beq	r2,zero,11d84 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   11d70:	e0800217 	ldw	r2,8(fp)
   11d74:	00c00084 	movi	r3,2
   11d78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11d7c:	0005883a 	mov	r2,zero
   11d80:	00015a06 	br	122ec <OSFlagPend+0x5ec>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   11d84:	d0a83683 	ldbu	r2,-24358(gp)
   11d88:	10803fcc 	andi	r2,r2,255
   11d8c:	10000526 	beq	r2,zero,11da4 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   11d90:	e0800217 	ldw	r2,8(fp)
   11d94:	00c00344 	movi	r3,13
   11d98:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11d9c:	0005883a 	mov	r2,zero
   11da0:	00015206 	br	122ec <OSFlagPend+0x5ec>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11da4:	e0bfe817 	ldw	r2,-96(fp)
   11da8:	10800003 	ldbu	r2,0(r2)
   11dac:	10803fcc 	andi	r2,r2,255
   11db0:	10800160 	cmpeqi	r2,r2,5
   11db4:	1000051e 	bne	r2,zero,11dcc <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
   11db8:	e0800217 	ldw	r2,8(fp)
   11dbc:	00c00044 	movi	r3,1
   11dc0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11dc4:	0005883a 	mov	r2,zero
   11dc8:	00014806 	br	122ec <OSFlagPend+0x5ec>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11dcc:	e0ffe603 	ldbu	r3,-104(fp)
   11dd0:	00bfe004 	movi	r2,-128
   11dd4:	1884703a 	and	r2,r3,r2
   11dd8:	e0bffdc5 	stb	r2,-9(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11ddc:	e0bffdc3 	ldbu	r2,-9(fp)
   11de0:	10000626 	beq	r2,zero,11dfc <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   11de4:	e0bfe603 	ldbu	r2,-104(fp)
   11de8:	10801fcc 	andi	r2,r2,127
   11dec:	e0bfe605 	stb	r2,-104(fp)
        consume    = OS_TRUE;
   11df0:	00800044 	movi	r2,1
   11df4:	e0bfffc5 	stb	r2,-1(fp)
   11df8:	00000106 	br	11e00 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
   11dfc:	e03fffc5 	stb	zero,-1(fp)
  NIOS2_READ_STATUS (context);
   11e00:	0005303a 	rdctl	r2,status
   11e04:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e08:	e0fffb17 	ldw	r3,-20(fp)
   11e0c:	00bfff84 	movi	r2,-2
   11e10:	1884703a 	and	r2,r3,r2
   11e14:	1001703a 	wrctl	status,r2
  return context;
   11e18:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11e1c:	e0bffe15 	stw	r2,-8(fp)
    switch (wait_type) {
   11e20:	e0bfe603 	ldbu	r2,-104(fp)
   11e24:	10c000e0 	cmpeqi	r3,r2,3
   11e28:	18003a1e 	bne	r3,zero,11f14 <OSFlagPend+0x214>
   11e2c:	10c00108 	cmpgei	r3,r2,4
   11e30:	1800c61e 	bne	r3,zero,1214c <OSFlagPend+0x44c>
   11e34:	10c000a0 	cmpeqi	r3,r2,2
   11e38:	1800061e 	bne	r3,zero,11e54 <OSFlagPend+0x154>
   11e3c:	10c000c8 	cmpgei	r3,r2,3
   11e40:	1800c21e 	bne	r3,zero,1214c <OSFlagPend+0x44c>
   11e44:	10006226 	beq	r2,zero,11fd0 <OSFlagPend+0x2d0>
   11e48:	10800060 	cmpeqi	r2,r2,1
   11e4c:	1000901e 	bne	r2,zero,12090 <OSFlagPend+0x390>
   11e50:	0000be06 	br	1214c <OSFlagPend+0x44c>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   11e54:	e0bfe817 	ldw	r2,-96(fp)
   11e58:	1080020b 	ldhu	r2,8(r2)
   11e5c:	e0ffe70b 	ldhu	r3,-100(fp)
   11e60:	1884703a 	and	r2,r3,r2
   11e64:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11e68:	e0fffd0b 	ldhu	r3,-12(fp)
   11e6c:	e0bfe70b 	ldhu	r2,-100(fp)
   11e70:	1880181e 	bne	r3,r2,11ed4 <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11e74:	e0bfffc3 	ldbu	r2,-1(fp)
   11e78:	10800058 	cmpnei	r2,r2,1
   11e7c:	1000091e 	bne	r2,zero,11ea4 <OSFlagPend+0x1a4>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11e80:	e0bfe817 	ldw	r2,-96(fp)
   11e84:	1080020b 	ldhu	r2,8(r2)
   11e88:	1007883a 	mov	r3,r2
   11e8c:	e0bffd0b 	ldhu	r2,-12(fp)
   11e90:	0084303a 	nor	r2,zero,r2
   11e94:	1884703a 	and	r2,r3,r2
   11e98:	1007883a 	mov	r3,r2
   11e9c:	e0bfe817 	ldw	r2,-96(fp)
   11ea0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11ea4:	d0a83a17 	ldw	r2,-24344(gp)
   11ea8:	e0fffd0b 	ldhu	r3,-12(fp)
   11eac:	10c00b0d 	sth	r3,44(r2)
   11eb0:	e0bffe17 	ldw	r2,-8(fp)
   11eb4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   11eb8:	e0bffa17 	ldw	r2,-24(fp)
   11ebc:	1001703a 	wrctl	status,r2
}
   11ec0:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11ec4:	e0800217 	ldw	r2,8(fp)
   11ec8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11ecc:	e0bffd0b 	ldhu	r2,-12(fp)
   11ed0:	00010606 	br	122ec <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11ed4:	e13fe70b 	ldhu	r4,-100(fp)
   11ed8:	e17fe603 	ldbu	r5,-104(fp)
   11edc:	e0bfe50b 	ldhu	r2,-108(fp)
   11ee0:	e0ffe904 	addi	r3,fp,-92
   11ee4:	d8800015 	stw	r2,0(sp)
   11ee8:	280f883a 	mov	r7,r5
   11eec:	200d883a 	mov	r6,r4
   11ef0:	180b883a 	mov	r5,r3
   11ef4:	e13fe817 	ldw	r4,-96(fp)
   11ef8:	00127d80 	call	127d8 <OS_FlagBlock>
   11efc:	e0bffe17 	ldw	r2,-8(fp)
   11f00:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   11f04:	e0bff917 	ldw	r2,-28(fp)
   11f08:	1001703a 	wrctl	status,r2
}
   11f0c:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
   11f10:	00009906 	br	12178 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   11f14:	e0bfe817 	ldw	r2,-96(fp)
   11f18:	1080020b 	ldhu	r2,8(r2)
   11f1c:	e0ffe70b 	ldhu	r3,-100(fp)
   11f20:	1884703a 	and	r2,r3,r2
   11f24:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11f28:	e0bffd0b 	ldhu	r2,-12(fp)
   11f2c:	10001826 	beq	r2,zero,11f90 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11f30:	e0bfffc3 	ldbu	r2,-1(fp)
   11f34:	10800058 	cmpnei	r2,r2,1
   11f38:	1000091e 	bne	r2,zero,11f60 <OSFlagPend+0x260>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11f3c:	e0bfe817 	ldw	r2,-96(fp)
   11f40:	1080020b 	ldhu	r2,8(r2)
   11f44:	1007883a 	mov	r3,r2
   11f48:	e0bffd0b 	ldhu	r2,-12(fp)
   11f4c:	0084303a 	nor	r2,zero,r2
   11f50:	1884703a 	and	r2,r3,r2
   11f54:	1007883a 	mov	r3,r2
   11f58:	e0bfe817 	ldw	r2,-96(fp)
   11f5c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11f60:	d0a83a17 	ldw	r2,-24344(gp)
   11f64:	e0fffd0b 	ldhu	r3,-12(fp)
   11f68:	10c00b0d 	sth	r3,44(r2)
   11f6c:	e0bffe17 	ldw	r2,-8(fp)
   11f70:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   11f74:	e0bff817 	ldw	r2,-32(fp)
   11f78:	1001703a 	wrctl	status,r2
}
   11f7c:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11f80:	e0800217 	ldw	r2,8(fp)
   11f84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11f88:	e0bffd0b 	ldhu	r2,-12(fp)
   11f8c:	0000d706 	br	122ec <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11f90:	e13fe70b 	ldhu	r4,-100(fp)
   11f94:	e17fe603 	ldbu	r5,-104(fp)
   11f98:	e0bfe50b 	ldhu	r2,-108(fp)
   11f9c:	e0ffe904 	addi	r3,fp,-92
   11fa0:	d8800015 	stw	r2,0(sp)
   11fa4:	280f883a 	mov	r7,r5
   11fa8:	200d883a 	mov	r6,r4
   11fac:	180b883a 	mov	r5,r3
   11fb0:	e13fe817 	ldw	r4,-96(fp)
   11fb4:	00127d80 	call	127d8 <OS_FlagBlock>
   11fb8:	e0bffe17 	ldw	r2,-8(fp)
   11fbc:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   11fc0:	e0bff717 	ldw	r2,-36(fp)
   11fc4:	1001703a 	wrctl	status,r2
}
   11fc8:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
   11fcc:	00006a06 	br	12178 <OSFlagPend+0x478>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11fd0:	e0bfe817 	ldw	r2,-96(fp)
   11fd4:	1080020b 	ldhu	r2,8(r2)
   11fd8:	0084303a 	nor	r2,zero,r2
   11fdc:	1007883a 	mov	r3,r2
   11fe0:	e0bfe70b 	ldhu	r2,-100(fp)
   11fe4:	1884703a 	and	r2,r3,r2
   11fe8:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11fec:	e0fffd0b 	ldhu	r3,-12(fp)
   11ff0:	e0bfe70b 	ldhu	r2,-100(fp)
   11ff4:	1880161e 	bne	r3,r2,12050 <OSFlagPend+0x350>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11ff8:	e0bfffc3 	ldbu	r2,-1(fp)
   11ffc:	10800058 	cmpnei	r2,r2,1
   12000:	1000071e 	bne	r2,zero,12020 <OSFlagPend+0x320>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12004:	e0bfe817 	ldw	r2,-96(fp)
   12008:	1080020b 	ldhu	r2,8(r2)
   1200c:	e0fffd0b 	ldhu	r3,-12(fp)
   12010:	1884b03a 	or	r2,r3,r2
   12014:	1007883a 	mov	r3,r2
   12018:	e0bfe817 	ldw	r2,-96(fp)
   1201c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12020:	d0a83a17 	ldw	r2,-24344(gp)
   12024:	e0fffd0b 	ldhu	r3,-12(fp)
   12028:	10c00b0d 	sth	r3,44(r2)
   1202c:	e0bffe17 	ldw	r2,-8(fp)
   12030:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   12034:	e0bff617 	ldw	r2,-40(fp)
   12038:	1001703a 	wrctl	status,r2
}
   1203c:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12040:	e0800217 	ldw	r2,8(fp)
   12044:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12048:	e0bffd0b 	ldhu	r2,-12(fp)
   1204c:	0000a706 	br	122ec <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12050:	e13fe70b 	ldhu	r4,-100(fp)
   12054:	e17fe603 	ldbu	r5,-104(fp)
   12058:	e0bfe50b 	ldhu	r2,-108(fp)
   1205c:	e0ffe904 	addi	r3,fp,-92
   12060:	d8800015 	stw	r2,0(sp)
   12064:	280f883a 	mov	r7,r5
   12068:	200d883a 	mov	r6,r4
   1206c:	180b883a 	mov	r5,r3
   12070:	e13fe817 	ldw	r4,-96(fp)
   12074:	00127d80 	call	127d8 <OS_FlagBlock>
   12078:	e0bffe17 	ldw	r2,-8(fp)
   1207c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   12080:	e0bff517 	ldw	r2,-44(fp)
   12084:	1001703a 	wrctl	status,r2
}
   12088:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
   1208c:	00003a06 	br	12178 <OSFlagPend+0x478>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12090:	e0bfe817 	ldw	r2,-96(fp)
   12094:	1080020b 	ldhu	r2,8(r2)
   12098:	0084303a 	nor	r2,zero,r2
   1209c:	1007883a 	mov	r3,r2
   120a0:	e0bfe70b 	ldhu	r2,-100(fp)
   120a4:	1884703a 	and	r2,r3,r2
   120a8:	e0bffd0d 	sth	r2,-12(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   120ac:	e0bffd0b 	ldhu	r2,-12(fp)
   120b0:	10001626 	beq	r2,zero,1210c <OSFlagPend+0x40c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   120b4:	e0bfffc3 	ldbu	r2,-1(fp)
   120b8:	10800058 	cmpnei	r2,r2,1
   120bc:	1000071e 	bne	r2,zero,120dc <OSFlagPend+0x3dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   120c0:	e0bfe817 	ldw	r2,-96(fp)
   120c4:	1080020b 	ldhu	r2,8(r2)
   120c8:	e0fffd0b 	ldhu	r3,-12(fp)
   120cc:	1884b03a 	or	r2,r3,r2
   120d0:	1007883a 	mov	r3,r2
   120d4:	e0bfe817 	ldw	r2,-96(fp)
   120d8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   120dc:	d0a83a17 	ldw	r2,-24344(gp)
   120e0:	e0fffd0b 	ldhu	r3,-12(fp)
   120e4:	10c00b0d 	sth	r3,44(r2)
   120e8:	e0bffe17 	ldw	r2,-8(fp)
   120ec:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   120f0:	e0bff417 	ldw	r2,-48(fp)
   120f4:	1001703a 	wrctl	status,r2
}
   120f8:	0001883a 	nop
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   120fc:	e0800217 	ldw	r2,8(fp)
   12100:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12104:	e0bffd0b 	ldhu	r2,-12(fp)
   12108:	00007806 	br	122ec <OSFlagPend+0x5ec>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1210c:	e13fe70b 	ldhu	r4,-100(fp)
   12110:	e17fe603 	ldbu	r5,-104(fp)
   12114:	e0bfe50b 	ldhu	r2,-108(fp)
   12118:	e0ffe904 	addi	r3,fp,-92
   1211c:	d8800015 	stw	r2,0(sp)
   12120:	280f883a 	mov	r7,r5
   12124:	200d883a 	mov	r6,r4
   12128:	180b883a 	mov	r5,r3
   1212c:	e13fe817 	ldw	r4,-96(fp)
   12130:	00127d80 	call	127d8 <OS_FlagBlock>
   12134:	e0bffe17 	ldw	r2,-8(fp)
   12138:	e0bff315 	stw	r2,-52(fp)
  NIOS2_WRITE_STATUS (context);
   1213c:	e0bff317 	ldw	r2,-52(fp)
   12140:	1001703a 	wrctl	status,r2
}
   12144:	0001883a 	nop
                 OS_EXIT_CRITICAL();
             }
             break;
   12148:	00000b06 	br	12178 <OSFlagPend+0x478>
   1214c:	e0bffe17 	ldw	r2,-8(fp)
   12150:	e0bff215 	stw	r2,-56(fp)
  NIOS2_WRITE_STATUS (context);
   12154:	e0bff217 	ldw	r2,-56(fp)
   12158:	1001703a 	wrctl	status,r2
}
   1215c:	0001883a 	nop
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12160:	e03ffd0d 	sth	zero,-12(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   12164:	e0800217 	ldw	r2,8(fp)
   12168:	00c01bc4 	movi	r3,111
   1216c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   12170:	e0bffd0b 	ldhu	r2,-12(fp)
   12174:	00005d06 	br	122ec <OSFlagPend+0x5ec>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   12178:	0010b980 	call	10b98 <OS_Sched>
  NIOS2_READ_STATUS (context);
   1217c:	0005303a 	rdctl	r2,status
   12180:	e0bff115 	stw	r2,-60(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12184:	e0fff117 	ldw	r3,-60(fp)
   12188:	00bfff84 	movi	r2,-2
   1218c:	1884703a 	and	r2,r3,r2
   12190:	1001703a 	wrctl	status,r2
  return context;
   12194:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   12198:	e0bffe15 	stw	r2,-8(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1219c:	d0a83a17 	ldw	r2,-24344(gp)
   121a0:	10800c43 	ldbu	r2,49(r2)
   121a4:	10803fcc 	andi	r2,r2,255
   121a8:	10001d26 	beq	r2,zero,12220 <OSFlagPend+0x520>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   121ac:	d0a83a17 	ldw	r2,-24344(gp)
   121b0:	10800c43 	ldbu	r2,49(r2)
   121b4:	e0bffcc5 	stb	r2,-13(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   121b8:	d0a83a17 	ldw	r2,-24344(gp)
   121bc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   121c0:	e0bfe904 	addi	r2,fp,-92
   121c4:	1009883a 	mov	r4,r2
   121c8:	0012b100 	call	12b10 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   121cc:	d0a83a17 	ldw	r2,-24344(gp)
   121d0:	10000c05 	stb	zero,48(r2)
   121d4:	e0bffe17 	ldw	r2,-8(fp)
   121d8:	e0bff015 	stw	r2,-64(fp)
  NIOS2_WRITE_STATUS (context);
   121dc:	e0bff017 	ldw	r2,-64(fp)
   121e0:	1001703a 	wrctl	status,r2
}
   121e4:	0001883a 	nop
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   121e8:	e03ffd0d 	sth	zero,-12(fp)
        switch (pend_stat) {
   121ec:	e0bffcc3 	ldbu	r2,-13(fp)
   121f0:	10800098 	cmpnei	r2,r2,2
   121f4:	1000041e 	bne	r2,zero,12208 <OSFlagPend+0x508>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   121f8:	e0800217 	ldw	r2,8(fp)
   121fc:	00c00384 	movi	r3,14
   12200:	10c00005 	stb	r3,0(r2)
                 break;
   12204:	00000406 	br	12218 <OSFlagPend+0x518>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   12208:	e0800217 	ldw	r2,8(fp)
   1220c:	00c00284 	movi	r3,10
   12210:	10c00005 	stb	r3,0(r2)
                 break;
   12214:	0001883a 	nop
        }
        return (flags_rdy);
   12218:	e0bffd0b 	ldhu	r2,-12(fp)
   1221c:	00003306 	br	122ec <OSFlagPend+0x5ec>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   12220:	d0a83a17 	ldw	r2,-24344(gp)
   12224:	10800b0b 	ldhu	r2,44(r2)
   12228:	e0bffd0d 	sth	r2,-12(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1222c:	e0bfffc3 	ldbu	r2,-1(fp)
   12230:	10800058 	cmpnei	r2,r2,1
   12234:	1000241e 	bne	r2,zero,122c8 <OSFlagPend+0x5c8>
        switch (wait_type) {
   12238:	e0bfe603 	ldbu	r2,-104(fp)
   1223c:	10c00088 	cmpgei	r3,r2,2
   12240:	1800021e 	bne	r3,zero,1224c <OSFlagPend+0x54c>
   12244:	10000e0e 	bge	r2,zero,12280 <OSFlagPend+0x580>
   12248:	00001506 	br	122a0 <OSFlagPend+0x5a0>
   1224c:	10bfff84 	addi	r2,r2,-2
   12250:	108000a8 	cmpgeui	r2,r2,2
   12254:	1000121e 	bne	r2,zero,122a0 <OSFlagPend+0x5a0>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   12258:	e0bfe817 	ldw	r2,-96(fp)
   1225c:	1080020b 	ldhu	r2,8(r2)
   12260:	1007883a 	mov	r3,r2
   12264:	e0bffd0b 	ldhu	r2,-12(fp)
   12268:	0084303a 	nor	r2,zero,r2
   1226c:	1884703a 	and	r2,r3,r2
   12270:	1007883a 	mov	r3,r2
   12274:	e0bfe817 	ldw	r2,-96(fp)
   12278:	10c0020d 	sth	r3,8(r2)
                 break;
   1227c:	00001306 	br	122cc <OSFlagPend+0x5cc>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   12280:	e0bfe817 	ldw	r2,-96(fp)
   12284:	1080020b 	ldhu	r2,8(r2)
   12288:	e0fffd0b 	ldhu	r3,-12(fp)
   1228c:	1884b03a 	or	r2,r3,r2
   12290:	1007883a 	mov	r3,r2
   12294:	e0bfe817 	ldw	r2,-96(fp)
   12298:	10c0020d 	sth	r3,8(r2)
                 break;
   1229c:	00000b06 	br	122cc <OSFlagPend+0x5cc>
   122a0:	e0bffe17 	ldw	r2,-8(fp)
   122a4:	e0bfef15 	stw	r2,-68(fp)
  NIOS2_WRITE_STATUS (context);
   122a8:	e0bfef17 	ldw	r2,-68(fp)
   122ac:	1001703a 	wrctl	status,r2
}
   122b0:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   122b4:	e0800217 	ldw	r2,8(fp)
   122b8:	00c01bc4 	movi	r3,111
   122bc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   122c0:	0005883a 	mov	r2,zero
   122c4:	00000906 	br	122ec <OSFlagPend+0x5ec>
        }
    }
   122c8:	0001883a 	nop
   122cc:	e0bffe17 	ldw	r2,-8(fp)
   122d0:	e0bfee15 	stw	r2,-72(fp)
  NIOS2_WRITE_STATUS (context);
   122d4:	e0bfee17 	ldw	r2,-72(fp)
   122d8:	1001703a 	wrctl	status,r2
}
   122dc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   122e0:	e0800217 	ldw	r2,8(fp)
   122e4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   122e8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   122ec:	e037883a 	mov	sp,fp
   122f0:	dfc00117 	ldw	ra,4(sp)
   122f4:	df000017 	ldw	fp,0(sp)
   122f8:	dec00204 	addi	sp,sp,8
   122fc:	f800283a 	ret

00012300 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   12300:	defffb04 	addi	sp,sp,-20
   12304:	df000415 	stw	fp,16(sp)
   12308:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1230c:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
   12310:	0005303a 	rdctl	r2,status
   12314:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12318:	e0fffc17 	ldw	r3,-16(fp)
   1231c:	00bfff84 	movi	r2,-2
   12320:	1884703a 	and	r2,r3,r2
   12324:	1001703a 	wrctl	status,r2
  return context;
   12328:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
   1232c:	e0bfff15 	stw	r2,-4(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   12330:	d0a83a17 	ldw	r2,-24344(gp)
   12334:	10800b0b 	ldhu	r2,44(r2)
   12338:	e0bffe8d 	sth	r2,-6(fp)
   1233c:	e0bfff17 	ldw	r2,-4(fp)
   12340:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   12344:	e0bffd17 	ldw	r2,-12(fp)
   12348:	1001703a 	wrctl	status,r2
}
   1234c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (flags);
   12350:	e0bffe8b 	ldhu	r2,-6(fp)
}
   12354:	e037883a 	mov	sp,fp
   12358:	df000017 	ldw	fp,0(sp)
   1235c:	dec00104 	addi	sp,sp,4
   12360:	f800283a 	ret

00012364 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   12364:	deffef04 	addi	sp,sp,-68
   12368:	dfc01015 	stw	ra,64(sp)
   1236c:	df000f15 	stw	fp,60(sp)
   12370:	df000f04 	addi	fp,sp,60
   12374:	e13ff415 	stw	r4,-48(fp)
   12378:	2805883a 	mov	r2,r5
   1237c:	3007883a 	mov	r3,r6
   12380:	e1fff115 	stw	r7,-60(fp)
   12384:	e0bff30d 	sth	r2,-52(fp)
   12388:	1805883a 	mov	r2,r3
   1238c:	e0bff205 	stb	r2,-56(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   12390:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   12394:	e0bff117 	ldw	r2,-60(fp)
   12398:	1000021e 	bne	r2,zero,123a4 <OSFlagPost+0x40>
        return ((OS_FLAGS)0);
   1239c:	0005883a 	mov	r2,zero
   123a0:	0000d606 	br	126fc <OSFlagPost+0x398>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   123a4:	e0bff417 	ldw	r2,-48(fp)
   123a8:	1000051e 	bne	r2,zero,123c0 <OSFlagPost+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   123ac:	e0bff117 	ldw	r2,-60(fp)
   123b0:	00c01b84 	movi	r3,110
   123b4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   123b8:	0005883a 	mov	r2,zero
   123bc:	0000cf06 	br	126fc <OSFlagPost+0x398>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   123c0:	e0bff417 	ldw	r2,-48(fp)
   123c4:	10800003 	ldbu	r2,0(r2)
   123c8:	10803fcc 	andi	r2,r2,255
   123cc:	10800160 	cmpeqi	r2,r2,5
   123d0:	1000051e 	bne	r2,zero,123e8 <OSFlagPost+0x84>
        *perr = OS_ERR_EVENT_TYPE;
   123d4:	e0bff117 	ldw	r2,-60(fp)
   123d8:	00c00044 	movi	r3,1
   123dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   123e0:	0005883a 	mov	r2,zero
   123e4:	0000c506 	br	126fc <OSFlagPost+0x398>
  NIOS2_READ_STATUS (context);
   123e8:	0005303a 	rdctl	r2,status
   123ec:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123f0:	e0fffa17 	ldw	r3,-24(fp)
   123f4:	00bfff84 	movi	r2,-2
   123f8:	1884703a 	and	r2,r3,r2
   123fc:	1001703a 	wrctl	status,r2
  return context;
   12400:	e0bffa17 	ldw	r2,-24(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12404:	e0bffd15 	stw	r2,-12(fp)
    switch (opt) {
   12408:	e0bff203 	ldbu	r2,-56(fp)
   1240c:	10000326 	beq	r2,zero,1241c <OSFlagPost+0xb8>
   12410:	10800060 	cmpeqi	r2,r2,1
   12414:	10000b1e 	bne	r2,zero,12444 <OSFlagPost+0xe0>
   12418:	00001206 	br	12464 <OSFlagPost+0x100>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1241c:	e0bff417 	ldw	r2,-48(fp)
   12420:	1080020b 	ldhu	r2,8(r2)
   12424:	1007883a 	mov	r3,r2
   12428:	e0bff30b 	ldhu	r2,-52(fp)
   1242c:	0084303a 	nor	r2,zero,r2
   12430:	1884703a 	and	r2,r3,r2
   12434:	1007883a 	mov	r3,r2
   12438:	e0bff417 	ldw	r2,-48(fp)
   1243c:	10c0020d 	sth	r3,8(r2)
             break;
   12440:	00001206 	br	1248c <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   12444:	e0bff417 	ldw	r2,-48(fp)
   12448:	1080020b 	ldhu	r2,8(r2)
   1244c:	e0fff30b 	ldhu	r3,-52(fp)
   12450:	1884b03a 	or	r2,r3,r2
   12454:	1007883a 	mov	r3,r2
   12458:	e0bff417 	ldw	r2,-48(fp)
   1245c:	10c0020d 	sth	r3,8(r2)
             break;
   12460:	00000a06 	br	1248c <OSFlagPost+0x128>
   12464:	e0bffd17 	ldw	r2,-12(fp)
   12468:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   1246c:	e0bff917 	ldw	r2,-28(fp)
   12470:	1001703a 	wrctl	status,r2
}
   12474:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   12478:	e0bff117 	ldw	r2,-60(fp)
   1247c:	00c01c44 	movi	r3,113
   12480:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   12484:	0005883a 	mov	r2,zero
   12488:	00009c06 	br	126fc <OSFlagPost+0x398>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1248c:	e03ffec5 	stb	zero,-5(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12490:	e0bff417 	ldw	r2,-48(fp)
   12494:	10800117 	ldw	r2,4(r2)
   12498:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1249c:	00007906 	br	12684 <OSFlagPost+0x320>
        switch (pnode->OSFlagNodeWaitType) {
   124a0:	e0bfff17 	ldw	r2,-4(fp)
   124a4:	10800483 	ldbu	r2,18(r2)
   124a8:	10803fcc 	andi	r2,r2,255
   124ac:	10c000e0 	cmpeqi	r3,r2,3
   124b0:	1800201e 	bne	r3,zero,12534 <OSFlagPost+0x1d0>
   124b4:	10c00108 	cmpgei	r3,r2,4
   124b8:	18005e1e 	bne	r3,zero,12634 <OSFlagPost+0x2d0>
   124bc:	10c000a0 	cmpeqi	r3,r2,2
   124c0:	1800061e 	bne	r3,zero,124dc <OSFlagPost+0x178>
   124c4:	10c000c8 	cmpgei	r3,r2,3
   124c8:	18005a1e 	bne	r3,zero,12634 <OSFlagPost+0x2d0>
   124cc:	10002c26 	beq	r2,zero,12580 <OSFlagPost+0x21c>
   124d0:	10800060 	cmpeqi	r2,r2,1
   124d4:	1000421e 	bne	r2,zero,125e0 <OSFlagPost+0x27c>
   124d8:	00005606 	br	12634 <OSFlagPost+0x2d0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   124dc:	e0bff417 	ldw	r2,-48(fp)
   124e0:	10c0020b 	ldhu	r3,8(r2)
   124e4:	e0bfff17 	ldw	r2,-4(fp)
   124e8:	1080040b 	ldhu	r2,16(r2)
   124ec:	1884703a 	and	r2,r3,r2
   124f0:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   124f4:	e0bfff17 	ldw	r2,-4(fp)
   124f8:	1080040b 	ldhu	r2,16(r2)
   124fc:	e0fffc0b 	ldhu	r3,-16(fp)
   12500:	10bfffcc 	andi	r2,r2,65535
   12504:	1880551e 	bne	r3,r2,1265c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12508:	e0bffc0b 	ldhu	r2,-16(fp)
   1250c:	100b883a 	mov	r5,r2
   12510:	e13fff17 	ldw	r4,-4(fp)
   12514:	0012a1c0 	call	12a1c <OS_FlagTaskRdy>
   12518:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
   1251c:	e0bffbc3 	ldbu	r2,-17(fp)
   12520:	10800058 	cmpnei	r2,r2,1
   12524:	10004d1e 	bne	r2,zero,1265c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12528:	00800044 	movi	r2,1
   1252c:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
   12530:	00004a06 	br	1265c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12534:	e0bff417 	ldw	r2,-48(fp)
   12538:	10c0020b 	ldhu	r3,8(r2)
   1253c:	e0bfff17 	ldw	r2,-4(fp)
   12540:	1080040b 	ldhu	r2,16(r2)
   12544:	1884703a 	and	r2,r3,r2
   12548:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1254c:	e0bffc0b 	ldhu	r2,-16(fp)
   12550:	10004426 	beq	r2,zero,12664 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12554:	e0bffc0b 	ldhu	r2,-16(fp)
   12558:	100b883a 	mov	r5,r2
   1255c:	e13fff17 	ldw	r4,-4(fp)
   12560:	0012a1c0 	call	12a1c <OS_FlagTaskRdy>
   12564:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
   12568:	e0bffbc3 	ldbu	r2,-17(fp)
   1256c:	10800058 	cmpnei	r2,r2,1
   12570:	10003c1e 	bne	r2,zero,12664 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12574:	00800044 	movi	r2,1
   12578:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
   1257c:	00003906 	br	12664 <OSFlagPost+0x300>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12580:	e0bff417 	ldw	r2,-48(fp)
   12584:	1080020b 	ldhu	r2,8(r2)
   12588:	0084303a 	nor	r2,zero,r2
   1258c:	1007883a 	mov	r3,r2
   12590:	e0bfff17 	ldw	r2,-4(fp)
   12594:	1080040b 	ldhu	r2,16(r2)
   12598:	1884703a 	and	r2,r3,r2
   1259c:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   125a0:	e0bfff17 	ldw	r2,-4(fp)
   125a4:	1080040b 	ldhu	r2,16(r2)
   125a8:	e0fffc0b 	ldhu	r3,-16(fp)
   125ac:	10bfffcc 	andi	r2,r2,65535
   125b0:	18802e1e 	bne	r3,r2,1266c <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   125b4:	e0bffc0b 	ldhu	r2,-16(fp)
   125b8:	100b883a 	mov	r5,r2
   125bc:	e13fff17 	ldw	r4,-4(fp)
   125c0:	0012a1c0 	call	12a1c <OS_FlagTaskRdy>
   125c4:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
   125c8:	e0bffbc3 	ldbu	r2,-17(fp)
   125cc:	10800058 	cmpnei	r2,r2,1
   125d0:	1000261e 	bne	r2,zero,1266c <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   125d4:	00800044 	movi	r2,1
   125d8:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
   125dc:	00002306 	br	1266c <OSFlagPost+0x308>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   125e0:	e0bff417 	ldw	r2,-48(fp)
   125e4:	1080020b 	ldhu	r2,8(r2)
   125e8:	0084303a 	nor	r2,zero,r2
   125ec:	1007883a 	mov	r3,r2
   125f0:	e0bfff17 	ldw	r2,-4(fp)
   125f4:	1080040b 	ldhu	r2,16(r2)
   125f8:	1884703a 	and	r2,r3,r2
   125fc:	e0bffc0d 	sth	r2,-16(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   12600:	e0bffc0b 	ldhu	r2,-16(fp)
   12604:	10001b26 	beq	r2,zero,12674 <OSFlagPost+0x310>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12608:	e0bffc0b 	ldhu	r2,-16(fp)
   1260c:	100b883a 	mov	r5,r2
   12610:	e13fff17 	ldw	r4,-4(fp)
   12614:	0012a1c0 	call	12a1c <OS_FlagTaskRdy>
   12618:	e0bffbc5 	stb	r2,-17(fp)
                     if (rdy == OS_TRUE) {
   1261c:	e0bffbc3 	ldbu	r2,-17(fp)
   12620:	10800058 	cmpnei	r2,r2,1
   12624:	1000131e 	bne	r2,zero,12674 <OSFlagPost+0x310>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12628:	00800044 	movi	r2,1
   1262c:	e0bffec5 	stb	r2,-5(fp)
                     }
                 }
                 break;
   12630:	00001006 	br	12674 <OSFlagPost+0x310>
   12634:	e0bffd17 	ldw	r2,-12(fp)
   12638:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   1263c:	e0bff817 	ldw	r2,-32(fp)
   12640:	1001703a 	wrctl	status,r2
}
   12644:	0001883a 	nop
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   12648:	e0bff117 	ldw	r2,-60(fp)
   1264c:	00c01bc4 	movi	r3,111
   12650:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12654:	0005883a 	mov	r2,zero
   12658:	00002806 	br	126fc <OSFlagPost+0x398>
                 break;
   1265c:	0001883a 	nop
   12660:	00000506 	br	12678 <OSFlagPost+0x314>
                 break;
   12664:	0001883a 	nop
   12668:	00000306 	br	12678 <OSFlagPost+0x314>
                 break;
   1266c:	0001883a 	nop
   12670:	00000106 	br	12678 <OSFlagPost+0x314>
                 break;
   12674:	0001883a 	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   12678:	e0bfff17 	ldw	r2,-4(fp)
   1267c:	10800017 	ldw	r2,0(r2)
   12680:	e0bfff15 	stw	r2,-4(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12684:	e0bfff17 	ldw	r2,-4(fp)
   12688:	103f851e 	bne	r2,zero,124a0 <OSFlagPost+0x13c>
   1268c:	e0bffd17 	ldw	r2,-12(fp)
   12690:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   12694:	e0bff717 	ldw	r2,-36(fp)
   12698:	1001703a 	wrctl	status,r2
}
   1269c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   126a0:	e0bffec3 	ldbu	r2,-5(fp)
   126a4:	10800058 	cmpnei	r2,r2,1
   126a8:	1000011e 	bne	r2,zero,126b0 <OSFlagPost+0x34c>
        OS_Sched();
   126ac:	0010b980 	call	10b98 <OS_Sched>
  NIOS2_READ_STATUS (context);
   126b0:	0005303a 	rdctl	r2,status
   126b4:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126b8:	e0fff517 	ldw	r3,-44(fp)
   126bc:	00bfff84 	movi	r2,-2
   126c0:	1884703a 	and	r2,r3,r2
   126c4:	1001703a 	wrctl	status,r2
  return context;
   126c8:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
   126cc:	e0bffd15 	stw	r2,-12(fp)
    flags_cur = pgrp->OSFlagFlags;
   126d0:	e0bff417 	ldw	r2,-48(fp)
   126d4:	1080020b 	ldhu	r2,8(r2)
   126d8:	e0bffc8d 	sth	r2,-14(fp)
   126dc:	e0bffd17 	ldw	r2,-12(fp)
   126e0:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   126e4:	e0bff617 	ldw	r2,-40(fp)
   126e8:	1001703a 	wrctl	status,r2
}
   126ec:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   126f0:	e0bff117 	ldw	r2,-60(fp)
   126f4:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   126f8:	e0bffc8b 	ldhu	r2,-14(fp)
}
   126fc:	e037883a 	mov	sp,fp
   12700:	dfc00117 	ldw	ra,4(sp)
   12704:	df000017 	ldw	fp,0(sp)
   12708:	dec00204 	addi	sp,sp,8
   1270c:	f800283a 	ret

00012710 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   12710:	defff904 	addi	sp,sp,-28
   12714:	df000615 	stw	fp,24(sp)
   12718:	df000604 	addi	fp,sp,24
   1271c:	e13ffb15 	stw	r4,-20(fp)
   12720:	e17ffa15 	stw	r5,-24(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   12724:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   12728:	e0bffa17 	ldw	r2,-24(fp)
   1272c:	1000021e 	bne	r2,zero,12738 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   12730:	0005883a 	mov	r2,zero
   12734:	00002406 	br	127c8 <OSFlagQuery+0xb8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   12738:	e0bffb17 	ldw	r2,-20(fp)
   1273c:	1000051e 	bne	r2,zero,12754 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12740:	e0bffa17 	ldw	r2,-24(fp)
   12744:	00c01b84 	movi	r3,110
   12748:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1274c:	0005883a 	mov	r2,zero
   12750:	00001d06 	br	127c8 <OSFlagQuery+0xb8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   12754:	e0bffb17 	ldw	r2,-20(fp)
   12758:	10800003 	ldbu	r2,0(r2)
   1275c:	10803fcc 	andi	r2,r2,255
   12760:	10800160 	cmpeqi	r2,r2,5
   12764:	1000051e 	bne	r2,zero,1277c <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12768:	e0bffa17 	ldw	r2,-24(fp)
   1276c:	00c00044 	movi	r3,1
   12770:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12774:	0005883a 	mov	r2,zero
   12778:	00001306 	br	127c8 <OSFlagQuery+0xb8>
  NIOS2_READ_STATUS (context);
   1277c:	0005303a 	rdctl	r2,status
   12780:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12784:	e0fffc17 	ldw	r3,-16(fp)
   12788:	00bfff84 	movi	r2,-2
   1278c:	1884703a 	and	r2,r3,r2
   12790:	1001703a 	wrctl	status,r2
  return context;
   12794:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12798:	e0bfff15 	stw	r2,-4(fp)
    flags = pgrp->OSFlagFlags;
   1279c:	e0bffb17 	ldw	r2,-20(fp)
   127a0:	1080020b 	ldhu	r2,8(r2)
   127a4:	e0bffe8d 	sth	r2,-6(fp)
   127a8:	e0bfff17 	ldw	r2,-4(fp)
   127ac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   127b0:	e0bffd17 	ldw	r2,-12(fp)
   127b4:	1001703a 	wrctl	status,r2
}
   127b8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   127bc:	e0bffa17 	ldw	r2,-24(fp)
   127c0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   127c4:	e0bffe8b 	ldhu	r2,-6(fp)
}
   127c8:	e037883a 	mov	sp,fp
   127cc:	df000017 	ldw	fp,0(sp)
   127d0:	dec00104 	addi	sp,sp,4
   127d4:	f800283a 	ret

000127d8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   127d8:	defff804 	addi	sp,sp,-32
   127dc:	df000715 	stw	fp,28(sp)
   127e0:	df000704 	addi	fp,sp,28
   127e4:	e13ffd15 	stw	r4,-12(fp)
   127e8:	e17ffc15 	stw	r5,-16(fp)
   127ec:	3007883a 	mov	r3,r6
   127f0:	3809883a 	mov	r4,r7
   127f4:	e0800117 	ldw	r2,4(fp)
   127f8:	e0fffb0d 	sth	r3,-20(fp)
   127fc:	2007883a 	mov	r3,r4
   12800:	e0fffa05 	stb	r3,-24(fp)
   12804:	e0bff90d 	sth	r2,-28(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   12808:	d0a83a17 	ldw	r2,-24344(gp)
   1280c:	10c00c03 	ldbu	r3,48(r2)
   12810:	d0a83a17 	ldw	r2,-24344(gp)
   12814:	18c00814 	ori	r3,r3,32
   12818:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1281c:	d0a83a17 	ldw	r2,-24344(gp)
   12820:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   12824:	d0a83a17 	ldw	r2,-24344(gp)
   12828:	e0fff90b 	ldhu	r3,-28(fp)
   1282c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   12830:	d0a83a17 	ldw	r2,-24344(gp)
   12834:	e0fffc17 	ldw	r3,-16(fp)
   12838:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1283c:	e0bffc17 	ldw	r2,-16(fp)
   12840:	e0fffb0b 	ldhu	r3,-20(fp)
   12844:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   12848:	e0bffc17 	ldw	r2,-16(fp)
   1284c:	e0fffa03 	ldbu	r3,-24(fp)
   12850:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   12854:	d0e83a17 	ldw	r3,-24344(gp)
   12858:	e0bffc17 	ldw	r2,-16(fp)
   1285c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   12860:	e0bffd17 	ldw	r2,-12(fp)
   12864:	10c00117 	ldw	r3,4(r2)
   12868:	e0bffc17 	ldw	r2,-16(fp)
   1286c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   12870:	e0bffc17 	ldw	r2,-16(fp)
   12874:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   12878:	e0bffc17 	ldw	r2,-16(fp)
   1287c:	e0fffd17 	ldw	r3,-12(fp)
   12880:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12884:	e0bffd17 	ldw	r2,-12(fp)
   12888:	10800117 	ldw	r2,4(r2)
   1288c:	e0bfff15 	stw	r2,-4(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   12890:	e0bfff17 	ldw	r2,-4(fp)
   12894:	10000326 	beq	r2,zero,128a4 <OS_FlagBlock+0xcc>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   12898:	e0bfff17 	ldw	r2,-4(fp)
   1289c:	e0fffc17 	ldw	r3,-16(fp)
   128a0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   128a4:	e0bffd17 	ldw	r2,-12(fp)
   128a8:	e0fffc17 	ldw	r3,-16(fp)
   128ac:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   128b0:	d0a83a17 	ldw	r2,-24344(gp)
   128b4:	10800d03 	ldbu	r2,52(r2)
   128b8:	e0bffec5 	stb	r2,-5(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   128bc:	e0fffec3 	ldbu	r3,-5(fp)
   128c0:	d0a83784 	addi	r2,gp,-24354
   128c4:	1885883a 	add	r2,r3,r2
   128c8:	10800003 	ldbu	r2,0(r2)
   128cc:	1007883a 	mov	r3,r2
   128d0:	d0a83a17 	ldw	r2,-24344(gp)
   128d4:	10800d43 	ldbu	r2,53(r2)
   128d8:	0084303a 	nor	r2,zero,r2
   128dc:	1884703a 	and	r2,r3,r2
   128e0:	e0fffec3 	ldbu	r3,-5(fp)
   128e4:	1009883a 	mov	r4,r2
   128e8:	d0a83784 	addi	r2,gp,-24354
   128ec:	1885883a 	add	r2,r3,r2
   128f0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   128f4:	e0fffec3 	ldbu	r3,-5(fp)
   128f8:	d0a83784 	addi	r2,gp,-24354
   128fc:	1885883a 	add	r2,r3,r2
   12900:	10800003 	ldbu	r2,0(r2)
   12904:	10803fcc 	andi	r2,r2,255
   12908:	1000071e 	bne	r2,zero,12928 <OS_FlagBlock+0x150>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1290c:	d0a83a17 	ldw	r2,-24344(gp)
   12910:	10800d83 	ldbu	r2,54(r2)
   12914:	0084303a 	nor	r2,zero,r2
   12918:	1007883a 	mov	r3,r2
   1291c:	d0a83743 	ldbu	r2,-24355(gp)
   12920:	1884703a 	and	r2,r3,r2
   12924:	d0a83745 	stb	r2,-24355(gp)
    }
}
   12928:	0001883a 	nop
   1292c:	e037883a 	mov	sp,fp
   12930:	df000017 	ldw	fp,0(sp)
   12934:	dec00104 	addi	sp,sp,4
   12938:	f800283a 	ret

0001293c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1293c:	defffb04 	addi	sp,sp,-20
   12940:	dfc00415 	stw	ra,16(sp)
   12944:	df000315 	stw	fp,12(sp)
   12948:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1294c:	0140dc04 	movi	r5,880
   12950:	010000f4 	movhi	r4,3
   12954:	21334604 	addi	r4,r4,-13032
   12958:	0010ad40 	call	10ad4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1295c:	008000f4 	movhi	r2,3
   12960:	10b34604 	addi	r2,r2,-13032
   12964:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   12968:	008000f4 	movhi	r2,3
   1296c:	10b35104 	addi	r2,r2,-12988
   12970:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   12974:	e03fff8d 	sth	zero,-2(fp)
   12978:	00001306 	br	129c8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1297c:	e0bffe17 	ldw	r2,-8(fp)
   12980:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   12984:	e0bffe17 	ldw	r2,-8(fp)
   12988:	e0fffd17 	ldw	r3,-12(fp)
   1298c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   12990:	e0bffe17 	ldw	r2,-8(fp)
   12994:	00c00fc4 	movi	r3,63
   12998:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1299c:	e0bffe17 	ldw	r2,-8(fp)
   129a0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   129a4:	e0bffe17 	ldw	r2,-8(fp)
   129a8:	10800b04 	addi	r2,r2,44
   129ac:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	10800b04 	addi	r2,r2,44
   129b8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   129bc:	e0bfff8b 	ldhu	r2,-2(fp)
   129c0:	10800044 	addi	r2,r2,1
   129c4:	e0bfff8d 	sth	r2,-2(fp)
   129c8:	e0bfff8b 	ldhu	r2,-2(fp)
   129cc:	108004f0 	cmpltui	r2,r2,19
   129d0:	103fea1e 	bne	r2,zero,1297c <OS_FlagInit+0x40>
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   129d4:	e0bffe17 	ldw	r2,-8(fp)
   129d8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   129dc:	e0bffe17 	ldw	r2,-8(fp)
   129e0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   129e4:	e0bffe17 	ldw	r2,-8(fp)
   129e8:	00c00fc4 	movi	r3,63
   129ec:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   129f0:	e0bffe17 	ldw	r2,-8(fp)
   129f4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   129f8:	008000f4 	movhi	r2,3
   129fc:	10b34604 	addi	r2,r2,-13032
   12a00:	d0a83215 	stw	r2,-24376(gp)
#endif
}
   12a04:	0001883a 	nop
   12a08:	e037883a 	mov	sp,fp
   12a0c:	dfc00117 	ldw	ra,4(sp)
   12a10:	df000017 	ldw	fp,0(sp)
   12a14:	dec00204 	addi	sp,sp,8
   12a18:	f800283a 	ret

00012a1c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   12a1c:	defffa04 	addi	sp,sp,-24
   12a20:	dfc00515 	stw	ra,20(sp)
   12a24:	df000415 	stw	fp,16(sp)
   12a28:	df000404 	addi	fp,sp,16
   12a2c:	e13ffd15 	stw	r4,-12(fp)
   12a30:	2805883a 	mov	r2,r5
   12a34:	e0bffc0d 	sth	r2,-16(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   12a38:	e0bffd17 	ldw	r2,-12(fp)
   12a3c:	10800217 	ldw	r2,8(r2)
   12a40:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBDly       = 0;
   12a44:	e0bffe17 	ldw	r2,-8(fp)
   12a48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   12a4c:	e0bffe17 	ldw	r2,-8(fp)
   12a50:	e0fffc0b 	ldhu	r3,-16(fp)
   12a54:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   12a58:	e0bffe17 	ldw	r2,-8(fp)
   12a5c:	10c00c03 	ldbu	r3,48(r2)
   12a60:	00bff7c4 	movi	r2,-33
   12a64:	1884703a 	and	r2,r3,r2
   12a68:	1007883a 	mov	r3,r2
   12a6c:	e0bffe17 	ldw	r2,-8(fp)
   12a70:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   12a74:	e0bffe17 	ldw	r2,-8(fp)
   12a78:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   12a7c:	e0bffe17 	ldw	r2,-8(fp)
   12a80:	10800c03 	ldbu	r2,48(r2)
   12a84:	10803fcc 	andi	r2,r2,255
   12a88:	1000181e 	bne	r2,zero,12aec <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   12a8c:	e0bffe17 	ldw	r2,-8(fp)
   12a90:	10c00d83 	ldbu	r3,54(r2)
   12a94:	d0a83743 	ldbu	r2,-24355(gp)
   12a98:	1884b03a 	or	r2,r3,r2
   12a9c:	d0a83745 	stb	r2,-24355(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12aa0:	e0bffe17 	ldw	r2,-8(fp)
   12aa4:	10800d03 	ldbu	r2,52(r2)
   12aa8:	10c03fcc 	andi	r3,r2,255
   12aac:	d0a83784 	addi	r2,gp,-24354
   12ab0:	1885883a 	add	r2,r3,r2
   12ab4:	11000003 	ldbu	r4,0(r2)
   12ab8:	e0bffe17 	ldw	r2,-8(fp)
   12abc:	10800d43 	ldbu	r2,53(r2)
   12ac0:	e0fffe17 	ldw	r3,-8(fp)
   12ac4:	18c00d03 	ldbu	r3,52(r3)
   12ac8:	18c03fcc 	andi	r3,r3,255
   12acc:	2084b03a 	or	r2,r4,r2
   12ad0:	1009883a 	mov	r4,r2
   12ad4:	d0a83784 	addi	r2,gp,-24354
   12ad8:	1885883a 	add	r2,r3,r2
   12adc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   12ae0:	00800044 	movi	r2,1
   12ae4:	e0bfffc5 	stb	r2,-1(fp)
   12ae8:	00000106 	br	12af0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   12aec:	e03fffc5 	stb	zero,-1(fp)
    }
    OS_FlagUnlink(pnode);
   12af0:	e13ffd17 	ldw	r4,-12(fp)
   12af4:	0012b100 	call	12b10 <OS_FlagUnlink>
    return (sched);
   12af8:	e0bfffc3 	ldbu	r2,-1(fp)
}
   12afc:	e037883a 	mov	sp,fp
   12b00:	dfc00117 	ldw	ra,4(sp)
   12b04:	df000017 	ldw	fp,0(sp)
   12b08:	dec00204 	addi	sp,sp,8
   12b0c:	f800283a 	ret

00012b10 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   12b10:	defffa04 	addi	sp,sp,-24
   12b14:	df000515 	stw	fp,20(sp)
   12b18:	df000504 	addi	fp,sp,20
   12b1c:	e13ffb15 	stw	r4,-20(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   12b20:	e0bffb17 	ldw	r2,-20(fp)
   12b24:	10800117 	ldw	r2,4(r2)
   12b28:	e0bfff15 	stw	r2,-4(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   12b2c:	e0bffb17 	ldw	r2,-20(fp)
   12b30:	10800017 	ldw	r2,0(r2)
   12b34:	e0bffe15 	stw	r2,-8(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   12b38:	e0bfff17 	ldw	r2,-4(fp)
   12b3c:	10000b1e 	bne	r2,zero,12b6c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   12b40:	e0bffb17 	ldw	r2,-20(fp)
   12b44:	10800317 	ldw	r2,12(r2)
   12b48:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   12b4c:	e0bffd17 	ldw	r2,-12(fp)
   12b50:	e0fffe17 	ldw	r3,-8(fp)
   12b54:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   12b58:	e0bffe17 	ldw	r2,-8(fp)
   12b5c:	10000b26 	beq	r2,zero,12b8c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   12b60:	e0bffe17 	ldw	r2,-8(fp)
   12b64:	10000115 	stw	zero,4(r2)
   12b68:	00000806 	br	12b8c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   12b6c:	e0bfff17 	ldw	r2,-4(fp)
   12b70:	e0fffe17 	ldw	r3,-8(fp)
   12b74:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   12b78:	e0bffe17 	ldw	r2,-8(fp)
   12b7c:	10000326 	beq	r2,zero,12b8c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   12b80:	e0bffe17 	ldw	r2,-8(fp)
   12b84:	e0ffff17 	ldw	r3,-4(fp)
   12b88:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   12b8c:	e0bffb17 	ldw	r2,-20(fp)
   12b90:	10800217 	ldw	r2,8(r2)
   12b94:	e0bffc15 	stw	r2,-16(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   12b98:	e0bffc17 	ldw	r2,-16(fp)
   12b9c:	10000a15 	stw	zero,40(r2)
#endif
}
   12ba0:	0001883a 	nop
   12ba4:	e037883a 	mov	sp,fp
   12ba8:	df000017 	ldw	fp,0(sp)
   12bac:	dec00104 	addi	sp,sp,4
   12bb0:	f800283a 	ret

00012bb4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   12bb4:	defff404 	addi	sp,sp,-48
   12bb8:	df000b15 	stw	fp,44(sp)
   12bbc:	df000b04 	addi	fp,sp,44
   12bc0:	e13ff815 	stw	r4,-32(fp)
   12bc4:	e17ff715 	stw	r5,-36(fp)
   12bc8:	e1bff615 	stw	r6,-40(fp)
   12bcc:	e1fff515 	stw	r7,-44(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12bd0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12bd4:	e0bff517 	ldw	r2,-44(fp)
   12bd8:	1000021e 	bne	r2,zero,12be4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   12bdc:	0005883a 	mov	r2,zero
   12be0:	00006606 	br	12d7c <OSMemCreate+0x1c8>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   12be4:	e0bff817 	ldw	r2,-32(fp)
   12be8:	1000051e 	bne	r2,zero,12c00 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   12bec:	e0bff517 	ldw	r2,-44(fp)
   12bf0:	00c01884 	movi	r3,98
   12bf4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12bf8:	0005883a 	mov	r2,zero
   12bfc:	00005f06 	br	12d7c <OSMemCreate+0x1c8>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   12c00:	e0bff817 	ldw	r2,-32(fp)
   12c04:	108000cc 	andi	r2,r2,3
   12c08:	10000526 	beq	r2,zero,12c20 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   12c0c:	e0bff517 	ldw	r2,-44(fp)
   12c10:	00c01884 	movi	r3,98
   12c14:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12c18:	0005883a 	mov	r2,zero
   12c1c:	00005706 	br	12d7c <OSMemCreate+0x1c8>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   12c20:	e0bff717 	ldw	r2,-36(fp)
   12c24:	108000a8 	cmpgeui	r2,r2,2
   12c28:	1000051e 	bne	r2,zero,12c40 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   12c2c:	e0bff517 	ldw	r2,-44(fp)
   12c30:	00c016c4 	movi	r3,91
   12c34:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12c38:	0005883a 	mov	r2,zero
   12c3c:	00004f06 	br	12d7c <OSMemCreate+0x1c8>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   12c40:	e0bff617 	ldw	r2,-40(fp)
   12c44:	10800128 	cmpgeui	r2,r2,4
   12c48:	1000051e 	bne	r2,zero,12c60 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   12c4c:	e0bff517 	ldw	r2,-44(fp)
   12c50:	00c01704 	movi	r3,92
   12c54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12c58:	0005883a 	mov	r2,zero
   12c5c:	00004706 	br	12d7c <OSMemCreate+0x1c8>
  NIOS2_READ_STATUS (context);
   12c60:	0005303a 	rdctl	r2,status
   12c64:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c68:	e0fffa17 	ldw	r3,-24(fp)
   12c6c:	00bfff84 	movi	r2,-2
   12c70:	1884703a 	and	r2,r3,r2
   12c74:	1001703a 	wrctl	status,r2
  return context;
   12c78:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12c7c:	e0bffc15 	stw	r2,-16(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   12c80:	d0a83f17 	ldw	r2,-24324(gp)
   12c84:	e0bffb15 	stw	r2,-20(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   12c88:	d0a83f17 	ldw	r2,-24324(gp)
   12c8c:	10000326 	beq	r2,zero,12c9c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   12c90:	d0a83f17 	ldw	r2,-24324(gp)
   12c94:	10800117 	ldw	r2,4(r2)
   12c98:	d0a83f15 	stw	r2,-24324(gp)
   12c9c:	e0bffc17 	ldw	r2,-16(fp)
   12ca0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   12ca4:	e0bff917 	ldw	r2,-28(fp)
   12ca8:	1001703a 	wrctl	status,r2
}
   12cac:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   12cb0:	e0bffb17 	ldw	r2,-20(fp)
   12cb4:	1000051e 	bne	r2,zero,12ccc <OSMemCreate+0x118>
        *perr = OS_ERR_MEM_INVALID_PART;
   12cb8:	e0bff517 	ldw	r2,-44(fp)
   12cbc:	00c01684 	movi	r3,90
   12cc0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12cc4:	0005883a 	mov	r2,zero
   12cc8:	00002c06 	br	12d7c <OSMemCreate+0x1c8>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   12ccc:	e0bff817 	ldw	r2,-32(fp)
   12cd0:	e0bffe15 	stw	r2,-8(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   12cd4:	e0fff817 	ldw	r3,-32(fp)
   12cd8:	e0bff617 	ldw	r2,-40(fp)
   12cdc:	1885883a 	add	r2,r3,r2
   12ce0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
   12ce4:	e03ffd15 	stw	zero,-12(fp)
   12ce8:	00000c06 	br	12d1c <OSMemCreate+0x168>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   12cec:	e0bffe17 	ldw	r2,-8(fp)
   12cf0:	e0ffff17 	ldw	r3,-4(fp)
   12cf4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   12cf8:	e0bfff17 	ldw	r2,-4(fp)
   12cfc:	e0bffe15 	stw	r2,-8(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   12d00:	e0ffff17 	ldw	r3,-4(fp)
   12d04:	e0bff617 	ldw	r2,-40(fp)
   12d08:	1885883a 	add	r2,r3,r2
   12d0c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (nblks - 1); i++) {
   12d10:	e0bffd17 	ldw	r2,-12(fp)
   12d14:	10800044 	addi	r2,r2,1
   12d18:	e0bffd15 	stw	r2,-12(fp)
   12d1c:	e0bff717 	ldw	r2,-36(fp)
   12d20:	10bfffc4 	addi	r2,r2,-1
   12d24:	e0fffd17 	ldw	r3,-12(fp)
   12d28:	18bff036 	bltu	r3,r2,12cec <OSMemCreate+0x138>
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   12d2c:	e0bffe17 	ldw	r2,-8(fp)
   12d30:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   12d34:	e0bffb17 	ldw	r2,-20(fp)
   12d38:	e0fff817 	ldw	r3,-32(fp)
   12d3c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   12d40:	e0bffb17 	ldw	r2,-20(fp)
   12d44:	e0fff817 	ldw	r3,-32(fp)
   12d48:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   12d4c:	e0bffb17 	ldw	r2,-20(fp)
   12d50:	e0fff717 	ldw	r3,-36(fp)
   12d54:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   12d58:	e0bffb17 	ldw	r2,-20(fp)
   12d5c:	e0fff717 	ldw	r3,-36(fp)
   12d60:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   12d64:	e0bffb17 	ldw	r2,-20(fp)
   12d68:	e0fff617 	ldw	r3,-40(fp)
   12d6c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   12d70:	e0bff517 	ldw	r2,-44(fp)
   12d74:	10000005 	stb	zero,0(r2)
    return (pmem);
   12d78:	e0bffb17 	ldw	r2,-20(fp)
}
   12d7c:	e037883a 	mov	sp,fp
   12d80:	df000017 	ldw	fp,0(sp)
   12d84:	dec00104 	addi	sp,sp,4
   12d88:	f800283a 	ret

00012d8c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   12d8c:	defff804 	addi	sp,sp,-32
   12d90:	df000715 	stw	fp,28(sp)
   12d94:	df000704 	addi	fp,sp,28
   12d98:	e13ffa15 	stw	r4,-24(fp)
   12d9c:	e17ff915 	stw	r5,-28(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12da0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12da4:	e0bff917 	ldw	r2,-28(fp)
   12da8:	1000021e 	bne	r2,zero,12db4 <OSMemGet+0x28>
        return ((void *)0);
   12dac:	0005883a 	mov	r2,zero
   12db0:	00003006 	br	12e74 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   12db4:	e0bffa17 	ldw	r2,-24(fp)
   12db8:	1000051e 	bne	r2,zero,12dd0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12dbc:	e0bff917 	ldw	r2,-28(fp)
   12dc0:	00c01804 	movi	r3,96
   12dc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12dc8:	0005883a 	mov	r2,zero
   12dcc:	00002906 	br	12e74 <OSMemGet+0xe8>
  NIOS2_READ_STATUS (context);
   12dd0:	0005303a 	rdctl	r2,status
   12dd4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12dd8:	e0fffd17 	ldw	r3,-12(fp)
   12ddc:	00bfff84 	movi	r2,-2
   12de0:	1884703a 	and	r2,r3,r2
   12de4:	1001703a 	wrctl	status,r2
  return context;
   12de8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12dec:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   12df0:	e0bffa17 	ldw	r2,-24(fp)
   12df4:	10800417 	ldw	r2,16(r2)
   12df8:	10001526 	beq	r2,zero,12e50 <OSMemGet+0xc4>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   12dfc:	e0bffa17 	ldw	r2,-24(fp)
   12e00:	10800117 	ldw	r2,4(r2)
   12e04:	e0bffe15 	stw	r2,-8(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   12e08:	e0bffe17 	ldw	r2,-8(fp)
   12e0c:	10c00017 	ldw	r3,0(r2)
   12e10:	e0bffa17 	ldw	r2,-24(fp)
   12e14:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   12e18:	e0bffa17 	ldw	r2,-24(fp)
   12e1c:	10800417 	ldw	r2,16(r2)
   12e20:	10ffffc4 	addi	r3,r2,-1
   12e24:	e0bffa17 	ldw	r2,-24(fp)
   12e28:	10c00415 	stw	r3,16(r2)
   12e2c:	e0bfff17 	ldw	r2,-4(fp)
   12e30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   12e34:	e0bffc17 	ldw	r2,-16(fp)
   12e38:	1001703a 	wrctl	status,r2
}
   12e3c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   12e40:	e0bff917 	ldw	r2,-28(fp)
   12e44:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   12e48:	e0bffe17 	ldw	r2,-8(fp)
   12e4c:	00000906 	br	12e74 <OSMemGet+0xe8>
   12e50:	e0bfff17 	ldw	r2,-4(fp)
   12e54:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   12e58:	e0bffb17 	ldw	r2,-20(fp)
   12e5c:	1001703a 	wrctl	status,r2
}
   12e60:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   12e64:	e0bff917 	ldw	r2,-28(fp)
   12e68:	00c01744 	movi	r3,93
   12e6c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   12e70:	0005883a 	mov	r2,zero
}
   12e74:	e037883a 	mov	sp,fp
   12e78:	df000017 	ldw	fp,0(sp)
   12e7c:	dec00104 	addi	sp,sp,4
   12e80:	f800283a 	ret

00012e84 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12e84:	defff704 	addi	sp,sp,-36
   12e88:	dfc00815 	stw	ra,32(sp)
   12e8c:	df000715 	stw	fp,28(sp)
   12e90:	df000704 	addi	fp,sp,28
   12e94:	e13ffb15 	stw	r4,-20(fp)
   12e98:	e17ffa15 	stw	r5,-24(fp)
   12e9c:	e1bff915 	stw	r6,-28(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12ea0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12ea4:	e0bff917 	ldw	r2,-28(fp)
   12ea8:	1000021e 	bne	r2,zero,12eb4 <OSMemNameGet+0x30>
        return (0);
   12eac:	0005883a 	mov	r2,zero
   12eb0:	00002c06 	br	12f64 <OSMemNameGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12eb4:	e0bffb17 	ldw	r2,-20(fp)
   12eb8:	1000051e 	bne	r2,zero,12ed0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12ebc:	e0bff917 	ldw	r2,-28(fp)
   12ec0:	00c01804 	movi	r3,96
   12ec4:	10c00005 	stb	r3,0(r2)
        return (0);
   12ec8:	0005883a 	mov	r2,zero
   12ecc:	00002506 	br	12f64 <OSMemNameGet+0xe0>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12ed0:	e0bffa17 	ldw	r2,-24(fp)
   12ed4:	1000051e 	bne	r2,zero,12eec <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12ed8:	e0bff917 	ldw	r2,-28(fp)
   12edc:	00c00304 	movi	r3,12
   12ee0:	10c00005 	stb	r3,0(r2)
        return (0);
   12ee4:	0005883a 	mov	r2,zero
   12ee8:	00001e06 	br	12f64 <OSMemNameGet+0xe0>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12eec:	d0a83643 	ldbu	r2,-24359(gp)
   12ef0:	10803fcc 	andi	r2,r2,255
   12ef4:	10000526 	beq	r2,zero,12f0c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   12ef8:	e0bff917 	ldw	r2,-28(fp)
   12efc:	00c00444 	movi	r3,17
   12f00:	10c00005 	stb	r3,0(r2)
        return (0);
   12f04:	0005883a 	mov	r2,zero
   12f08:	00001606 	br	12f64 <OSMemNameGet+0xe0>
  NIOS2_READ_STATUS (context);
   12f0c:	0005303a 	rdctl	r2,status
   12f10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f14:	e0fffc17 	ldw	r3,-16(fp)
   12f18:	00bfff84 	movi	r2,-2
   12f1c:	1884703a 	and	r2,r3,r2
   12f20:	1001703a 	wrctl	status,r2
  return context;
   12f24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12f28:	e0bfff15 	stw	r2,-4(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   12f2c:	e0bffb17 	ldw	r2,-20(fp)
   12f30:	10800504 	addi	r2,r2,20
   12f34:	100b883a 	mov	r5,r2
   12f38:	e13ffa17 	ldw	r4,-24(fp)
   12f3c:	0010cd00 	call	10cd0 <OS_StrCopy>
   12f40:	e0bffec5 	stb	r2,-5(fp)
   12f44:	e0bfff17 	ldw	r2,-4(fp)
   12f48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   12f4c:	e0bffd17 	ldw	r2,-12(fp)
   12f50:	1001703a 	wrctl	status,r2
}
   12f54:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12f58:	e0bff917 	ldw	r2,-28(fp)
   12f5c:	10000005 	stb	zero,0(r2)
    return (len);
   12f60:	e0bffec3 	ldbu	r2,-5(fp)
}
   12f64:	e037883a 	mov	sp,fp
   12f68:	dfc00117 	ldw	ra,4(sp)
   12f6c:	df000017 	ldw	fp,0(sp)
   12f70:	dec00204 	addi	sp,sp,8
   12f74:	f800283a 	ret

00012f78 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   12f78:	defff604 	addi	sp,sp,-40
   12f7c:	dfc00915 	stw	ra,36(sp)
   12f80:	df000815 	stw	fp,32(sp)
   12f84:	df000804 	addi	fp,sp,32
   12f88:	e13ffa15 	stw	r4,-24(fp)
   12f8c:	e17ff915 	stw	r5,-28(fp)
   12f90:	e1bff815 	stw	r6,-32(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12f94:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12f98:	e0bff817 	ldw	r2,-32(fp)
   12f9c:	10003726 	beq	r2,zero,1307c <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12fa0:	e0bffa17 	ldw	r2,-24(fp)
   12fa4:	1000041e 	bne	r2,zero,12fb8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12fa8:	e0bff817 	ldw	r2,-32(fp)
   12fac:	00c01804 	movi	r3,96
   12fb0:	10c00005 	stb	r3,0(r2)
        return;
   12fb4:	00003206 	br	13080 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12fb8:	e0bff917 	ldw	r2,-28(fp)
   12fbc:	1000041e 	bne	r2,zero,12fd0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   12fc0:	e0bff817 	ldw	r2,-32(fp)
   12fc4:	00c00304 	movi	r3,12
   12fc8:	10c00005 	stb	r3,0(r2)
        return;
   12fcc:	00002c06 	br	13080 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12fd0:	d0a83643 	ldbu	r2,-24359(gp)
   12fd4:	10803fcc 	andi	r2,r2,255
   12fd8:	10000426 	beq	r2,zero,12fec <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   12fdc:	e0bff817 	ldw	r2,-32(fp)
   12fe0:	00c00484 	movi	r3,18
   12fe4:	10c00005 	stb	r3,0(r2)
        return;
   12fe8:	00002506 	br	13080 <OSMemNameSet+0x108>
  NIOS2_READ_STATUS (context);
   12fec:	0005303a 	rdctl	r2,status
   12ff0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ff4:	e0fffd17 	ldw	r3,-12(fp)
   12ff8:	00bfff84 	movi	r2,-2
   12ffc:	1884703a 	and	r2,r3,r2
   13000:	1001703a 	wrctl	status,r2
  return context;
   13004:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13008:	e0bfff15 	stw	r2,-4(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1300c:	e13ff917 	ldw	r4,-28(fp)
   13010:	0010d440 	call	10d44 <OS_StrLen>
   13014:	e0bffec5 	stb	r2,-5(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   13018:	e0bffec3 	ldbu	r2,-5(fp)
   1301c:	10800830 	cmpltui	r2,r2,32
   13020:	1000091e 	bne	r2,zero,13048 <OSMemNameSet+0xd0>
   13024:	e0bfff17 	ldw	r2,-4(fp)
   13028:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1302c:	e0bffc17 	ldw	r2,-16(fp)
   13030:	1001703a 	wrctl	status,r2
}
   13034:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   13038:	e0bff817 	ldw	r2,-32(fp)
   1303c:	00c018c4 	movi	r3,99
   13040:	10c00005 	stb	r3,0(r2)
        return;
   13044:	00000e06 	br	13080 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   13048:	e0bffa17 	ldw	r2,-24(fp)
   1304c:	10800504 	addi	r2,r2,20
   13050:	e17ff917 	ldw	r5,-28(fp)
   13054:	1009883a 	mov	r4,r2
   13058:	0010cd00 	call	10cd0 <OS_StrCopy>
   1305c:	e0bfff17 	ldw	r2,-4(fp)
   13060:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   13064:	e0bffb17 	ldw	r2,-20(fp)
   13068:	1001703a 	wrctl	status,r2
}
   1306c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13070:	e0bff817 	ldw	r2,-32(fp)
   13074:	10000005 	stb	zero,0(r2)
   13078:	00000106 	br	13080 <OSMemNameSet+0x108>
        return;
   1307c:	0001883a 	nop
}
   13080:	e037883a 	mov	sp,fp
   13084:	dfc00117 	ldw	ra,4(sp)
   13088:	df000017 	ldw	fp,0(sp)
   1308c:	dec00204 	addi	sp,sp,8
   13090:	f800283a 	ret

00013094 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   13094:	defff904 	addi	sp,sp,-28
   13098:	df000615 	stw	fp,24(sp)
   1309c:	df000604 	addi	fp,sp,24
   130a0:	e13ffb15 	stw	r4,-20(fp)
   130a4:	e17ffa15 	stw	r5,-24(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   130a8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   130ac:	e0bffb17 	ldw	r2,-20(fp)
   130b0:	1000021e 	bne	r2,zero,130bc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   130b4:	00801804 	movi	r2,96
   130b8:	00002a06 	br	13164 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   130bc:	e0bffa17 	ldw	r2,-24(fp)
   130c0:	1000021e 	bne	r2,zero,130cc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   130c4:	008017c4 	movi	r2,95
   130c8:	00002606 	br	13164 <OSMemPut+0xd0>
  NIOS2_READ_STATUS (context);
   130cc:	0005303a 	rdctl	r2,status
   130d0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130d4:	e0fffe17 	ldw	r3,-8(fp)
   130d8:	00bfff84 	movi	r2,-2
   130dc:	1884703a 	and	r2,r3,r2
   130e0:	1001703a 	wrctl	status,r2
  return context;
   130e4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   130e8:	e0bfff15 	stw	r2,-4(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   130ec:	e0bffb17 	ldw	r2,-20(fp)
   130f0:	10c00417 	ldw	r3,16(r2)
   130f4:	e0bffb17 	ldw	r2,-20(fp)
   130f8:	10800317 	ldw	r2,12(r2)
   130fc:	18800736 	bltu	r3,r2,1311c <OSMemPut+0x88>
   13100:	e0bfff17 	ldw	r2,-4(fp)
   13104:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   13108:	e0bffd17 	ldw	r2,-12(fp)
   1310c:	1001703a 	wrctl	status,r2
}
   13110:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   13114:	00801784 	movi	r2,94
   13118:	00001206 	br	13164 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1311c:	e0bffb17 	ldw	r2,-20(fp)
   13120:	10c00117 	ldw	r3,4(r2)
   13124:	e0bffa17 	ldw	r2,-24(fp)
   13128:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1312c:	e0bffb17 	ldw	r2,-20(fp)
   13130:	e0fffa17 	ldw	r3,-24(fp)
   13134:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   13138:	e0bffb17 	ldw	r2,-20(fp)
   1313c:	10800417 	ldw	r2,16(r2)
   13140:	10c00044 	addi	r3,r2,1
   13144:	e0bffb17 	ldw	r2,-20(fp)
   13148:	10c00415 	stw	r3,16(r2)
   1314c:	e0bfff17 	ldw	r2,-4(fp)
   13150:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   13154:	e0bffc17 	ldw	r2,-16(fp)
   13158:	1001703a 	wrctl	status,r2
}
   1315c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   13160:	0005883a 	mov	r2,zero
}
   13164:	e037883a 	mov	sp,fp
   13168:	df000017 	ldw	fp,0(sp)
   1316c:	dec00104 	addi	sp,sp,4
   13170:	f800283a 	ret

00013174 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   13174:	defffa04 	addi	sp,sp,-24
   13178:	df000515 	stw	fp,20(sp)
   1317c:	df000504 	addi	fp,sp,20
   13180:	e13ffc15 	stw	r4,-16(fp)
   13184:	e17ffb15 	stw	r5,-20(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13188:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1318c:	e0bffc17 	ldw	r2,-16(fp)
   13190:	1000021e 	bne	r2,zero,1319c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13194:	00801804 	movi	r2,96
   13198:	00002d06 	br	13250 <OSMemQuery+0xdc>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1319c:	e0bffb17 	ldw	r2,-20(fp)
   131a0:	1000021e 	bne	r2,zero,131ac <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   131a4:	00801844 	movi	r2,97
   131a8:	00002906 	br	13250 <OSMemQuery+0xdc>
  NIOS2_READ_STATUS (context);
   131ac:	0005303a 	rdctl	r2,status
   131b0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131b4:	e0fffd17 	ldw	r3,-12(fp)
   131b8:	00bfff84 	movi	r2,-2
   131bc:	1884703a 	and	r2,r3,r2
   131c0:	1001703a 	wrctl	status,r2
  return context;
   131c4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   131c8:	e0bfff15 	stw	r2,-4(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   131cc:	e0bffc17 	ldw	r2,-16(fp)
   131d0:	10c00017 	ldw	r3,0(r2)
   131d4:	e0bffb17 	ldw	r2,-20(fp)
   131d8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   131dc:	e0bffc17 	ldw	r2,-16(fp)
   131e0:	10c00117 	ldw	r3,4(r2)
   131e4:	e0bffb17 	ldw	r2,-20(fp)
   131e8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   131ec:	e0bffc17 	ldw	r2,-16(fp)
   131f0:	10c00217 	ldw	r3,8(r2)
   131f4:	e0bffb17 	ldw	r2,-20(fp)
   131f8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   131fc:	e0bffc17 	ldw	r2,-16(fp)
   13200:	10c00317 	ldw	r3,12(r2)
   13204:	e0bffb17 	ldw	r2,-20(fp)
   13208:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1320c:	e0bffc17 	ldw	r2,-16(fp)
   13210:	10c00417 	ldw	r3,16(r2)
   13214:	e0bffb17 	ldw	r2,-20(fp)
   13218:	10c00415 	stw	r3,16(r2)
   1321c:	e0bfff17 	ldw	r2,-4(fp)
   13220:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   13224:	e0bffe17 	ldw	r2,-8(fp)
   13228:	1001703a 	wrctl	status,r2
}
   1322c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   13230:	e0bffb17 	ldw	r2,-20(fp)
   13234:	10c00317 	ldw	r3,12(r2)
   13238:	e0bffb17 	ldw	r2,-20(fp)
   1323c:	10800417 	ldw	r2,16(r2)
   13240:	1887c83a 	sub	r3,r3,r2
   13244:	e0bffb17 	ldw	r2,-20(fp)
   13248:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1324c:	0005883a 	mov	r2,zero
}
   13250:	e037883a 	mov	sp,fp
   13254:	df000017 	ldw	fp,0(sp)
   13258:	dec00104 	addi	sp,sp,4
   1325c:	f800283a 	ret

00013260 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   13260:	defffc04 	addi	sp,sp,-16
   13264:	dfc00315 	stw	ra,12(sp)
   13268:	df000215 	stw	fp,8(sp)
   1326c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   13270:	01430c04 	movi	r5,3120
   13274:	010000f4 	movhi	r4,3
   13278:	21397b04 	addi	r4,r4,-6676
   1327c:	0010ad40 	call	10ad4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   13280:	008000f4 	movhi	r2,3
   13284:	10b97b04 	addi	r2,r2,-6676
   13288:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1328c:	e03ffe8d 	sth	zero,-6(fp)
   13290:	00001306 	br	132e0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   13294:	e0bffe8b 	ldhu	r2,-6(fp)
   13298:	10800044 	addi	r2,r2,1
   1329c:	10c00d24 	muli	r3,r2,52
   132a0:	008000f4 	movhi	r2,3
   132a4:	10b97b04 	addi	r2,r2,-6676
   132a8:	1887883a 	add	r3,r3,r2
   132ac:	e0bfff17 	ldw	r2,-4(fp)
   132b0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   132b4:	e0bfff17 	ldw	r2,-4(fp)
   132b8:	00c00fc4 	movi	r3,63
   132bc:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   132c0:	e0bfff17 	ldw	r2,-4(fp)
   132c4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	10800d04 	addi	r2,r2,52
   132d0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   132d4:	e0bffe8b 	ldhu	r2,-6(fp)
   132d8:	10800044 	addi	r2,r2,1
   132dc:	e0bffe8d 	sth	r2,-6(fp)
   132e0:	e0bffe8b 	ldhu	r2,-6(fp)
   132e4:	10800ef0 	cmpltui	r2,r2,59
   132e8:	103fea1e 	bne	r2,zero,13294 <OS_MemInit+0x34>
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   132ec:	e0bfff17 	ldw	r2,-4(fp)
   132f0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   132f4:	e0bfff17 	ldw	r2,-4(fp)
   132f8:	00c00fc4 	movi	r3,63
   132fc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   13300:	e0bfff17 	ldw	r2,-4(fp)
   13304:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   13308:	008000f4 	movhi	r2,3
   1330c:	10b97b04 	addi	r2,r2,-6676
   13310:	d0a83f15 	stw	r2,-24324(gp)
#endif
}
   13314:	0001883a 	nop
   13318:	e037883a 	mov	sp,fp
   1331c:	dfc00117 	ldw	ra,4(sp)
   13320:	df000017 	ldw	fp,0(sp)
   13324:	dec00204 	addi	sp,sp,8
   13328:	f800283a 	ret

0001332c <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
   1332c:	defff704 	addi	sp,sp,-36
   13330:	df000815 	stw	fp,32(sp)
   13334:	df000804 	addi	fp,sp,32
   13338:	e13ff915 	stw	r4,-28(fp)
   1333c:	e17ff815 	stw	r5,-32(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13340:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
   13344:	e0bff817 	ldw	r2,-32(fp)
   13348:	1000021e 	bne	r2,zero,13354 <OSMutexAccept+0x28>
        return (OS_FALSE);
   1334c:	0005883a 	mov	r2,zero
   13350:	00005e06 	br	134cc <OSMutexAccept+0x1a0>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13354:	e0bff917 	ldw	r2,-28(fp)
   13358:	1000051e 	bne	r2,zero,13370 <OSMutexAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1335c:	e0bff817 	ldw	r2,-32(fp)
   13360:	00c00104 	movi	r3,4
   13364:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   13368:	0005883a 	mov	r2,zero
   1336c:	00005706 	br	134cc <OSMutexAccept+0x1a0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
   13370:	e0bff917 	ldw	r2,-28(fp)
   13374:	10800003 	ldbu	r2,0(r2)
   13378:	10803fcc 	andi	r2,r2,255
   1337c:	10800120 	cmpeqi	r2,r2,4
   13380:	1000051e 	bne	r2,zero,13398 <OSMutexAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13384:	e0bff817 	ldw	r2,-32(fp)
   13388:	00c00044 	movi	r3,1
   1338c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   13390:	0005883a 	mov	r2,zero
   13394:	00004d06 	br	134cc <OSMutexAccept+0x1a0>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
   13398:	d0a83643 	ldbu	r2,-24359(gp)
   1339c:	10803fcc 	andi	r2,r2,255
   133a0:	10000526 	beq	r2,zero,133b8 <OSMutexAccept+0x8c>
        *perr = OS_ERR_PEND_ISR;
   133a4:	e0bff817 	ldw	r2,-32(fp)
   133a8:	00c00084 	movi	r3,2
   133ac:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
   133b0:	0005883a 	mov	r2,zero
   133b4:	00004506 	br	134cc <OSMutexAccept+0x1a0>
  NIOS2_READ_STATUS (context);
   133b8:	0005303a 	rdctl	r2,status
   133bc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133c0:	e0fffd17 	ldw	r3,-12(fp)
   133c4:	00bfff84 	movi	r2,-2
   133c8:	1884703a 	and	r2,r3,r2
   133cc:	1001703a 	wrctl	status,r2
  return context;
   133d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
   133d4:	e0bfff15 	stw	r2,-4(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
   133d8:	e0bff917 	ldw	r2,-28(fp)
   133dc:	1080020b 	ldhu	r2,8(r2)
   133e0:	10bfffcc 	andi	r2,r2,65535
   133e4:	1004d23a 	srli	r2,r2,8
   133e8:	e0bffec5 	stb	r2,-5(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
   133ec:	e0bff917 	ldw	r2,-28(fp)
   133f0:	1080020b 	ldhu	r2,8(r2)
   133f4:	10bfffcc 	andi	r2,r2,65535
   133f8:	10803fcc 	andi	r2,r2,255
   133fc:	10803fd8 	cmpnei	r2,r2,255
   13400:	10002a1e 	bne	r2,zero,134ac <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
   13404:	e0bff917 	ldw	r2,-28(fp)
   13408:	10c0020b 	ldhu	r3,8(r2)
   1340c:	00bfc004 	movi	r2,-256
   13410:	1884703a 	and	r2,r3,r2
   13414:	1007883a 	mov	r3,r2
   13418:	e0bff917 	ldw	r2,-28(fp)
   1341c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
   13420:	e0bff917 	ldw	r2,-28(fp)
   13424:	10c0020b 	ldhu	r3,8(r2)
   13428:	d0a83a17 	ldw	r2,-24344(gp)
   1342c:	10800c83 	ldbu	r2,50(r2)
   13430:	10803fcc 	andi	r2,r2,255
   13434:	1884b03a 	or	r2,r3,r2
   13438:	1007883a 	mov	r3,r2
   1343c:	e0bff917 	ldw	r2,-28(fp)
   13440:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
   13444:	d0e83a17 	ldw	r3,-24344(gp)
   13448:	e0bff917 	ldw	r2,-28(fp)
   1344c:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
   13450:	d0a83a17 	ldw	r2,-24344(gp)
   13454:	10800c83 	ldbu	r2,50(r2)
   13458:	e0fffec3 	ldbu	r3,-5(fp)
   1345c:	10803fcc 	andi	r2,r2,255
   13460:	18800936 	bltu	r3,r2,13488 <OSMutexAccept+0x15c>
   13464:	e0bfff17 	ldw	r2,-4(fp)
   13468:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1346c:	e0bffc17 	ldw	r2,-16(fp)
   13470:	1001703a 	wrctl	status,r2
}
   13474:	0001883a 	nop
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
   13478:	e0bff817 	ldw	r2,-32(fp)
   1347c:	00c01e04 	movi	r3,120
   13480:	10c00005 	stb	r3,0(r2)
   13484:	00000706 	br	134a4 <OSMutexAccept+0x178>
   13488:	e0bfff17 	ldw	r2,-4(fp)
   1348c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   13490:	e0bffb17 	ldw	r2,-20(fp)
   13494:	1001703a 	wrctl	status,r2
}
   13498:	0001883a 	nop
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
   1349c:	e0bff817 	ldw	r2,-32(fp)
   134a0:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
   134a4:	00800044 	movi	r2,1
   134a8:	00000806 	br	134cc <OSMutexAccept+0x1a0>
   134ac:	e0bfff17 	ldw	r2,-4(fp)
   134b0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   134b4:	e0bffa17 	ldw	r2,-24(fp)
   134b8:	1001703a 	wrctl	status,r2
}
   134bc:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   134c0:	e0bff817 	ldw	r2,-32(fp)
   134c4:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
   134c8:	0005883a 	mov	r2,zero
}
   134cc:	e037883a 	mov	sp,fp
   134d0:	df000017 	ldw	fp,0(sp)
   134d4:	dec00104 	addi	sp,sp,4
   134d8:	f800283a 	ret

000134dc <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
   134dc:	defff604 	addi	sp,sp,-40
   134e0:	dfc00915 	stw	ra,36(sp)
   134e4:	df000815 	stw	fp,32(sp)
   134e8:	df000804 	addi	fp,sp,32
   134ec:	2005883a 	mov	r2,r4
   134f0:	e17ff815 	stw	r5,-32(fp)
   134f4:	e0bff905 	stb	r2,-28(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   134f8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   134fc:	e0bff817 	ldw	r2,-32(fp)
   13500:	1000021e 	bne	r2,zero,1350c <OSMutexCreate+0x30>
        return ((OS_EVENT *)0);
   13504:	0005883a 	mov	r2,zero
   13508:	00005e06 	br	13684 <OSMutexCreate+0x1a8>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
   1350c:	e0bff903 	ldbu	r2,-28(fp)
   13510:	10800530 	cmpltui	r2,r2,20
   13514:	1000051e 	bne	r2,zero,1352c <OSMutexCreate+0x50>
        *perr = OS_ERR_PRIO_INVALID;
   13518:	e0bff817 	ldw	r2,-32(fp)
   1351c:	00c00a84 	movi	r3,42
   13520:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
   13524:	0005883a 	mov	r2,zero
   13528:	00005606 	br	13684 <OSMutexCreate+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1352c:	d0a83643 	ldbu	r2,-24359(gp)
   13530:	10803fcc 	andi	r2,r2,255
   13534:	10000526 	beq	r2,zero,1354c <OSMutexCreate+0x70>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
   13538:	e0bff817 	ldw	r2,-32(fp)
   1353c:	00c00404 	movi	r3,16
   13540:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
   13544:	0005883a 	mov	r2,zero
   13548:	00004e06 	br	13684 <OSMutexCreate+0x1a8>
  NIOS2_READ_STATUS (context);
   1354c:	0005303a 	rdctl	r2,status
   13550:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13554:	e0fffd17 	ldw	r3,-12(fp)
   13558:	00bfff84 	movi	r2,-2
   1355c:	1884703a 	and	r2,r3,r2
   13560:	1001703a 	wrctl	status,r2
  return context;
   13564:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13568:	e0bfff15 	stw	r2,-4(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
   1356c:	e0bff903 	ldbu	r2,-28(fp)
   13570:	100690ba 	slli	r3,r2,2
   13574:	008000f4 	movhi	r2,3
   13578:	1885883a 	add	r2,r3,r2
   1357c:	10b82217 	ldw	r2,-8056(r2)
   13580:	10000a26 	beq	r2,zero,135ac <OSMutexCreate+0xd0>
   13584:	e0bfff17 	ldw	r2,-4(fp)
   13588:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1358c:	e0bffc17 	ldw	r2,-16(fp)
   13590:	1001703a 	wrctl	status,r2
}
   13594:	0001883a 	nop
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
   13598:	e0bff817 	ldw	r2,-32(fp)
   1359c:	00c00a04 	movi	r3,40
   135a0:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
   135a4:	0005883a 	mov	r2,zero
   135a8:	00003606 	br	13684 <OSMutexCreate+0x1a8>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
   135ac:	e0bff903 	ldbu	r2,-28(fp)
   135b0:	100890ba 	slli	r4,r2,2
   135b4:	00c00044 	movi	r3,1
   135b8:	008000f4 	movhi	r2,3
   135bc:	2085883a 	add	r2,r4,r2
   135c0:	10f82215 	stw	r3,-8056(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
   135c4:	d0a83117 	ldw	r2,-24380(gp)
   135c8:	e0bffe15 	stw	r2,-8(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
   135cc:	e0bffe17 	ldw	r2,-8(fp)
   135d0:	10000f1e 	bne	r2,zero,13610 <OSMutexCreate+0x134>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
   135d4:	e0bff903 	ldbu	r2,-28(fp)
   135d8:	100690ba 	slli	r3,r2,2
   135dc:	008000f4 	movhi	r2,3
   135e0:	1885883a 	add	r2,r3,r2
   135e4:	10382215 	stw	zero,-8056(r2)
   135e8:	e0bfff17 	ldw	r2,-4(fp)
   135ec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   135f0:	e0bffb17 	ldw	r2,-20(fp)
   135f4:	1001703a 	wrctl	status,r2
}
   135f8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
   135fc:	e0bff817 	ldw	r2,-32(fp)
   13600:	00c00104 	movi	r3,4
   13604:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13608:	e0bffe17 	ldw	r2,-8(fp)
   1360c:	00001d06 	br	13684 <OSMutexCreate+0x1a8>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
   13610:	d0a83117 	ldw	r2,-24380(gp)
   13614:	10800117 	ldw	r2,4(r2)
   13618:	d0a83115 	stw	r2,-24380(gp)
   1361c:	e0bfff17 	ldw	r2,-4(fp)
   13620:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   13624:	e0bffa17 	ldw	r2,-24(fp)
   13628:	1001703a 	wrctl	status,r2
}
   1362c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
   13630:	e0bffe17 	ldw	r2,-8(fp)
   13634:	00c00104 	movi	r3,4
   13638:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
   1363c:	e0bff903 	ldbu	r2,-28(fp)
   13640:	1004923a 	slli	r2,r2,8
   13644:	10803fd4 	ori	r2,r2,255
   13648:	1007883a 	mov	r3,r2
   1364c:	e0bffe17 	ldw	r2,-8(fp)
   13650:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
   13654:	e0bffe17 	ldw	r2,-8(fp)
   13658:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
   1365c:	e0bffe17 	ldw	r2,-8(fp)
   13660:	00c00fc4 	movi	r3,63
   13664:	10c00385 	stb	r3,14(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
   13668:	e0bffe17 	ldw	r2,-8(fp)
   1366c:	100003c5 	stb	zero,15(r2)
#endif
    OS_EventWaitListInit(pevent);
   13670:	e13ffe17 	ldw	r4,-8(fp)
   13674:	00106e80 	call	106e8 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
   13678:	e0bff817 	ldw	r2,-32(fp)
   1367c:	10000005 	stb	zero,0(r2)
    return (pevent);
   13680:	e0bffe17 	ldw	r2,-8(fp)
}
   13684:	e037883a 	mov	sp,fp
   13688:	dfc00117 	ldw	ra,4(sp)
   1368c:	df000017 	ldw	fp,0(sp)
   13690:	dec00204 	addi	sp,sp,8
   13694:	f800283a 	ret

00013698 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13698:	defff104 	addi	sp,sp,-60
   1369c:	dfc00e15 	stw	ra,56(sp)
   136a0:	df000d15 	stw	fp,52(sp)
   136a4:	df000d04 	addi	fp,sp,52
   136a8:	e13ff515 	stw	r4,-44(fp)
   136ac:	2805883a 	mov	r2,r5
   136b0:	e1bff315 	stw	r6,-52(fp)
   136b4:	e0bff405 	stb	r2,-48(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   136b8:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   136bc:	e0bff317 	ldw	r2,-52(fp)
   136c0:	1000021e 	bne	r2,zero,136cc <OSMutexDel+0x34>
        return (pevent);
   136c4:	e0bff517 	ldw	r2,-44(fp)
   136c8:	0000ad06 	br	13980 <OSMutexDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   136cc:	e0bff517 	ldw	r2,-44(fp)
   136d0:	1000051e 	bne	r2,zero,136e8 <OSMutexDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   136d4:	e0bff317 	ldw	r2,-52(fp)
   136d8:	00c00104 	movi	r3,4
   136dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   136e0:	e0bff517 	ldw	r2,-44(fp)
   136e4:	0000a606 	br	13980 <OSMutexDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   136e8:	e0bff517 	ldw	r2,-44(fp)
   136ec:	10800003 	ldbu	r2,0(r2)
   136f0:	10803fcc 	andi	r2,r2,255
   136f4:	10800120 	cmpeqi	r2,r2,4
   136f8:	1000051e 	bne	r2,zero,13710 <OSMutexDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   136fc:	e0bff317 	ldw	r2,-52(fp)
   13700:	00c00044 	movi	r3,1
   13704:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13708:	e0bff517 	ldw	r2,-44(fp)
   1370c:	00009c06 	br	13980 <OSMutexDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13710:	d0a83643 	ldbu	r2,-24359(gp)
   13714:	10803fcc 	andi	r2,r2,255
   13718:	10000526 	beq	r2,zero,13730 <OSMutexDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1371c:	e0bff317 	ldw	r2,-52(fp)
   13720:	00c003c4 	movi	r3,15
   13724:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13728:	e0bff517 	ldw	r2,-44(fp)
   1372c:	00009406 	br	13980 <OSMutexDel+0x2e8>
  NIOS2_READ_STATUS (context);
   13730:	0005303a 	rdctl	r2,status
   13734:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13738:	e0fffa17 	ldw	r3,-24(fp)
   1373c:	00bfff84 	movi	r2,-2
   13740:	1884703a 	and	r2,r3,r2
   13744:	1001703a 	wrctl	status,r2
  return context;
   13748:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1374c:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
   13750:	e0bff517 	ldw	r2,-44(fp)
   13754:	10800283 	ldbu	r2,10(r2)
   13758:	10803fcc 	andi	r2,r2,255
   1375c:	10000326 	beq	r2,zero,1376c <OSMutexDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13760:	00800044 	movi	r2,1
   13764:	e0bfffc5 	stb	r2,-1(fp)
   13768:	00000106 	br	13770 <OSMutexDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1376c:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
   13770:	e0bff403 	ldbu	r2,-48(fp)
   13774:	10000326 	beq	r2,zero,13784 <OSMutexDel+0xec>
   13778:	10800060 	cmpeqi	r2,r2,1
   1377c:	10002f1e 	bne	r2,zero,1383c <OSMutexDel+0x1a4>
   13780:	00007306 	br	13950 <OSMutexDel+0x2b8>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
   13784:	e0bfffc3 	ldbu	r2,-1(fp)
   13788:	1000211e 	bne	r2,zero,13810 <OSMutexDel+0x178>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1378c:	e0bff517 	ldw	r2,-44(fp)
   13790:	00c00fc4 	movi	r3,63
   13794:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13798:	e0bff517 	ldw	r2,-44(fp)
   1379c:	100003c5 	stb	zero,15(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
   137a0:	e0bff517 	ldw	r2,-44(fp)
   137a4:	1080020b 	ldhu	r2,8(r2)
   137a8:	10bfffcc 	andi	r2,r2,65535
   137ac:	1004d23a 	srli	r2,r2,8
   137b0:	e0bffcc5 	stb	r2,-13(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
   137b4:	e0bffcc3 	ldbu	r2,-13(fp)
   137b8:	100690ba 	slli	r3,r2,2
   137bc:	008000f4 	movhi	r2,3
   137c0:	1885883a 	add	r2,r3,r2
   137c4:	10382215 	stw	zero,-8056(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   137c8:	e0bff517 	ldw	r2,-44(fp)
   137cc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   137d0:	d0e83117 	ldw	r3,-24380(gp)
   137d4:	e0bff517 	ldw	r2,-44(fp)
   137d8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   137dc:	e0bff517 	ldw	r2,-44(fp)
   137e0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
   137e4:	e0bff517 	ldw	r2,-44(fp)
   137e8:	d0a83115 	stw	r2,-24380(gp)
   137ec:	e0bffd17 	ldw	r2,-12(fp)
   137f0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   137f4:	e0bff917 	ldw	r2,-28(fp)
   137f8:	1001703a 	wrctl	status,r2
}
   137fc:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   13800:	e0bff317 	ldw	r2,-52(fp)
   13804:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
   13808:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   1380c:	00005b06 	br	1397c <OSMutexDel+0x2e4>
   13810:	e0bffd17 	ldw	r2,-12(fp)
   13814:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   13818:	e0bff817 	ldw	r2,-32(fp)
   1381c:	1001703a 	wrctl	status,r2
}
   13820:	0001883a 	nop
                 *perr               = OS_ERR_TASK_WAITING;
   13824:	e0bff317 	ldw	r2,-52(fp)
   13828:	00c01244 	movi	r3,73
   1382c:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   13830:	e0bff517 	ldw	r2,-44(fp)
   13834:	e0bffe15 	stw	r2,-8(fp)
             break;
   13838:	00005006 	br	1397c <OSMutexDel+0x2e4>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
   1383c:	e0bff517 	ldw	r2,-44(fp)
   13840:	1080020b 	ldhu	r2,8(r2)
   13844:	10bfffcc 	andi	r2,r2,65535
   13848:	1004d23a 	srli	r2,r2,8
   1384c:	e0bffcc5 	stb	r2,-13(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
   13850:	e0bff517 	ldw	r2,-44(fp)
   13854:	1080020b 	ldhu	r2,8(r2)
   13858:	e0bffc85 	stb	r2,-14(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
   1385c:	e0bff517 	ldw	r2,-44(fp)
   13860:	10800117 	ldw	r2,4(r2)
   13864:	e0bffb15 	stw	r2,-20(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
   13868:	e0bffb17 	ldw	r2,-20(fp)
   1386c:	10000f26 	beq	r2,zero,138ac <OSMutexDel+0x214>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
   13870:	e0bffb17 	ldw	r2,-20(fp)
   13874:	10800c83 	ldbu	r2,50(r2)
   13878:	e0fffcc3 	ldbu	r3,-13(fp)
   1387c:	10803fcc 	andi	r2,r2,255
   13880:	18800a1e 	bne	r3,r2,138ac <OSMutexDel+0x214>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
   13884:	e0bffc83 	ldbu	r2,-14(fp)
   13888:	100b883a 	mov	r5,r2
   1388c:	e13ffb17 	ldw	r4,-20(fp)
   13890:	00142ac0 	call	142ac <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
   13894:	00000506 	br	138ac <OSMutexDel+0x214>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
   13898:	000f883a 	mov	r7,zero
   1389c:	01800404 	movi	r6,16
   138a0:	000b883a 	mov	r5,zero
   138a4:	e13ff517 	ldw	r4,-44(fp)
   138a8:	00101640 	call	10164 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
   138ac:	e0bff517 	ldw	r2,-44(fp)
   138b0:	10800283 	ldbu	r2,10(r2)
   138b4:	10803fcc 	andi	r2,r2,255
   138b8:	103ff71e 	bne	r2,zero,13898 <OSMutexDel+0x200>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   138bc:	e0bff517 	ldw	r2,-44(fp)
   138c0:	00c00fc4 	movi	r3,63
   138c4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   138c8:	e0bff517 	ldw	r2,-44(fp)
   138cc:	100003c5 	stb	zero,15(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
   138d0:	e0bff517 	ldw	r2,-44(fp)
   138d4:	1080020b 	ldhu	r2,8(r2)
   138d8:	10bfffcc 	andi	r2,r2,65535
   138dc:	1004d23a 	srli	r2,r2,8
   138e0:	e0bffcc5 	stb	r2,-13(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
   138e4:	e0bffcc3 	ldbu	r2,-13(fp)
   138e8:	100690ba 	slli	r3,r2,2
   138ec:	008000f4 	movhi	r2,3
   138f0:	1885883a 	add	r2,r3,r2
   138f4:	10382215 	stw	zero,-8056(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   138f8:	e0bff517 	ldw	r2,-44(fp)
   138fc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
   13900:	d0e83117 	ldw	r3,-24380(gp)
   13904:	e0bff517 	ldw	r2,-44(fp)
   13908:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
   1390c:	e0bff517 	ldw	r2,-44(fp)
   13910:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
   13914:	e0bff517 	ldw	r2,-44(fp)
   13918:	d0a83115 	stw	r2,-24380(gp)
   1391c:	e0bffd17 	ldw	r2,-12(fp)
   13920:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   13924:	e0bff717 	ldw	r2,-36(fp)
   13928:	1001703a 	wrctl	status,r2
}
   1392c:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13930:	e0bfffc3 	ldbu	r2,-1(fp)
   13934:	10800058 	cmpnei	r2,r2,1
   13938:	1000011e 	bne	r2,zero,13940 <OSMutexDel+0x2a8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1393c:	0010b980 	call	10b98 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   13940:	e0bff317 	ldw	r2,-52(fp)
   13944:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
   13948:	e03ffe15 	stw	zero,-8(fp)
             break;
   1394c:	00000b06 	br	1397c <OSMutexDel+0x2e4>
   13950:	e0bffd17 	ldw	r2,-12(fp)
   13954:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   13958:	e0bff617 	ldw	r2,-40(fp)
   1395c:	1001703a 	wrctl	status,r2
}
   13960:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   13964:	e0bff317 	ldw	r2,-52(fp)
   13968:	00c001c4 	movi	r3,7
   1396c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   13970:	e0bff517 	ldw	r2,-44(fp)
   13974:	e0bffe15 	stw	r2,-8(fp)
             break;
   13978:	0001883a 	nop
    }
    return (pevent_return);
   1397c:	e0bffe17 	ldw	r2,-8(fp)
}
   13980:	e037883a 	mov	sp,fp
   13984:	dfc00117 	ldw	ra,4(sp)
   13988:	df000017 	ldw	fp,0(sp)
   1398c:	dec00204 	addi	sp,sp,8
   13990:	f800283a 	ret

00013994 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13994:	deffef04 	addi	sp,sp,-68
   13998:	dfc01015 	stw	ra,64(sp)
   1399c:	df000f15 	stw	fp,60(sp)
   139a0:	df000f04 	addi	fp,sp,60
   139a4:	e13ff315 	stw	r4,-52(fp)
   139a8:	2805883a 	mov	r2,r5
   139ac:	e1bff115 	stw	r6,-60(fp)
   139b0:	e0bff20d 	sth	r2,-56(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   139b4:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   139b8:	e0bff117 	ldw	r2,-60(fp)
   139bc:	10015326 	beq	r2,zero,13f0c <OSMutexPend+0x578>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   139c0:	e0bff317 	ldw	r2,-52(fp)
   139c4:	1000041e 	bne	r2,zero,139d8 <OSMutexPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   139c8:	e0bff117 	ldw	r2,-60(fp)
   139cc:	00c00104 	movi	r3,4
   139d0:	10c00005 	stb	r3,0(r2)
        return;
   139d4:	00014e06 	br	13f10 <OSMutexPend+0x57c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   139d8:	e0bff317 	ldw	r2,-52(fp)
   139dc:	10800003 	ldbu	r2,0(r2)
   139e0:	10803fcc 	andi	r2,r2,255
   139e4:	10800120 	cmpeqi	r2,r2,4
   139e8:	1000041e 	bne	r2,zero,139fc <OSMutexPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   139ec:	e0bff117 	ldw	r2,-60(fp)
   139f0:	00c00044 	movi	r3,1
   139f4:	10c00005 	stb	r3,0(r2)
        return;
   139f8:	00014506 	br	13f10 <OSMutexPend+0x57c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   139fc:	d0a83643 	ldbu	r2,-24359(gp)
   13a00:	10803fcc 	andi	r2,r2,255
   13a04:	10000426 	beq	r2,zero,13a18 <OSMutexPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   13a08:	e0bff117 	ldw	r2,-60(fp)
   13a0c:	00c00084 	movi	r3,2
   13a10:	10c00005 	stb	r3,0(r2)
        return;
   13a14:	00013e06 	br	13f10 <OSMutexPend+0x57c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   13a18:	d0a83683 	ldbu	r2,-24358(gp)
   13a1c:	10803fcc 	andi	r2,r2,255
   13a20:	10000426 	beq	r2,zero,13a34 <OSMutexPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   13a24:	e0bff117 	ldw	r2,-60(fp)
   13a28:	00c00344 	movi	r3,13
   13a2c:	10c00005 	stb	r3,0(r2)
        return;
   13a30:	00013706 	br	13f10 <OSMutexPend+0x57c>
  NIOS2_READ_STATUS (context);
   13a34:	0005303a 	rdctl	r2,status
   13a38:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a3c:	e0fff917 	ldw	r3,-28(fp)
   13a40:	00bfff84 	movi	r2,-2
   13a44:	1884703a 	and	r2,r3,r2
   13a48:	1001703a 	wrctl	status,r2
  return context;
   13a4c:	e0bff917 	ldw	r2,-28(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13a50:	e0bffe15 	stw	r2,-8(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
   13a54:	e0bff317 	ldw	r2,-52(fp)
   13a58:	1080020b 	ldhu	r2,8(r2)
   13a5c:	10bfffcc 	andi	r2,r2,65535
   13a60:	1004d23a 	srli	r2,r2,8
   13a64:	e0bffdc5 	stb	r2,-9(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
   13a68:	e0bff317 	ldw	r2,-52(fp)
   13a6c:	1080020b 	ldhu	r2,8(r2)
   13a70:	10803fcc 	andi	r2,r2,255
   13a74:	10803fd8 	cmpnei	r2,r2,255
   13a78:	1000291e 	bne	r2,zero,13b20 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
   13a7c:	e0bff317 	ldw	r2,-52(fp)
   13a80:	10c0020b 	ldhu	r3,8(r2)
   13a84:	00bfc004 	movi	r2,-256
   13a88:	1884703a 	and	r2,r3,r2
   13a8c:	1007883a 	mov	r3,r2
   13a90:	e0bff317 	ldw	r2,-52(fp)
   13a94:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
   13a98:	e0bff317 	ldw	r2,-52(fp)
   13a9c:	10c0020b 	ldhu	r3,8(r2)
   13aa0:	d0a83a17 	ldw	r2,-24344(gp)
   13aa4:	10800c83 	ldbu	r2,50(r2)
   13aa8:	10803fcc 	andi	r2,r2,255
   13aac:	1884b03a 	or	r2,r3,r2
   13ab0:	1007883a 	mov	r3,r2
   13ab4:	e0bff317 	ldw	r2,-52(fp)
   13ab8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
   13abc:	d0e83a17 	ldw	r3,-24344(gp)
   13ac0:	e0bff317 	ldw	r2,-52(fp)
   13ac4:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
   13ac8:	d0a83a17 	ldw	r2,-24344(gp)
   13acc:	10800c83 	ldbu	r2,50(r2)
   13ad0:	e0fffdc3 	ldbu	r3,-9(fp)
   13ad4:	10803fcc 	andi	r2,r2,255
   13ad8:	18800936 	bltu	r3,r2,13b00 <OSMutexPend+0x16c>
   13adc:	e0bffe17 	ldw	r2,-8(fp)
   13ae0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   13ae4:	e0bff817 	ldw	r2,-32(fp)
   13ae8:	1001703a 	wrctl	status,r2
}
   13aec:	0001883a 	nop
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
   13af0:	e0bff117 	ldw	r2,-60(fp)
   13af4:	00c01e04 	movi	r3,120
   13af8:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
   13afc:	00010406 	br	13f10 <OSMutexPend+0x57c>
   13b00:	e0bffe17 	ldw	r2,-8(fp)
   13b04:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   13b08:	e0bff717 	ldw	r2,-36(fp)
   13b0c:	1001703a 	wrctl	status,r2
}
   13b10:	0001883a 	nop
            *perr = OS_ERR_NONE;
   13b14:	e0bff117 	ldw	r2,-60(fp)
   13b18:	10000005 	stb	zero,0(r2)
        return;
   13b1c:	0000fc06 	br	13f10 <OSMutexPend+0x57c>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
   13b20:	e0bff317 	ldw	r2,-52(fp)
   13b24:	1080020b 	ldhu	r2,8(r2)
   13b28:	e0bffd85 	stb	r2,-10(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
   13b2c:	e0bff317 	ldw	r2,-52(fp)
   13b30:	10800117 	ldw	r2,4(r2)
   13b34:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
   13b38:	e0bffc17 	ldw	r2,-16(fp)
   13b3c:	10800c83 	ldbu	r2,50(r2)
   13b40:	e0fffdc3 	ldbu	r3,-9(fp)
   13b44:	10803fcc 	andi	r2,r2,255
   13b48:	1880b32e 	bgeu	r3,r2,13e18 <OSMutexPend+0x484>
        if (mprio > OSTCBCur->OSTCBPrio) {
   13b4c:	d0a83a17 	ldw	r2,-24344(gp)
   13b50:	10c00c83 	ldbu	r3,50(r2)
   13b54:	e0bffd83 	ldbu	r2,-10(fp)
   13b58:	18c03fcc 	andi	r3,r3,255
   13b5c:	1880ae2e 	bgeu	r3,r2,13e18 <OSMutexPend+0x484>
            y = ptcb->OSTCBY;
   13b60:	e0bffc17 	ldw	r2,-16(fp)
   13b64:	10800d03 	ldbu	r2,52(r2)
   13b68:	e0bffbc5 	stb	r2,-17(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
   13b6c:	e0fffbc3 	ldbu	r3,-17(fp)
   13b70:	d0a83784 	addi	r2,gp,-24354
   13b74:	1885883a 	add	r2,r3,r2
   13b78:	10c00003 	ldbu	r3,0(r2)
   13b7c:	e0bffc17 	ldw	r2,-16(fp)
   13b80:	10800d43 	ldbu	r2,53(r2)
   13b84:	1884703a 	and	r2,r3,r2
   13b88:	10803fcc 	andi	r2,r2,255
   13b8c:	10001e26 	beq	r2,zero,13c08 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
   13b90:	e0fffbc3 	ldbu	r3,-17(fp)
   13b94:	d0a83784 	addi	r2,gp,-24354
   13b98:	1885883a 	add	r2,r3,r2
   13b9c:	10800003 	ldbu	r2,0(r2)
   13ba0:	1007883a 	mov	r3,r2
   13ba4:	e0bffc17 	ldw	r2,-16(fp)
   13ba8:	10800d43 	ldbu	r2,53(r2)
   13bac:	0084303a 	nor	r2,zero,r2
   13bb0:	1884703a 	and	r2,r3,r2
   13bb4:	e0fffbc3 	ldbu	r3,-17(fp)
   13bb8:	1009883a 	mov	r4,r2
   13bbc:	d0a83784 	addi	r2,gp,-24354
   13bc0:	1885883a 	add	r2,r3,r2
   13bc4:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
   13bc8:	e0fffbc3 	ldbu	r3,-17(fp)
   13bcc:	d0a83784 	addi	r2,gp,-24354
   13bd0:	1885883a 	add	r2,r3,r2
   13bd4:	10800003 	ldbu	r2,0(r2)
   13bd8:	10803fcc 	andi	r2,r2,255
   13bdc:	1000071e 	bne	r2,zero,13bfc <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
   13be0:	e0bffc17 	ldw	r2,-16(fp)
   13be4:	10800d83 	ldbu	r2,54(r2)
   13be8:	0084303a 	nor	r2,zero,r2
   13bec:	1007883a 	mov	r3,r2
   13bf0:	d0a83743 	ldbu	r2,-24355(gp)
   13bf4:	1884703a 	and	r2,r3,r2
   13bf8:	d0a83745 	stb	r2,-24355(gp)
                }
                rdy = OS_TRUE;
   13bfc:	00800044 	movi	r2,1
   13c00:	e0bfffc5 	stb	r2,-1(fp)
   13c04:	00002806 	br	13ca8 <OSMutexPend+0x314>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
   13c08:	e0bffc17 	ldw	r2,-16(fp)
   13c0c:	10800717 	ldw	r2,28(r2)
   13c10:	e0bffa15 	stw	r2,-24(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
   13c14:	e0bffa17 	ldw	r2,-24(fp)
   13c18:	10002226 	beq	r2,zero,13ca4 <OSMutexPend+0x310>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
   13c1c:	e0bffc17 	ldw	r2,-16(fp)
   13c20:	10800d03 	ldbu	r2,52(r2)
   13c24:	10803fcc 	andi	r2,r2,255
   13c28:	e0fffa17 	ldw	r3,-24(fp)
   13c2c:	1885883a 	add	r2,r3,r2
   13c30:	108002c3 	ldbu	r2,11(r2)
   13c34:	1007883a 	mov	r3,r2
   13c38:	e0bffc17 	ldw	r2,-16(fp)
   13c3c:	10800d43 	ldbu	r2,53(r2)
   13c40:	0084303a 	nor	r2,zero,r2
   13c44:	1884703a 	and	r2,r3,r2
   13c48:	1007883a 	mov	r3,r2
   13c4c:	e0bffc17 	ldw	r2,-16(fp)
   13c50:	10800d03 	ldbu	r2,52(r2)
   13c54:	10803fcc 	andi	r2,r2,255
   13c58:	1809883a 	mov	r4,r3
   13c5c:	e0fffa17 	ldw	r3,-24(fp)
   13c60:	1887883a 	add	r3,r3,r2
   13c64:	190002c5 	stb	r4,11(r3)
   13c68:	e0fffa17 	ldw	r3,-24(fp)
   13c6c:	1885883a 	add	r2,r3,r2
   13c70:	108002c3 	ldbu	r2,11(r2)
   13c74:	10803fcc 	andi	r2,r2,255
   13c78:	10000a1e 	bne	r2,zero,13ca4 <OSMutexPend+0x310>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
   13c7c:	e0bffa17 	ldw	r2,-24(fp)
   13c80:	10800283 	ldbu	r2,10(r2)
   13c84:	1007883a 	mov	r3,r2
   13c88:	e0bffc17 	ldw	r2,-16(fp)
   13c8c:	10800d83 	ldbu	r2,54(r2)
   13c90:	0084303a 	nor	r2,zero,r2
   13c94:	1884703a 	and	r2,r3,r2
   13c98:	1007883a 	mov	r3,r2
   13c9c:	e0bffa17 	ldw	r2,-24(fp)
   13ca0:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
   13ca4:	e03fffc5 	stb	zero,-1(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
   13ca8:	e0bffc17 	ldw	r2,-16(fp)
   13cac:	e0fffdc3 	ldbu	r3,-9(fp)
   13cb0:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
   13cb4:	e0bffc17 	ldw	r2,-16(fp)
   13cb8:	10800c83 	ldbu	r2,50(r2)
   13cbc:	10803fcc 	andi	r2,r2,255
   13cc0:	1004d0fa 	srli	r2,r2,3
   13cc4:	1007883a 	mov	r3,r2
   13cc8:	e0bffc17 	ldw	r2,-16(fp)
   13ccc:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
   13cd0:	e0bffc17 	ldw	r2,-16(fp)
   13cd4:	10800c83 	ldbu	r2,50(r2)
   13cd8:	108001cc 	andi	r2,r2,7
   13cdc:	1007883a 	mov	r3,r2
   13ce0:	e0bffc17 	ldw	r2,-16(fp)
   13ce4:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
   13ce8:	e0bffc17 	ldw	r2,-16(fp)
   13cec:	10800d03 	ldbu	r2,52(r2)
   13cf0:	10803fcc 	andi	r2,r2,255
   13cf4:	00c00044 	movi	r3,1
   13cf8:	1884983a 	sll	r2,r3,r2
   13cfc:	1007883a 	mov	r3,r2
   13d00:	e0bffc17 	ldw	r2,-16(fp)
   13d04:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
   13d08:	e0bffc17 	ldw	r2,-16(fp)
   13d0c:	10800cc3 	ldbu	r2,51(r2)
   13d10:	10803fcc 	andi	r2,r2,255
   13d14:	00c00044 	movi	r3,1
   13d18:	1884983a 	sll	r2,r3,r2
   13d1c:	1007883a 	mov	r3,r2
   13d20:	e0bffc17 	ldw	r2,-16(fp)
   13d24:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
   13d28:	e0bfffc3 	ldbu	r2,-1(fp)
   13d2c:	10800058 	cmpnei	r2,r2,1
   13d30:	1000161e 	bne	r2,zero,13d8c <OSMutexPend+0x3f8>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
   13d34:	e0bffc17 	ldw	r2,-16(fp)
   13d38:	10c00d83 	ldbu	r3,54(r2)
   13d3c:	d0a83743 	ldbu	r2,-24355(gp)
   13d40:	1884b03a 	or	r2,r3,r2
   13d44:	d0a83745 	stb	r2,-24355(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13d48:	e0bffc17 	ldw	r2,-16(fp)
   13d4c:	10800d03 	ldbu	r2,52(r2)
   13d50:	10c03fcc 	andi	r3,r2,255
   13d54:	d0a83784 	addi	r2,gp,-24354
   13d58:	1885883a 	add	r2,r3,r2
   13d5c:	11000003 	ldbu	r4,0(r2)
   13d60:	e0bffc17 	ldw	r2,-16(fp)
   13d64:	10800d43 	ldbu	r2,53(r2)
   13d68:	e0fffc17 	ldw	r3,-16(fp)
   13d6c:	18c00d03 	ldbu	r3,52(r3)
   13d70:	18c03fcc 	andi	r3,r3,255
   13d74:	2084b03a 	or	r2,r4,r2
   13d78:	1009883a 	mov	r4,r2
   13d7c:	d0a83784 	addi	r2,gp,-24354
   13d80:	1885883a 	add	r2,r3,r2
   13d84:	11000005 	stb	r4,0(r2)
   13d88:	00001d06 	br	13e00 <OSMutexPend+0x46c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
   13d8c:	e0bffc17 	ldw	r2,-16(fp)
   13d90:	10800717 	ldw	r2,28(r2)
   13d94:	e0bffa15 	stw	r2,-24(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
   13d98:	e0bffa17 	ldw	r2,-24(fp)
   13d9c:	10001826 	beq	r2,zero,13e00 <OSMutexPend+0x46c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
   13da0:	e0bffa17 	ldw	r2,-24(fp)
   13da4:	10c00283 	ldbu	r3,10(r2)
   13da8:	e0bffc17 	ldw	r2,-16(fp)
   13dac:	10800d83 	ldbu	r2,54(r2)
   13db0:	1884b03a 	or	r2,r3,r2
   13db4:	1007883a 	mov	r3,r2
   13db8:	e0bffa17 	ldw	r2,-24(fp)
   13dbc:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13dc0:	e0bffc17 	ldw	r2,-16(fp)
   13dc4:	10800d03 	ldbu	r2,52(r2)
   13dc8:	10803fcc 	andi	r2,r2,255
   13dcc:	e0fffa17 	ldw	r3,-24(fp)
   13dd0:	1885883a 	add	r2,r3,r2
   13dd4:	110002c3 	ldbu	r4,11(r2)
   13dd8:	e0bffc17 	ldw	r2,-16(fp)
   13ddc:	10c00d43 	ldbu	r3,53(r2)
   13de0:	e0bffc17 	ldw	r2,-16(fp)
   13de4:	10800d03 	ldbu	r2,52(r2)
   13de8:	10803fcc 	andi	r2,r2,255
   13dec:	20c6b03a 	or	r3,r4,r3
   13df0:	1809883a 	mov	r4,r3
   13df4:	e0fffa17 	ldw	r3,-24(fp)
   13df8:	1885883a 	add	r2,r3,r2
   13dfc:	110002c5 	stb	r4,11(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
   13e00:	e0bffdc3 	ldbu	r2,-9(fp)
   13e04:	100890ba 	slli	r4,r2,2
   13e08:	e0fffc17 	ldw	r3,-16(fp)
   13e0c:	008000f4 	movhi	r2,3
   13e10:	2085883a 	add	r2,r4,r2
   13e14:	10f82215 	stw	r3,-8056(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
   13e18:	d0a83a17 	ldw	r2,-24344(gp)
   13e1c:	10c00c03 	ldbu	r3,48(r2)
   13e20:	d0a83a17 	ldw	r2,-24344(gp)
   13e24:	18c00414 	ori	r3,r3,16
   13e28:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13e2c:	d0a83a17 	ldw	r2,-24344(gp)
   13e30:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
   13e34:	d0a83a17 	ldw	r2,-24344(gp)
   13e38:	e0fff20b 	ldhu	r3,-56(fp)
   13e3c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13e40:	e13ff317 	ldw	r4,-52(fp)
   13e44:	00102ec0 	call	102ec <OS_EventTaskWait>
   13e48:	e0bffe17 	ldw	r2,-8(fp)
   13e4c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   13e50:	e0bff517 	ldw	r2,-44(fp)
   13e54:	1001703a 	wrctl	status,r2
}
   13e58:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13e5c:	0010b980 	call	10b98 <OS_Sched>
  NIOS2_READ_STATUS (context);
   13e60:	0005303a 	rdctl	r2,status
   13e64:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e68:	e0fff617 	ldw	r3,-40(fp)
   13e6c:	00bfff84 	movi	r2,-2
   13e70:	1884703a 	and	r2,r3,r2
   13e74:	1001703a 	wrctl	status,r2
  return context;
   13e78:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
   13e7c:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13e80:	d0a83a17 	ldw	r2,-24344(gp)
   13e84:	10800c43 	ldbu	r2,49(r2)
   13e88:	10803fcc 	andi	r2,r2,255
   13e8c:	10000326 	beq	r2,zero,13e9c <OSMutexPend+0x508>
   13e90:	108000a0 	cmpeqi	r2,r2,2
   13e94:	1000041e 	bne	r2,zero,13ea8 <OSMutexPend+0x514>
   13e98:	00000706 	br	13eb8 <OSMutexPend+0x524>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13e9c:	e0bff117 	ldw	r2,-60(fp)
   13ea0:	10000005 	stb	zero,0(r2)
             break;
   13ea4:	00000c06 	br	13ed8 <OSMutexPend+0x544>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
   13ea8:	e0bff117 	ldw	r2,-60(fp)
   13eac:	00c00384 	movi	r3,14
   13eb0:	10c00005 	stb	r3,0(r2)
             break;
   13eb4:	00000806 	br	13ed8 <OSMutexPend+0x544>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   13eb8:	d0a83a17 	ldw	r2,-24344(gp)
   13ebc:	e17ff317 	ldw	r5,-52(fp)
   13ec0:	1009883a 	mov	r4,r2
   13ec4:	001053c0 	call	1053c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
   13ec8:	e0bff117 	ldw	r2,-60(fp)
   13ecc:	00c00284 	movi	r3,10
   13ed0:	10c00005 	stb	r3,0(r2)
             break;
   13ed4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13ed8:	d0a83a17 	ldw	r2,-24344(gp)
   13edc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13ee0:	d0a83a17 	ldw	r2,-24344(gp)
   13ee4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13ee8:	d0a83a17 	ldw	r2,-24344(gp)
   13eec:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13ef0:	d0a83a17 	ldw	r2,-24344(gp)
   13ef4:	10000815 	stw	zero,32(r2)
   13ef8:	e0bffe17 	ldw	r2,-8(fp)
   13efc:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   13f00:	e0bff417 	ldw	r2,-48(fp)
   13f04:	1001703a 	wrctl	status,r2
}
   13f08:	00000106 	br	13f10 <OSMutexPend+0x57c>
        return;
   13f0c:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
   13f10:	e037883a 	mov	sp,fp
   13f14:	dfc00117 	ldw	ra,4(sp)
   13f18:	df000017 	ldw	fp,0(sp)
   13f1c:	dec00204 	addi	sp,sp,8
   13f20:	f800283a 	ret

00013f24 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
   13f24:	defff604 	addi	sp,sp,-40
   13f28:	dfc00915 	stw	ra,36(sp)
   13f2c:	df000815 	stw	fp,32(sp)
   13f30:	df000804 	addi	fp,sp,32
   13f34:	e13ff815 	stw	r4,-32(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13f38:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13f3c:	d0a83643 	ldbu	r2,-24359(gp)
   13f40:	10803fcc 	andi	r2,r2,255
   13f44:	10000226 	beq	r2,zero,13f50 <OSMutexPost+0x2c>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
   13f48:	00800144 	movi	r2,5
   13f4c:	00007606 	br	14128 <OSMutexPost+0x204>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13f50:	e0bff817 	ldw	r2,-32(fp)
   13f54:	1000021e 	bne	r2,zero,13f60 <OSMutexPost+0x3c>
        return (OS_ERR_PEVENT_NULL);
   13f58:	00800104 	movi	r2,4
   13f5c:	00007206 	br	14128 <OSMutexPost+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
   13f60:	e0bff817 	ldw	r2,-32(fp)
   13f64:	10800003 	ldbu	r2,0(r2)
   13f68:	10803fcc 	andi	r2,r2,255
   13f6c:	10800120 	cmpeqi	r2,r2,4
   13f70:	1000021e 	bne	r2,zero,13f7c <OSMutexPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   13f74:	00800044 	movi	r2,1
   13f78:	00006b06 	br	14128 <OSMutexPost+0x204>
  NIOS2_READ_STATUS (context);
   13f7c:	0005303a 	rdctl	r2,status
   13f80:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f84:	e0fffd17 	ldw	r3,-12(fp)
   13f88:	00bfff84 	movi	r2,-2
   13f8c:	1884703a 	and	r2,r3,r2
   13f90:	1001703a 	wrctl	status,r2
  return context;
   13f94:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13f98:	e0bfff15 	stw	r2,-4(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
   13f9c:	e0bff817 	ldw	r2,-32(fp)
   13fa0:	1080020b 	ldhu	r2,8(r2)
   13fa4:	10bfffcc 	andi	r2,r2,65535
   13fa8:	1004d23a 	srli	r2,r2,8
   13fac:	e0bffec5 	stb	r2,-5(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
   13fb0:	e0bff817 	ldw	r2,-32(fp)
   13fb4:	1080020b 	ldhu	r2,8(r2)
   13fb8:	e0bffe85 	stb	r2,-6(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
   13fbc:	e0bff817 	ldw	r2,-32(fp)
   13fc0:	10c00117 	ldw	r3,4(r2)
   13fc4:	d0a83a17 	ldw	r2,-24344(gp)
   13fc8:	18800726 	beq	r3,r2,13fe8 <OSMutexPost+0xc4>
   13fcc:	e0bfff17 	ldw	r2,-4(fp)
   13fd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   13fd4:	e0bffc17 	ldw	r2,-16(fp)
   13fd8:	1001703a 	wrctl	status,r2
}
   13fdc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
   13fe0:	00801904 	movi	r2,100
   13fe4:	00005006 	br	14128 <OSMutexPost+0x204>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
   13fe8:	d0a83a17 	ldw	r2,-24344(gp)
   13fec:	10800c83 	ldbu	r2,50(r2)
   13ff0:	e0fffec3 	ldbu	r3,-5(fp)
   13ff4:	10803fcc 	andi	r2,r2,255
   13ff8:	1880051e 	bne	r3,r2,14010 <OSMutexPost+0xec>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
   13ffc:	d0a83a17 	ldw	r2,-24344(gp)
   14000:	e0fffe83 	ldbu	r3,-6(fp)
   14004:	180b883a 	mov	r5,r3
   14008:	1009883a 	mov	r4,r2
   1400c:	00142ac0 	call	142ac <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
   14010:	e0bffec3 	ldbu	r2,-5(fp)
   14014:	100890ba 	slli	r4,r2,2
   14018:	00c00044 	movi	r3,1
   1401c:	008000f4 	movhi	r2,3
   14020:	2085883a 	add	r2,r4,r2
   14024:	10f82215 	stw	r3,-8056(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
   14028:	e0bff817 	ldw	r2,-32(fp)
   1402c:	10800283 	ldbu	r2,10(r2)
   14030:	10803fcc 	andi	r2,r2,255
   14034:	10002e26 	beq	r2,zero,140f0 <OSMutexPost+0x1cc>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
   14038:	000f883a 	mov	r7,zero
   1403c:	01800404 	movi	r6,16
   14040:	000b883a 	mov	r5,zero
   14044:	e13ff817 	ldw	r4,-32(fp)
   14048:	00101640 	call	10164 <OS_EventTaskRdy>
   1404c:	e0bffe85 	stb	r2,-6(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
   14050:	e0bff817 	ldw	r2,-32(fp)
   14054:	10c0020b 	ldhu	r3,8(r2)
   14058:	00bfc004 	movi	r2,-256
   1405c:	1884703a 	and	r2,r3,r2
   14060:	1007883a 	mov	r3,r2
   14064:	e0bff817 	ldw	r2,-32(fp)
   14068:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
   1406c:	e0bff817 	ldw	r2,-32(fp)
   14070:	10c0020b 	ldhu	r3,8(r2)
   14074:	e0bffe83 	ldbu	r2,-6(fp)
   14078:	1884b03a 	or	r2,r3,r2
   1407c:	1007883a 	mov	r3,r2
   14080:	e0bff817 	ldw	r2,-32(fp)
   14084:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
   14088:	e0bffe83 	ldbu	r2,-6(fp)
   1408c:	100690ba 	slli	r3,r2,2
   14090:	008000f4 	movhi	r2,3
   14094:	1885883a 	add	r2,r3,r2
   14098:	10f82217 	ldw	r3,-8056(r2)
   1409c:	e0bff817 	ldw	r2,-32(fp)
   140a0:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
   140a4:	e0bffe83 	ldbu	r2,-6(fp)
   140a8:	e0fffec3 	ldbu	r3,-5(fp)
   140ac:	18800836 	bltu	r3,r2,140d0 <OSMutexPost+0x1ac>
   140b0:	e0bfff17 	ldw	r2,-4(fp)
   140b4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   140b8:	e0bffb17 	ldw	r2,-20(fp)
   140bc:	1001703a 	wrctl	status,r2
}
   140c0:	0001883a 	nop
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
   140c4:	0010b980 	call	10b98 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
   140c8:	00801e04 	movi	r2,120
   140cc:	00001606 	br	14128 <OSMutexPost+0x204>
   140d0:	e0bfff17 	ldw	r2,-4(fp)
   140d4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   140d8:	e0bffa17 	ldw	r2,-24(fp)
   140dc:	1001703a 	wrctl	status,r2
}
   140e0:	0001883a 	nop
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
   140e4:	0010b980 	call	10b98 <OS_Sched>
            return (OS_ERR_NONE);
   140e8:	0005883a 	mov	r2,zero
   140ec:	00000e06 	br	14128 <OSMutexPost+0x204>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
   140f0:	e0bff817 	ldw	r2,-32(fp)
   140f4:	1080020b 	ldhu	r2,8(r2)
   140f8:	10803fd4 	ori	r2,r2,255
   140fc:	1007883a 	mov	r3,r2
   14100:	e0bff817 	ldw	r2,-32(fp)
   14104:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
   14108:	e0bff817 	ldw	r2,-32(fp)
   1410c:	10000115 	stw	zero,4(r2)
   14110:	e0bfff17 	ldw	r2,-4(fp)
   14114:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   14118:	e0bff917 	ldw	r2,-28(fp)
   1411c:	1001703a 	wrctl	status,r2
}
   14120:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14124:	0005883a 	mov	r2,zero
}
   14128:	e037883a 	mov	sp,fp
   1412c:	dfc00117 	ldw	ra,4(sp)
   14130:	df000017 	ldw	fp,0(sp)
   14134:	dec00204 	addi	sp,sp,8
   14138:	f800283a 	ret

0001413c <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
   1413c:	defff704 	addi	sp,sp,-36
   14140:	df000815 	stw	fp,32(sp)
   14144:	df000804 	addi	fp,sp,32
   14148:	e13ff915 	stw	r4,-28(fp)
   1414c:	e17ff815 	stw	r5,-32(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14150:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14154:	d0a83643 	ldbu	r2,-24359(gp)
   14158:	10803fcc 	andi	r2,r2,255
   1415c:	10000226 	beq	r2,zero,14168 <OSMutexQuery+0x2c>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
   14160:	00800184 	movi	r2,6
   14164:	00004d06 	br	1429c <OSMutexQuery+0x160>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14168:	e0bff917 	ldw	r2,-28(fp)
   1416c:	1000021e 	bne	r2,zero,14178 <OSMutexQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
   14170:	00800104 	movi	r2,4
   14174:	00004906 	br	1429c <OSMutexQuery+0x160>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
   14178:	e0bff817 	ldw	r2,-32(fp)
   1417c:	1000021e 	bne	r2,zero,14188 <OSMutexQuery+0x4c>
        return (OS_ERR_PDATA_NULL);
   14180:	00800244 	movi	r2,9
   14184:	00004506 	br	1429c <OSMutexQuery+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   14188:	e0bff917 	ldw	r2,-28(fp)
   1418c:	10800003 	ldbu	r2,0(r2)
   14190:	10803fcc 	andi	r2,r2,255
   14194:	10800120 	cmpeqi	r2,r2,4
   14198:	1000021e 	bne	r2,zero,141a4 <OSMutexQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   1419c:	00800044 	movi	r2,1
   141a0:	00003e06 	br	1429c <OSMutexQuery+0x160>
  NIOS2_READ_STATUS (context);
   141a4:	0005303a 	rdctl	r2,status
   141a8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141ac:	e0fffb17 	ldw	r3,-20(fp)
   141b0:	00bfff84 	movi	r2,-2
   141b4:	1884703a 	and	r2,r3,r2
   141b8:	1001703a 	wrctl	status,r2
  return context;
   141bc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   141c0:	e0bffc15 	stw	r2,-16(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
   141c4:	e0bff917 	ldw	r2,-28(fp)
   141c8:	1080020b 	ldhu	r2,8(r2)
   141cc:	10bfffcc 	andi	r2,r2,65535
   141d0:	1004d23a 	srli	r2,r2,8
   141d4:	1007883a 	mov	r3,r2
   141d8:	e0bff817 	ldw	r2,-32(fp)
   141dc:	10c00185 	stb	r3,6(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
   141e0:	e0bff917 	ldw	r2,-28(fp)
   141e4:	1080020b 	ldhu	r2,8(r2)
   141e8:	1007883a 	mov	r3,r2
   141ec:	e0bff817 	ldw	r2,-32(fp)
   141f0:	10c00145 	stb	r3,5(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
   141f4:	e0bff817 	ldw	r2,-32(fp)
   141f8:	10800143 	ldbu	r2,5(r2)
   141fc:	10803fcc 	andi	r2,r2,255
   14200:	10803fd8 	cmpnei	r2,r2,255
   14204:	1000041e 	bne	r2,zero,14218 <OSMutexQuery+0xdc>
        p_mutex_data->OSValue = OS_TRUE;
   14208:	e0bff817 	ldw	r2,-32(fp)
   1420c:	00c00044 	movi	r3,1
   14210:	10c00105 	stb	r3,4(r2)
   14214:	00000206 	br	14220 <OSMutexQuery+0xe4>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
   14218:	e0bff817 	ldw	r2,-32(fp)
   1421c:	10000105 	stb	zero,4(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
   14220:	e0bff917 	ldw	r2,-28(fp)
   14224:	10c00283 	ldbu	r3,10(r2)
   14228:	e0bff817 	ldw	r2,-32(fp)
   1422c:	10c000c5 	stb	r3,3(r2)
    psrc                      = &pevent->OSEventTbl[0];
   14230:	e0bff917 	ldw	r2,-28(fp)
   14234:	108002c4 	addi	r2,r2,11
   14238:	e0bffe15 	stw	r2,-8(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
   1423c:	e0bff817 	ldw	r2,-32(fp)
   14240:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14244:	e03fffc5 	stb	zero,-1(fp)
   14248:	00000b06 	br	14278 <OSMutexQuery+0x13c>
        *pdest++ = *psrc++;
   1424c:	e0fffe17 	ldw	r3,-8(fp)
   14250:	18800044 	addi	r2,r3,1
   14254:	e0bffe15 	stw	r2,-8(fp)
   14258:	e0bffd17 	ldw	r2,-12(fp)
   1425c:	11000044 	addi	r4,r2,1
   14260:	e13ffd15 	stw	r4,-12(fp)
   14264:	18c00003 	ldbu	r3,0(r3)
   14268:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1426c:	e0bfffc3 	ldbu	r2,-1(fp)
   14270:	10800044 	addi	r2,r2,1
   14274:	e0bfffc5 	stb	r2,-1(fp)
   14278:	e0bfffc3 	ldbu	r2,-1(fp)
   1427c:	108000f0 	cmpltui	r2,r2,3
   14280:	103ff21e 	bne	r2,zero,1424c <OSMutexQuery+0x110>
   14284:	e0bffc17 	ldw	r2,-16(fp)
   14288:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1428c:	e0bffa17 	ldw	r2,-24(fp)
   14290:	1001703a 	wrctl	status,r2
}
   14294:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14298:	0005883a 	mov	r2,zero
}
   1429c:	e037883a 	mov	sp,fp
   142a0:	df000017 	ldw	fp,0(sp)
   142a4:	dec00104 	addi	sp,sp,4
   142a8:	f800283a 	ret

000142ac <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
   142ac:	defffc04 	addi	sp,sp,-16
   142b0:	df000315 	stw	fp,12(sp)
   142b4:	df000304 	addi	fp,sp,12
   142b8:	e13ffe15 	stw	r4,-8(fp)
   142bc:	2805883a 	mov	r2,r5
   142c0:	e0bffd05 	stb	r2,-12(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
   142c4:	e0bffe17 	ldw	r2,-8(fp)
   142c8:	10800d03 	ldbu	r2,52(r2)
   142cc:	e0bfffc5 	stb	r2,-1(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
   142d0:	e0ffffc3 	ldbu	r3,-1(fp)
   142d4:	d0a83784 	addi	r2,gp,-24354
   142d8:	1885883a 	add	r2,r3,r2
   142dc:	10800003 	ldbu	r2,0(r2)
   142e0:	1007883a 	mov	r3,r2
   142e4:	e0bffe17 	ldw	r2,-8(fp)
   142e8:	10800d43 	ldbu	r2,53(r2)
   142ec:	0084303a 	nor	r2,zero,r2
   142f0:	1884703a 	and	r2,r3,r2
   142f4:	e0ffffc3 	ldbu	r3,-1(fp)
   142f8:	1009883a 	mov	r4,r2
   142fc:	d0a83784 	addi	r2,gp,-24354
   14300:	1885883a 	add	r2,r3,r2
   14304:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14308:	e0ffffc3 	ldbu	r3,-1(fp)
   1430c:	d0a83784 	addi	r2,gp,-24354
   14310:	1885883a 	add	r2,r3,r2
   14314:	10800003 	ldbu	r2,0(r2)
   14318:	10803fcc 	andi	r2,r2,255
   1431c:	1000071e 	bne	r2,zero,1433c <OSMutex_RdyAtPrio+0x90>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   14320:	e0bffe17 	ldw	r2,-8(fp)
   14324:	10800d83 	ldbu	r2,54(r2)
   14328:	0084303a 	nor	r2,zero,r2
   1432c:	1007883a 	mov	r3,r2
   14330:	d0a83743 	ldbu	r2,-24355(gp)
   14334:	1884703a 	and	r2,r3,r2
   14338:	d0a83745 	stb	r2,-24355(gp)
    }
    ptcb->OSTCBPrio         = prio;
   1433c:	e0bffe17 	ldw	r2,-8(fp)
   14340:	e0fffd03 	ldbu	r3,-12(fp)
   14344:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
   14348:	e0bffd03 	ldbu	r2,-12(fp)
   1434c:	1004d0fa 	srli	r2,r2,3
   14350:	108001cc 	andi	r2,r2,7
   14354:	1007883a 	mov	r3,r2
   14358:	e0bffe17 	ldw	r2,-8(fp)
   1435c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
   14360:	e0bffd03 	ldbu	r2,-12(fp)
   14364:	108001cc 	andi	r2,r2,7
   14368:	1007883a 	mov	r3,r2
   1436c:	e0bffe17 	ldw	r2,-8(fp)
   14370:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
   14374:	e0bffe17 	ldw	r2,-8(fp)
   14378:	10800d03 	ldbu	r2,52(r2)
   1437c:	10803fcc 	andi	r2,r2,255
   14380:	00c00044 	movi	r3,1
   14384:	1884983a 	sll	r2,r3,r2
   14388:	1007883a 	mov	r3,r2
   1438c:	e0bffe17 	ldw	r2,-8(fp)
   14390:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
   14394:	e0bffe17 	ldw	r2,-8(fp)
   14398:	10800cc3 	ldbu	r2,51(r2)
   1439c:	10803fcc 	andi	r2,r2,255
   143a0:	00c00044 	movi	r3,1
   143a4:	1884983a 	sll	r2,r3,r2
   143a8:	1007883a 	mov	r3,r2
   143ac:	e0bffe17 	ldw	r2,-8(fp)
   143b0:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
   143b4:	e0bffe17 	ldw	r2,-8(fp)
   143b8:	10c00d83 	ldbu	r3,54(r2)
   143bc:	d0a83743 	ldbu	r2,-24355(gp)
   143c0:	1884b03a 	or	r2,r3,r2
   143c4:	d0a83745 	stb	r2,-24355(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   143c8:	e0bffe17 	ldw	r2,-8(fp)
   143cc:	10800d03 	ldbu	r2,52(r2)
   143d0:	10c03fcc 	andi	r3,r2,255
   143d4:	d0a83784 	addi	r2,gp,-24354
   143d8:	1885883a 	add	r2,r3,r2
   143dc:	11000003 	ldbu	r4,0(r2)
   143e0:	e0bffe17 	ldw	r2,-8(fp)
   143e4:	10800d43 	ldbu	r2,53(r2)
   143e8:	e0fffe17 	ldw	r3,-8(fp)
   143ec:	18c00d03 	ldbu	r3,52(r3)
   143f0:	18c03fcc 	andi	r3,r3,255
   143f4:	2084b03a 	or	r2,r4,r2
   143f8:	1009883a 	mov	r4,r2
   143fc:	d0a83784 	addi	r2,gp,-24354
   14400:	1885883a 	add	r2,r3,r2
   14404:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
   14408:	e0bffd03 	ldbu	r2,-12(fp)
   1440c:	100890ba 	slli	r4,r2,2
   14410:	e0fffe17 	ldw	r3,-8(fp)
   14414:	008000f4 	movhi	r2,3
   14418:	2085883a 	add	r2,r4,r2
   1441c:	10f82215 	stw	r3,-8056(r2)
}
   14420:	0001883a 	nop
   14424:	e037883a 	mov	sp,fp
   14428:	df000017 	ldw	fp,0(sp)
   1442c:	dec00104 	addi	sp,sp,4
   14430:	f800283a 	ret

00014434 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14434:	defff804 	addi	sp,sp,-32
   14438:	df000715 	stw	fp,28(sp)
   1443c:	df000704 	addi	fp,sp,28
   14440:	e13ffa15 	stw	r4,-24(fp)
   14444:	e17ff915 	stw	r5,-28(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14448:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1444c:	e0bff917 	ldw	r2,-28(fp)
   14450:	1000021e 	bne	r2,zero,1445c <OSQAccept+0x28>
        return ((void *)0);
   14454:	0005883a 	mov	r2,zero
   14458:	00004306 	br	14568 <OSQAccept+0x134>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1445c:	e0bffa17 	ldw	r2,-24(fp)
   14460:	1000051e 	bne	r2,zero,14478 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14464:	e0bff917 	ldw	r2,-28(fp)
   14468:	00c00104 	movi	r3,4
   1446c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14470:	0005883a 	mov	r2,zero
   14474:	00003c06 	br	14568 <OSQAccept+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14478:	e0bffa17 	ldw	r2,-24(fp)
   1447c:	10800003 	ldbu	r2,0(r2)
   14480:	10803fcc 	andi	r2,r2,255
   14484:	108000a0 	cmpeqi	r2,r2,2
   14488:	1000051e 	bne	r2,zero,144a0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1448c:	e0bff917 	ldw	r2,-28(fp)
   14490:	00c00044 	movi	r3,1
   14494:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14498:	0005883a 	mov	r2,zero
   1449c:	00003206 	br	14568 <OSQAccept+0x134>
  NIOS2_READ_STATUS (context);
   144a0:	0005303a 	rdctl	r2,status
   144a4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144a8:	e0fffc17 	ldw	r3,-16(fp)
   144ac:	00bfff84 	movi	r2,-2
   144b0:	1884703a 	and	r2,r3,r2
   144b4:	1001703a 	wrctl	status,r2
  return context;
   144b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   144bc:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   144c0:	e0bffa17 	ldw	r2,-24(fp)
   144c4:	10800117 	ldw	r2,4(r2)
   144c8:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   144cc:	e0bffd17 	ldw	r2,-12(fp)
   144d0:	1080058b 	ldhu	r2,22(r2)
   144d4:	10bfffcc 	andi	r2,r2,65535
   144d8:	10001926 	beq	r2,zero,14540 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   144dc:	e0bffd17 	ldw	r2,-12(fp)
   144e0:	10800417 	ldw	r2,16(r2)
   144e4:	11000104 	addi	r4,r2,4
   144e8:	e0fffd17 	ldw	r3,-12(fp)
   144ec:	19000415 	stw	r4,16(r3)
   144f0:	10800017 	ldw	r2,0(r2)
   144f4:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   144f8:	e0bffd17 	ldw	r2,-12(fp)
   144fc:	1080058b 	ldhu	r2,22(r2)
   14500:	10bfffc4 	addi	r2,r2,-1
   14504:	1007883a 	mov	r3,r2
   14508:	e0bffd17 	ldw	r2,-12(fp)
   1450c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14510:	e0bffd17 	ldw	r2,-12(fp)
   14514:	10c00417 	ldw	r3,16(r2)
   14518:	e0bffd17 	ldw	r2,-12(fp)
   1451c:	10800217 	ldw	r2,8(r2)
   14520:	1880041e 	bne	r3,r2,14534 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14524:	e0bffd17 	ldw	r2,-12(fp)
   14528:	10c00117 	ldw	r3,4(r2)
   1452c:	e0bffd17 	ldw	r2,-12(fp)
   14530:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14534:	e0bff917 	ldw	r2,-28(fp)
   14538:	10000005 	stb	zero,0(r2)
   1453c:	00000406 	br	14550 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14540:	e0bff917 	ldw	r2,-28(fp)
   14544:	00c007c4 	movi	r3,31
   14548:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1454c:	e03fff15 	stw	zero,-4(fp)
   14550:	e0bffe17 	ldw	r2,-8(fp)
   14554:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14558:	e0bffb17 	ldw	r2,-20(fp)
   1455c:	1001703a 	wrctl	status,r2
}
   14560:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14564:	e0bfff17 	ldw	r2,-4(fp)
}
   14568:	e037883a 	mov	sp,fp
   1456c:	df000017 	ldw	fp,0(sp)
   14570:	dec00104 	addi	sp,sp,4
   14574:	f800283a 	ret

00014578 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   14578:	defff404 	addi	sp,sp,-48
   1457c:	dfc00b15 	stw	ra,44(sp)
   14580:	df000a15 	stw	fp,40(sp)
   14584:	df000a04 	addi	fp,sp,40
   14588:	e13ff715 	stw	r4,-36(fp)
   1458c:	2805883a 	mov	r2,r5
   14590:	e0bff60d 	sth	r2,-40(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14594:	e03ffe15 	stw	zero,-8(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14598:	d0a83643 	ldbu	r2,-24359(gp)
   1459c:	10803fcc 	andi	r2,r2,255
   145a0:	10000226 	beq	r2,zero,145ac <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   145a4:	0005883a 	mov	r2,zero
   145a8:	00005a06 	br	14714 <OSQCreate+0x19c>
  NIOS2_READ_STATUS (context);
   145ac:	0005303a 	rdctl	r2,status
   145b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145b4:	e0fffc17 	ldw	r3,-16(fp)
   145b8:	00bfff84 	movi	r2,-2
   145bc:	1884703a 	and	r2,r3,r2
   145c0:	1001703a 	wrctl	status,r2
  return context;
   145c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   145c8:	e0bffe15 	stw	r2,-8(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   145cc:	d0a83117 	ldw	r2,-24380(gp)
   145d0:	e0bfff15 	stw	r2,-4(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   145d4:	d0a83117 	ldw	r2,-24380(gp)
   145d8:	10000326 	beq	r2,zero,145e8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   145dc:	d0a83117 	ldw	r2,-24380(gp)
   145e0:	10800117 	ldw	r2,4(r2)
   145e4:	d0a83115 	stw	r2,-24380(gp)
   145e8:	e0bffe17 	ldw	r2,-8(fp)
   145ec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   145f0:	e0bffb17 	ldw	r2,-20(fp)
   145f4:	1001703a 	wrctl	status,r2
}
   145f8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   145fc:	e0bfff17 	ldw	r2,-4(fp)
   14600:	10004326 	beq	r2,zero,14710 <OSQCreate+0x198>
  NIOS2_READ_STATUS (context);
   14604:	0005303a 	rdctl	r2,status
   14608:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1460c:	e0fffa17 	ldw	r3,-24(fp)
   14610:	00bfff84 	movi	r2,-2
   14614:	1884703a 	and	r2,r3,r2
   14618:	1001703a 	wrctl	status,r2
  return context;
   1461c:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();
   14620:	e0bffe15 	stw	r2,-8(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14624:	d0a84017 	ldw	r2,-24320(gp)
   14628:	e0bffd15 	stw	r2,-12(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1462c:	e0bffd17 	ldw	r2,-12(fp)
   14630:	10002c26 	beq	r2,zero,146e4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14634:	d0a84017 	ldw	r2,-24320(gp)
   14638:	10800017 	ldw	r2,0(r2)
   1463c:	d0a84015 	stw	r2,-24320(gp)
   14640:	e0bffe17 	ldw	r2,-8(fp)
   14644:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   14648:	e0bff917 	ldw	r2,-28(fp)
   1464c:	1001703a 	wrctl	status,r2
}
   14650:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14654:	e0bffd17 	ldw	r2,-12(fp)
   14658:	e0fff717 	ldw	r3,-36(fp)
   1465c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14660:	e0bff60b 	ldhu	r2,-40(fp)
   14664:	100490ba 	slli	r2,r2,2
   14668:	e0fff717 	ldw	r3,-36(fp)
   1466c:	1887883a 	add	r3,r3,r2
   14670:	e0bffd17 	ldw	r2,-12(fp)
   14674:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   14678:	e0bffd17 	ldw	r2,-12(fp)
   1467c:	e0fff717 	ldw	r3,-36(fp)
   14680:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   14684:	e0bffd17 	ldw	r2,-12(fp)
   14688:	e0fff717 	ldw	r3,-36(fp)
   1468c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14690:	e0bffd17 	ldw	r2,-12(fp)
   14694:	e0fff60b 	ldhu	r3,-40(fp)
   14698:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1469c:	e0bffd17 	ldw	r2,-12(fp)
   146a0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   146a4:	e0bfff17 	ldw	r2,-4(fp)
   146a8:	00c00084 	movi	r3,2
   146ac:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   146b0:	e0bfff17 	ldw	r2,-4(fp)
   146b4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   146b8:	e0bfff17 	ldw	r2,-4(fp)
   146bc:	e0fffd17 	ldw	r3,-12(fp)
   146c0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   146c4:	e0bfff17 	ldw	r2,-4(fp)
   146c8:	00c00fc4 	movi	r3,63
   146cc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   146d0:	e0bfff17 	ldw	r2,-4(fp)
   146d4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   146d8:	e13fff17 	ldw	r4,-4(fp)
   146dc:	00106e80 	call	106e8 <OS_EventWaitListInit>
   146e0:	00000b06 	br	14710 <OSQCreate+0x198>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   146e4:	d0e83117 	ldw	r3,-24380(gp)
   146e8:	e0bfff17 	ldw	r2,-4(fp)
   146ec:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   146f0:	e0bfff17 	ldw	r2,-4(fp)
   146f4:	d0a83115 	stw	r2,-24380(gp)
   146f8:	e0bffe17 	ldw	r2,-8(fp)
   146fc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   14700:	e0bff817 	ldw	r2,-32(fp)
   14704:	1001703a 	wrctl	status,r2
}
   14708:	0001883a 	nop
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1470c:	e03fff15 	stw	zero,-4(fp)
        }
    }
    return (pevent);
   14710:	e0bfff17 	ldw	r2,-4(fp)
}
   14714:	e037883a 	mov	sp,fp
   14718:	dfc00117 	ldw	ra,4(sp)
   1471c:	df000017 	ldw	fp,0(sp)
   14720:	dec00204 	addi	sp,sp,8
   14724:	f800283a 	ret

00014728 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14728:	defff204 	addi	sp,sp,-56
   1472c:	dfc00d15 	stw	ra,52(sp)
   14730:	df000c15 	stw	fp,48(sp)
   14734:	df000c04 	addi	fp,sp,48
   14738:	e13ff615 	stw	r4,-40(fp)
   1473c:	2805883a 	mov	r2,r5
   14740:	e1bff415 	stw	r6,-48(fp)
   14744:	e0bff505 	stb	r2,-44(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14748:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1474c:	e0bff417 	ldw	r2,-48(fp)
   14750:	1000021e 	bne	r2,zero,1475c <OSQDel+0x34>
        return (pevent);
   14754:	e0bff617 	ldw	r2,-40(fp)
   14758:	00009206 	br	149a4 <OSQDel+0x27c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1475c:	e0bff617 	ldw	r2,-40(fp)
   14760:	1000051e 	bne	r2,zero,14778 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14764:	e0bff417 	ldw	r2,-48(fp)
   14768:	00c00104 	movi	r3,4
   1476c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14770:	e0bff617 	ldw	r2,-40(fp)
   14774:	00008b06 	br	149a4 <OSQDel+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14778:	e0bff617 	ldw	r2,-40(fp)
   1477c:	10800003 	ldbu	r2,0(r2)
   14780:	10803fcc 	andi	r2,r2,255
   14784:	108000a0 	cmpeqi	r2,r2,2
   14788:	1000051e 	bne	r2,zero,147a0 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1478c:	e0bff417 	ldw	r2,-48(fp)
   14790:	00c00044 	movi	r3,1
   14794:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14798:	e0bff617 	ldw	r2,-40(fp)
   1479c:	00008106 	br	149a4 <OSQDel+0x27c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   147a0:	d0a83643 	ldbu	r2,-24359(gp)
   147a4:	10803fcc 	andi	r2,r2,255
   147a8:	10000526 	beq	r2,zero,147c0 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   147ac:	e0bff417 	ldw	r2,-48(fp)
   147b0:	00c003c4 	movi	r3,15
   147b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   147b8:	e0bff617 	ldw	r2,-40(fp)
   147bc:	00007906 	br	149a4 <OSQDel+0x27c>
  NIOS2_READ_STATUS (context);
   147c0:	0005303a 	rdctl	r2,status
   147c4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147c8:	e0fffb17 	ldw	r3,-20(fp)
   147cc:	00bfff84 	movi	r2,-2
   147d0:	1884703a 	and	r2,r3,r2
   147d4:	1001703a 	wrctl	status,r2
  return context;
   147d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   147dc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   147e0:	e0bff617 	ldw	r2,-40(fp)
   147e4:	10800283 	ldbu	r2,10(r2)
   147e8:	10803fcc 	andi	r2,r2,255
   147ec:	10000326 	beq	r2,zero,147fc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   147f0:	00800044 	movi	r2,1
   147f4:	e0bfffc5 	stb	r2,-1(fp)
   147f8:	00000106 	br	14800 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   147fc:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
   14800:	e0bff503 	ldbu	r2,-44(fp)
   14804:	10000326 	beq	r2,zero,14814 <OSQDel+0xec>
   14808:	10800060 	cmpeqi	r2,r2,1
   1480c:	1000321e 	bne	r2,zero,148d8 <OSQDel+0x1b0>
   14810:	00005806 	br	14974 <OSQDel+0x24c>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   14814:	e0bfffc3 	ldbu	r2,-1(fp)
   14818:	10001f1e 	bne	r2,zero,14898 <OSQDel+0x170>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1481c:	e0bff617 	ldw	r2,-40(fp)
   14820:	00c00fc4 	movi	r3,63
   14824:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   14828:	e0bff617 	ldw	r2,-40(fp)
   1482c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   14830:	e0bff617 	ldw	r2,-40(fp)
   14834:	10800117 	ldw	r2,4(r2)
   14838:	e0bffc15 	stw	r2,-16(fp)
                 pq->OSQPtr             = OSQFreeList;
   1483c:	d0e84017 	ldw	r3,-24320(gp)
   14840:	e0bffc17 	ldw	r2,-16(fp)
   14844:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   14848:	e0bffc17 	ldw	r2,-16(fp)
   1484c:	d0a84015 	stw	r2,-24320(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14850:	e0bff617 	ldw	r2,-40(fp)
   14854:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14858:	d0e83117 	ldw	r3,-24380(gp)
   1485c:	e0bff617 	ldw	r2,-40(fp)
   14860:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14864:	e0bff617 	ldw	r2,-40(fp)
   14868:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1486c:	e0bff617 	ldw	r2,-40(fp)
   14870:	d0a83115 	stw	r2,-24380(gp)
   14874:	e0bffd17 	ldw	r2,-12(fp)
   14878:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1487c:	e0bffa17 	ldw	r2,-24(fp)
   14880:	1001703a 	wrctl	status,r2
}
   14884:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   14888:	e0bff417 	ldw	r2,-48(fp)
   1488c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   14890:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   14894:	00004206 	br	149a0 <OSQDel+0x278>
   14898:	e0bffd17 	ldw	r2,-12(fp)
   1489c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   148a0:	e0bff917 	ldw	r2,-28(fp)
   148a4:	1001703a 	wrctl	status,r2
}
   148a8:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
   148ac:	e0bff417 	ldw	r2,-48(fp)
   148b0:	00c01244 	movi	r3,73
   148b4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   148b8:	e0bff617 	ldw	r2,-40(fp)
   148bc:	e0bffe15 	stw	r2,-8(fp)
             break;
   148c0:	00003706 	br	149a0 <OSQDel+0x278>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   148c4:	000f883a 	mov	r7,zero
   148c8:	01800104 	movi	r6,4
   148cc:	000b883a 	mov	r5,zero
   148d0:	e13ff617 	ldw	r4,-40(fp)
   148d4:	00101640 	call	10164 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   148d8:	e0bff617 	ldw	r2,-40(fp)
   148dc:	10800283 	ldbu	r2,10(r2)
   148e0:	10803fcc 	andi	r2,r2,255
   148e4:	103ff71e 	bne	r2,zero,148c4 <OSQDel+0x19c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   148e8:	e0bff617 	ldw	r2,-40(fp)
   148ec:	00c00fc4 	movi	r3,63
   148f0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   148f4:	e0bff617 	ldw	r2,-40(fp)
   148f8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   148fc:	e0bff617 	ldw	r2,-40(fp)
   14900:	10800117 	ldw	r2,4(r2)
   14904:	e0bffc15 	stw	r2,-16(fp)
             pq->OSQPtr             = OSQFreeList;
   14908:	d0e84017 	ldw	r3,-24320(gp)
   1490c:	e0bffc17 	ldw	r2,-16(fp)
   14910:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   14914:	e0bffc17 	ldw	r2,-16(fp)
   14918:	d0a84015 	stw	r2,-24320(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1491c:	e0bff617 	ldw	r2,-40(fp)
   14920:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   14924:	d0e83117 	ldw	r3,-24380(gp)
   14928:	e0bff617 	ldw	r2,-40(fp)
   1492c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   14930:	e0bff617 	ldw	r2,-40(fp)
   14934:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   14938:	e0bff617 	ldw	r2,-40(fp)
   1493c:	d0a83115 	stw	r2,-24380(gp)
   14940:	e0bffd17 	ldw	r2,-12(fp)
   14944:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   14948:	e0bff817 	ldw	r2,-32(fp)
   1494c:	1001703a 	wrctl	status,r2
}
   14950:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   14954:	e0bfffc3 	ldbu	r2,-1(fp)
   14958:	10800058 	cmpnei	r2,r2,1
   1495c:	1000011e 	bne	r2,zero,14964 <OSQDel+0x23c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14960:	0010b980 	call	10b98 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14964:	e0bff417 	ldw	r2,-48(fp)
   14968:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1496c:	e03ffe15 	stw	zero,-8(fp)
             break;
   14970:	00000b06 	br	149a0 <OSQDel+0x278>
   14974:	e0bffd17 	ldw	r2,-12(fp)
   14978:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   1497c:	e0bff717 	ldw	r2,-36(fp)
   14980:	1001703a 	wrctl	status,r2
}
   14984:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   14988:	e0bff417 	ldw	r2,-48(fp)
   1498c:	00c001c4 	movi	r3,7
   14990:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   14994:	e0bff617 	ldw	r2,-40(fp)
   14998:	e0bffe15 	stw	r2,-8(fp)
             break;
   1499c:	0001883a 	nop
    }
    return (pevent_return);
   149a0:	e0bffe17 	ldw	r2,-8(fp)
}
   149a4:	e037883a 	mov	sp,fp
   149a8:	dfc00117 	ldw	ra,4(sp)
   149ac:	df000017 	ldw	fp,0(sp)
   149b0:	dec00204 	addi	sp,sp,8
   149b4:	f800283a 	ret

000149b8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   149b8:	defffa04 	addi	sp,sp,-24
   149bc:	df000515 	stw	fp,20(sp)
   149c0:	df000504 	addi	fp,sp,20
   149c4:	e13ffb15 	stw	r4,-20(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   149c8:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   149cc:	e0bffb17 	ldw	r2,-20(fp)
   149d0:	1000021e 	bne	r2,zero,149dc <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   149d4:	00800104 	movi	r2,4
   149d8:	00002206 	br	14a64 <OSQFlush+0xac>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   149dc:	e0bffb17 	ldw	r2,-20(fp)
   149e0:	10800003 	ldbu	r2,0(r2)
   149e4:	10803fcc 	andi	r2,r2,255
   149e8:	108000a0 	cmpeqi	r2,r2,2
   149ec:	1000021e 	bne	r2,zero,149f8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   149f0:	00800044 	movi	r2,1
   149f4:	00001b06 	br	14a64 <OSQFlush+0xac>
  NIOS2_READ_STATUS (context);
   149f8:	0005303a 	rdctl	r2,status
   149fc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a00:	e0fffc17 	ldw	r3,-16(fp)
   14a04:	00bfff84 	movi	r2,-2
   14a08:	1884703a 	and	r2,r3,r2
   14a0c:	1001703a 	wrctl	status,r2
  return context;
   14a10:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a14:	e0bfff15 	stw	r2,-4(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   14a18:	e0bffb17 	ldw	r2,-20(fp)
   14a1c:	10800117 	ldw	r2,4(r2)
   14a20:	e0bffe15 	stw	r2,-8(fp)
    pq->OSQIn      = pq->OSQStart;
   14a24:	e0bffe17 	ldw	r2,-8(fp)
   14a28:	10c00117 	ldw	r3,4(r2)
   14a2c:	e0bffe17 	ldw	r2,-8(fp)
   14a30:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   14a34:	e0bffe17 	ldw	r2,-8(fp)
   14a38:	10c00117 	ldw	r3,4(r2)
   14a3c:	e0bffe17 	ldw	r2,-8(fp)
   14a40:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   14a44:	e0bffe17 	ldw	r2,-8(fp)
   14a48:	1000058d 	sth	zero,22(r2)
   14a4c:	e0bfff17 	ldw	r2,-4(fp)
   14a50:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   14a54:	e0bffd17 	ldw	r2,-12(fp)
   14a58:	1001703a 	wrctl	status,r2
}
   14a5c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14a60:	0005883a 	mov	r2,zero
}
   14a64:	e037883a 	mov	sp,fp
   14a68:	df000017 	ldw	fp,0(sp)
   14a6c:	dec00104 	addi	sp,sp,4
   14a70:	f800283a 	ret

00014a74 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   14a74:	defff304 	addi	sp,sp,-52
   14a78:	dfc00c15 	stw	ra,48(sp)
   14a7c:	df000b15 	stw	fp,44(sp)
   14a80:	df000b04 	addi	fp,sp,44
   14a84:	e13ff715 	stw	r4,-36(fp)
   14a88:	2805883a 	mov	r2,r5
   14a8c:	e1bff515 	stw	r6,-44(fp)
   14a90:	e0bff60d 	sth	r2,-40(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a94:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14a98:	e0bff517 	ldw	r2,-44(fp)
   14a9c:	1000021e 	bne	r2,zero,14aa8 <OSQPend+0x34>
        return ((void *)0);
   14aa0:	0005883a 	mov	r2,zero
   14aa4:	00009406 	br	14cf8 <OSQPend+0x284>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14aa8:	e0bff717 	ldw	r2,-36(fp)
   14aac:	1000051e 	bne	r2,zero,14ac4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14ab0:	e0bff517 	ldw	r2,-44(fp)
   14ab4:	00c00104 	movi	r3,4
   14ab8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14abc:	0005883a 	mov	r2,zero
   14ac0:	00008d06 	br	14cf8 <OSQPend+0x284>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14ac4:	e0bff717 	ldw	r2,-36(fp)
   14ac8:	10800003 	ldbu	r2,0(r2)
   14acc:	10803fcc 	andi	r2,r2,255
   14ad0:	108000a0 	cmpeqi	r2,r2,2
   14ad4:	1000051e 	bne	r2,zero,14aec <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14ad8:	e0bff517 	ldw	r2,-44(fp)
   14adc:	00c00044 	movi	r3,1
   14ae0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14ae4:	0005883a 	mov	r2,zero
   14ae8:	00008306 	br	14cf8 <OSQPend+0x284>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14aec:	d0a83643 	ldbu	r2,-24359(gp)
   14af0:	10803fcc 	andi	r2,r2,255
   14af4:	10000526 	beq	r2,zero,14b0c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   14af8:	e0bff517 	ldw	r2,-44(fp)
   14afc:	00c00084 	movi	r3,2
   14b00:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14b04:	0005883a 	mov	r2,zero
   14b08:	00007b06 	br	14cf8 <OSQPend+0x284>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   14b0c:	d0a83683 	ldbu	r2,-24358(gp)
   14b10:	10803fcc 	andi	r2,r2,255
   14b14:	10000526 	beq	r2,zero,14b2c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   14b18:	e0bff517 	ldw	r2,-44(fp)
   14b1c:	00c00344 	movi	r3,13
   14b20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14b24:	0005883a 	mov	r2,zero
   14b28:	00007306 	br	14cf8 <OSQPend+0x284>
  NIOS2_READ_STATUS (context);
   14b2c:	0005303a 	rdctl	r2,status
   14b30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b34:	e0fffc17 	ldw	r3,-16(fp)
   14b38:	00bfff84 	movi	r2,-2
   14b3c:	1884703a 	and	r2,r3,r2
   14b40:	1001703a 	wrctl	status,r2
  return context;
   14b44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14b48:	e0bffe15 	stw	r2,-8(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14b4c:	e0bff717 	ldw	r2,-36(fp)
   14b50:	10800117 	ldw	r2,4(r2)
   14b54:	e0bffd15 	stw	r2,-12(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14b58:	e0bffd17 	ldw	r2,-12(fp)
   14b5c:	1080058b 	ldhu	r2,22(r2)
   14b60:	10bfffcc 	andi	r2,r2,65535
   14b64:	10001f26 	beq	r2,zero,14be4 <OSQPend+0x170>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14b68:	e0bffd17 	ldw	r2,-12(fp)
   14b6c:	10800417 	ldw	r2,16(r2)
   14b70:	11000104 	addi	r4,r2,4
   14b74:	e0fffd17 	ldw	r3,-12(fp)
   14b78:	19000415 	stw	r4,16(r3)
   14b7c:	10800017 	ldw	r2,0(r2)
   14b80:	e0bfff15 	stw	r2,-4(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14b84:	e0bffd17 	ldw	r2,-12(fp)
   14b88:	1080058b 	ldhu	r2,22(r2)
   14b8c:	10bfffc4 	addi	r2,r2,-1
   14b90:	1007883a 	mov	r3,r2
   14b94:	e0bffd17 	ldw	r2,-12(fp)
   14b98:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14b9c:	e0bffd17 	ldw	r2,-12(fp)
   14ba0:	10c00417 	ldw	r3,16(r2)
   14ba4:	e0bffd17 	ldw	r2,-12(fp)
   14ba8:	10800217 	ldw	r2,8(r2)
   14bac:	1880041e 	bne	r3,r2,14bc0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   14bb0:	e0bffd17 	ldw	r2,-12(fp)
   14bb4:	10c00117 	ldw	r3,4(r2)
   14bb8:	e0bffd17 	ldw	r2,-12(fp)
   14bbc:	10c00415 	stw	r3,16(r2)
   14bc0:	e0bffe17 	ldw	r2,-8(fp)
   14bc4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14bc8:	e0bffb17 	ldw	r2,-20(fp)
   14bcc:	1001703a 	wrctl	status,r2
}
   14bd0:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   14bd4:	e0bff517 	ldw	r2,-44(fp)
   14bd8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   14bdc:	e0bfff17 	ldw	r2,-4(fp)
   14be0:	00004506 	br	14cf8 <OSQPend+0x284>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   14be4:	d0a83a17 	ldw	r2,-24344(gp)
   14be8:	10c00c03 	ldbu	r3,48(r2)
   14bec:	d0a83a17 	ldw	r2,-24344(gp)
   14bf0:	18c00114 	ori	r3,r3,4
   14bf4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   14bf8:	d0a83a17 	ldw	r2,-24344(gp)
   14bfc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   14c00:	d0a83a17 	ldw	r2,-24344(gp)
   14c04:	e0fff60b 	ldhu	r3,-40(fp)
   14c08:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   14c0c:	e13ff717 	ldw	r4,-36(fp)
   14c10:	00102ec0 	call	102ec <OS_EventTaskWait>
   14c14:	e0bffe17 	ldw	r2,-8(fp)
   14c18:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   14c1c:	e0bff917 	ldw	r2,-28(fp)
   14c20:	1001703a 	wrctl	status,r2
}
   14c24:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   14c28:	0010b980 	call	10b98 <OS_Sched>
  NIOS2_READ_STATUS (context);
   14c2c:	0005303a 	rdctl	r2,status
   14c30:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c34:	e0fffa17 	ldw	r3,-24(fp)
   14c38:	00bfff84 	movi	r2,-2
   14c3c:	1884703a 	and	r2,r3,r2
   14c40:	1001703a 	wrctl	status,r2
  return context;
   14c44:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
   14c48:	e0bffe15 	stw	r2,-8(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   14c4c:	d0a83a17 	ldw	r2,-24344(gp)
   14c50:	10800c43 	ldbu	r2,49(r2)
   14c54:	10803fcc 	andi	r2,r2,255
   14c58:	10000326 	beq	r2,zero,14c68 <OSQPend+0x1f4>
   14c5c:	108000a0 	cmpeqi	r2,r2,2
   14c60:	1000071e 	bne	r2,zero,14c80 <OSQPend+0x20c>
   14c64:	00000b06 	br	14c94 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   14c68:	d0a83a17 	ldw	r2,-24344(gp)
   14c6c:	10800917 	ldw	r2,36(r2)
   14c70:	e0bfff15 	stw	r2,-4(fp)
            *perr =  OS_ERR_NONE;
   14c74:	e0bff517 	ldw	r2,-44(fp)
   14c78:	10000005 	stb	zero,0(r2)
             break;
   14c7c:	00000e06 	br	14cb8 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   14c80:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14c84:	e0bff517 	ldw	r2,-44(fp)
   14c88:	00c00384 	movi	r3,14
   14c8c:	10c00005 	stb	r3,0(r2)
             break;
   14c90:	00000906 	br	14cb8 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   14c94:	d0a83a17 	ldw	r2,-24344(gp)
   14c98:	e17ff717 	ldw	r5,-36(fp)
   14c9c:	1009883a 	mov	r4,r2
   14ca0:	001053c0 	call	1053c <OS_EventTaskRemove>
             pmsg = (void *)0;
   14ca4:	e03fff15 	stw	zero,-4(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   14ca8:	e0bff517 	ldw	r2,-44(fp)
   14cac:	00c00284 	movi	r3,10
   14cb0:	10c00005 	stb	r3,0(r2)
             break;
   14cb4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   14cb8:	d0a83a17 	ldw	r2,-24344(gp)
   14cbc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   14cc0:	d0a83a17 	ldw	r2,-24344(gp)
   14cc4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   14cc8:	d0a83a17 	ldw	r2,-24344(gp)
   14ccc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14cd0:	d0a83a17 	ldw	r2,-24344(gp)
   14cd4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   14cd8:	d0a83a17 	ldw	r2,-24344(gp)
   14cdc:	10000915 	stw	zero,36(r2)
   14ce0:	e0bffe17 	ldw	r2,-8(fp)
   14ce4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   14ce8:	e0bff817 	ldw	r2,-32(fp)
   14cec:	1001703a 	wrctl	status,r2
}
   14cf0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   14cf4:	e0bfff17 	ldw	r2,-4(fp)
}
   14cf8:	e037883a 	mov	sp,fp
   14cfc:	dfc00117 	ldw	ra,4(sp)
   14d00:	df000017 	ldw	fp,0(sp)
   14d04:	dec00204 	addi	sp,sp,8
   14d08:	f800283a 	ret

00014d0c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14d0c:	defff604 	addi	sp,sp,-40
   14d10:	dfc00915 	stw	ra,36(sp)
   14d14:	df000815 	stw	fp,32(sp)
   14d18:	df000804 	addi	fp,sp,32
   14d1c:	e13ffa15 	stw	r4,-24(fp)
   14d20:	2805883a 	mov	r2,r5
   14d24:	e1bff815 	stw	r6,-32(fp)
   14d28:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14d2c:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14d30:	e0bff817 	ldw	r2,-32(fp)
   14d34:	1000021e 	bne	r2,zero,14d40 <OSQPendAbort+0x34>
        return (0);
   14d38:	0005883a 	mov	r2,zero
   14d3c:	00004b06 	br	14e6c <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14d40:	e0bffa17 	ldw	r2,-24(fp)
   14d44:	1000051e 	bne	r2,zero,14d5c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14d48:	e0bff817 	ldw	r2,-32(fp)
   14d4c:	00c00104 	movi	r3,4
   14d50:	10c00005 	stb	r3,0(r2)
        return (0);
   14d54:	0005883a 	mov	r2,zero
   14d58:	00004406 	br	14e6c <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14d5c:	e0bffa17 	ldw	r2,-24(fp)
   14d60:	10800003 	ldbu	r2,0(r2)
   14d64:	10803fcc 	andi	r2,r2,255
   14d68:	108000a0 	cmpeqi	r2,r2,2
   14d6c:	1000051e 	bne	r2,zero,14d84 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14d70:	e0bff817 	ldw	r2,-32(fp)
   14d74:	00c00044 	movi	r3,1
   14d78:	10c00005 	stb	r3,0(r2)
        return (0);
   14d7c:	0005883a 	mov	r2,zero
   14d80:	00003a06 	br	14e6c <OSQPendAbort+0x160>
  NIOS2_READ_STATUS (context);
   14d84:	0005303a 	rdctl	r2,status
   14d88:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d8c:	e0fffd17 	ldw	r3,-12(fp)
   14d90:	00bfff84 	movi	r2,-2
   14d94:	1884703a 	and	r2,r3,r2
   14d98:	1001703a 	wrctl	status,r2
  return context;
   14d9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14da0:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   14da4:	e0bffa17 	ldw	r2,-24(fp)
   14da8:	10800283 	ldbu	r2,10(r2)
   14dac:	10803fcc 	andi	r2,r2,255
   14db0:	10002626 	beq	r2,zero,14e4c <OSQPendAbort+0x140>
        nbr_tasks = 0;
   14db4:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
   14db8:	e0bff903 	ldbu	r2,-28(fp)
   14dbc:	10800058 	cmpnei	r2,r2,1
   14dc0:	10000e1e 	bne	r2,zero,14dfc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14dc4:	00000806 	br	14de8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14dc8:	01c00084 	movi	r7,2
   14dcc:	01800104 	movi	r6,4
   14dd0:	000b883a 	mov	r5,zero
   14dd4:	e13ffa17 	ldw	r4,-24(fp)
   14dd8:	00101640 	call	10164 <OS_EventTaskRdy>
                     nbr_tasks++;
   14ddc:	e0bfffc3 	ldbu	r2,-1(fp)
   14de0:	10800044 	addi	r2,r2,1
   14de4:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14de8:	e0bffa17 	ldw	r2,-24(fp)
   14dec:	10800283 	ldbu	r2,10(r2)
   14df0:	10803fcc 	andi	r2,r2,255
   14df4:	103ff41e 	bne	r2,zero,14dc8 <OSQPendAbort+0xbc>
                 }
                 break;
   14df8:	00000906 	br	14e20 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14dfc:	01c00084 	movi	r7,2
   14e00:	01800104 	movi	r6,4
   14e04:	000b883a 	mov	r5,zero
   14e08:	e13ffa17 	ldw	r4,-24(fp)
   14e0c:	00101640 	call	10164 <OS_EventTaskRdy>
                 nbr_tasks++;
   14e10:	e0bfffc3 	ldbu	r2,-1(fp)
   14e14:	10800044 	addi	r2,r2,1
   14e18:	e0bfffc5 	stb	r2,-1(fp)
                 break;
   14e1c:	0001883a 	nop
   14e20:	e0bffe17 	ldw	r2,-8(fp)
   14e24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14e28:	e0bffc17 	ldw	r2,-16(fp)
   14e2c:	1001703a 	wrctl	status,r2
}
   14e30:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   14e34:	0010b980 	call	10b98 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   14e38:	e0bff817 	ldw	r2,-32(fp)
   14e3c:	00c00384 	movi	r3,14
   14e40:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   14e44:	e0bfffc3 	ldbu	r2,-1(fp)
   14e48:	00000806 	br	14e6c <OSQPendAbort+0x160>
   14e4c:	e0bffe17 	ldw	r2,-8(fp)
   14e50:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14e54:	e0bffb17 	ldw	r2,-20(fp)
   14e58:	1001703a 	wrctl	status,r2
}
   14e5c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14e60:	e0bff817 	ldw	r2,-32(fp)
   14e64:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   14e68:	0005883a 	mov	r2,zero
}
   14e6c:	e037883a 	mov	sp,fp
   14e70:	dfc00117 	ldw	ra,4(sp)
   14e74:	df000017 	ldw	fp,0(sp)
   14e78:	dec00204 	addi	sp,sp,8
   14e7c:	f800283a 	ret

00014e80 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   14e80:	defff604 	addi	sp,sp,-40
   14e84:	dfc00915 	stw	ra,36(sp)
   14e88:	df000815 	stw	fp,32(sp)
   14e8c:	df000804 	addi	fp,sp,32
   14e90:	e13ff915 	stw	r4,-28(fp)
   14e94:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14e98:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14e9c:	e0bff917 	ldw	r2,-28(fp)
   14ea0:	1000021e 	bne	r2,zero,14eac <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14ea4:	00800104 	movi	r2,4
   14ea8:	00004d06 	br	14fe0 <OSQPost+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14eac:	e0bff917 	ldw	r2,-28(fp)
   14eb0:	10800003 	ldbu	r2,0(r2)
   14eb4:	10803fcc 	andi	r2,r2,255
   14eb8:	108000a0 	cmpeqi	r2,r2,2
   14ebc:	1000021e 	bne	r2,zero,14ec8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   14ec0:	00800044 	movi	r2,1
   14ec4:	00004606 	br	14fe0 <OSQPost+0x160>
  NIOS2_READ_STATUS (context);
   14ec8:	0005303a 	rdctl	r2,status
   14ecc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ed0:	e0fffd17 	ldw	r3,-12(fp)
   14ed4:	00bfff84 	movi	r2,-2
   14ed8:	1884703a 	and	r2,r3,r2
   14edc:	1001703a 	wrctl	status,r2
  return context;
   14ee0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14ee4:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   14ee8:	e0bff917 	ldw	r2,-28(fp)
   14eec:	10800283 	ldbu	r2,10(r2)
   14ef0:	10803fcc 	andi	r2,r2,255
   14ef4:	10000d26 	beq	r2,zero,14f2c <OSQPost+0xac>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14ef8:	000f883a 	mov	r7,zero
   14efc:	01800104 	movi	r6,4
   14f00:	e17ff817 	ldw	r5,-32(fp)
   14f04:	e13ff917 	ldw	r4,-28(fp)
   14f08:	00101640 	call	10164 <OS_EventTaskRdy>
   14f0c:	e0bfff17 	ldw	r2,-4(fp)
   14f10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14f14:	e0bffc17 	ldw	r2,-16(fp)
   14f18:	1001703a 	wrctl	status,r2
}
   14f1c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   14f20:	0010b980 	call	10b98 <OS_Sched>
        return (OS_ERR_NONE);
   14f24:	0005883a 	mov	r2,zero
   14f28:	00002d06 	br	14fe0 <OSQPost+0x160>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   14f2c:	e0bff917 	ldw	r2,-28(fp)
   14f30:	10800117 	ldw	r2,4(r2)
   14f34:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   14f38:	e0bffe17 	ldw	r2,-8(fp)
   14f3c:	10c0058b 	ldhu	r3,22(r2)
   14f40:	e0bffe17 	ldw	r2,-8(fp)
   14f44:	1080050b 	ldhu	r2,20(r2)
   14f48:	18ffffcc 	andi	r3,r3,65535
   14f4c:	10bfffcc 	andi	r2,r2,65535
   14f50:	18800736 	bltu	r3,r2,14f70 <OSQPost+0xf0>
   14f54:	e0bfff17 	ldw	r2,-4(fp)
   14f58:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14f5c:	e0bffb17 	ldw	r2,-20(fp)
   14f60:	1001703a 	wrctl	status,r2
}
   14f64:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14f68:	00800784 	movi	r2,30
   14f6c:	00001c06 	br	14fe0 <OSQPost+0x160>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   14f70:	e0bffe17 	ldw	r2,-8(fp)
   14f74:	10800317 	ldw	r2,12(r2)
   14f78:	11000104 	addi	r4,r2,4
   14f7c:	e0fffe17 	ldw	r3,-8(fp)
   14f80:	19000315 	stw	r4,12(r3)
   14f84:	e0fff817 	ldw	r3,-32(fp)
   14f88:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   14f8c:	e0bffe17 	ldw	r2,-8(fp)
   14f90:	1080058b 	ldhu	r2,22(r2)
   14f94:	10800044 	addi	r2,r2,1
   14f98:	1007883a 	mov	r3,r2
   14f9c:	e0bffe17 	ldw	r2,-8(fp)
   14fa0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   14fa4:	e0bffe17 	ldw	r2,-8(fp)
   14fa8:	10c00317 	ldw	r3,12(r2)
   14fac:	e0bffe17 	ldw	r2,-8(fp)
   14fb0:	10800217 	ldw	r2,8(r2)
   14fb4:	1880041e 	bne	r3,r2,14fc8 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
   14fb8:	e0bffe17 	ldw	r2,-8(fp)
   14fbc:	10c00117 	ldw	r3,4(r2)
   14fc0:	e0bffe17 	ldw	r2,-8(fp)
   14fc4:	10c00315 	stw	r3,12(r2)
   14fc8:	e0bfff17 	ldw	r2,-4(fp)
   14fcc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   14fd0:	e0bffa17 	ldw	r2,-24(fp)
   14fd4:	1001703a 	wrctl	status,r2
}
   14fd8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14fdc:	0005883a 	mov	r2,zero
}
   14fe0:	e037883a 	mov	sp,fp
   14fe4:	dfc00117 	ldw	ra,4(sp)
   14fe8:	df000017 	ldw	fp,0(sp)
   14fec:	dec00204 	addi	sp,sp,8
   14ff0:	f800283a 	ret

00014ff4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   14ff4:	defff604 	addi	sp,sp,-40
   14ff8:	dfc00915 	stw	ra,36(sp)
   14ffc:	df000815 	stw	fp,32(sp)
   15000:	df000804 	addi	fp,sp,32
   15004:	e13ff915 	stw	r4,-28(fp)
   15008:	e17ff815 	stw	r5,-32(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1500c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15010:	e0bff917 	ldw	r2,-28(fp)
   15014:	1000021e 	bne	r2,zero,15020 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15018:	00800104 	movi	r2,4
   1501c:	00004f06 	br	1515c <OSQPostFront+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15020:	e0bff917 	ldw	r2,-28(fp)
   15024:	10800003 	ldbu	r2,0(r2)
   15028:	10803fcc 	andi	r2,r2,255
   1502c:	108000a0 	cmpeqi	r2,r2,2
   15030:	1000021e 	bne	r2,zero,1503c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   15034:	00800044 	movi	r2,1
   15038:	00004806 	br	1515c <OSQPostFront+0x168>
  NIOS2_READ_STATUS (context);
   1503c:	0005303a 	rdctl	r2,status
   15040:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15044:	e0fffd17 	ldw	r3,-12(fp)
   15048:	00bfff84 	movi	r2,-2
   1504c:	1884703a 	and	r2,r3,r2
   15050:	1001703a 	wrctl	status,r2
  return context;
   15054:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15058:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1505c:	e0bff917 	ldw	r2,-28(fp)
   15060:	10800283 	ldbu	r2,10(r2)
   15064:	10803fcc 	andi	r2,r2,255
   15068:	10000d26 	beq	r2,zero,150a0 <OSQPostFront+0xac>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1506c:	000f883a 	mov	r7,zero
   15070:	01800104 	movi	r6,4
   15074:	e17ff817 	ldw	r5,-32(fp)
   15078:	e13ff917 	ldw	r4,-28(fp)
   1507c:	00101640 	call	10164 <OS_EventTaskRdy>
   15080:	e0bfff17 	ldw	r2,-4(fp)
   15084:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15088:	e0bffc17 	ldw	r2,-16(fp)
   1508c:	1001703a 	wrctl	status,r2
}
   15090:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   15094:	0010b980 	call	10b98 <OS_Sched>
        return (OS_ERR_NONE);
   15098:	0005883a 	mov	r2,zero
   1509c:	00002f06 	br	1515c <OSQPostFront+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   150a0:	e0bff917 	ldw	r2,-28(fp)
   150a4:	10800117 	ldw	r2,4(r2)
   150a8:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   150ac:	e0bffe17 	ldw	r2,-8(fp)
   150b0:	10c0058b 	ldhu	r3,22(r2)
   150b4:	e0bffe17 	ldw	r2,-8(fp)
   150b8:	1080050b 	ldhu	r2,20(r2)
   150bc:	18ffffcc 	andi	r3,r3,65535
   150c0:	10bfffcc 	andi	r2,r2,65535
   150c4:	18800736 	bltu	r3,r2,150e4 <OSQPostFront+0xf0>
   150c8:	e0bfff17 	ldw	r2,-4(fp)
   150cc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   150d0:	e0bffb17 	ldw	r2,-20(fp)
   150d4:	1001703a 	wrctl	status,r2
}
   150d8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   150dc:	00800784 	movi	r2,30
   150e0:	00001e06 	br	1515c <OSQPostFront+0x168>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   150e4:	e0bffe17 	ldw	r2,-8(fp)
   150e8:	10c00417 	ldw	r3,16(r2)
   150ec:	e0bffe17 	ldw	r2,-8(fp)
   150f0:	10800117 	ldw	r2,4(r2)
   150f4:	1880041e 	bne	r3,r2,15108 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
   150f8:	e0bffe17 	ldw	r2,-8(fp)
   150fc:	10c00217 	ldw	r3,8(r2)
   15100:	e0bffe17 	ldw	r2,-8(fp)
   15104:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   15108:	e0bffe17 	ldw	r2,-8(fp)
   1510c:	10800417 	ldw	r2,16(r2)
   15110:	10ffff04 	addi	r3,r2,-4
   15114:	e0bffe17 	ldw	r2,-8(fp)
   15118:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1511c:	e0bffe17 	ldw	r2,-8(fp)
   15120:	10800417 	ldw	r2,16(r2)
   15124:	e0fff817 	ldw	r3,-32(fp)
   15128:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1512c:	e0bffe17 	ldw	r2,-8(fp)
   15130:	1080058b 	ldhu	r2,22(r2)
   15134:	10800044 	addi	r2,r2,1
   15138:	1007883a 	mov	r3,r2
   1513c:	e0bffe17 	ldw	r2,-8(fp)
   15140:	10c0058d 	sth	r3,22(r2)
   15144:	e0bfff17 	ldw	r2,-4(fp)
   15148:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1514c:	e0bffa17 	ldw	r2,-24(fp)
   15150:	1001703a 	wrctl	status,r2
}
   15154:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15158:	0005883a 	mov	r2,zero
}
   1515c:	e037883a 	mov	sp,fp
   15160:	dfc00117 	ldw	ra,4(sp)
   15164:	df000017 	ldw	fp,0(sp)
   15168:	dec00204 	addi	sp,sp,8
   1516c:	f800283a 	ret

00015170 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   15170:	defff504 	addi	sp,sp,-44
   15174:	dfc00a15 	stw	ra,40(sp)
   15178:	df000915 	stw	fp,36(sp)
   1517c:	df000904 	addi	fp,sp,36
   15180:	e13ff915 	stw	r4,-28(fp)
   15184:	e17ff815 	stw	r5,-32(fp)
   15188:	3005883a 	mov	r2,r6
   1518c:	e0bff705 	stb	r2,-36(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15190:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15194:	e0bff917 	ldw	r2,-28(fp)
   15198:	1000021e 	bne	r2,zero,151a4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1519c:	00800104 	movi	r2,4
   151a0:	00007406 	br	15374 <OSQPostOpt+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   151a4:	e0bff917 	ldw	r2,-28(fp)
   151a8:	10800003 	ldbu	r2,0(r2)
   151ac:	10803fcc 	andi	r2,r2,255
   151b0:	108000a0 	cmpeqi	r2,r2,2
   151b4:	1000021e 	bne	r2,zero,151c0 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   151b8:	00800044 	movi	r2,1
   151bc:	00006d06 	br	15374 <OSQPostOpt+0x204>
  NIOS2_READ_STATUS (context);
   151c0:	0005303a 	rdctl	r2,status
   151c4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151c8:	e0fffd17 	ldw	r3,-12(fp)
   151cc:	00bfff84 	movi	r2,-2
   151d0:	1884703a 	and	r2,r3,r2
   151d4:	1001703a 	wrctl	status,r2
  return context;
   151d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   151dc:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   151e0:	e0bff917 	ldw	r2,-28(fp)
   151e4:	10800283 	ldbu	r2,10(r2)
   151e8:	10803fcc 	andi	r2,r2,255
   151ec:	10001e26 	beq	r2,zero,15268 <OSQPostOpt+0xf8>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   151f0:	e0bff703 	ldbu	r2,-36(fp)
   151f4:	1080004c 	andi	r2,r2,1
   151f8:	10000b26 	beq	r2,zero,15228 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   151fc:	00000506 	br	15214 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15200:	000f883a 	mov	r7,zero
   15204:	01800104 	movi	r6,4
   15208:	e17ff817 	ldw	r5,-32(fp)
   1520c:	e13ff917 	ldw	r4,-28(fp)
   15210:	00101640 	call	10164 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15214:	e0bff917 	ldw	r2,-28(fp)
   15218:	10800283 	ldbu	r2,10(r2)
   1521c:	10803fcc 	andi	r2,r2,255
   15220:	103ff71e 	bne	r2,zero,15200 <OSQPostOpt+0x90>
   15224:	00000506 	br	1523c <OSQPostOpt+0xcc>
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15228:	000f883a 	mov	r7,zero
   1522c:	01800104 	movi	r6,4
   15230:	e17ff817 	ldw	r5,-32(fp)
   15234:	e13ff917 	ldw	r4,-28(fp)
   15238:	00101640 	call	10164 <OS_EventTaskRdy>
   1523c:	e0bfff17 	ldw	r2,-4(fp)
   15240:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15244:	e0bffc17 	ldw	r2,-16(fp)
   15248:	1001703a 	wrctl	status,r2
}
   1524c:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15250:	e0bff703 	ldbu	r2,-36(fp)
   15254:	1080010c 	andi	r2,r2,4
   15258:	1000011e 	bne	r2,zero,15260 <OSQPostOpt+0xf0>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1525c:	0010b980 	call	10b98 <OS_Sched>
        }
        return (OS_ERR_NONE);
   15260:	0005883a 	mov	r2,zero
   15264:	00004306 	br	15374 <OSQPostOpt+0x204>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15268:	e0bff917 	ldw	r2,-28(fp)
   1526c:	10800117 	ldw	r2,4(r2)
   15270:	e0bffe15 	stw	r2,-8(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15274:	e0bffe17 	ldw	r2,-8(fp)
   15278:	10c0058b 	ldhu	r3,22(r2)
   1527c:	e0bffe17 	ldw	r2,-8(fp)
   15280:	1080050b 	ldhu	r2,20(r2)
   15284:	18ffffcc 	andi	r3,r3,65535
   15288:	10bfffcc 	andi	r2,r2,65535
   1528c:	18800736 	bltu	r3,r2,152ac <OSQPostOpt+0x13c>
   15290:	e0bfff17 	ldw	r2,-4(fp)
   15294:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   15298:	e0bffb17 	ldw	r2,-20(fp)
   1529c:	1001703a 	wrctl	status,r2
}
   152a0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   152a4:	00800784 	movi	r2,30
   152a8:	00003206 	br	15374 <OSQPostOpt+0x204>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   152ac:	e0bff703 	ldbu	r2,-36(fp)
   152b0:	1080008c 	andi	r2,r2,2
   152b4:	10001326 	beq	r2,zero,15304 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   152b8:	e0bffe17 	ldw	r2,-8(fp)
   152bc:	10c00417 	ldw	r3,16(r2)
   152c0:	e0bffe17 	ldw	r2,-8(fp)
   152c4:	10800117 	ldw	r2,4(r2)
   152c8:	1880041e 	bne	r3,r2,152dc <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   152cc:	e0bffe17 	ldw	r2,-8(fp)
   152d0:	10c00217 	ldw	r3,8(r2)
   152d4:	e0bffe17 	ldw	r2,-8(fp)
   152d8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   152dc:	e0bffe17 	ldw	r2,-8(fp)
   152e0:	10800417 	ldw	r2,16(r2)
   152e4:	10ffff04 	addi	r3,r2,-4
   152e8:	e0bffe17 	ldw	r2,-8(fp)
   152ec:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   152f0:	e0bffe17 	ldw	r2,-8(fp)
   152f4:	10800417 	ldw	r2,16(r2)
   152f8:	e0fff817 	ldw	r3,-32(fp)
   152fc:	10c00015 	stw	r3,0(r2)
   15300:	00001006 	br	15344 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   15304:	e0bffe17 	ldw	r2,-8(fp)
   15308:	10800317 	ldw	r2,12(r2)
   1530c:	11000104 	addi	r4,r2,4
   15310:	e0fffe17 	ldw	r3,-8(fp)
   15314:	19000315 	stw	r4,12(r3)
   15318:	e0fff817 	ldw	r3,-32(fp)
   1531c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   15320:	e0bffe17 	ldw	r2,-8(fp)
   15324:	10c00317 	ldw	r3,12(r2)
   15328:	e0bffe17 	ldw	r2,-8(fp)
   1532c:	10800217 	ldw	r2,8(r2)
   15330:	1880041e 	bne	r3,r2,15344 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
   15334:	e0bffe17 	ldw	r2,-8(fp)
   15338:	10c00117 	ldw	r3,4(r2)
   1533c:	e0bffe17 	ldw	r2,-8(fp)
   15340:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15344:	e0bffe17 	ldw	r2,-8(fp)
   15348:	1080058b 	ldhu	r2,22(r2)
   1534c:	10800044 	addi	r2,r2,1
   15350:	1007883a 	mov	r3,r2
   15354:	e0bffe17 	ldw	r2,-8(fp)
   15358:	10c0058d 	sth	r3,22(r2)
   1535c:	e0bfff17 	ldw	r2,-4(fp)
   15360:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15364:	e0bffa17 	ldw	r2,-24(fp)
   15368:	1001703a 	wrctl	status,r2
}
   1536c:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15370:	0005883a 	mov	r2,zero
}
   15374:	e037883a 	mov	sp,fp
   15378:	dfc00117 	ldw	ra,4(sp)
   1537c:	df000017 	ldw	fp,0(sp)
   15380:	dec00204 	addi	sp,sp,8
   15384:	f800283a 	ret

00015388 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   15388:	defff604 	addi	sp,sp,-40
   1538c:	df000915 	stw	fp,36(sp)
   15390:	df000904 	addi	fp,sp,36
   15394:	e13ff815 	stw	r4,-32(fp)
   15398:	e17ff715 	stw	r5,-36(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1539c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   153a0:	e0bff817 	ldw	r2,-32(fp)
   153a4:	1000021e 	bne	r2,zero,153b0 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   153a8:	00800104 	movi	r2,4
   153ac:	00004a06 	br	154d8 <OSQQuery+0x150>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   153b0:	e0bff717 	ldw	r2,-36(fp)
   153b4:	1000021e 	bne	r2,zero,153c0 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   153b8:	00800244 	movi	r2,9
   153bc:	00004606 	br	154d8 <OSQQuery+0x150>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   153c0:	e0bff817 	ldw	r2,-32(fp)
   153c4:	10800003 	ldbu	r2,0(r2)
   153c8:	10803fcc 	andi	r2,r2,255
   153cc:	108000a0 	cmpeqi	r2,r2,2
   153d0:	1000021e 	bne	r2,zero,153dc <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   153d4:	00800044 	movi	r2,1
   153d8:	00003f06 	br	154d8 <OSQQuery+0x150>
  NIOS2_READ_STATUS (context);
   153dc:	0005303a 	rdctl	r2,status
   153e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153e4:	e0fffa17 	ldw	r3,-24(fp)
   153e8:	00bfff84 	movi	r2,-2
   153ec:	1884703a 	and	r2,r3,r2
   153f0:	1001703a 	wrctl	status,r2
  return context;
   153f4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   153f8:	e0bffc15 	stw	r2,-16(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   153fc:	e0bff817 	ldw	r2,-32(fp)
   15400:	10c00283 	ldbu	r3,10(r2)
   15404:	e0bff717 	ldw	r2,-36(fp)
   15408:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1540c:	e0bff817 	ldw	r2,-32(fp)
   15410:	108002c4 	addi	r2,r2,11
   15414:	e0bffe15 	stw	r2,-8(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   15418:	e0bff717 	ldw	r2,-36(fp)
   1541c:	10800204 	addi	r2,r2,8
   15420:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15424:	e03fffc5 	stb	zero,-1(fp)
   15428:	00000b06 	br	15458 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1542c:	e0fffe17 	ldw	r3,-8(fp)
   15430:	18800044 	addi	r2,r3,1
   15434:	e0bffe15 	stw	r2,-8(fp)
   15438:	e0bffd17 	ldw	r2,-12(fp)
   1543c:	11000044 	addi	r4,r2,1
   15440:	e13ffd15 	stw	r4,-12(fp)
   15444:	18c00003 	ldbu	r3,0(r3)
   15448:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1544c:	e0bfffc3 	ldbu	r2,-1(fp)
   15450:	10800044 	addi	r2,r2,1
   15454:	e0bfffc5 	stb	r2,-1(fp)
   15458:	e0bfffc3 	ldbu	r2,-1(fp)
   1545c:	108000f0 	cmpltui	r2,r2,3
   15460:	103ff21e 	bne	r2,zero,1542c <OSQQuery+0xa4>
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15464:	e0bff817 	ldw	r2,-32(fp)
   15468:	10800117 	ldw	r2,4(r2)
   1546c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
   15470:	e0bffb17 	ldw	r2,-20(fp)
   15474:	1080058b 	ldhu	r2,22(r2)
   15478:	10bfffcc 	andi	r2,r2,65535
   1547c:	10000626 	beq	r2,zero,15498 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15480:	e0bffb17 	ldw	r2,-20(fp)
   15484:	10800417 	ldw	r2,16(r2)
   15488:	10c00017 	ldw	r3,0(r2)
   1548c:	e0bff717 	ldw	r2,-36(fp)
   15490:	10c00015 	stw	r3,0(r2)
   15494:	00000206 	br	154a0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15498:	e0bff717 	ldw	r2,-36(fp)
   1549c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   154a0:	e0bffb17 	ldw	r2,-20(fp)
   154a4:	10c0058b 	ldhu	r3,22(r2)
   154a8:	e0bff717 	ldw	r2,-36(fp)
   154ac:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   154b0:	e0bffb17 	ldw	r2,-20(fp)
   154b4:	10c0050b 	ldhu	r3,20(r2)
   154b8:	e0bff717 	ldw	r2,-36(fp)
   154bc:	10c0018d 	sth	r3,6(r2)
   154c0:	e0bffc17 	ldw	r2,-16(fp)
   154c4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   154c8:	e0bff917 	ldw	r2,-28(fp)
   154cc:	1001703a 	wrctl	status,r2
}
   154d0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   154d4:	0005883a 	mov	r2,zero
}
   154d8:	e037883a 	mov	sp,fp
   154dc:	df000017 	ldw	fp,0(sp)
   154e0:	dec00104 	addi	sp,sp,4
   154e4:	f800283a 	ret

000154e8 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   154e8:	defffb04 	addi	sp,sp,-20
   154ec:	dfc00415 	stw	ra,16(sp)
   154f0:	df000315 	stw	fp,12(sp)
   154f4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   154f8:	01407804 	movi	r5,480
   154fc:	010000f4 	movhi	r4,3
   15500:	213c8704 	addi	r4,r4,-3556
   15504:	0010ad40 	call	10ad4 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15508:	008000f4 	movhi	r2,3
   1550c:	10bc8704 	addi	r2,r2,-3556
   15510:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15514:	008000f4 	movhi	r2,3
   15518:	10bc8d04 	addi	r2,r2,-3532
   1551c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15520:	e03fff8d 	sth	zero,-2(fp)
   15524:	00000c06 	br	15558 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15528:	e0bffe17 	ldw	r2,-8(fp)
   1552c:	e0fffd17 	ldw	r3,-12(fp)
   15530:	10c00015 	stw	r3,0(r2)
        pq1++;
   15534:	e0bffe17 	ldw	r2,-8(fp)
   15538:	10800604 	addi	r2,r2,24
   1553c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   15540:	e0bffd17 	ldw	r2,-12(fp)
   15544:	10800604 	addi	r2,r2,24
   15548:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1554c:	e0bfff8b 	ldhu	r2,-2(fp)
   15550:	10800044 	addi	r2,r2,1
   15554:	e0bfff8d 	sth	r2,-2(fp)
   15558:	e0bfff8b 	ldhu	r2,-2(fp)
   1555c:	108004f0 	cmpltui	r2,r2,19
   15560:	103ff11e 	bne	r2,zero,15528 <OS_QInit+0x40>
    }
    pq1->OSQPtr = (OS_Q *)0;
   15564:	e0bffe17 	ldw	r2,-8(fp)
   15568:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1556c:	008000f4 	movhi	r2,3
   15570:	10bc8704 	addi	r2,r2,-3556
   15574:	d0a84015 	stw	r2,-24320(gp)
#endif
}
   15578:	0001883a 	nop
   1557c:	e037883a 	mov	sp,fp
   15580:	dfc00117 	ldw	ra,4(sp)
   15584:	df000017 	ldw	fp,0(sp)
   15588:	dec00204 	addi	sp,sp,8
   1558c:	f800283a 	ret

00015590 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15590:	defffa04 	addi	sp,sp,-24
   15594:	df000515 	stw	fp,20(sp)
   15598:	df000504 	addi	fp,sp,20
   1559c:	e13ffb15 	stw	r4,-20(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   155a0:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   155a4:	e0bffb17 	ldw	r2,-20(fp)
   155a8:	1000021e 	bne	r2,zero,155b4 <OSSemAccept+0x24>
        return (0);
   155ac:	0005883a 	mov	r2,zero
   155b0:	00002006 	br	15634 <OSSemAccept+0xa4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   155b4:	e0bffb17 	ldw	r2,-20(fp)
   155b8:	10800003 	ldbu	r2,0(r2)
   155bc:	10803fcc 	andi	r2,r2,255
   155c0:	108000e0 	cmpeqi	r2,r2,3
   155c4:	1000021e 	bne	r2,zero,155d0 <OSSemAccept+0x40>
        return (0);
   155c8:	0005883a 	mov	r2,zero
   155cc:	00001906 	br	15634 <OSSemAccept+0xa4>
  NIOS2_READ_STATUS (context);
   155d0:	0005303a 	rdctl	r2,status
   155d4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155d8:	e0fffd17 	ldw	r3,-12(fp)
   155dc:	00bfff84 	movi	r2,-2
   155e0:	1884703a 	and	r2,r3,r2
   155e4:	1001703a 	wrctl	status,r2
  return context;
   155e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   155ec:	e0bfff15 	stw	r2,-4(fp)
    cnt = pevent->OSEventCnt;
   155f0:	e0bffb17 	ldw	r2,-20(fp)
   155f4:	1080020b 	ldhu	r2,8(r2)
   155f8:	e0bffe8d 	sth	r2,-6(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   155fc:	e0bffe8b 	ldhu	r2,-6(fp)
   15600:	10000626 	beq	r2,zero,1561c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15604:	e0bffb17 	ldw	r2,-20(fp)
   15608:	1080020b 	ldhu	r2,8(r2)
   1560c:	10bfffc4 	addi	r2,r2,-1
   15610:	1007883a 	mov	r3,r2
   15614:	e0bffb17 	ldw	r2,-20(fp)
   15618:	10c0020d 	sth	r3,8(r2)
   1561c:	e0bfff17 	ldw	r2,-4(fp)
   15620:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15624:	e0bffc17 	ldw	r2,-16(fp)
   15628:	1001703a 	wrctl	status,r2
}
   1562c:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   15630:	e0bffe8b 	ldhu	r2,-6(fp)
}
   15634:	e037883a 	mov	sp,fp
   15638:	df000017 	ldw	fp,0(sp)
   1563c:	dec00104 	addi	sp,sp,4
   15640:	f800283a 	ret

00015644 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   15644:	defff904 	addi	sp,sp,-28
   15648:	dfc00615 	stw	ra,24(sp)
   1564c:	df000515 	stw	fp,20(sp)
   15650:	df000504 	addi	fp,sp,20
   15654:	2005883a 	mov	r2,r4
   15658:	e0bffb0d 	sth	r2,-20(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1565c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15660:	d0a83643 	ldbu	r2,-24359(gp)
   15664:	10803fcc 	andi	r2,r2,255
   15668:	10000226 	beq	r2,zero,15674 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1566c:	0005883a 	mov	r2,zero
   15670:	00002606 	br	1570c <OSSemCreate+0xc8>
  NIOS2_READ_STATUS (context);
   15674:	0005303a 	rdctl	r2,status
   15678:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1567c:	e0fffd17 	ldw	r3,-12(fp)
   15680:	00bfff84 	movi	r2,-2
   15684:	1884703a 	and	r2,r3,r2
   15688:	1001703a 	wrctl	status,r2
  return context;
   1568c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15690:	e0bfff15 	stw	r2,-4(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   15694:	d0a83117 	ldw	r2,-24380(gp)
   15698:	e0bffe15 	stw	r2,-8(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1569c:	d0a83117 	ldw	r2,-24380(gp)
   156a0:	10000326 	beq	r2,zero,156b0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   156a4:	d0a83117 	ldw	r2,-24380(gp)
   156a8:	10800117 	ldw	r2,4(r2)
   156ac:	d0a83115 	stw	r2,-24380(gp)
   156b0:	e0bfff17 	ldw	r2,-4(fp)
   156b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   156b8:	e0bffc17 	ldw	r2,-16(fp)
   156bc:	1001703a 	wrctl	status,r2
}
   156c0:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   156c4:	e0bffe17 	ldw	r2,-8(fp)
   156c8:	10000f26 	beq	r2,zero,15708 <OSSemCreate+0xc4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   156cc:	e0bffe17 	ldw	r2,-8(fp)
   156d0:	00c000c4 	movi	r3,3
   156d4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   156d8:	e0bffe17 	ldw	r2,-8(fp)
   156dc:	e0fffb0b 	ldhu	r3,-20(fp)
   156e0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   156e4:	e0bffe17 	ldw	r2,-8(fp)
   156e8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   156ec:	e0bffe17 	ldw	r2,-8(fp)
   156f0:	00c00fc4 	movi	r3,63
   156f4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   156f8:	e0bffe17 	ldw	r2,-8(fp)
   156fc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   15700:	e13ffe17 	ldw	r4,-8(fp)
   15704:	00106e80 	call	106e8 <OS_EventWaitListInit>
    }
    return (pevent);
   15708:	e0bffe17 	ldw	r2,-8(fp)
}
   1570c:	e037883a 	mov	sp,fp
   15710:	dfc00117 	ldw	ra,4(sp)
   15714:	df000017 	ldw	fp,0(sp)
   15718:	dec00204 	addi	sp,sp,8
   1571c:	f800283a 	ret

00015720 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15720:	defff304 	addi	sp,sp,-52
   15724:	dfc00c15 	stw	ra,48(sp)
   15728:	df000b15 	stw	fp,44(sp)
   1572c:	df000b04 	addi	fp,sp,44
   15730:	e13ff715 	stw	r4,-36(fp)
   15734:	2805883a 	mov	r2,r5
   15738:	e1bff515 	stw	r6,-44(fp)
   1573c:	e0bff605 	stb	r2,-40(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15740:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15744:	e0bff517 	ldw	r2,-44(fp)
   15748:	1000021e 	bne	r2,zero,15754 <OSSemDel+0x34>
        return (pevent);
   1574c:	e0bff717 	ldw	r2,-36(fp)
   15750:	00008206 	br	1595c <OSSemDel+0x23c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15754:	e0bff717 	ldw	r2,-36(fp)
   15758:	1000051e 	bne	r2,zero,15770 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1575c:	e0bff517 	ldw	r2,-44(fp)
   15760:	00c00104 	movi	r3,4
   15764:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15768:	e0bff717 	ldw	r2,-36(fp)
   1576c:	00007b06 	br	1595c <OSSemDel+0x23c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   15770:	e0bff717 	ldw	r2,-36(fp)
   15774:	10800003 	ldbu	r2,0(r2)
   15778:	10803fcc 	andi	r2,r2,255
   1577c:	108000e0 	cmpeqi	r2,r2,3
   15780:	1000051e 	bne	r2,zero,15798 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15784:	e0bff517 	ldw	r2,-44(fp)
   15788:	00c00044 	movi	r3,1
   1578c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15790:	e0bff717 	ldw	r2,-36(fp)
   15794:	00007106 	br	1595c <OSSemDel+0x23c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15798:	d0a83643 	ldbu	r2,-24359(gp)
   1579c:	10803fcc 	andi	r2,r2,255
   157a0:	10000526 	beq	r2,zero,157b8 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   157a4:	e0bff517 	ldw	r2,-44(fp)
   157a8:	00c003c4 	movi	r3,15
   157ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   157b0:	e0bff717 	ldw	r2,-36(fp)
   157b4:	00006906 	br	1595c <OSSemDel+0x23c>
  NIOS2_READ_STATUS (context);
   157b8:	0005303a 	rdctl	r2,status
   157bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157c0:	e0fffc17 	ldw	r3,-16(fp)
   157c4:	00bfff84 	movi	r2,-2
   157c8:	1884703a 	and	r2,r3,r2
   157cc:	1001703a 	wrctl	status,r2
  return context;
   157d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   157d4:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   157d8:	e0bff717 	ldw	r2,-36(fp)
   157dc:	10800283 	ldbu	r2,10(r2)
   157e0:	10803fcc 	andi	r2,r2,255
   157e4:	10000326 	beq	r2,zero,157f4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   157e8:	00800044 	movi	r2,1
   157ec:	e0bfffc5 	stb	r2,-1(fp)
   157f0:	00000106 	br	157f8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   157f4:	e03fffc5 	stb	zero,-1(fp)
    }
    switch (opt) {
   157f8:	e0bff603 	ldbu	r2,-40(fp)
   157fc:	10000326 	beq	r2,zero,1580c <OSSemDel+0xec>
   15800:	10800060 	cmpeqi	r2,r2,1
   15804:	10002a1e 	bne	r2,zero,158b0 <OSSemDel+0x190>
   15808:	00004806 	br	1592c <OSSemDel+0x20c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1580c:	e0bfffc3 	ldbu	r2,-1(fp)
   15810:	1000171e 	bne	r2,zero,15870 <OSSemDel+0x150>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15814:	e0bff717 	ldw	r2,-36(fp)
   15818:	00c00fc4 	movi	r3,63
   1581c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15820:	e0bff717 	ldw	r2,-36(fp)
   15824:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15828:	e0bff717 	ldw	r2,-36(fp)
   1582c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15830:	d0e83117 	ldw	r3,-24380(gp)
   15834:	e0bff717 	ldw	r2,-36(fp)
   15838:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1583c:	e0bff717 	ldw	r2,-36(fp)
   15840:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15844:	e0bff717 	ldw	r2,-36(fp)
   15848:	d0a83115 	stw	r2,-24380(gp)
   1584c:	e0bffd17 	ldw	r2,-12(fp)
   15850:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   15854:	e0bffb17 	ldw	r2,-20(fp)
   15858:	1001703a 	wrctl	status,r2
}
   1585c:	0001883a 	nop
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15860:	e0bff517 	ldw	r2,-44(fp)
   15864:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   15868:	e03ffe15 	stw	zero,-8(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1586c:	00003a06 	br	15958 <OSSemDel+0x238>
   15870:	e0bffd17 	ldw	r2,-12(fp)
   15874:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15878:	e0bffa17 	ldw	r2,-24(fp)
   1587c:	1001703a 	wrctl	status,r2
}
   15880:	0001883a 	nop
                 *perr                  = OS_ERR_TASK_WAITING;
   15884:	e0bff517 	ldw	r2,-44(fp)
   15888:	00c01244 	movi	r3,73
   1588c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   15890:	e0bff717 	ldw	r2,-36(fp)
   15894:	e0bffe15 	stw	r2,-8(fp)
             break;
   15898:	00002f06 	br	15958 <OSSemDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1589c:	000f883a 	mov	r7,zero
   158a0:	01800044 	movi	r6,1
   158a4:	000b883a 	mov	r5,zero
   158a8:	e13ff717 	ldw	r4,-36(fp)
   158ac:	00101640 	call	10164 <OS_EventTaskRdy>
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   158b0:	e0bff717 	ldw	r2,-36(fp)
   158b4:	10800283 	ldbu	r2,10(r2)
   158b8:	10803fcc 	andi	r2,r2,255
   158bc:	103ff71e 	bne	r2,zero,1589c <OSSemDel+0x17c>
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   158c0:	e0bff717 	ldw	r2,-36(fp)
   158c4:	00c00fc4 	movi	r3,63
   158c8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   158cc:	e0bff717 	ldw	r2,-36(fp)
   158d0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   158d4:	e0bff717 	ldw	r2,-36(fp)
   158d8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   158dc:	d0e83117 	ldw	r3,-24380(gp)
   158e0:	e0bff717 	ldw	r2,-36(fp)
   158e4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   158e8:	e0bff717 	ldw	r2,-36(fp)
   158ec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   158f0:	e0bff717 	ldw	r2,-36(fp)
   158f4:	d0a83115 	stw	r2,-24380(gp)
   158f8:	e0bffd17 	ldw	r2,-12(fp)
   158fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   15900:	e0bff917 	ldw	r2,-28(fp)
   15904:	1001703a 	wrctl	status,r2
}
   15908:	0001883a 	nop
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1590c:	e0bfffc3 	ldbu	r2,-1(fp)
   15910:	10800058 	cmpnei	r2,r2,1
   15914:	1000011e 	bne	r2,zero,1591c <OSSemDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15918:	0010b980 	call	10b98 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1591c:	e0bff517 	ldw	r2,-44(fp)
   15920:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   15924:	e03ffe15 	stw	zero,-8(fp)
             break;
   15928:	00000b06 	br	15958 <OSSemDel+0x238>
   1592c:	e0bffd17 	ldw	r2,-12(fp)
   15930:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   15934:	e0bff817 	ldw	r2,-32(fp)
   15938:	1001703a 	wrctl	status,r2
}
   1593c:	0001883a 	nop

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15940:	e0bff517 	ldw	r2,-44(fp)
   15944:	00c001c4 	movi	r3,7
   15948:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1594c:	e0bff717 	ldw	r2,-36(fp)
   15950:	e0bffe15 	stw	r2,-8(fp)
             break;
   15954:	0001883a 	nop
    }
    return (pevent_return);
   15958:	e0bffe17 	ldw	r2,-8(fp)
}
   1595c:	e037883a 	mov	sp,fp
   15960:	dfc00117 	ldw	ra,4(sp)
   15964:	df000017 	ldw	fp,0(sp)
   15968:	dec00204 	addi	sp,sp,8
   1596c:	f800283a 	ret

00015970 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   15970:	defff504 	addi	sp,sp,-44
   15974:	dfc00a15 	stw	ra,40(sp)
   15978:	df000915 	stw	fp,36(sp)
   1597c:	df000904 	addi	fp,sp,36
   15980:	e13ff915 	stw	r4,-28(fp)
   15984:	2805883a 	mov	r2,r5
   15988:	e1bff715 	stw	r6,-36(fp)
   1598c:	e0bff80d 	sth	r2,-32(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15990:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15994:	e0bff717 	ldw	r2,-36(fp)
   15998:	10007426 	beq	r2,zero,15b6c <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1599c:	e0bff917 	ldw	r2,-28(fp)
   159a0:	1000041e 	bne	r2,zero,159b4 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   159a4:	e0bff717 	ldw	r2,-36(fp)
   159a8:	00c00104 	movi	r3,4
   159ac:	10c00005 	stb	r3,0(r2)
        return;
   159b0:	00006f06 	br	15b70 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   159b4:	e0bff917 	ldw	r2,-28(fp)
   159b8:	10800003 	ldbu	r2,0(r2)
   159bc:	10803fcc 	andi	r2,r2,255
   159c0:	108000e0 	cmpeqi	r2,r2,3
   159c4:	1000041e 	bne	r2,zero,159d8 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   159c8:	e0bff717 	ldw	r2,-36(fp)
   159cc:	00c00044 	movi	r3,1
   159d0:	10c00005 	stb	r3,0(r2)
        return;
   159d4:	00006606 	br	15b70 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   159d8:	d0a83643 	ldbu	r2,-24359(gp)
   159dc:	10803fcc 	andi	r2,r2,255
   159e0:	10000426 	beq	r2,zero,159f4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   159e4:	e0bff717 	ldw	r2,-36(fp)
   159e8:	00c00084 	movi	r3,2
   159ec:	10c00005 	stb	r3,0(r2)
        return;
   159f0:	00005f06 	br	15b70 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   159f4:	d0a83683 	ldbu	r2,-24358(gp)
   159f8:	10803fcc 	andi	r2,r2,255
   159fc:	10000426 	beq	r2,zero,15a10 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   15a00:	e0bff717 	ldw	r2,-36(fp)
   15a04:	00c00344 	movi	r3,13
   15a08:	10c00005 	stb	r3,0(r2)
        return;
   15a0c:	00005806 	br	15b70 <OSSemPend+0x200>
  NIOS2_READ_STATUS (context);
   15a10:	0005303a 	rdctl	r2,status
   15a14:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a18:	e0fffe17 	ldw	r3,-8(fp)
   15a1c:	00bfff84 	movi	r2,-2
   15a20:	1884703a 	and	r2,r3,r2
   15a24:	1001703a 	wrctl	status,r2
  return context;
   15a28:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15a2c:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   15a30:	e0bff917 	ldw	r2,-28(fp)
   15a34:	1080020b 	ldhu	r2,8(r2)
   15a38:	10bfffcc 	andi	r2,r2,65535
   15a3c:	10000e26 	beq	r2,zero,15a78 <OSSemPend+0x108>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   15a40:	e0bff917 	ldw	r2,-28(fp)
   15a44:	1080020b 	ldhu	r2,8(r2)
   15a48:	10bfffc4 	addi	r2,r2,-1
   15a4c:	1007883a 	mov	r3,r2
   15a50:	e0bff917 	ldw	r2,-28(fp)
   15a54:	10c0020d 	sth	r3,8(r2)
   15a58:	e0bfff17 	ldw	r2,-4(fp)
   15a5c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   15a60:	e0bffd17 	ldw	r2,-12(fp)
   15a64:	1001703a 	wrctl	status,r2
}
   15a68:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   15a6c:	e0bff717 	ldw	r2,-36(fp)
   15a70:	10000005 	stb	zero,0(r2)
        return;
   15a74:	00003e06 	br	15b70 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   15a78:	d0a83a17 	ldw	r2,-24344(gp)
   15a7c:	10c00c03 	ldbu	r3,48(r2)
   15a80:	d0a83a17 	ldw	r2,-24344(gp)
   15a84:	18c00054 	ori	r3,r3,1
   15a88:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   15a8c:	d0a83a17 	ldw	r2,-24344(gp)
   15a90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   15a94:	d0a83a17 	ldw	r2,-24344(gp)
   15a98:	e0fff80b 	ldhu	r3,-32(fp)
   15a9c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   15aa0:	e13ff917 	ldw	r4,-28(fp)
   15aa4:	00102ec0 	call	102ec <OS_EventTaskWait>
   15aa8:	e0bfff17 	ldw	r2,-4(fp)
   15aac:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   15ab0:	e0bffb17 	ldw	r2,-20(fp)
   15ab4:	1001703a 	wrctl	status,r2
}
   15ab8:	0001883a 	nop
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   15abc:	0010b980 	call	10b98 <OS_Sched>
  NIOS2_READ_STATUS (context);
   15ac0:	0005303a 	rdctl	r2,status
   15ac4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ac8:	e0fffc17 	ldw	r3,-16(fp)
   15acc:	00bfff84 	movi	r2,-2
   15ad0:	1884703a 	and	r2,r3,r2
   15ad4:	1001703a 	wrctl	status,r2
  return context;
   15ad8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   15adc:	e0bfff15 	stw	r2,-4(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15ae0:	d0a83a17 	ldw	r2,-24344(gp)
   15ae4:	10800c43 	ldbu	r2,49(r2)
   15ae8:	10803fcc 	andi	r2,r2,255
   15aec:	10000326 	beq	r2,zero,15afc <OSSemPend+0x18c>
   15af0:	108000a0 	cmpeqi	r2,r2,2
   15af4:	1000041e 	bne	r2,zero,15b08 <OSSemPend+0x198>
   15af8:	00000706 	br	15b18 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   15afc:	e0bff717 	ldw	r2,-36(fp)
   15b00:	10000005 	stb	zero,0(r2)
             break;
   15b04:	00000c06 	br	15b38 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15b08:	e0bff717 	ldw	r2,-36(fp)
   15b0c:	00c00384 	movi	r3,14
   15b10:	10c00005 	stb	r3,0(r2)
             break;
   15b14:	00000806 	br	15b38 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   15b18:	d0a83a17 	ldw	r2,-24344(gp)
   15b1c:	e17ff917 	ldw	r5,-28(fp)
   15b20:	1009883a 	mov	r4,r2
   15b24:	001053c0 	call	1053c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15b28:	e0bff717 	ldw	r2,-36(fp)
   15b2c:	00c00284 	movi	r3,10
   15b30:	10c00005 	stb	r3,0(r2)
             break;
   15b34:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15b38:	d0a83a17 	ldw	r2,-24344(gp)
   15b3c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15b40:	d0a83a17 	ldw	r2,-24344(gp)
   15b44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15b48:	d0a83a17 	ldw	r2,-24344(gp)
   15b4c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   15b50:	d0a83a17 	ldw	r2,-24344(gp)
   15b54:	10000815 	stw	zero,32(r2)
   15b58:	e0bfff17 	ldw	r2,-4(fp)
   15b5c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15b60:	e0bffa17 	ldw	r2,-24(fp)
   15b64:	1001703a 	wrctl	status,r2
}
   15b68:	00000106 	br	15b70 <OSSemPend+0x200>
        return;
   15b6c:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
}
   15b70:	e037883a 	mov	sp,fp
   15b74:	dfc00117 	ldw	ra,4(sp)
   15b78:	df000017 	ldw	fp,0(sp)
   15b7c:	dec00204 	addi	sp,sp,8
   15b80:	f800283a 	ret

00015b84 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15b84:	defff604 	addi	sp,sp,-40
   15b88:	dfc00915 	stw	ra,36(sp)
   15b8c:	df000815 	stw	fp,32(sp)
   15b90:	df000804 	addi	fp,sp,32
   15b94:	e13ffa15 	stw	r4,-24(fp)
   15b98:	2805883a 	mov	r2,r5
   15b9c:	e1bff815 	stw	r6,-32(fp)
   15ba0:	e0bff905 	stb	r2,-28(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15ba4:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15ba8:	e0bff817 	ldw	r2,-32(fp)
   15bac:	1000021e 	bne	r2,zero,15bb8 <OSSemPendAbort+0x34>
        return (0);
   15bb0:	0005883a 	mov	r2,zero
   15bb4:	00004b06 	br	15ce4 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15bb8:	e0bffa17 	ldw	r2,-24(fp)
   15bbc:	1000051e 	bne	r2,zero,15bd4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15bc0:	e0bff817 	ldw	r2,-32(fp)
   15bc4:	00c00104 	movi	r3,4
   15bc8:	10c00005 	stb	r3,0(r2)
        return (0);
   15bcc:	0005883a 	mov	r2,zero
   15bd0:	00004406 	br	15ce4 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15bd4:	e0bffa17 	ldw	r2,-24(fp)
   15bd8:	10800003 	ldbu	r2,0(r2)
   15bdc:	10803fcc 	andi	r2,r2,255
   15be0:	108000e0 	cmpeqi	r2,r2,3
   15be4:	1000051e 	bne	r2,zero,15bfc <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15be8:	e0bff817 	ldw	r2,-32(fp)
   15bec:	00c00044 	movi	r3,1
   15bf0:	10c00005 	stb	r3,0(r2)
        return (0);
   15bf4:	0005883a 	mov	r2,zero
   15bf8:	00003a06 	br	15ce4 <OSSemPendAbort+0x160>
  NIOS2_READ_STATUS (context);
   15bfc:	0005303a 	rdctl	r2,status
   15c00:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c04:	e0fffd17 	ldw	r3,-12(fp)
   15c08:	00bfff84 	movi	r2,-2
   15c0c:	1884703a 	and	r2,r3,r2
   15c10:	1001703a 	wrctl	status,r2
  return context;
   15c14:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15c18:	e0bffe15 	stw	r2,-8(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   15c1c:	e0bffa17 	ldw	r2,-24(fp)
   15c20:	10800283 	ldbu	r2,10(r2)
   15c24:	10803fcc 	andi	r2,r2,255
   15c28:	10002626 	beq	r2,zero,15cc4 <OSSemPendAbort+0x140>
        nbr_tasks = 0;
   15c2c:	e03fffc5 	stb	zero,-1(fp)
        switch (opt) {
   15c30:	e0bff903 	ldbu	r2,-28(fp)
   15c34:	10800058 	cmpnei	r2,r2,1
   15c38:	10000e1e 	bne	r2,zero,15c74 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   15c3c:	00000806 	br	15c60 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   15c40:	01c00084 	movi	r7,2
   15c44:	01800044 	movi	r6,1
   15c48:	000b883a 	mov	r5,zero
   15c4c:	e13ffa17 	ldw	r4,-24(fp)
   15c50:	00101640 	call	10164 <OS_EventTaskRdy>
                     nbr_tasks++;
   15c54:	e0bfffc3 	ldbu	r2,-1(fp)
   15c58:	10800044 	addi	r2,r2,1
   15c5c:	e0bfffc5 	stb	r2,-1(fp)
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   15c60:	e0bffa17 	ldw	r2,-24(fp)
   15c64:	10800283 	ldbu	r2,10(r2)
   15c68:	10803fcc 	andi	r2,r2,255
   15c6c:	103ff41e 	bne	r2,zero,15c40 <OSSemPendAbort+0xbc>
                 }
                 break;
   15c70:	00000906 	br	15c98 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   15c74:	01c00084 	movi	r7,2
   15c78:	01800044 	movi	r6,1
   15c7c:	000b883a 	mov	r5,zero
   15c80:	e13ffa17 	ldw	r4,-24(fp)
   15c84:	00101640 	call	10164 <OS_EventTaskRdy>
                 nbr_tasks++;
   15c88:	e0bfffc3 	ldbu	r2,-1(fp)
   15c8c:	10800044 	addi	r2,r2,1
   15c90:	e0bfffc5 	stb	r2,-1(fp)
                 break;
   15c94:	0001883a 	nop
   15c98:	e0bffe17 	ldw	r2,-8(fp)
   15c9c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15ca0:	e0bffc17 	ldw	r2,-16(fp)
   15ca4:	1001703a 	wrctl	status,r2
}
   15ca8:	0001883a 	nop
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15cac:	0010b980 	call	10b98 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15cb0:	e0bff817 	ldw	r2,-32(fp)
   15cb4:	00c00384 	movi	r3,14
   15cb8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15cbc:	e0bfffc3 	ldbu	r2,-1(fp)
   15cc0:	00000806 	br	15ce4 <OSSemPendAbort+0x160>
   15cc4:	e0bffe17 	ldw	r2,-8(fp)
   15cc8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   15ccc:	e0bffb17 	ldw	r2,-20(fp)
   15cd0:	1001703a 	wrctl	status,r2
}
   15cd4:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15cd8:	e0bff817 	ldw	r2,-32(fp)
   15cdc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   15ce0:	0005883a 	mov	r2,zero
}
   15ce4:	e037883a 	mov	sp,fp
   15ce8:	dfc00117 	ldw	ra,4(sp)
   15cec:	df000017 	ldw	fp,0(sp)
   15cf0:	dec00204 	addi	sp,sp,8
   15cf4:	f800283a 	ret

00015cf8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   15cf8:	defff804 	addi	sp,sp,-32
   15cfc:	dfc00715 	stw	ra,28(sp)
   15d00:	df000615 	stw	fp,24(sp)
   15d04:	df000604 	addi	fp,sp,24
   15d08:	e13ffa15 	stw	r4,-24(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15d0c:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15d10:	e0bffa17 	ldw	r2,-24(fp)
   15d14:	1000021e 	bne	r2,zero,15d20 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   15d18:	00800104 	movi	r2,4
   15d1c:	00003806 	br	15e00 <OSSemPost+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15d20:	e0bffa17 	ldw	r2,-24(fp)
   15d24:	10800003 	ldbu	r2,0(r2)
   15d28:	10803fcc 	andi	r2,r2,255
   15d2c:	108000e0 	cmpeqi	r2,r2,3
   15d30:	1000021e 	bne	r2,zero,15d3c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   15d34:	00800044 	movi	r2,1
   15d38:	00003106 	br	15e00 <OSSemPost+0x108>
  NIOS2_READ_STATUS (context);
   15d3c:	0005303a 	rdctl	r2,status
   15d40:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d44:	e0fffe17 	ldw	r3,-8(fp)
   15d48:	00bfff84 	movi	r2,-2
   15d4c:	1884703a 	and	r2,r3,r2
   15d50:	1001703a 	wrctl	status,r2
  return context;
   15d54:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15d58:	e0bfff15 	stw	r2,-4(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   15d5c:	e0bffa17 	ldw	r2,-24(fp)
   15d60:	10800283 	ldbu	r2,10(r2)
   15d64:	10803fcc 	andi	r2,r2,255
   15d68:	10000d26 	beq	r2,zero,15da0 <OSSemPost+0xa8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   15d6c:	000f883a 	mov	r7,zero
   15d70:	01800044 	movi	r6,1
   15d74:	000b883a 	mov	r5,zero
   15d78:	e13ffa17 	ldw	r4,-24(fp)
   15d7c:	00101640 	call	10164 <OS_EventTaskRdy>
   15d80:	e0bfff17 	ldw	r2,-4(fp)
   15d84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   15d88:	e0bffd17 	ldw	r2,-12(fp)
   15d8c:	1001703a 	wrctl	status,r2
}
   15d90:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   15d94:	0010b980 	call	10b98 <OS_Sched>
        return (OS_ERR_NONE);
   15d98:	0005883a 	mov	r2,zero
   15d9c:	00001806 	br	15e00 <OSSemPost+0x108>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   15da0:	e0bffa17 	ldw	r2,-24(fp)
   15da4:	1080020b 	ldhu	r2,8(r2)
   15da8:	10ffffcc 	andi	r3,r2,65535
   15dac:	00bfffd4 	movui	r2,65535
   15db0:	18800d26 	beq	r3,r2,15de8 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   15db4:	e0bffa17 	ldw	r2,-24(fp)
   15db8:	1080020b 	ldhu	r2,8(r2)
   15dbc:	10800044 	addi	r2,r2,1
   15dc0:	1007883a 	mov	r3,r2
   15dc4:	e0bffa17 	ldw	r2,-24(fp)
   15dc8:	10c0020d 	sth	r3,8(r2)
   15dcc:	e0bfff17 	ldw	r2,-4(fp)
   15dd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15dd4:	e0bffc17 	ldw	r2,-16(fp)
   15dd8:	1001703a 	wrctl	status,r2
}
   15ddc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15de0:	0005883a 	mov	r2,zero
   15de4:	00000606 	br	15e00 <OSSemPost+0x108>
   15de8:	e0bfff17 	ldw	r2,-4(fp)
   15dec:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   15df0:	e0bffb17 	ldw	r2,-20(fp)
   15df4:	1001703a 	wrctl	status,r2
}
   15df8:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   15dfc:	00800c84 	movi	r2,50
}
   15e00:	e037883a 	mov	sp,fp
   15e04:	dfc00117 	ldw	ra,4(sp)
   15e08:	df000017 	ldw	fp,0(sp)
   15e0c:	dec00204 	addi	sp,sp,8
   15e10:	f800283a 	ret

00015e14 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   15e14:	defff704 	addi	sp,sp,-36
   15e18:	df000815 	stw	fp,32(sp)
   15e1c:	df000804 	addi	fp,sp,32
   15e20:	e13ff915 	stw	r4,-28(fp)
   15e24:	e17ff815 	stw	r5,-32(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15e28:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15e2c:	e0bff917 	ldw	r2,-28(fp)
   15e30:	1000021e 	bne	r2,zero,15e3c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15e34:	00800104 	movi	r2,4
   15e38:	00003706 	br	15f18 <OSSemQuery+0x104>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   15e3c:	e0bff817 	ldw	r2,-32(fp)
   15e40:	1000021e 	bne	r2,zero,15e4c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15e44:	00800244 	movi	r2,9
   15e48:	00003306 	br	15f18 <OSSemQuery+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   15e4c:	e0bff917 	ldw	r2,-28(fp)
   15e50:	10800003 	ldbu	r2,0(r2)
   15e54:	10803fcc 	andi	r2,r2,255
   15e58:	108000e0 	cmpeqi	r2,r2,3
   15e5c:	1000021e 	bne	r2,zero,15e68 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15e60:	00800044 	movi	r2,1
   15e64:	00002c06 	br	15f18 <OSSemQuery+0x104>
  NIOS2_READ_STATUS (context);
   15e68:	0005303a 	rdctl	r2,status
   15e6c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e70:	e0fffb17 	ldw	r3,-20(fp)
   15e74:	00bfff84 	movi	r2,-2
   15e78:	1884703a 	and	r2,r3,r2
   15e7c:	1001703a 	wrctl	status,r2
  return context;
   15e80:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15e84:	e0bffc15 	stw	r2,-16(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   15e88:	e0bff917 	ldw	r2,-28(fp)
   15e8c:	10c00283 	ldbu	r3,10(r2)
   15e90:	e0bff817 	ldw	r2,-32(fp)
   15e94:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   15e98:	e0bff917 	ldw	r2,-28(fp)
   15e9c:	108002c4 	addi	r2,r2,11
   15ea0:	e0bfff15 	stw	r2,-4(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   15ea4:	e0bff817 	ldw	r2,-32(fp)
   15ea8:	10800084 	addi	r2,r2,2
   15eac:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15eb0:	e03ffdc5 	stb	zero,-9(fp)
   15eb4:	00000b06 	br	15ee4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   15eb8:	e0ffff17 	ldw	r3,-4(fp)
   15ebc:	18800044 	addi	r2,r3,1
   15ec0:	e0bfff15 	stw	r2,-4(fp)
   15ec4:	e0bffe17 	ldw	r2,-8(fp)
   15ec8:	11000044 	addi	r4,r2,1
   15ecc:	e13ffe15 	stw	r4,-8(fp)
   15ed0:	18c00003 	ldbu	r3,0(r3)
   15ed4:	10c00005 	stb	r3,0(r2)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15ed8:	e0bffdc3 	ldbu	r2,-9(fp)
   15edc:	10800044 	addi	r2,r2,1
   15ee0:	e0bffdc5 	stb	r2,-9(fp)
   15ee4:	e0bffdc3 	ldbu	r2,-9(fp)
   15ee8:	108000f0 	cmpltui	r2,r2,3
   15eec:	103ff21e 	bne	r2,zero,15eb8 <OSSemQuery+0xa4>
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   15ef0:	e0bff917 	ldw	r2,-28(fp)
   15ef4:	10c0020b 	ldhu	r3,8(r2)
   15ef8:	e0bff817 	ldw	r2,-32(fp)
   15efc:	10c0000d 	sth	r3,0(r2)
   15f00:	e0bffc17 	ldw	r2,-16(fp)
   15f04:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   15f08:	e0bffa17 	ldw	r2,-24(fp)
   15f0c:	1001703a 	wrctl	status,r2
}
   15f10:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15f14:	0005883a 	mov	r2,zero
}
   15f18:	e037883a 	mov	sp,fp
   15f1c:	df000017 	ldw	fp,0(sp)
   15f20:	dec00104 	addi	sp,sp,4
   15f24:	f800283a 	ret

00015f28 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   15f28:	defff904 	addi	sp,sp,-28
   15f2c:	df000615 	stw	fp,24(sp)
   15f30:	df000604 	addi	fp,sp,24
   15f34:	e13ffc15 	stw	r4,-16(fp)
   15f38:	2805883a 	mov	r2,r5
   15f3c:	e1bffa15 	stw	r6,-24(fp)
   15f40:	e0bffb0d 	sth	r2,-20(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15f44:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15f48:	e0bffa17 	ldw	r2,-24(fp)
   15f4c:	10003126 	beq	r2,zero,16014 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15f50:	e0bffc17 	ldw	r2,-16(fp)
   15f54:	1000041e 	bne	r2,zero,15f68 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   15f58:	e0bffa17 	ldw	r2,-24(fp)
   15f5c:	00c00104 	movi	r3,4
   15f60:	10c00005 	stb	r3,0(r2)
        return;
   15f64:	00002c06 	br	16018 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15f68:	e0bffc17 	ldw	r2,-16(fp)
   15f6c:	10800003 	ldbu	r2,0(r2)
   15f70:	10803fcc 	andi	r2,r2,255
   15f74:	108000e0 	cmpeqi	r2,r2,3
   15f78:	1000041e 	bne	r2,zero,15f8c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   15f7c:	e0bffa17 	ldw	r2,-24(fp)
   15f80:	00c00044 	movi	r3,1
   15f84:	10c00005 	stb	r3,0(r2)
        return;
   15f88:	00002306 	br	16018 <OSSemSet+0xf0>
  NIOS2_READ_STATUS (context);
   15f8c:	0005303a 	rdctl	r2,status
   15f90:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f94:	e0fffe17 	ldw	r3,-8(fp)
   15f98:	00bfff84 	movi	r2,-2
   15f9c:	1884703a 	and	r2,r3,r2
   15fa0:	1001703a 	wrctl	status,r2
  return context;
   15fa4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15fa8:	e0bfff15 	stw	r2,-4(fp)
    *perr = OS_ERR_NONE;
   15fac:	e0bffa17 	ldw	r2,-24(fp)
   15fb0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   15fb4:	e0bffc17 	ldw	r2,-16(fp)
   15fb8:	1080020b 	ldhu	r2,8(r2)
   15fbc:	10bfffcc 	andi	r2,r2,65535
   15fc0:	10000426 	beq	r2,zero,15fd4 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   15fc4:	e0bffc17 	ldw	r2,-16(fp)
   15fc8:	e0fffb0b 	ldhu	r3,-20(fp)
   15fcc:	10c0020d 	sth	r3,8(r2)
   15fd0:	00000b06 	br	16000 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   15fd4:	e0bffc17 	ldw	r2,-16(fp)
   15fd8:	10800283 	ldbu	r2,10(r2)
   15fdc:	10803fcc 	andi	r2,r2,255
   15fe0:	1000041e 	bne	r2,zero,15ff4 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   15fe4:	e0bffc17 	ldw	r2,-16(fp)
   15fe8:	e0fffb0b 	ldhu	r3,-20(fp)
   15fec:	10c0020d 	sth	r3,8(r2)
   15ff0:	00000306 	br	16000 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   15ff4:	e0bffa17 	ldw	r2,-24(fp)
   15ff8:	00c01244 	movi	r3,73
   15ffc:	10c00005 	stb	r3,0(r2)
   16000:	e0bfff17 	ldw	r2,-4(fp)
   16004:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   16008:	e0bffd17 	ldw	r2,-12(fp)
   1600c:	1001703a 	wrctl	status,r2
}
   16010:	00000106 	br	16018 <OSSemSet+0xf0>
        return;
   16014:	0001883a 	nop
        }
    }
    OS_EXIT_CRITICAL();
}
   16018:	e037883a 	mov	sp,fp
   1601c:	df000017 	ldw	fp,0(sp)
   16020:	dec00104 	addi	sp,sp,4
   16024:	f800283a 	ret

00016028 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   16028:	defff104 	addi	sp,sp,-60
   1602c:	dfc00e15 	stw	ra,56(sp)
   16030:	df000d15 	stw	fp,52(sp)
   16034:	df000d04 	addi	fp,sp,52
   16038:	2005883a 	mov	r2,r4
   1603c:	2807883a 	mov	r3,r5
   16040:	e0bff405 	stb	r2,-48(fp)
   16044:	1805883a 	mov	r2,r3
   16048:	e0bff305 	stb	r2,-52(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1604c:	e03ffd15 	stw	zero,-12(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   16050:	e0bff403 	ldbu	r2,-48(fp)
   16054:	10800530 	cmpltui	r2,r2,20
   16058:	1000051e 	bne	r2,zero,16070 <OSTaskChangePrio+0x48>
        if (oldprio != OS_PRIO_SELF) {
   1605c:	e0bff403 	ldbu	r2,-48(fp)
   16060:	10803fe0 	cmpeqi	r2,r2,255
   16064:	1000021e 	bne	r2,zero,16070 <OSTaskChangePrio+0x48>
            return (OS_ERR_PRIO_INVALID);
   16068:	00800a84 	movi	r2,42
   1606c:	00011a06 	br	164d8 <OSTaskChangePrio+0x4b0>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   16070:	e0bff303 	ldbu	r2,-52(fp)
   16074:	10800530 	cmpltui	r2,r2,20
   16078:	1000021e 	bne	r2,zero,16084 <OSTaskChangePrio+0x5c>
        return (OS_ERR_PRIO_INVALID);
   1607c:	00800a84 	movi	r2,42
   16080:	00011506 	br	164d8 <OSTaskChangePrio+0x4b0>
  NIOS2_READ_STATUS (context);
   16084:	0005303a 	rdctl	r2,status
   16088:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1608c:	e0fff917 	ldw	r3,-28(fp)
   16090:	00bfff84 	movi	r2,-2
   16094:	1884703a 	and	r2,r3,r2
   16098:	1001703a 	wrctl	status,r2
  return context;
   1609c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   160a0:	e0bffd15 	stw	r2,-12(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   160a4:	e0bff303 	ldbu	r2,-52(fp)
   160a8:	100690ba 	slli	r3,r2,2
   160ac:	008000f4 	movhi	r2,3
   160b0:	1885883a 	add	r2,r3,r2
   160b4:	10b82217 	ldw	r2,-8056(r2)
   160b8:	10000726 	beq	r2,zero,160d8 <OSTaskChangePrio+0xb0>
   160bc:	e0bffd17 	ldw	r2,-12(fp)
   160c0:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   160c4:	e0bff817 	ldw	r2,-32(fp)
   160c8:	1001703a 	wrctl	status,r2
}
   160cc:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   160d0:	00800a04 	movi	r2,40
   160d4:	00010006 	br	164d8 <OSTaskChangePrio+0x4b0>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   160d8:	e0bff403 	ldbu	r2,-48(fp)
   160dc:	10803fd8 	cmpnei	r2,r2,255
   160e0:	1000031e 	bne	r2,zero,160f0 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   160e4:	d0a83a17 	ldw	r2,-24344(gp)
   160e8:	10800c83 	ldbu	r2,50(r2)
   160ec:	e0bff405 	stb	r2,-48(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   160f0:	e0bff403 	ldbu	r2,-48(fp)
   160f4:	100690ba 	slli	r3,r2,2
   160f8:	008000f4 	movhi	r2,3
   160fc:	1885883a 	add	r2,r3,r2
   16100:	10b82217 	ldw	r2,-8056(r2)
   16104:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16108:	e0bffc17 	ldw	r2,-16(fp)
   1610c:	1000071e 	bne	r2,zero,1612c <OSTaskChangePrio+0x104>
   16110:	e0bffd17 	ldw	r2,-12(fp)
   16114:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   16118:	e0bff717 	ldw	r2,-36(fp)
   1611c:	1001703a 	wrctl	status,r2
}
   16120:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   16124:	00800a44 	movi	r2,41
   16128:	0000eb06 	br	164d8 <OSTaskChangePrio+0x4b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1612c:	e0bffc17 	ldw	r2,-16(fp)
   16130:	10800058 	cmpnei	r2,r2,1
   16134:	1000071e 	bne	r2,zero,16154 <OSTaskChangePrio+0x12c>
   16138:	e0bffd17 	ldw	r2,-12(fp)
   1613c:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   16140:	e0bff617 	ldw	r2,-40(fp)
   16144:	1001703a 	wrctl	status,r2
}
   16148:	0001883a 	nop
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1614c:	008010c4 	movi	r2,67
   16150:	0000e106 	br	164d8 <OSTaskChangePrio+0x4b0>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16154:	e0bff303 	ldbu	r2,-52(fp)
   16158:	1004d0fa 	srli	r2,r2,3
   1615c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16160:	e0bff303 	ldbu	r2,-52(fp)
   16164:	108001cc 	andi	r2,r2,7
   16168:	e0bffb85 	stb	r2,-18(fp)
    bity_new              = (INT8U)(1 << y_new);
   1616c:	e0bffbc3 	ldbu	r2,-17(fp)
   16170:	00c00044 	movi	r3,1
   16174:	1884983a 	sll	r2,r3,r2
   16178:	e0bffb45 	stb	r2,-19(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1617c:	e0bffb83 	ldbu	r2,-18(fp)
   16180:	00c00044 	movi	r3,1
   16184:	1884983a 	sll	r2,r3,r2
   16188:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1618c:	e0bff403 	ldbu	r2,-48(fp)
   16190:	100690ba 	slli	r3,r2,2
   16194:	008000f4 	movhi	r2,3
   16198:	1885883a 	add	r2,r3,r2
   1619c:	10382215 	stw	zero,-8056(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   161a0:	e0bff303 	ldbu	r2,-52(fp)
   161a4:	100890ba 	slli	r4,r2,2
   161a8:	e0fffc17 	ldw	r3,-16(fp)
   161ac:	008000f4 	movhi	r2,3
   161b0:	2085883a 	add	r2,r4,r2
   161b4:	10f82215 	stw	r3,-8056(r2)
    y_old                 =  ptcb->OSTCBY;
   161b8:	e0bffc17 	ldw	r2,-16(fp)
   161bc:	10800d03 	ldbu	r2,52(r2)
   161c0:	e0bffac5 	stb	r2,-21(fp)
    bity_old              =  ptcb->OSTCBBitY;
   161c4:	e0bffc17 	ldw	r2,-16(fp)
   161c8:	10800d83 	ldbu	r2,54(r2)
   161cc:	e0bffa85 	stb	r2,-22(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   161d0:	e0bffc17 	ldw	r2,-16(fp)
   161d4:	10800d43 	ldbu	r2,53(r2)
   161d8:	e0bffa45 	stb	r2,-23(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   161dc:	e0fffac3 	ldbu	r3,-21(fp)
   161e0:	d0a83784 	addi	r2,gp,-24354
   161e4:	1885883a 	add	r2,r3,r2
   161e8:	10800003 	ldbu	r2,0(r2)
   161ec:	e0fffa43 	ldbu	r3,-23(fp)
   161f0:	1884703a 	and	r2,r3,r2
   161f4:	10803fcc 	andi	r2,r2,255
   161f8:	10002826 	beq	r2,zero,1629c <OSTaskChangePrio+0x274>
         OSRdyTbl[y_old] &= ~bitx_old;
   161fc:	e0fffac3 	ldbu	r3,-21(fp)
   16200:	d0a83784 	addi	r2,gp,-24354
   16204:	1885883a 	add	r2,r3,r2
   16208:	10800003 	ldbu	r2,0(r2)
   1620c:	1007883a 	mov	r3,r2
   16210:	e0bffa43 	ldbu	r2,-23(fp)
   16214:	0084303a 	nor	r2,zero,r2
   16218:	1884703a 	and	r2,r3,r2
   1621c:	e0fffac3 	ldbu	r3,-21(fp)
   16220:	1009883a 	mov	r4,r2
   16224:	d0a83784 	addi	r2,gp,-24354
   16228:	1885883a 	add	r2,r3,r2
   1622c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16230:	e0fffac3 	ldbu	r3,-21(fp)
   16234:	d0a83784 	addi	r2,gp,-24354
   16238:	1885883a 	add	r2,r3,r2
   1623c:	10800003 	ldbu	r2,0(r2)
   16240:	10803fcc 	andi	r2,r2,255
   16244:	1000061e 	bne	r2,zero,16260 <OSTaskChangePrio+0x238>
             OSRdyGrp &= ~bity_old;
   16248:	e0bffa83 	ldbu	r2,-22(fp)
   1624c:	0084303a 	nor	r2,zero,r2
   16250:	1007883a 	mov	r3,r2
   16254:	d0a83743 	ldbu	r2,-24355(gp)
   16258:	1884703a 	and	r2,r3,r2
   1625c:	d0a83745 	stb	r2,-24355(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   16260:	d0a83743 	ldbu	r2,-24355(gp)
   16264:	e0fffb43 	ldbu	r3,-19(fp)
   16268:	1884b03a 	or	r2,r3,r2
   1626c:	d0a83745 	stb	r2,-24355(gp)
         OSRdyTbl[y_new] |= bitx_new;
   16270:	e0fffbc3 	ldbu	r3,-17(fp)
   16274:	d0a83784 	addi	r2,gp,-24354
   16278:	1885883a 	add	r2,r3,r2
   1627c:	10800003 	ldbu	r2,0(r2)
   16280:	e0fffbc3 	ldbu	r3,-17(fp)
   16284:	e13ffb03 	ldbu	r4,-20(fp)
   16288:	2084b03a 	or	r2,r4,r2
   1628c:	1009883a 	mov	r4,r2
   16290:	d0a83784 	addi	r2,gp,-24354
   16294:	1885883a 	add	r2,r3,r2
   16298:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1629c:	e0bffc17 	ldw	r2,-16(fp)
   162a0:	10800717 	ldw	r2,28(r2)
   162a4:	e0bfff15 	stw	r2,-4(fp)
    if (pevent != (OS_EVENT *)0) {
   162a8:	e0bfff17 	ldw	r2,-4(fp)
   162ac:	10002f26 	beq	r2,zero,1636c <OSTaskChangePrio+0x344>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   162b0:	e0bffac3 	ldbu	r2,-21(fp)
   162b4:	e0ffff17 	ldw	r3,-4(fp)
   162b8:	1885883a 	add	r2,r3,r2
   162bc:	108002c3 	ldbu	r2,11(r2)
   162c0:	1007883a 	mov	r3,r2
   162c4:	e0bffa43 	ldbu	r2,-23(fp)
   162c8:	0084303a 	nor	r2,zero,r2
   162cc:	1884703a 	and	r2,r3,r2
   162d0:	1007883a 	mov	r3,r2
   162d4:	e0bffac3 	ldbu	r2,-21(fp)
   162d8:	1809883a 	mov	r4,r3
   162dc:	e0ffff17 	ldw	r3,-4(fp)
   162e0:	1885883a 	add	r2,r3,r2
   162e4:	110002c5 	stb	r4,11(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   162e8:	e0bffac3 	ldbu	r2,-21(fp)
   162ec:	e0ffff17 	ldw	r3,-4(fp)
   162f0:	1885883a 	add	r2,r3,r2
   162f4:	108002c3 	ldbu	r2,11(r2)
   162f8:	10803fcc 	andi	r2,r2,255
   162fc:	1000091e 	bne	r2,zero,16324 <OSTaskChangePrio+0x2fc>
            pevent->OSEventGrp    &= ~bity_old;
   16300:	e0bfff17 	ldw	r2,-4(fp)
   16304:	10800283 	ldbu	r2,10(r2)
   16308:	1007883a 	mov	r3,r2
   1630c:	e0bffa83 	ldbu	r2,-22(fp)
   16310:	0084303a 	nor	r2,zero,r2
   16314:	1884703a 	and	r2,r3,r2
   16318:	1007883a 	mov	r3,r2
   1631c:	e0bfff17 	ldw	r2,-4(fp)
   16320:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   16324:	e0bfff17 	ldw	r2,-4(fp)
   16328:	10800283 	ldbu	r2,10(r2)
   1632c:	e0fffb43 	ldbu	r3,-19(fp)
   16330:	1884b03a 	or	r2,r3,r2
   16334:	1007883a 	mov	r3,r2
   16338:	e0bfff17 	ldw	r2,-4(fp)
   1633c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   16340:	e0bffbc3 	ldbu	r2,-17(fp)
   16344:	e0ffff17 	ldw	r3,-4(fp)
   16348:	1885883a 	add	r2,r3,r2
   1634c:	10c002c3 	ldbu	r3,11(r2)
   16350:	e0bffbc3 	ldbu	r2,-17(fp)
   16354:	e13ffb03 	ldbu	r4,-20(fp)
   16358:	20c6b03a 	or	r3,r4,r3
   1635c:	1809883a 	mov	r4,r3
   16360:	e0ffff17 	ldw	r3,-4(fp)
   16364:	1885883a 	add	r2,r3,r2
   16368:	110002c5 	stb	r4,11(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1636c:	e0bffc17 	ldw	r2,-16(fp)
   16370:	10800817 	ldw	r2,32(r2)
   16374:	10003e26 	beq	r2,zero,16470 <OSTaskChangePrio+0x448>
        pevents =  ptcb->OSTCBEventMultiPtr;
   16378:	e0bffc17 	ldw	r2,-16(fp)
   1637c:	10800817 	ldw	r2,32(r2)
   16380:	e0bffe15 	stw	r2,-8(fp)
        pevent  = *pevents;
   16384:	e0bffe17 	ldw	r2,-8(fp)
   16388:	10800017 	ldw	r2,0(r2)
   1638c:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
   16390:	00003506 	br	16468 <OSTaskChangePrio+0x440>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   16394:	e0bffac3 	ldbu	r2,-21(fp)
   16398:	e0ffff17 	ldw	r3,-4(fp)
   1639c:	1885883a 	add	r2,r3,r2
   163a0:	108002c3 	ldbu	r2,11(r2)
   163a4:	1007883a 	mov	r3,r2
   163a8:	e0bffa43 	ldbu	r2,-23(fp)
   163ac:	0084303a 	nor	r2,zero,r2
   163b0:	1884703a 	and	r2,r3,r2
   163b4:	1007883a 	mov	r3,r2
   163b8:	e0bffac3 	ldbu	r2,-21(fp)
   163bc:	1809883a 	mov	r4,r3
   163c0:	e0ffff17 	ldw	r3,-4(fp)
   163c4:	1885883a 	add	r2,r3,r2
   163c8:	110002c5 	stb	r4,11(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   163cc:	e0bffac3 	ldbu	r2,-21(fp)
   163d0:	e0ffff17 	ldw	r3,-4(fp)
   163d4:	1885883a 	add	r2,r3,r2
   163d8:	108002c3 	ldbu	r2,11(r2)
   163dc:	10803fcc 	andi	r2,r2,255
   163e0:	1000091e 	bne	r2,zero,16408 <OSTaskChangePrio+0x3e0>
                pevent->OSEventGrp    &= ~bity_old;
   163e4:	e0bfff17 	ldw	r2,-4(fp)
   163e8:	10800283 	ldbu	r2,10(r2)
   163ec:	1007883a 	mov	r3,r2
   163f0:	e0bffa83 	ldbu	r2,-22(fp)
   163f4:	0084303a 	nor	r2,zero,r2
   163f8:	1884703a 	and	r2,r3,r2
   163fc:	1007883a 	mov	r3,r2
   16400:	e0bfff17 	ldw	r2,-4(fp)
   16404:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16408:	e0bfff17 	ldw	r2,-4(fp)
   1640c:	10800283 	ldbu	r2,10(r2)
   16410:	e0fffb43 	ldbu	r3,-19(fp)
   16414:	1884b03a 	or	r2,r3,r2
   16418:	1007883a 	mov	r3,r2
   1641c:	e0bfff17 	ldw	r2,-4(fp)
   16420:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16424:	e0bffbc3 	ldbu	r2,-17(fp)
   16428:	e0ffff17 	ldw	r3,-4(fp)
   1642c:	1885883a 	add	r2,r3,r2
   16430:	10c002c3 	ldbu	r3,11(r2)
   16434:	e0bffbc3 	ldbu	r2,-17(fp)
   16438:	e13ffb03 	ldbu	r4,-20(fp)
   1643c:	20c6b03a 	or	r3,r4,r3
   16440:	1809883a 	mov	r4,r3
   16444:	e0ffff17 	ldw	r3,-4(fp)
   16448:	1885883a 	add	r2,r3,r2
   1644c:	110002c5 	stb	r4,11(r2)
            pevents++;
   16450:	e0bffe17 	ldw	r2,-8(fp)
   16454:	10800104 	addi	r2,r2,4
   16458:	e0bffe15 	stw	r2,-8(fp)
            pevent                     = *pevents;
   1645c:	e0bffe17 	ldw	r2,-8(fp)
   16460:	10800017 	ldw	r2,0(r2)
   16464:	e0bfff15 	stw	r2,-4(fp)
        while (pevent != (OS_EVENT *)0) {
   16468:	e0bfff17 	ldw	r2,-4(fp)
   1646c:	103fc91e 	bne	r2,zero,16394 <OSTaskChangePrio+0x36c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16470:	e0bffc17 	ldw	r2,-16(fp)
   16474:	e0fff303 	ldbu	r3,-52(fp)
   16478:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1647c:	e0bffc17 	ldw	r2,-16(fp)
   16480:	e0fffbc3 	ldbu	r3,-17(fp)
   16484:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   16488:	e0bffc17 	ldw	r2,-16(fp)
   1648c:	e0fffb83 	ldbu	r3,-18(fp)
   16490:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16494:	e0bffc17 	ldw	r2,-16(fp)
   16498:	e0fffb43 	ldbu	r3,-19(fp)
   1649c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   164a0:	e0bffc17 	ldw	r2,-16(fp)
   164a4:	e0fffb03 	ldbu	r3,-20(fp)
   164a8:	10c00d45 	stb	r3,53(r2)
   164ac:	e0bffd17 	ldw	r2,-12(fp)
   164b0:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   164b4:	e0bff517 	ldw	r2,-44(fp)
   164b8:	1001703a 	wrctl	status,r2
}
   164bc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   164c0:	d0a83843 	ldbu	r2,-24351(gp)
   164c4:	10803fcc 	andi	r2,r2,255
   164c8:	10800058 	cmpnei	r2,r2,1
   164cc:	1000011e 	bne	r2,zero,164d4 <OSTaskChangePrio+0x4ac>
        OS_Sched();                                         /* Find new highest priority task          */
   164d0:	0010b980 	call	10b98 <OS_Sched>
    }
    return (OS_ERR_NONE);
   164d4:	0005883a 	mov	r2,zero
}
   164d8:	e037883a 	mov	sp,fp
   164dc:	dfc00117 	ldw	ra,4(sp)
   164e0:	df000017 	ldw	fp,0(sp)
   164e4:	dec00204 	addi	sp,sp,8
   164e8:	f800283a 	ret

000164ec <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   164ec:	deffee04 	addi	sp,sp,-72
   164f0:	dfc01115 	stw	ra,68(sp)
   164f4:	df001015 	stw	fp,64(sp)
   164f8:	df001004 	addi	fp,sp,64
   164fc:	e13ff615 	stw	r4,-40(fp)
   16500:	e17ff515 	stw	r5,-44(fp)
   16504:	e1bff415 	stw	r6,-48(fp)
   16508:	3805883a 	mov	r2,r7
   1650c:	e0bff305 	stb	r2,-52(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16510:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16514:	e0bff303 	ldbu	r2,-52(fp)
   16518:	10800570 	cmpltui	r2,r2,21
   1651c:	1000021e 	bne	r2,zero,16528 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   16520:	00800a84 	movi	r2,42
   16524:	00005506 	br	1667c <OSTaskCreate+0x190>
  NIOS2_READ_STATUS (context);
   16528:	0005303a 	rdctl	r2,status
   1652c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16530:	e0fffc17 	ldw	r3,-16(fp)
   16534:	00bfff84 	movi	r2,-2
   16538:	1884703a 	and	r2,r3,r2
   1653c:	1001703a 	wrctl	status,r2
  return context;
   16540:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16544:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16548:	d0a83643 	ldbu	r2,-24359(gp)
   1654c:	10803fcc 	andi	r2,r2,255
   16550:	10000726 	beq	r2,zero,16570 <OSTaskCreate+0x84>
   16554:	e0bfff17 	ldw	r2,-4(fp)
   16558:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   1655c:	e0bffb17 	ldw	r2,-20(fp)
   16560:	1001703a 	wrctl	status,r2
}
   16564:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16568:	00800f04 	movi	r2,60
   1656c:	00004306 	br	1667c <OSTaskCreate+0x190>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16570:	e0bff303 	ldbu	r2,-52(fp)
   16574:	100690ba 	slli	r3,r2,2
   16578:	008000f4 	movhi	r2,3
   1657c:	1885883a 	add	r2,r3,r2
   16580:	10b82217 	ldw	r2,-8056(r2)
   16584:	1000371e 	bne	r2,zero,16664 <OSTaskCreate+0x178>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16588:	e0bff303 	ldbu	r2,-52(fp)
   1658c:	100890ba 	slli	r4,r2,2
   16590:	00c00044 	movi	r3,1
   16594:	008000f4 	movhi	r2,3
   16598:	2085883a 	add	r2,r4,r2
   1659c:	10f82215 	stw	r3,-8056(r2)
   165a0:	e0bfff17 	ldw	r2,-4(fp)
   165a4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   165a8:	e0bffa17 	ldw	r2,-24(fp)
   165ac:	1001703a 	wrctl	status,r2
}
   165b0:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   165b4:	000f883a 	mov	r7,zero
   165b8:	e1bff417 	ldw	r6,-48(fp)
   165bc:	e17ff517 	ldw	r5,-44(fp)
   165c0:	e13ff617 	ldw	r4,-40(fp)
   165c4:	001af880 	call	1af88 <OSTaskStkInit>
   165c8:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   165cc:	e0bff303 	ldbu	r2,-52(fp)
   165d0:	d8000215 	stw	zero,8(sp)
   165d4:	d8000115 	stw	zero,4(sp)
   165d8:	d8000015 	stw	zero,0(sp)
   165dc:	000f883a 	mov	r7,zero
   165e0:	000d883a 	mov	r6,zero
   165e4:	e17ffe17 	ldw	r5,-8(fp)
   165e8:	1009883a 	mov	r4,r2
   165ec:	0010f800 	call	10f80 <OS_TCBInit>
   165f0:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
   165f4:	e0bffdc3 	ldbu	r2,-9(fp)
   165f8:	1000061e 	bne	r2,zero,16614 <OSTaskCreate+0x128>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   165fc:	d0a83843 	ldbu	r2,-24351(gp)
   16600:	10803fcc 	andi	r2,r2,255
   16604:	10800058 	cmpnei	r2,r2,1
   16608:	1000141e 	bne	r2,zero,1665c <OSTaskCreate+0x170>
                OS_Sched();
   1660c:	0010b980 	call	10b98 <OS_Sched>
   16610:	00001206 	br	1665c <OSTaskCreate+0x170>
  NIOS2_READ_STATUS (context);
   16614:	0005303a 	rdctl	r2,status
   16618:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1661c:	e0fff817 	ldw	r3,-32(fp)
   16620:	00bfff84 	movi	r2,-2
   16624:	1884703a 	and	r2,r3,r2
   16628:	1001703a 	wrctl	status,r2
  return context;
   1662c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16630:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   16634:	e0bff303 	ldbu	r2,-52(fp)
   16638:	100690ba 	slli	r3,r2,2
   1663c:	008000f4 	movhi	r2,3
   16640:	1885883a 	add	r2,r3,r2
   16644:	10382215 	stw	zero,-8056(r2)
   16648:	e0bfff17 	ldw	r2,-4(fp)
   1664c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   16650:	e0bff917 	ldw	r2,-28(fp)
   16654:	1001703a 	wrctl	status,r2
}
   16658:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
   1665c:	e0bffdc3 	ldbu	r2,-9(fp)
   16660:	00000606 	br	1667c <OSTaskCreate+0x190>
   16664:	e0bfff17 	ldw	r2,-4(fp)
   16668:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   1666c:	e0bff717 	ldw	r2,-36(fp)
   16670:	1001703a 	wrctl	status,r2
}
   16674:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16678:	00800a04 	movi	r2,40
}
   1667c:	e037883a 	mov	sp,fp
   16680:	dfc00117 	ldw	ra,4(sp)
   16684:	df000017 	ldw	fp,0(sp)
   16688:	dec00204 	addi	sp,sp,8
   1668c:	f800283a 	ret

00016690 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   16690:	deffec04 	addi	sp,sp,-80
   16694:	dfc01315 	stw	ra,76(sp)
   16698:	df001215 	stw	fp,72(sp)
   1669c:	df001204 	addi	fp,sp,72
   166a0:	e13ff615 	stw	r4,-40(fp)
   166a4:	e17ff515 	stw	r5,-44(fp)
   166a8:	e1bff415 	stw	r6,-48(fp)
   166ac:	3809883a 	mov	r4,r7
   166b0:	e0c00217 	ldw	r3,8(fp)
   166b4:	e0800617 	ldw	r2,24(fp)
   166b8:	e13ff305 	stb	r4,-52(fp)
   166bc:	e0fff20d 	sth	r3,-56(fp)
   166c0:	e0bff10d 	sth	r2,-60(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   166c4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   166c8:	e0bff303 	ldbu	r2,-52(fp)
   166cc:	10800570 	cmpltui	r2,r2,21
   166d0:	1000021e 	bne	r2,zero,166dc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   166d4:	00800a84 	movi	r2,42
   166d8:	00005f06 	br	16858 <OSTaskCreateExt+0x1c8>
  NIOS2_READ_STATUS (context);
   166dc:	0005303a 	rdctl	r2,status
   166e0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166e4:	e0fffc17 	ldw	r3,-16(fp)
   166e8:	00bfff84 	movi	r2,-2
   166ec:	1884703a 	and	r2,r3,r2
   166f0:	1001703a 	wrctl	status,r2
  return context;
   166f4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   166f8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   166fc:	d0a83643 	ldbu	r2,-24359(gp)
   16700:	10803fcc 	andi	r2,r2,255
   16704:	10000726 	beq	r2,zero,16724 <OSTaskCreateExt+0x94>
   16708:	e0bfff17 	ldw	r2,-4(fp)
   1670c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   16710:	e0bffb17 	ldw	r2,-20(fp)
   16714:	1001703a 	wrctl	status,r2
}
   16718:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1671c:	00800f04 	movi	r2,60
   16720:	00004d06 	br	16858 <OSTaskCreateExt+0x1c8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16724:	e0bff303 	ldbu	r2,-52(fp)
   16728:	100690ba 	slli	r3,r2,2
   1672c:	008000f4 	movhi	r2,3
   16730:	1885883a 	add	r2,r3,r2
   16734:	10b82217 	ldw	r2,-8056(r2)
   16738:	1000411e 	bne	r2,zero,16840 <OSTaskCreateExt+0x1b0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1673c:	e0bff303 	ldbu	r2,-52(fp)
   16740:	100890ba 	slli	r4,r2,2
   16744:	00c00044 	movi	r3,1
   16748:	008000f4 	movhi	r2,3
   1674c:	2085883a 	add	r2,r4,r2
   16750:	10f82215 	stw	r3,-8056(r2)
   16754:	e0bfff17 	ldw	r2,-4(fp)
   16758:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   1675c:	e0bffa17 	ldw	r2,-24(fp)
   16760:	1001703a 	wrctl	status,r2
}
   16764:	0001883a 	nop
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   16768:	e0bff10b 	ldhu	r2,-60(fp)
   1676c:	100d883a 	mov	r6,r2
   16770:	e1400417 	ldw	r5,16(fp)
   16774:	e1000317 	ldw	r4,12(fp)
   16778:	00177080 	call	17708 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1677c:	e0bff10b 	ldhu	r2,-60(fp)
   16780:	100f883a 	mov	r7,r2
   16784:	e1bff417 	ldw	r6,-48(fp)
   16788:	e17ff517 	ldw	r5,-44(fp)
   1678c:	e13ff617 	ldw	r4,-40(fp)
   16790:	001af880 	call	1af88 <OSTaskStkInit>
   16794:	e0bffe15 	stw	r2,-8(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   16798:	e0fff303 	ldbu	r3,-52(fp)
   1679c:	e13ff20b 	ldhu	r4,-56(fp)
   167a0:	e0bff10b 	ldhu	r2,-60(fp)
   167a4:	d8800215 	stw	r2,8(sp)
   167a8:	e0800517 	ldw	r2,20(fp)
   167ac:	d8800115 	stw	r2,4(sp)
   167b0:	e0800417 	ldw	r2,16(fp)
   167b4:	d8800015 	stw	r2,0(sp)
   167b8:	200f883a 	mov	r7,r4
   167bc:	e1800317 	ldw	r6,12(fp)
   167c0:	e17ffe17 	ldw	r5,-8(fp)
   167c4:	1809883a 	mov	r4,r3
   167c8:	0010f800 	call	10f80 <OS_TCBInit>
   167cc:	e0bffdc5 	stb	r2,-9(fp)
        if (err == OS_ERR_NONE) {
   167d0:	e0bffdc3 	ldbu	r2,-9(fp)
   167d4:	1000061e 	bne	r2,zero,167f0 <OSTaskCreateExt+0x160>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   167d8:	d0a83843 	ldbu	r2,-24351(gp)
   167dc:	10803fcc 	andi	r2,r2,255
   167e0:	10800058 	cmpnei	r2,r2,1
   167e4:	1000141e 	bne	r2,zero,16838 <OSTaskCreateExt+0x1a8>
                OS_Sched();
   167e8:	0010b980 	call	10b98 <OS_Sched>
   167ec:	00001206 	br	16838 <OSTaskCreateExt+0x1a8>
  NIOS2_READ_STATUS (context);
   167f0:	0005303a 	rdctl	r2,status
   167f4:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167f8:	e0fff817 	ldw	r3,-32(fp)
   167fc:	00bfff84 	movi	r2,-2
   16800:	1884703a 	and	r2,r3,r2
   16804:	1001703a 	wrctl	status,r2
  return context;
   16808:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1680c:	e0bfff15 	stw	r2,-4(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   16810:	e0bff303 	ldbu	r2,-52(fp)
   16814:	100690ba 	slli	r3,r2,2
   16818:	008000f4 	movhi	r2,3
   1681c:	1885883a 	add	r2,r3,r2
   16820:	10382215 	stw	zero,-8056(r2)
   16824:	e0bfff17 	ldw	r2,-4(fp)
   16828:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   1682c:	e0bff917 	ldw	r2,-28(fp)
   16830:	1001703a 	wrctl	status,r2
}
   16834:	0001883a 	nop
            OS_EXIT_CRITICAL();
        }
        return (err);
   16838:	e0bffdc3 	ldbu	r2,-9(fp)
   1683c:	00000606 	br	16858 <OSTaskCreateExt+0x1c8>
   16840:	e0bfff17 	ldw	r2,-4(fp)
   16844:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   16848:	e0bff717 	ldw	r2,-36(fp)
   1684c:	1001703a 	wrctl	status,r2
}
   16850:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16854:	00800a04 	movi	r2,40
}
   16858:	e037883a 	mov	sp,fp
   1685c:	dfc00117 	ldw	ra,4(sp)
   16860:	df000017 	ldw	fp,0(sp)
   16864:	dec00204 	addi	sp,sp,8
   16868:	f800283a 	ret

0001686c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1686c:	defff404 	addi	sp,sp,-48
   16870:	dfc00b15 	stw	ra,44(sp)
   16874:	df000a15 	stw	fp,40(sp)
   16878:	df000a04 	addi	fp,sp,40
   1687c:	2005883a 	mov	r2,r4
   16880:	e0bff605 	stb	r2,-40(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   16884:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   16888:	d0a83643 	ldbu	r2,-24359(gp)
   1688c:	10803fcc 	andi	r2,r2,255
   16890:	10000226 	beq	r2,zero,1689c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   16894:	00801004 	movi	r2,64
   16898:	0000c006 	br	16b9c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1689c:	e0bff603 	ldbu	r2,-40(fp)
   168a0:	10800518 	cmpnei	r2,r2,20
   168a4:	1000021e 	bne	r2,zero,168b0 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   168a8:	00800f84 	movi	r2,62
   168ac:	0000bb06 	br	16b9c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   168b0:	e0bff603 	ldbu	r2,-40(fp)
   168b4:	10800530 	cmpltui	r2,r2,20
   168b8:	1000051e 	bne	r2,zero,168d0 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   168bc:	e0bff603 	ldbu	r2,-40(fp)
   168c0:	10803fe0 	cmpeqi	r2,r2,255
   168c4:	1000021e 	bne	r2,zero,168d0 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   168c8:	00800a84 	movi	r2,42
   168cc:	0000b306 	br	16b9c <OSTaskDel+0x330>
  NIOS2_READ_STATUS (context);
   168d0:	0005303a 	rdctl	r2,status
   168d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168d8:	e0fffc17 	ldw	r3,-16(fp)
   168dc:	00bfff84 	movi	r2,-2
   168e0:	1884703a 	and	r2,r3,r2
   168e4:	1001703a 	wrctl	status,r2
  return context;
   168e8:	e0bffc17 	ldw	r2,-16(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   168ec:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   168f0:	e0bff603 	ldbu	r2,-40(fp)
   168f4:	10803fd8 	cmpnei	r2,r2,255
   168f8:	1000031e 	bne	r2,zero,16908 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   168fc:	d0a83a17 	ldw	r2,-24344(gp)
   16900:	10800c83 	ldbu	r2,50(r2)
   16904:	e0bff605 	stb	r2,-40(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16908:	e0bff603 	ldbu	r2,-40(fp)
   1690c:	100690ba 	slli	r3,r2,2
   16910:	008000f4 	movhi	r2,3
   16914:	1885883a 	add	r2,r3,r2
   16918:	10b82217 	ldw	r2,-8056(r2)
   1691c:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   16920:	e0bffe17 	ldw	r2,-8(fp)
   16924:	1000071e 	bne	r2,zero,16944 <OSTaskDel+0xd8>
   16928:	e0bfff17 	ldw	r2,-4(fp)
   1692c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   16930:	e0bffb17 	ldw	r2,-20(fp)
   16934:	1001703a 	wrctl	status,r2
}
   16938:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1693c:	008010c4 	movi	r2,67
   16940:	00009606 	br	16b9c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   16944:	e0bffe17 	ldw	r2,-8(fp)
   16948:	10800058 	cmpnei	r2,r2,1
   1694c:	1000071e 	bne	r2,zero,1696c <OSTaskDel+0x100>
   16950:	e0bfff17 	ldw	r2,-4(fp)
   16954:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   16958:	e0bffa17 	ldw	r2,-24(fp)
   1695c:	1001703a 	wrctl	status,r2
}
   16960:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16964:	00800f44 	movi	r2,61
   16968:	00008c06 	br	16b9c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1696c:	e0bffe17 	ldw	r2,-8(fp)
   16970:	10800d03 	ldbu	r2,52(r2)
   16974:	10c03fcc 	andi	r3,r2,255
   16978:	d0a83784 	addi	r2,gp,-24354
   1697c:	1885883a 	add	r2,r3,r2
   16980:	10800003 	ldbu	r2,0(r2)
   16984:	1007883a 	mov	r3,r2
   16988:	e0bffe17 	ldw	r2,-8(fp)
   1698c:	10800d43 	ldbu	r2,53(r2)
   16990:	0084303a 	nor	r2,zero,r2
   16994:	1884703a 	and	r2,r3,r2
   16998:	1009883a 	mov	r4,r2
   1699c:	e0bffe17 	ldw	r2,-8(fp)
   169a0:	10800d03 	ldbu	r2,52(r2)
   169a4:	10c03fcc 	andi	r3,r2,255
   169a8:	d0a83784 	addi	r2,gp,-24354
   169ac:	1885883a 	add	r2,r3,r2
   169b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   169b4:	e0bffe17 	ldw	r2,-8(fp)
   169b8:	10800d03 	ldbu	r2,52(r2)
   169bc:	10c03fcc 	andi	r3,r2,255
   169c0:	d0a83784 	addi	r2,gp,-24354
   169c4:	1885883a 	add	r2,r3,r2
   169c8:	10800003 	ldbu	r2,0(r2)
   169cc:	10803fcc 	andi	r2,r2,255
   169d0:	1000071e 	bne	r2,zero,169f0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   169d4:	e0bffe17 	ldw	r2,-8(fp)
   169d8:	10800d83 	ldbu	r2,54(r2)
   169dc:	0084303a 	nor	r2,zero,r2
   169e0:	1007883a 	mov	r3,r2
   169e4:	d0a83743 	ldbu	r2,-24355(gp)
   169e8:	1884703a 	and	r2,r3,r2
   169ec:	d0a83745 	stb	r2,-24355(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   169f0:	e0bffe17 	ldw	r2,-8(fp)
   169f4:	10800717 	ldw	r2,28(r2)
   169f8:	10000526 	beq	r2,zero,16a10 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   169fc:	e0bffe17 	ldw	r2,-8(fp)
   16a00:	10800717 	ldw	r2,28(r2)
   16a04:	100b883a 	mov	r5,r2
   16a08:	e13ffe17 	ldw	r4,-8(fp)
   16a0c:	001053c0 	call	1053c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   16a10:	e0bffe17 	ldw	r2,-8(fp)
   16a14:	10800817 	ldw	r2,32(r2)
   16a18:	10000526 	beq	r2,zero,16a30 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   16a1c:	e0bffe17 	ldw	r2,-8(fp)
   16a20:	10800817 	ldw	r2,32(r2)
   16a24:	100b883a 	mov	r5,r2
   16a28:	e13ffe17 	ldw	r4,-8(fp)
   16a2c:	00105ec0 	call	105ec <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   16a30:	e0bffe17 	ldw	r2,-8(fp)
   16a34:	10800a17 	ldw	r2,40(r2)
   16a38:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   16a3c:	e0bffd17 	ldw	r2,-12(fp)
   16a40:	10000226 	beq	r2,zero,16a4c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   16a44:	e13ffd17 	ldw	r4,-12(fp)
   16a48:	0012b100 	call	12b10 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   16a4c:	e0bffe17 	ldw	r2,-8(fp)
   16a50:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   16a54:	e0bffe17 	ldw	r2,-8(fp)
   16a58:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   16a5c:	e0bffe17 	ldw	r2,-8(fp)
   16a60:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   16a64:	d0a83683 	ldbu	r2,-24358(gp)
   16a68:	10803fcc 	andi	r2,r2,255
   16a6c:	10803fe0 	cmpeqi	r2,r2,255
   16a70:	1000031e 	bne	r2,zero,16a80 <OSTaskDel+0x214>
        OSLockNesting++;
   16a74:	d0a83683 	ldbu	r2,-24358(gp)
   16a78:	10800044 	addi	r2,r2,1
   16a7c:	d0a83685 	stb	r2,-24358(gp)
   16a80:	e0bfff17 	ldw	r2,-4(fp)
   16a84:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   16a88:	e0bff817 	ldw	r2,-32(fp)
   16a8c:	1001703a 	wrctl	status,r2
}
   16a90:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   16a94:	00101440 	call	10144 <OS_Dummy>
  NIOS2_READ_STATUS (context);
   16a98:	0005303a 	rdctl	r2,status
   16a9c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16aa0:	e0fff917 	ldw	r3,-28(fp)
   16aa4:	00bfff84 	movi	r2,-2
   16aa8:	1884703a 	and	r2,r3,r2
   16aac:	1001703a 	wrctl	status,r2
  return context;
   16ab0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   16ab4:	e0bfff15 	stw	r2,-4(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   16ab8:	d0a83683 	ldbu	r2,-24358(gp)
   16abc:	10803fcc 	andi	r2,r2,255
   16ac0:	10000326 	beq	r2,zero,16ad0 <OSTaskDel+0x264>
        OSLockNesting--;
   16ac4:	d0a83683 	ldbu	r2,-24358(gp)
   16ac8:	10bfffc4 	addi	r2,r2,-1
   16acc:	d0a83685 	stb	r2,-24358(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   16ad0:	e13ffe17 	ldw	r4,-8(fp)
   16ad4:	001b0f80 	call	1b0f8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   16ad8:	d0a83883 	ldbu	r2,-24350(gp)
   16adc:	10bfffc4 	addi	r2,r2,-1
   16ae0:	d0a83885 	stb	r2,-24350(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   16ae4:	e0bff603 	ldbu	r2,-40(fp)
   16ae8:	100690ba 	slli	r3,r2,2
   16aec:	008000f4 	movhi	r2,3
   16af0:	1885883a 	add	r2,r3,r2
   16af4:	10382215 	stw	zero,-8056(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   16af8:	e0bffe17 	ldw	r2,-8(fp)
   16afc:	10800617 	ldw	r2,24(r2)
   16b00:	1000071e 	bne	r2,zero,16b20 <OSTaskDel+0x2b4>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   16b04:	e0bffe17 	ldw	r2,-8(fp)
   16b08:	10800517 	ldw	r2,20(r2)
   16b0c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   16b10:	e0bffe17 	ldw	r2,-8(fp)
   16b14:	10800517 	ldw	r2,20(r2)
   16b18:	d0a83d15 	stw	r2,-24332(gp)
   16b1c:	00000a06 	br	16b48 <OSTaskDel+0x2dc>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   16b20:	e0bffe17 	ldw	r2,-8(fp)
   16b24:	10800617 	ldw	r2,24(r2)
   16b28:	e0fffe17 	ldw	r3,-8(fp)
   16b2c:	18c00517 	ldw	r3,20(r3)
   16b30:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   16b34:	e0bffe17 	ldw	r2,-8(fp)
   16b38:	10800517 	ldw	r2,20(r2)
   16b3c:	e0fffe17 	ldw	r3,-8(fp)
   16b40:	18c00617 	ldw	r3,24(r3)
   16b44:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   16b48:	d0e83b17 	ldw	r3,-24340(gp)
   16b4c:	e0bffe17 	ldw	r2,-8(fp)
   16b50:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   16b54:	e0bffe17 	ldw	r2,-8(fp)
   16b58:	d0a83b15 	stw	r2,-24340(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   16b5c:	e0bffe17 	ldw	r2,-8(fp)
   16b60:	00c00fc4 	movi	r3,63
   16b64:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   16b68:	e0bffe17 	ldw	r2,-8(fp)
   16b6c:	10001345 	stb	zero,77(r2)
   16b70:	e0bfff17 	ldw	r2,-4(fp)
   16b74:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   16b78:	e0bff717 	ldw	r2,-36(fp)
   16b7c:	1001703a 	wrctl	status,r2
}
   16b80:	0001883a 	nop
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16b84:	d0a83843 	ldbu	r2,-24351(gp)
   16b88:	10803fcc 	andi	r2,r2,255
   16b8c:	10800058 	cmpnei	r2,r2,1
   16b90:	1000011e 	bne	r2,zero,16b98 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   16b94:	0010b980 	call	10b98 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16b98:	0005883a 	mov	r2,zero
}
   16b9c:	e037883a 	mov	sp,fp
   16ba0:	dfc00117 	ldw	ra,4(sp)
   16ba4:	df000017 	ldw	fp,0(sp)
   16ba8:	dec00204 	addi	sp,sp,8
   16bac:	f800283a 	ret

00016bb0 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   16bb0:	defff504 	addi	sp,sp,-44
   16bb4:	df000a15 	stw	fp,40(sp)
   16bb8:	df000a04 	addi	fp,sp,40
   16bbc:	2005883a 	mov	r2,r4
   16bc0:	e0bff605 	stb	r2,-40(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16bc4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   16bc8:	e0bff603 	ldbu	r2,-40(fp)
   16bcc:	10800518 	cmpnei	r2,r2,20
   16bd0:	1000021e 	bne	r2,zero,16bdc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   16bd4:	00800f84 	movi	r2,62
   16bd8:	00004706 	br	16cf8 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   16bdc:	e0bff603 	ldbu	r2,-40(fp)
   16be0:	10800530 	cmpltui	r2,r2,20
   16be4:	1000051e 	bne	r2,zero,16bfc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   16be8:	e0bff603 	ldbu	r2,-40(fp)
   16bec:	10803fe0 	cmpeqi	r2,r2,255
   16bf0:	1000021e 	bne	r2,zero,16bfc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   16bf4:	00800a84 	movi	r2,42
   16bf8:	00003f06 	br	16cf8 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   16bfc:	e0bff603 	ldbu	r2,-40(fp)
   16c00:	10803fd8 	cmpnei	r2,r2,255
   16c04:	1000121e 	bne	r2,zero,16c50 <OSTaskDelReq+0xa0>
  NIOS2_READ_STATUS (context);
   16c08:	0005303a 	rdctl	r2,status
   16c0c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c10:	e0fffb17 	ldw	r3,-20(fp)
   16c14:	00bfff84 	movi	r2,-2
   16c18:	1884703a 	and	r2,r3,r2
   16c1c:	1001703a 	wrctl	status,r2
  return context;
   16c20:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   16c24:	e0bfff15 	stw	r2,-4(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   16c28:	d0a83a17 	ldw	r2,-24344(gp)
   16c2c:	10800dc3 	ldbu	r2,55(r2)
   16c30:	e0bffdc5 	stb	r2,-9(fp)
   16c34:	e0bfff17 	ldw	r2,-4(fp)
   16c38:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   16c3c:	e0bffc17 	ldw	r2,-16(fp)
   16c40:	1001703a 	wrctl	status,r2
}
   16c44:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (stat);
   16c48:	e0bffdc3 	ldbu	r2,-9(fp)
   16c4c:	00002a06 	br	16cf8 <OSTaskDelReq+0x148>
  NIOS2_READ_STATUS (context);
   16c50:	0005303a 	rdctl	r2,status
   16c54:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c58:	e0fffa17 	ldw	r3,-24(fp)
   16c5c:	00bfff84 	movi	r2,-2
   16c60:	1884703a 	and	r2,r3,r2
   16c64:	1001703a 	wrctl	status,r2
  return context;
   16c68:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16c6c:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
   16c70:	e0bff603 	ldbu	r2,-40(fp)
   16c74:	100690ba 	slli	r3,r2,2
   16c78:	008000f4 	movhi	r2,3
   16c7c:	1885883a 	add	r2,r3,r2
   16c80:	10b82217 	ldw	r2,-8056(r2)
   16c84:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   16c88:	e0bffe17 	ldw	r2,-8(fp)
   16c8c:	1000071e 	bne	r2,zero,16cac <OSTaskDelReq+0xfc>
   16c90:	e0bfff17 	ldw	r2,-4(fp)
   16c94:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   16c98:	e0bff917 	ldw	r2,-28(fp)
   16c9c:	1001703a 	wrctl	status,r2
}
   16ca0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   16ca4:	008010c4 	movi	r2,67
   16ca8:	00001306 	br	16cf8 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   16cac:	e0bffe17 	ldw	r2,-8(fp)
   16cb0:	10800058 	cmpnei	r2,r2,1
   16cb4:	1000071e 	bne	r2,zero,16cd4 <OSTaskDelReq+0x124>
   16cb8:	e0bfff17 	ldw	r2,-4(fp)
   16cbc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   16cc0:	e0bff817 	ldw	r2,-32(fp)
   16cc4:	1001703a 	wrctl	status,r2
}
   16cc8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16ccc:	00800f44 	movi	r2,61
   16cd0:	00000906 	br	16cf8 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   16cd4:	e0bffe17 	ldw	r2,-8(fp)
   16cd8:	00c00fc4 	movi	r3,63
   16cdc:	10c00dc5 	stb	r3,55(r2)
   16ce0:	e0bfff17 	ldw	r2,-4(fp)
   16ce4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   16ce8:	e0bff717 	ldw	r2,-36(fp)
   16cec:	1001703a 	wrctl	status,r2
}
   16cf0:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16cf4:	0005883a 	mov	r2,zero
}
   16cf8:	e037883a 	mov	sp,fp
   16cfc:	df000017 	ldw	fp,0(sp)
   16d00:	dec00104 	addi	sp,sp,4
   16d04:	f800283a 	ret

00016d08 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16d08:	defff404 	addi	sp,sp,-48
   16d0c:	dfc00b15 	stw	ra,44(sp)
   16d10:	df000a15 	stw	fp,40(sp)
   16d14:	df000a04 	addi	fp,sp,40
   16d18:	2005883a 	mov	r2,r4
   16d1c:	e17ff715 	stw	r5,-36(fp)
   16d20:	e1bff615 	stw	r6,-40(fp)
   16d24:	e0bff805 	stb	r2,-32(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   16d28:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   16d2c:	e0bff617 	ldw	r2,-40(fp)
   16d30:	1000021e 	bne	r2,zero,16d3c <OSTaskNameGet+0x34>
        return (0);
   16d34:	0005883a 	mov	r2,zero
   16d38:	00005506 	br	16e90 <OSTaskNameGet+0x188>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   16d3c:	e0bff803 	ldbu	r2,-32(fp)
   16d40:	10800570 	cmpltui	r2,r2,21
   16d44:	1000081e 	bne	r2,zero,16d68 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   16d48:	e0bff803 	ldbu	r2,-32(fp)
   16d4c:	10803fe0 	cmpeqi	r2,r2,255
   16d50:	1000051e 	bne	r2,zero,16d68 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   16d54:	e0bff617 	ldw	r2,-40(fp)
   16d58:	00c00a84 	movi	r3,42
   16d5c:	10c00005 	stb	r3,0(r2)
            return (0);
   16d60:	0005883a 	mov	r2,zero
   16d64:	00004a06 	br	16e90 <OSTaskNameGet+0x188>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   16d68:	e0bff717 	ldw	r2,-36(fp)
   16d6c:	1000051e 	bne	r2,zero,16d84 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   16d70:	e0bff617 	ldw	r2,-40(fp)
   16d74:	00c00304 	movi	r3,12
   16d78:	10c00005 	stb	r3,0(r2)
        return (0);
   16d7c:	0005883a 	mov	r2,zero
   16d80:	00004306 	br	16e90 <OSTaskNameGet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   16d84:	d0a83643 	ldbu	r2,-24359(gp)
   16d88:	10803fcc 	andi	r2,r2,255
   16d8c:	10000526 	beq	r2,zero,16da4 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   16d90:	e0bff617 	ldw	r2,-40(fp)
   16d94:	00c00444 	movi	r3,17
   16d98:	10c00005 	stb	r3,0(r2)
        return (0);
   16d9c:	0005883a 	mov	r2,zero
   16da0:	00003b06 	br	16e90 <OSTaskNameGet+0x188>
  NIOS2_READ_STATUS (context);
   16da4:	0005303a 	rdctl	r2,status
   16da8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16dac:	e0fffc17 	ldw	r3,-16(fp)
   16db0:	00bfff84 	movi	r2,-2
   16db4:	1884703a 	and	r2,r3,r2
   16db8:	1001703a 	wrctl	status,r2
  return context;
   16dbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16dc0:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   16dc4:	e0bff803 	ldbu	r2,-32(fp)
   16dc8:	10803fd8 	cmpnei	r2,r2,255
   16dcc:	1000031e 	bne	r2,zero,16ddc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   16dd0:	d0a83a17 	ldw	r2,-24344(gp)
   16dd4:	10800c83 	ldbu	r2,50(r2)
   16dd8:	e0bff805 	stb	r2,-32(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16ddc:	e0bff803 	ldbu	r2,-32(fp)
   16de0:	100690ba 	slli	r3,r2,2
   16de4:	008000f4 	movhi	r2,3
   16de8:	1885883a 	add	r2,r3,r2
   16dec:	10b82217 	ldw	r2,-8056(r2)
   16df0:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   16df4:	e0bffe17 	ldw	r2,-8(fp)
   16df8:	10000a1e 	bne	r2,zero,16e24 <OSTaskNameGet+0x11c>
   16dfc:	e0bfff17 	ldw	r2,-4(fp)
   16e00:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   16e04:	e0bffb17 	ldw	r2,-20(fp)
   16e08:	1001703a 	wrctl	status,r2
}
   16e0c:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16e10:	e0bff617 	ldw	r2,-40(fp)
   16e14:	00c010c4 	movi	r3,67
   16e18:	10c00005 	stb	r3,0(r2)
        return (0);
   16e1c:	0005883a 	mov	r2,zero
   16e20:	00001b06 	br	16e90 <OSTaskNameGet+0x188>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   16e24:	e0bffe17 	ldw	r2,-8(fp)
   16e28:	10800058 	cmpnei	r2,r2,1
   16e2c:	10000a1e 	bne	r2,zero,16e58 <OSTaskNameGet+0x150>
   16e30:	e0bfff17 	ldw	r2,-4(fp)
   16e34:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   16e38:	e0bffa17 	ldw	r2,-24(fp)
   16e3c:	1001703a 	wrctl	status,r2
}
   16e40:	0001883a 	nop
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16e44:	e0bff617 	ldw	r2,-40(fp)
   16e48:	00c010c4 	movi	r3,67
   16e4c:	10c00005 	stb	r3,0(r2)
        return (0);
   16e50:	0005883a 	mov	r2,zero
   16e54:	00000e06 	br	16e90 <OSTaskNameGet+0x188>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   16e58:	e0bffe17 	ldw	r2,-8(fp)
   16e5c:	10801304 	addi	r2,r2,76
   16e60:	100b883a 	mov	r5,r2
   16e64:	e13ff717 	ldw	r4,-36(fp)
   16e68:	0010cd00 	call	10cd0 <OS_StrCopy>
   16e6c:	e0bffdc5 	stb	r2,-9(fp)
   16e70:	e0bfff17 	ldw	r2,-4(fp)
   16e74:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   16e78:	e0bff917 	ldw	r2,-28(fp)
   16e7c:	1001703a 	wrctl	status,r2
}
   16e80:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16e84:	e0bff617 	ldw	r2,-40(fp)
   16e88:	10000005 	stb	zero,0(r2)
    return (len);
   16e8c:	e0bffdc3 	ldbu	r2,-9(fp)
}
   16e90:	e037883a 	mov	sp,fp
   16e94:	dfc00117 	ldw	ra,4(sp)
   16e98:	df000017 	ldw	fp,0(sp)
   16e9c:	dec00204 	addi	sp,sp,8
   16ea0:	f800283a 	ret

00016ea4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16ea4:	defff304 	addi	sp,sp,-52
   16ea8:	dfc00c15 	stw	ra,48(sp)
   16eac:	df000b15 	stw	fp,44(sp)
   16eb0:	df000b04 	addi	fp,sp,44
   16eb4:	2005883a 	mov	r2,r4
   16eb8:	e17ff615 	stw	r5,-40(fp)
   16ebc:	e1bff515 	stw	r6,-44(fp)
   16ec0:	e0bff705 	stb	r2,-36(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16ec4:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16ec8:	e0bff517 	ldw	r2,-44(fp)
   16ecc:	10005e26 	beq	r2,zero,17048 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   16ed0:	e0bff703 	ldbu	r2,-36(fp)
   16ed4:	10800570 	cmpltui	r2,r2,21
   16ed8:	1000071e 	bne	r2,zero,16ef8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   16edc:	e0bff703 	ldbu	r2,-36(fp)
   16ee0:	10803fe0 	cmpeqi	r2,r2,255
   16ee4:	1000041e 	bne	r2,zero,16ef8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   16ee8:	e0bff517 	ldw	r2,-44(fp)
   16eec:	00c00a84 	movi	r3,42
   16ef0:	10c00005 	stb	r3,0(r2)
            return;
   16ef4:	00005506 	br	1704c <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   16ef8:	e0bff617 	ldw	r2,-40(fp)
   16efc:	1000041e 	bne	r2,zero,16f10 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   16f00:	e0bff517 	ldw	r2,-44(fp)
   16f04:	00c00304 	movi	r3,12
   16f08:	10c00005 	stb	r3,0(r2)
        return;
   16f0c:	00004f06 	br	1704c <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   16f10:	d0a83643 	ldbu	r2,-24359(gp)
   16f14:	10803fcc 	andi	r2,r2,255
   16f18:	10000426 	beq	r2,zero,16f2c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   16f1c:	e0bff517 	ldw	r2,-44(fp)
   16f20:	00c00484 	movi	r3,18
   16f24:	10c00005 	stb	r3,0(r2)
        return;
   16f28:	00004806 	br	1704c <OSTaskNameSet+0x1a8>
  NIOS2_READ_STATUS (context);
   16f2c:	0005303a 	rdctl	r2,status
   16f30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f34:	e0fffc17 	ldw	r3,-16(fp)
   16f38:	00bfff84 	movi	r2,-2
   16f3c:	1884703a 	and	r2,r3,r2
   16f40:	1001703a 	wrctl	status,r2
  return context;
   16f44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16f48:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   16f4c:	e0bff703 	ldbu	r2,-36(fp)
   16f50:	10803fd8 	cmpnei	r2,r2,255
   16f54:	1000031e 	bne	r2,zero,16f64 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   16f58:	d0a83a17 	ldw	r2,-24344(gp)
   16f5c:	10800c83 	ldbu	r2,50(r2)
   16f60:	e0bff705 	stb	r2,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16f64:	e0bff703 	ldbu	r2,-36(fp)
   16f68:	100690ba 	slli	r3,r2,2
   16f6c:	008000f4 	movhi	r2,3
   16f70:	1885883a 	add	r2,r3,r2
   16f74:	10b82217 	ldw	r2,-8056(r2)
   16f78:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   16f7c:	e0bffe17 	ldw	r2,-8(fp)
   16f80:	1000091e 	bne	r2,zero,16fa8 <OSTaskNameSet+0x104>
   16f84:	e0bfff17 	ldw	r2,-4(fp)
   16f88:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   16f8c:	e0bffb17 	ldw	r2,-20(fp)
   16f90:	1001703a 	wrctl	status,r2
}
   16f94:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16f98:	e0bff517 	ldw	r2,-44(fp)
   16f9c:	00c010c4 	movi	r3,67
   16fa0:	10c00005 	stb	r3,0(r2)
        return;
   16fa4:	00002906 	br	1704c <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   16fa8:	e0bffe17 	ldw	r2,-8(fp)
   16fac:	10800058 	cmpnei	r2,r2,1
   16fb0:	1000091e 	bne	r2,zero,16fd8 <OSTaskNameSet+0x134>
   16fb4:	e0bfff17 	ldw	r2,-4(fp)
   16fb8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   16fbc:	e0bffa17 	ldw	r2,-24(fp)
   16fc0:	1001703a 	wrctl	status,r2
}
   16fc4:	0001883a 	nop
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   16fc8:	e0bff517 	ldw	r2,-44(fp)
   16fcc:	00c010c4 	movi	r3,67
   16fd0:	10c00005 	stb	r3,0(r2)
        return;
   16fd4:	00001d06 	br	1704c <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   16fd8:	e13ff617 	ldw	r4,-40(fp)
   16fdc:	0010d440 	call	10d44 <OS_StrLen>
   16fe0:	e0bffdc5 	stb	r2,-9(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   16fe4:	e0bffdc3 	ldbu	r2,-9(fp)
   16fe8:	10800830 	cmpltui	r2,r2,32
   16fec:	1000091e 	bne	r2,zero,17014 <OSTaskNameSet+0x170>
   16ff0:	e0bfff17 	ldw	r2,-4(fp)
   16ff4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   16ff8:	e0bff917 	ldw	r2,-28(fp)
   16ffc:	1001703a 	wrctl	status,r2
}
   17000:	0001883a 	nop
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17004:	e0bff517 	ldw	r2,-44(fp)
   17008:	00c01044 	movi	r3,65
   1700c:	10c00005 	stb	r3,0(r2)
        return;
   17010:	00000e06 	br	1704c <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17014:	e0bffe17 	ldw	r2,-8(fp)
   17018:	10801304 	addi	r2,r2,76
   1701c:	e17ff617 	ldw	r5,-40(fp)
   17020:	1009883a 	mov	r4,r2
   17024:	0010cd00 	call	10cd0 <OS_StrCopy>
   17028:	e0bfff17 	ldw	r2,-4(fp)
   1702c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   17030:	e0bff817 	ldw	r2,-32(fp)
   17034:	1001703a 	wrctl	status,r2
}
   17038:	0001883a 	nop
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1703c:	e0bff517 	ldw	r2,-44(fp)
   17040:	10000005 	stb	zero,0(r2)
   17044:	00000106 	br	1704c <OSTaskNameSet+0x1a8>
        return;
   17048:	0001883a 	nop
}
   1704c:	e037883a 	mov	sp,fp
   17050:	dfc00117 	ldw	ra,4(sp)
   17054:	df000017 	ldw	fp,0(sp)
   17058:	dec00204 	addi	sp,sp,8
   1705c:	f800283a 	ret

00017060 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   17060:	defff404 	addi	sp,sp,-48
   17064:	dfc00b15 	stw	ra,44(sp)
   17068:	df000a15 	stw	fp,40(sp)
   1706c:	df000a04 	addi	fp,sp,40
   17070:	2005883a 	mov	r2,r4
   17074:	e0bff605 	stb	r2,-40(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17078:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1707c:	e0bff603 	ldbu	r2,-40(fp)
   17080:	10800530 	cmpltui	r2,r2,20
   17084:	1000021e 	bne	r2,zero,17090 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17088:	00800a84 	movi	r2,42
   1708c:	00006706 	br	1722c <OSTaskResume+0x1cc>
  NIOS2_READ_STATUS (context);
   17090:	0005303a 	rdctl	r2,status
   17094:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17098:	e0fffd17 	ldw	r3,-12(fp)
   1709c:	00bfff84 	movi	r2,-2
   170a0:	1884703a 	and	r2,r3,r2
   170a4:	1001703a 	wrctl	status,r2
  return context;
   170a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   170ac:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];
   170b0:	e0bff603 	ldbu	r2,-40(fp)
   170b4:	100690ba 	slli	r3,r2,2
   170b8:	008000f4 	movhi	r2,3
   170bc:	1885883a 	add	r2,r3,r2
   170c0:	10b82217 	ldw	r2,-8056(r2)
   170c4:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   170c8:	e0bffe17 	ldw	r2,-8(fp)
   170cc:	1000071e 	bne	r2,zero,170ec <OSTaskResume+0x8c>
   170d0:	e0bfff17 	ldw	r2,-4(fp)
   170d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   170d8:	e0bffc17 	ldw	r2,-16(fp)
   170dc:	1001703a 	wrctl	status,r2
}
   170e0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   170e4:	00801184 	movi	r2,70
   170e8:	00005006 	br	1722c <OSTaskResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   170ec:	e0bffe17 	ldw	r2,-8(fp)
   170f0:	10800058 	cmpnei	r2,r2,1
   170f4:	1000071e 	bne	r2,zero,17114 <OSTaskResume+0xb4>
   170f8:	e0bfff17 	ldw	r2,-4(fp)
   170fc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   17100:	e0bffb17 	ldw	r2,-20(fp)
   17104:	1001703a 	wrctl	status,r2
}
   17108:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1710c:	008010c4 	movi	r2,67
   17110:	00004606 	br	1722c <OSTaskResume+0x1cc>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   17114:	e0bffe17 	ldw	r2,-8(fp)
   17118:	10800c03 	ldbu	r2,48(r2)
   1711c:	10803fcc 	andi	r2,r2,255
   17120:	1080020c 	andi	r2,r2,8
   17124:	10003b26 	beq	r2,zero,17214 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   17128:	e0bffe17 	ldw	r2,-8(fp)
   1712c:	10c00c03 	ldbu	r3,48(r2)
   17130:	00bffdc4 	movi	r2,-9
   17134:	1884703a 	and	r2,r3,r2
   17138:	1007883a 	mov	r3,r2
   1713c:	e0bffe17 	ldw	r2,-8(fp)
   17140:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   17144:	e0bffe17 	ldw	r2,-8(fp)
   17148:	10800c03 	ldbu	r2,48(r2)
   1714c:	10803fcc 	andi	r2,r2,255
   17150:	1000291e 	bne	r2,zero,171f8 <OSTaskResume+0x198>
            if (ptcb->OSTCBDly == 0) {
   17154:	e0bffe17 	ldw	r2,-8(fp)
   17158:	10800b8b 	ldhu	r2,46(r2)
   1715c:	10bfffcc 	andi	r2,r2,65535
   17160:	1000201e 	bne	r2,zero,171e4 <OSTaskResume+0x184>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   17164:	e0bffe17 	ldw	r2,-8(fp)
   17168:	10c00d83 	ldbu	r3,54(r2)
   1716c:	d0a83743 	ldbu	r2,-24355(gp)
   17170:	1884b03a 	or	r2,r3,r2
   17174:	d0a83745 	stb	r2,-24355(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17178:	e0bffe17 	ldw	r2,-8(fp)
   1717c:	10800d03 	ldbu	r2,52(r2)
   17180:	10c03fcc 	andi	r3,r2,255
   17184:	d0a83784 	addi	r2,gp,-24354
   17188:	1885883a 	add	r2,r3,r2
   1718c:	11000003 	ldbu	r4,0(r2)
   17190:	e0bffe17 	ldw	r2,-8(fp)
   17194:	10800d43 	ldbu	r2,53(r2)
   17198:	e0fffe17 	ldw	r3,-8(fp)
   1719c:	18c00d03 	ldbu	r3,52(r3)
   171a0:	18c03fcc 	andi	r3,r3,255
   171a4:	2084b03a 	or	r2,r4,r2
   171a8:	1009883a 	mov	r4,r2
   171ac:	d0a83784 	addi	r2,gp,-24354
   171b0:	1885883a 	add	r2,r3,r2
   171b4:	11000005 	stb	r4,0(r2)
   171b8:	e0bfff17 	ldw	r2,-4(fp)
   171bc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   171c0:	e0bffa17 	ldw	r2,-24(fp)
   171c4:	1001703a 	wrctl	status,r2
}
   171c8:	0001883a 	nop
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   171cc:	d0a83843 	ldbu	r2,-24351(gp)
   171d0:	10803fcc 	andi	r2,r2,255
   171d4:	10800058 	cmpnei	r2,r2,1
   171d8:	10000c1e 	bne	r2,zero,1720c <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
   171dc:	0010b980 	call	10b98 <OS_Sched>
   171e0:	00000a06 	br	1720c <OSTaskResume+0x1ac>
   171e4:	e0bfff17 	ldw	r2,-4(fp)
   171e8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   171ec:	e0bff917 	ldw	r2,-28(fp)
   171f0:	1001703a 	wrctl	status,r2
}
   171f4:	00000506 	br	1720c <OSTaskResume+0x1ac>
   171f8:	e0bfff17 	ldw	r2,-4(fp)
   171fc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   17200:	e0bff817 	ldw	r2,-32(fp)
   17204:	1001703a 	wrctl	status,r2
}
   17208:	0001883a 	nop
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1720c:	0005883a 	mov	r2,zero
   17210:	00000606 	br	1722c <OSTaskResume+0x1cc>
   17214:	e0bfff17 	ldw	r2,-4(fp)
   17218:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   1721c:	e0bff717 	ldw	r2,-36(fp)
   17220:	1001703a 	wrctl	status,r2
}
   17224:	0001883a 	nop
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   17228:	00801104 	movi	r2,68
}
   1722c:	e037883a 	mov	sp,fp
   17230:	dfc00117 	ldw	ra,4(sp)
   17234:	df000017 	ldw	fp,0(sp)
   17238:	dec00204 	addi	sp,sp,8
   1723c:	f800283a 	ret

00017240 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   17240:	defff304 	addi	sp,sp,-52
   17244:	df000c15 	stw	fp,48(sp)
   17248:	df000c04 	addi	fp,sp,48
   1724c:	2005883a 	mov	r2,r4
   17250:	e17ff415 	stw	r5,-48(fp)
   17254:	e0bff505 	stb	r2,-44(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17258:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1725c:	e0bff503 	ldbu	r2,-44(fp)
   17260:	10800570 	cmpltui	r2,r2,21
   17264:	1000051e 	bne	r2,zero,1727c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   17268:	e0bff503 	ldbu	r2,-44(fp)
   1726c:	10803fe0 	cmpeqi	r2,r2,255
   17270:	1000021e 	bne	r2,zero,1727c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   17274:	00800a84 	movi	r2,42
   17278:	00005b06 	br	173e8 <OSTaskStkChk+0x1a8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1727c:	e0bff417 	ldw	r2,-48(fp)
   17280:	1000021e 	bne	r2,zero,1728c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   17284:	00800244 	movi	r2,9
   17288:	00005706 	br	173e8 <OSTaskStkChk+0x1a8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1728c:	e0bff417 	ldw	r2,-48(fp)
   17290:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   17294:	e0bff417 	ldw	r2,-48(fp)
   17298:	10000115 	stw	zero,4(r2)
  NIOS2_READ_STATUS (context);
   1729c:	0005303a 	rdctl	r2,status
   172a0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172a4:	e0fffa17 	ldw	r3,-24(fp)
   172a8:	00bfff84 	movi	r2,-2
   172ac:	1884703a 	and	r2,r3,r2
   172b0:	1001703a 	wrctl	status,r2
  return context;
   172b4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
   172b8:	e0bffd15 	stw	r2,-12(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   172bc:	e0bff503 	ldbu	r2,-44(fp)
   172c0:	10803fd8 	cmpnei	r2,r2,255
   172c4:	1000031e 	bne	r2,zero,172d4 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   172c8:	d0a83a17 	ldw	r2,-24344(gp)
   172cc:	10800c83 	ldbu	r2,50(r2)
   172d0:	e0bff505 	stb	r2,-44(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   172d4:	e0bff503 	ldbu	r2,-44(fp)
   172d8:	100690ba 	slli	r3,r2,2
   172dc:	008000f4 	movhi	r2,3
   172e0:	1885883a 	add	r2,r3,r2
   172e4:	10b82217 	ldw	r2,-8056(r2)
   172e8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   172ec:	e0bffc17 	ldw	r2,-16(fp)
   172f0:	1000071e 	bne	r2,zero,17310 <OSTaskStkChk+0xd0>
   172f4:	e0bffd17 	ldw	r2,-12(fp)
   172f8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   172fc:	e0bff917 	ldw	r2,-28(fp)
   17300:	1001703a 	wrctl	status,r2
}
   17304:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17308:	008010c4 	movi	r2,67
   1730c:	00003606 	br	173e8 <OSTaskStkChk+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17310:	e0bffc17 	ldw	r2,-16(fp)
   17314:	10800058 	cmpnei	r2,r2,1
   17318:	1000071e 	bne	r2,zero,17338 <OSTaskStkChk+0xf8>
   1731c:	e0bffd17 	ldw	r2,-12(fp)
   17320:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   17324:	e0bff817 	ldw	r2,-32(fp)
   17328:	1001703a 	wrctl	status,r2
}
   1732c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17330:	008010c4 	movi	r2,67
   17334:	00002c06 	br	173e8 <OSTaskStkChk+0x1a8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   17338:	e0bffc17 	ldw	r2,-16(fp)
   1733c:	1080040b 	ldhu	r2,16(r2)
   17340:	10bfffcc 	andi	r2,r2,65535
   17344:	1080004c 	andi	r2,r2,1
   17348:	1000071e 	bne	r2,zero,17368 <OSTaskStkChk+0x128>
   1734c:	e0bffd17 	ldw	r2,-12(fp)
   17350:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context);
   17354:	e0bff717 	ldw	r2,-36(fp)
   17358:	1001703a 	wrctl	status,r2
}
   1735c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   17360:	00801144 	movi	r2,69
   17364:	00002006 	br	173e8 <OSTaskStkChk+0x1a8>
    }
    nfree = 0;
   17368:	e03ffe15 	stw	zero,-8(fp)
    size  = ptcb->OSTCBStkSize;
   1736c:	e0bffc17 	ldw	r2,-16(fp)
   17370:	10800317 	ldw	r2,12(r2)
   17374:	e0bffb15 	stw	r2,-20(fp)
    pchk  = ptcb->OSTCBStkBottom;
   17378:	e0bffc17 	ldw	r2,-16(fp)
   1737c:	10800217 	ldw	r2,8(r2)
   17380:	e0bfff15 	stw	r2,-4(fp)
   17384:	e0bffd17 	ldw	r2,-12(fp)
   17388:	e0bff615 	stw	r2,-40(fp)
  NIOS2_WRITE_STATUS (context);
   1738c:	e0bff617 	ldw	r2,-40(fp)
   17390:	1001703a 	wrctl	status,r2
}
   17394:	0001883a 	nop
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17398:	00000306 	br	173a8 <OSTaskStkChk+0x168>
        nfree++;
   1739c:	e0bffe17 	ldw	r2,-8(fp)
   173a0:	10800044 	addi	r2,r2,1
   173a4:	e0bffe15 	stw	r2,-8(fp)
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   173a8:	e0bfff17 	ldw	r2,-4(fp)
   173ac:	10c00104 	addi	r3,r2,4
   173b0:	e0ffff15 	stw	r3,-4(fp)
   173b4:	10800017 	ldw	r2,0(r2)
   173b8:	103ff826 	beq	r2,zero,1739c <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   173bc:	e0bffe17 	ldw	r2,-8(fp)
   173c0:	100690ba 	slli	r3,r2,2
   173c4:	e0bff417 	ldw	r2,-48(fp)
   173c8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   173cc:	e0fffb17 	ldw	r3,-20(fp)
   173d0:	e0bffe17 	ldw	r2,-8(fp)
   173d4:	1885c83a 	sub	r2,r3,r2
   173d8:	100690ba 	slli	r3,r2,2
   173dc:	e0bff417 	ldw	r2,-48(fp)
   173e0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   173e4:	0005883a 	mov	r2,zero
}
   173e8:	e037883a 	mov	sp,fp
   173ec:	df000017 	ldw	fp,0(sp)
   173f0:	dec00104 	addi	sp,sp,4
   173f4:	f800283a 	ret

000173f8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   173f8:	defff504 	addi	sp,sp,-44
   173fc:	dfc00a15 	stw	ra,40(sp)
   17400:	df000915 	stw	fp,36(sp)
   17404:	df000904 	addi	fp,sp,36
   17408:	2005883a 	mov	r2,r4
   1740c:	e0bff705 	stb	r2,-36(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17410:	e03ffe15 	stw	zero,-8(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17414:	e0bff703 	ldbu	r2,-36(fp)
   17418:	10800518 	cmpnei	r2,r2,20
   1741c:	1000021e 	bne	r2,zero,17428 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   17420:	008011c4 	movi	r2,71
   17424:	00006906 	br	175cc <OSTaskSuspend+0x1d4>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17428:	e0bff703 	ldbu	r2,-36(fp)
   1742c:	10800530 	cmpltui	r2,r2,20
   17430:	1000051e 	bne	r2,zero,17448 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   17434:	e0bff703 	ldbu	r2,-36(fp)
   17438:	10803fe0 	cmpeqi	r2,r2,255
   1743c:	1000021e 	bne	r2,zero,17448 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17440:	00800a84 	movi	r2,42
   17444:	00006106 	br	175cc <OSTaskSuspend+0x1d4>
  NIOS2_READ_STATUS (context);
   17448:	0005303a 	rdctl	r2,status
   1744c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17450:	e0fffb17 	ldw	r3,-20(fp)
   17454:	00bfff84 	movi	r2,-2
   17458:	1884703a 	and	r2,r3,r2
   1745c:	1001703a 	wrctl	status,r2
  return context;
   17460:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   17464:	e0bffe15 	stw	r2,-8(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17468:	e0bff703 	ldbu	r2,-36(fp)
   1746c:	10803fd8 	cmpnei	r2,r2,255
   17470:	1000061e 	bne	r2,zero,1748c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   17474:	d0a83a17 	ldw	r2,-24344(gp)
   17478:	10800c83 	ldbu	r2,50(r2)
   1747c:	e0bff705 	stb	r2,-36(fp)
        self = OS_TRUE;
   17480:	00800044 	movi	r2,1
   17484:	e0bfffc5 	stb	r2,-1(fp)
   17488:	00000906 	br	174b0 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1748c:	d0a83a17 	ldw	r2,-24344(gp)
   17490:	10800c83 	ldbu	r2,50(r2)
   17494:	e0fff703 	ldbu	r3,-36(fp)
   17498:	10803fcc 	andi	r2,r2,255
   1749c:	1880031e 	bne	r3,r2,174ac <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   174a0:	00800044 	movi	r2,1
   174a4:	e0bfffc5 	stb	r2,-1(fp)
   174a8:	00000106 	br	174b0 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   174ac:	e03fffc5 	stb	zero,-1(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   174b0:	e0bff703 	ldbu	r2,-36(fp)
   174b4:	100690ba 	slli	r3,r2,2
   174b8:	008000f4 	movhi	r2,3
   174bc:	1885883a 	add	r2,r3,r2
   174c0:	10b82217 	ldw	r2,-8056(r2)
   174c4:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   174c8:	e0bffd17 	ldw	r2,-12(fp)
   174cc:	1000071e 	bne	r2,zero,174ec <OSTaskSuspend+0xf4>
   174d0:	e0bffe17 	ldw	r2,-8(fp)
   174d4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   174d8:	e0bffa17 	ldw	r2,-24(fp)
   174dc:	1001703a 	wrctl	status,r2
}
   174e0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   174e4:	00801204 	movi	r2,72
   174e8:	00003806 	br	175cc <OSTaskSuspend+0x1d4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   174ec:	e0bffd17 	ldw	r2,-12(fp)
   174f0:	10800058 	cmpnei	r2,r2,1
   174f4:	1000071e 	bne	r2,zero,17514 <OSTaskSuspend+0x11c>
   174f8:	e0bffe17 	ldw	r2,-8(fp)
   174fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   17500:	e0bff917 	ldw	r2,-28(fp)
   17504:	1001703a 	wrctl	status,r2
}
   17508:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1750c:	008010c4 	movi	r2,67
   17510:	00002e06 	br	175cc <OSTaskSuspend+0x1d4>
    }
    y            = ptcb->OSTCBY;
   17514:	e0bffd17 	ldw	r2,-12(fp)
   17518:	10800d03 	ldbu	r2,52(r2)
   1751c:	e0bffcc5 	stb	r2,-13(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   17520:	e0fffcc3 	ldbu	r3,-13(fp)
   17524:	d0a83784 	addi	r2,gp,-24354
   17528:	1885883a 	add	r2,r3,r2
   1752c:	10800003 	ldbu	r2,0(r2)
   17530:	1007883a 	mov	r3,r2
   17534:	e0bffd17 	ldw	r2,-12(fp)
   17538:	10800d43 	ldbu	r2,53(r2)
   1753c:	0084303a 	nor	r2,zero,r2
   17540:	1884703a 	and	r2,r3,r2
   17544:	e0fffcc3 	ldbu	r3,-13(fp)
   17548:	1009883a 	mov	r4,r2
   1754c:	d0a83784 	addi	r2,gp,-24354
   17550:	1885883a 	add	r2,r3,r2
   17554:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   17558:	e0fffcc3 	ldbu	r3,-13(fp)
   1755c:	d0a83784 	addi	r2,gp,-24354
   17560:	1885883a 	add	r2,r3,r2
   17564:	10800003 	ldbu	r2,0(r2)
   17568:	10803fcc 	andi	r2,r2,255
   1756c:	1000071e 	bne	r2,zero,1758c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   17570:	e0bffd17 	ldw	r2,-12(fp)
   17574:	10800d83 	ldbu	r2,54(r2)
   17578:	0084303a 	nor	r2,zero,r2
   1757c:	1007883a 	mov	r3,r2
   17580:	d0a83743 	ldbu	r2,-24355(gp)
   17584:	1884703a 	and	r2,r3,r2
   17588:	d0a83745 	stb	r2,-24355(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1758c:	e0bffd17 	ldw	r2,-12(fp)
   17590:	10800c03 	ldbu	r2,48(r2)
   17594:	10800214 	ori	r2,r2,8
   17598:	1007883a 	mov	r3,r2
   1759c:	e0bffd17 	ldw	r2,-12(fp)
   175a0:	10c00c05 	stb	r3,48(r2)
   175a4:	e0bffe17 	ldw	r2,-8(fp)
   175a8:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   175ac:	e0bff817 	ldw	r2,-32(fp)
   175b0:	1001703a 	wrctl	status,r2
}
   175b4:	0001883a 	nop
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   175b8:	e0bfffc3 	ldbu	r2,-1(fp)
   175bc:	10800058 	cmpnei	r2,r2,1
   175c0:	1000011e 	bne	r2,zero,175c8 <OSTaskSuspend+0x1d0>
        OS_Sched();                                             /* Find new highest priority task      */
   175c4:	0010b980 	call	10b98 <OS_Sched>
    }
    return (OS_ERR_NONE);
   175c8:	0005883a 	mov	r2,zero
}
   175cc:	e037883a 	mov	sp,fp
   175d0:	dfc00117 	ldw	ra,4(sp)
   175d4:	df000017 	ldw	fp,0(sp)
   175d8:	dec00204 	addi	sp,sp,8
   175dc:	f800283a 	ret

000175e0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   175e0:	defff604 	addi	sp,sp,-40
   175e4:	dfc00915 	stw	ra,36(sp)
   175e8:	df000815 	stw	fp,32(sp)
   175ec:	df000804 	addi	fp,sp,32
   175f0:	2005883a 	mov	r2,r4
   175f4:	e17ff815 	stw	r5,-32(fp)
   175f8:	e0bff905 	stb	r2,-28(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   175fc:	e03fff15 	stw	zero,-4(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   17600:	e0bff903 	ldbu	r2,-28(fp)
   17604:	10800570 	cmpltui	r2,r2,21
   17608:	1000051e 	bne	r2,zero,17620 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1760c:	e0bff903 	ldbu	r2,-28(fp)
   17610:	10803fe0 	cmpeqi	r2,r2,255
   17614:	1000021e 	bne	r2,zero,17620 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   17618:	00800a84 	movi	r2,42
   1761c:	00003506 	br	176f4 <OSTaskQuery+0x114>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   17620:	e0bff817 	ldw	r2,-32(fp)
   17624:	1000021e 	bne	r2,zero,17630 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   17628:	00800244 	movi	r2,9
   1762c:	00003106 	br	176f4 <OSTaskQuery+0x114>
  NIOS2_READ_STATUS (context);
   17630:	0005303a 	rdctl	r2,status
   17634:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17638:	e0fffd17 	ldw	r3,-12(fp)
   1763c:	00bfff84 	movi	r2,-2
   17640:	1884703a 	and	r2,r3,r2
   17644:	1001703a 	wrctl	status,r2
  return context;
   17648:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1764c:	e0bfff15 	stw	r2,-4(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   17650:	e0bff903 	ldbu	r2,-28(fp)
   17654:	10803fd8 	cmpnei	r2,r2,255
   17658:	1000031e 	bne	r2,zero,17668 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1765c:	d0a83a17 	ldw	r2,-24344(gp)
   17660:	10800c83 	ldbu	r2,50(r2)
   17664:	e0bff905 	stb	r2,-28(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17668:	e0bff903 	ldbu	r2,-28(fp)
   1766c:	100690ba 	slli	r3,r2,2
   17670:	008000f4 	movhi	r2,3
   17674:	1885883a 	add	r2,r3,r2
   17678:	10b82217 	ldw	r2,-8056(r2)
   1767c:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   17680:	e0bffe17 	ldw	r2,-8(fp)
   17684:	1000071e 	bne	r2,zero,176a4 <OSTaskQuery+0xc4>
   17688:	e0bfff17 	ldw	r2,-4(fp)
   1768c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   17690:	e0bffc17 	ldw	r2,-16(fp)
   17694:	1001703a 	wrctl	status,r2
}
   17698:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1769c:	00800a44 	movi	r2,41
   176a0:	00001406 	br	176f4 <OSTaskQuery+0x114>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   176a4:	e0bffe17 	ldw	r2,-8(fp)
   176a8:	10800058 	cmpnei	r2,r2,1
   176ac:	1000071e 	bne	r2,zero,176cc <OSTaskQuery+0xec>
   176b0:	e0bfff17 	ldw	r2,-4(fp)
   176b4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   176b8:	e0bffb17 	ldw	r2,-20(fp)
   176bc:	1001703a 	wrctl	status,r2
}
   176c0:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   176c4:	008010c4 	movi	r2,67
   176c8:	00000a06 	br	176f4 <OSTaskQuery+0x114>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   176cc:	01801b04 	movi	r6,108
   176d0:	e17ffe17 	ldw	r5,-8(fp)
   176d4:	e13ff817 	ldw	r4,-32(fp)
   176d8:	0010b2c0 	call	10b2c <OS_MemCopy>
   176dc:	e0bfff17 	ldw	r2,-4(fp)
   176e0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   176e4:	e0bffa17 	ldw	r2,-24(fp)
   176e8:	1001703a 	wrctl	status,r2
}
   176ec:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   176f0:	0005883a 	mov	r2,zero
}
   176f4:	e037883a 	mov	sp,fp
   176f8:	dfc00117 	ldw	ra,4(sp)
   176fc:	df000017 	ldw	fp,0(sp)
   17700:	dec00204 	addi	sp,sp,8
   17704:	f800283a 	ret

00017708 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   17708:	defffc04 	addi	sp,sp,-16
   1770c:	df000315 	stw	fp,12(sp)
   17710:	df000304 	addi	fp,sp,12
   17714:	e13fff15 	stw	r4,-4(fp)
   17718:	e17ffe15 	stw	r5,-8(fp)
   1771c:	3005883a 	mov	r2,r6
   17720:	e0bffd0d 	sth	r2,-12(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   17724:	e0bffd0b 	ldhu	r2,-12(fp)
   17728:	1080004c 	andi	r2,r2,1
   1772c:	10000d26 	beq	r2,zero,17764 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   17730:	e0bffd0b 	ldhu	r2,-12(fp)
   17734:	1080008c 	andi	r2,r2,2
   17738:	10000a26 	beq	r2,zero,17764 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1773c:	00000706 	br	1775c <OS_TaskStkClr+0x54>
                size--;
   17740:	e0bffe17 	ldw	r2,-8(fp)
   17744:	10bfffc4 	addi	r2,r2,-1
   17748:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1774c:	e0bfff17 	ldw	r2,-4(fp)
   17750:	10c00104 	addi	r3,r2,4
   17754:	e0ffff15 	stw	r3,-4(fp)
   17758:	10000015 	stw	zero,0(r2)
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1775c:	e0bffe17 	ldw	r2,-8(fp)
   17760:	103ff71e 	bne	r2,zero,17740 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   17764:	0001883a 	nop
   17768:	e037883a 	mov	sp,fp
   1776c:	df000017 	ldw	fp,0(sp)
   17770:	dec00104 	addi	sp,sp,4
   17774:	f800283a 	ret

00017778 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   17778:	defff904 	addi	sp,sp,-28
   1777c:	dfc00615 	stw	ra,24(sp)
   17780:	df000515 	stw	fp,20(sp)
   17784:	df000504 	addi	fp,sp,20
   17788:	2005883a 	mov	r2,r4
   1778c:	e0bffb0d 	sth	r2,-20(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17790:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17794:	d0a83643 	ldbu	r2,-24359(gp)
   17798:	10803fcc 	andi	r2,r2,255
   1779c:	1000321e 	bne	r2,zero,17868 <OSTimeDly+0xf0>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   177a0:	e0bffb0b 	ldhu	r2,-20(fp)
   177a4:	10003126 	beq	r2,zero,1786c <OSTimeDly+0xf4>
  NIOS2_READ_STATUS (context);
   177a8:	0005303a 	rdctl	r2,status
   177ac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177b0:	e0fffd17 	ldw	r3,-12(fp)
   177b4:	00bfff84 	movi	r2,-2
   177b8:	1884703a 	and	r2,r3,r2
   177bc:	1001703a 	wrctl	status,r2
  return context;
   177c0:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
   177c4:	e0bfff15 	stw	r2,-4(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   177c8:	d0a83a17 	ldw	r2,-24344(gp)
   177cc:	10800d03 	ldbu	r2,52(r2)
   177d0:	e0bffec5 	stb	r2,-5(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   177d4:	e0fffec3 	ldbu	r3,-5(fp)
   177d8:	d0a83784 	addi	r2,gp,-24354
   177dc:	1885883a 	add	r2,r3,r2
   177e0:	10800003 	ldbu	r2,0(r2)
   177e4:	1007883a 	mov	r3,r2
   177e8:	d0a83a17 	ldw	r2,-24344(gp)
   177ec:	10800d43 	ldbu	r2,53(r2)
   177f0:	0084303a 	nor	r2,zero,r2
   177f4:	1884703a 	and	r2,r3,r2
   177f8:	e0fffec3 	ldbu	r3,-5(fp)
   177fc:	1009883a 	mov	r4,r2
   17800:	d0a83784 	addi	r2,gp,-24354
   17804:	1885883a 	add	r2,r3,r2
   17808:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1780c:	e0fffec3 	ldbu	r3,-5(fp)
   17810:	d0a83784 	addi	r2,gp,-24354
   17814:	1885883a 	add	r2,r3,r2
   17818:	10800003 	ldbu	r2,0(r2)
   1781c:	10803fcc 	andi	r2,r2,255
   17820:	1000071e 	bne	r2,zero,17840 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   17824:	d0a83a17 	ldw	r2,-24344(gp)
   17828:	10800d83 	ldbu	r2,54(r2)
   1782c:	0084303a 	nor	r2,zero,r2
   17830:	1007883a 	mov	r3,r2
   17834:	d0a83743 	ldbu	r2,-24355(gp)
   17838:	1884703a 	and	r2,r3,r2
   1783c:	d0a83745 	stb	r2,-24355(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   17840:	d0a83a17 	ldw	r2,-24344(gp)
   17844:	e0fffb0b 	ldhu	r3,-20(fp)
   17848:	10c00b8d 	sth	r3,46(r2)
   1784c:	e0bfff17 	ldw	r2,-4(fp)
   17850:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   17854:	e0bffc17 	ldw	r2,-16(fp)
   17858:	1001703a 	wrctl	status,r2
}
   1785c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   17860:	0010b980 	call	10b98 <OS_Sched>
   17864:	00000106 	br	1786c <OSTimeDly+0xf4>
        return;
   17868:	0001883a 	nop
    }
}
   1786c:	e037883a 	mov	sp,fp
   17870:	dfc00117 	ldw	ra,4(sp)
   17874:	df000017 	ldw	fp,0(sp)
   17878:	dec00204 	addi	sp,sp,8
   1787c:	f800283a 	ret

00017880 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   17880:	defff804 	addi	sp,sp,-32
   17884:	dfc00715 	stw	ra,28(sp)
   17888:	df000615 	stw	fp,24(sp)
   1788c:	df000604 	addi	fp,sp,24
   17890:	2005883a 	mov	r2,r4
   17894:	3009883a 	mov	r4,r6
   17898:	3807883a 	mov	r3,r7
   1789c:	e0bffd05 	stb	r2,-12(fp)
   178a0:	2805883a 	mov	r2,r5
   178a4:	e0bffc05 	stb	r2,-16(fp)
   178a8:	2005883a 	mov	r2,r4
   178ac:	e0bffb05 	stb	r2,-20(fp)
   178b0:	1805883a 	mov	r2,r3
   178b4:	e0bffa0d 	sth	r2,-24(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   178b8:	d0a83643 	ldbu	r2,-24359(gp)
   178bc:	10803fcc 	andi	r2,r2,255
   178c0:	10000226 	beq	r2,zero,178cc <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
   178c4:	00801544 	movi	r2,85
   178c8:	00003d06 	br	179c0 <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   178cc:	e0bffd03 	ldbu	r2,-12(fp)
   178d0:	1000081e 	bne	r2,zero,178f4 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
   178d4:	e0bffc03 	ldbu	r2,-16(fp)
   178d8:	1000061e 	bne	r2,zero,178f4 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
   178dc:	e0bffb03 	ldbu	r2,-20(fp)
   178e0:	1000041e 	bne	r2,zero,178f4 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
   178e4:	e0bffa0b 	ldhu	r2,-24(fp)
   178e8:	1000021e 	bne	r2,zero,178f4 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
   178ec:	00801504 	movi	r2,84
   178f0:	00003306 	br	179c0 <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
   178f4:	e0bffc03 	ldbu	r2,-16(fp)
   178f8:	10800f30 	cmpltui	r2,r2,60
   178fc:	1000021e 	bne	r2,zero,17908 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   17900:	00801444 	movi	r2,81
   17904:	00002e06 	br	179c0 <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
   17908:	e0bffb03 	ldbu	r2,-20(fp)
   1790c:	10800f30 	cmpltui	r2,r2,60
   17910:	1000021e 	bne	r2,zero,1791c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
   17914:	00801484 	movi	r2,82
   17918:	00002906 	br	179c0 <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
   1791c:	e0bffa0b 	ldhu	r2,-24(fp)
   17920:	1080fa30 	cmpltui	r2,r2,1000
   17924:	1000021e 	bne	r2,zero,17930 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
   17928:	008014c4 	movi	r2,83
   1792c:	00002406 	br	179c0 <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   17930:	e0bffd03 	ldbu	r2,-12(fp)
   17934:	10c38424 	muli	r3,r2,3600
   17938:	e0bffc03 	ldbu	r2,-16(fp)
   1793c:	10800f24 	muli	r2,r2,60
   17940:	1887883a 	add	r3,r3,r2
   17944:	e0bffb03 	ldbu	r2,-20(fp)
   17948:	1885883a 	add	r2,r3,r2
   1794c:	100690fa 	slli	r3,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   17950:	e0bffa0b 	ldhu	r2,-24(fp)
   17954:	10800f84 	addi	r2,r2,62
   17958:	100890fa 	slli	r4,r2,3
   1795c:	0080fa04 	movi	r2,1000
   17960:	2085203a 	divu	r2,r4,r2
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   17964:	1885883a 	add	r2,r3,r2
   17968:	e0bffe15 	stw	r2,-8(fp)
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1796c:	e0bffe17 	ldw	r2,-8(fp)
   17970:	1004d43a 	srli	r2,r2,16
   17974:	e0bfff8d 	sth	r2,-2(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   17978:	e0bffe17 	ldw	r2,-8(fp)
   1797c:	10bfffcc 	andi	r2,r2,65535
   17980:	e0bffe15 	stw	r2,-8(fp)
    OSTimeDly((INT16U)ticks);
   17984:	e0bffe17 	ldw	r2,-8(fp)
   17988:	10bfffcc 	andi	r2,r2,65535
   1798c:	1009883a 	mov	r4,r2
   17990:	00177780 	call	17778 <OSTimeDly>
    while (loops > 0) {
   17994:	00000706 	br	179b4 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
   17998:	01200014 	movui	r4,32768
   1799c:	00177780 	call	17778 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   179a0:	01200014 	movui	r4,32768
   179a4:	00177780 	call	17778 <OSTimeDly>
        loops--;
   179a8:	e0bfff8b 	ldhu	r2,-2(fp)
   179ac:	10bfffc4 	addi	r2,r2,-1
   179b0:	e0bfff8d 	sth	r2,-2(fp)
    while (loops > 0) {
   179b4:	e0bfff8b 	ldhu	r2,-2(fp)
   179b8:	103ff71e 	bne	r2,zero,17998 <OSTimeDlyHMSM+0x118>
    }
    return (OS_ERR_NONE);
   179bc:	0005883a 	mov	r2,zero
}
   179c0:	e037883a 	mov	sp,fp
   179c4:	dfc00117 	ldw	ra,4(sp)
   179c8:	df000017 	ldw	fp,0(sp)
   179cc:	dec00204 	addi	sp,sp,8
   179d0:	f800283a 	ret

000179d4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   179d4:	defff504 	addi	sp,sp,-44
   179d8:	dfc00a15 	stw	ra,40(sp)
   179dc:	df000915 	stw	fp,36(sp)
   179e0:	df000904 	addi	fp,sp,36
   179e4:	2005883a 	mov	r2,r4
   179e8:	e0bff705 	stb	r2,-36(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   179ec:	e03fff15 	stw	zero,-4(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   179f0:	e0bff703 	ldbu	r2,-36(fp)
   179f4:	10800530 	cmpltui	r2,r2,20
   179f8:	1000021e 	bne	r2,zero,17a04 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   179fc:	00800a84 	movi	r2,42
   17a00:	00006706 	br	17ba0 <OSTimeDlyResume+0x1cc>
  NIOS2_READ_STATUS (context);
   17a04:	0005303a 	rdctl	r2,status
   17a08:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a0c:	e0fffd17 	ldw	r3,-12(fp)
   17a10:	00bfff84 	movi	r2,-2
   17a14:	1884703a 	and	r2,r3,r2
   17a18:	1001703a 	wrctl	status,r2
  return context;
   17a1c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17a20:	e0bfff15 	stw	r2,-4(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   17a24:	e0bff703 	ldbu	r2,-36(fp)
   17a28:	100690ba 	slli	r3,r2,2
   17a2c:	008000f4 	movhi	r2,3
   17a30:	1885883a 	add	r2,r3,r2
   17a34:	10b82217 	ldw	r2,-8056(r2)
   17a38:	e0bffe15 	stw	r2,-8(fp)
    if (ptcb == (OS_TCB *)0) {
   17a3c:	e0bffe17 	ldw	r2,-8(fp)
   17a40:	1000071e 	bne	r2,zero,17a60 <OSTimeDlyResume+0x8c>
   17a44:	e0bfff17 	ldw	r2,-4(fp)
   17a48:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   17a4c:	e0bffc17 	ldw	r2,-16(fp)
   17a50:	1001703a 	wrctl	status,r2
}
   17a54:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   17a58:	008010c4 	movi	r2,67
   17a5c:	00005006 	br	17ba0 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17a60:	e0bffe17 	ldw	r2,-8(fp)
   17a64:	10800058 	cmpnei	r2,r2,1
   17a68:	1000071e 	bne	r2,zero,17a88 <OSTimeDlyResume+0xb4>
   17a6c:	e0bfff17 	ldw	r2,-4(fp)
   17a70:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   17a74:	e0bffb17 	ldw	r2,-20(fp)
   17a78:	1001703a 	wrctl	status,r2
}
   17a7c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   17a80:	008010c4 	movi	r2,67
   17a84:	00004606 	br	17ba0 <OSTimeDlyResume+0x1cc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   17a88:	e0bffe17 	ldw	r2,-8(fp)
   17a8c:	10800b8b 	ldhu	r2,46(r2)
   17a90:	10bfffcc 	andi	r2,r2,65535
   17a94:	1000071e 	bne	r2,zero,17ab4 <OSTimeDlyResume+0xe0>
   17a98:	e0bfff17 	ldw	r2,-4(fp)
   17a9c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   17aa0:	e0bffa17 	ldw	r2,-24(fp)
   17aa4:	1001703a 	wrctl	status,r2
}
   17aa8:	0001883a 	nop
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   17aac:	00801404 	movi	r2,80
   17ab0:	00003b06 	br	17ba0 <OSTimeDlyResume+0x1cc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   17ab4:	e0bffe17 	ldw	r2,-8(fp)
   17ab8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   17abc:	e0bffe17 	ldw	r2,-8(fp)
   17ac0:	10800c03 	ldbu	r2,48(r2)
   17ac4:	10803fcc 	andi	r2,r2,255
   17ac8:	10800dcc 	andi	r2,r2,55
   17acc:	10000b26 	beq	r2,zero,17afc <OSTimeDlyResume+0x128>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   17ad0:	e0bffe17 	ldw	r2,-8(fp)
   17ad4:	10c00c03 	ldbu	r3,48(r2)
   17ad8:	00bff204 	movi	r2,-56
   17adc:	1884703a 	and	r2,r3,r2
   17ae0:	1007883a 	mov	r3,r2
   17ae4:	e0bffe17 	ldw	r2,-8(fp)
   17ae8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   17aec:	e0bffe17 	ldw	r2,-8(fp)
   17af0:	00c00044 	movi	r3,1
   17af4:	10c00c45 	stb	r3,49(r2)
   17af8:	00000206 	br	17b04 <OSTimeDlyResume+0x130>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   17afc:	e0bffe17 	ldw	r2,-8(fp)
   17b00:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   17b04:	e0bffe17 	ldw	r2,-8(fp)
   17b08:	10800c03 	ldbu	r2,48(r2)
   17b0c:	10803fcc 	andi	r2,r2,255
   17b10:	1080020c 	andi	r2,r2,8
   17b14:	10001c1e 	bne	r2,zero,17b88 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   17b18:	e0bffe17 	ldw	r2,-8(fp)
   17b1c:	10c00d83 	ldbu	r3,54(r2)
   17b20:	d0a83743 	ldbu	r2,-24355(gp)
   17b24:	1884b03a 	or	r2,r3,r2
   17b28:	d0a83745 	stb	r2,-24355(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   17b2c:	e0bffe17 	ldw	r2,-8(fp)
   17b30:	10800d03 	ldbu	r2,52(r2)
   17b34:	10c03fcc 	andi	r3,r2,255
   17b38:	d0a83784 	addi	r2,gp,-24354
   17b3c:	1885883a 	add	r2,r3,r2
   17b40:	11000003 	ldbu	r4,0(r2)
   17b44:	e0bffe17 	ldw	r2,-8(fp)
   17b48:	10800d43 	ldbu	r2,53(r2)
   17b4c:	e0fffe17 	ldw	r3,-8(fp)
   17b50:	18c00d03 	ldbu	r3,52(r3)
   17b54:	18c03fcc 	andi	r3,r3,255
   17b58:	2084b03a 	or	r2,r4,r2
   17b5c:	1009883a 	mov	r4,r2
   17b60:	d0a83784 	addi	r2,gp,-24354
   17b64:	1885883a 	add	r2,r3,r2
   17b68:	11000005 	stb	r4,0(r2)
   17b6c:	e0bfff17 	ldw	r2,-4(fp)
   17b70:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   17b74:	e0bff917 	ldw	r2,-28(fp)
   17b78:	1001703a 	wrctl	status,r2
}
   17b7c:	0001883a 	nop
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   17b80:	0010b980 	call	10b98 <OS_Sched>
   17b84:	00000506 	br	17b9c <OSTimeDlyResume+0x1c8>
   17b88:	e0bfff17 	ldw	r2,-4(fp)
   17b8c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   17b90:	e0bff817 	ldw	r2,-32(fp)
   17b94:	1001703a 	wrctl	status,r2
}
   17b98:	0001883a 	nop
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   17b9c:	0005883a 	mov	r2,zero
}
   17ba0:	e037883a 	mov	sp,fp
   17ba4:	dfc00117 	ldw	ra,4(sp)
   17ba8:	df000017 	ldw	fp,0(sp)
   17bac:	dec00204 	addi	sp,sp,8
   17bb0:	f800283a 	ret

00017bb4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   17bb4:	defffb04 	addi	sp,sp,-20
   17bb8:	df000415 	stw	fp,16(sp)
   17bbc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17bc0:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
   17bc4:	0005303a 	rdctl	r2,status
   17bc8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17bcc:	e0fffc17 	ldw	r3,-16(fp)
   17bd0:	00bfff84 	movi	r2,-2
   17bd4:	1884703a 	and	r2,r3,r2
   17bd8:	1001703a 	wrctl	status,r2
  return context;
   17bdc:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
   17be0:	e0bfff15 	stw	r2,-4(fp)
    ticks = OSTime;
   17be4:	d0a84117 	ldw	r2,-24316(gp)
   17be8:	e0bffe15 	stw	r2,-8(fp)
   17bec:	e0bfff17 	ldw	r2,-4(fp)
   17bf0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
   17bf4:	e0bffd17 	ldw	r2,-12(fp)
   17bf8:	1001703a 	wrctl	status,r2
}
   17bfc:	0001883a 	nop
    OS_EXIT_CRITICAL();
    return (ticks);
   17c00:	e0bffe17 	ldw	r2,-8(fp)
}
   17c04:	e037883a 	mov	sp,fp
   17c08:	df000017 	ldw	fp,0(sp)
   17c0c:	dec00104 	addi	sp,sp,4
   17c10:	f800283a 	ret

00017c14 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   17c14:	defffb04 	addi	sp,sp,-20
   17c18:	df000415 	stw	fp,16(sp)
   17c1c:	df000404 	addi	fp,sp,16
   17c20:	e13ffc15 	stw	r4,-16(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17c24:	e03fff15 	stw	zero,-4(fp)
  NIOS2_READ_STATUS (context);
   17c28:	0005303a 	rdctl	r2,status
   17c2c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17c30:	e0fffd17 	ldw	r3,-12(fp)
   17c34:	00bfff84 	movi	r2,-2
   17c38:	1884703a 	and	r2,r3,r2
   17c3c:	1001703a 	wrctl	status,r2
  return context;
   17c40:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   17c44:	e0bfff15 	stw	r2,-4(fp)
    OSTime = ticks;
   17c48:	e0bffc17 	ldw	r2,-16(fp)
   17c4c:	d0a84115 	stw	r2,-24316(gp)
   17c50:	e0bfff17 	ldw	r2,-4(fp)
   17c54:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   17c58:	e0bffe17 	ldw	r2,-8(fp)
   17c5c:	1001703a 	wrctl	status,r2
}
   17c60:	0001883a 	nop
    OS_EXIT_CRITICAL();
}
   17c64:	0001883a 	nop
   17c68:	e037883a 	mov	sp,fp
   17c6c:	df000017 	ldw	fp,0(sp)
   17c70:	dec00104 	addi	sp,sp,4
   17c74:	f800283a 	ret

00017c78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   17c78:	defffd04 	addi	sp,sp,-12
   17c7c:	dfc00215 	stw	ra,8(sp)
   17c80:	df000115 	stw	fp,4(sp)
   17c84:	df000104 	addi	fp,sp,4
   17c88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   17c8c:	d1600804 	addi	r5,gp,-32736
   17c90:	e13fff17 	ldw	r4,-4(fp)
   17c94:	001a76c0 	call	1a76c <alt_dev_llist_insert>
}
   17c98:	e037883a 	mov	sp,fp
   17c9c:	dfc00117 	ldw	ra,4(sp)
   17ca0:	df000017 	ldw	fp,0(sp)
   17ca4:	dec00204 	addi	sp,sp,8
   17ca8:	f800283a 	ret

00017cac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   17cac:	defffd04 	addi	sp,sp,-12
   17cb0:	dfc00215 	stw	ra,8(sp)
   17cb4:	df000115 	stw	fp,4(sp)
   17cb8:	df000104 	addi	fp,sp,4
   17cbc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   17cc0:	001ae940 	call	1ae94 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17cc4:	00800044 	movi	r2,1
   17cc8:	1001703a 	wrctl	status,r2
}
   17ccc:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   17cd0:	0001883a 	nop
   17cd4:	e037883a 	mov	sp,fp
   17cd8:	dfc00117 	ldw	ra,4(sp)
   17cdc:	df000017 	ldw	fp,0(sp)
   17ce0:	dec00204 	addi	sp,sp,8
   17ce4:	f800283a 	ret

00017ce8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   17ce8:	defffb04 	addi	sp,sp,-20
   17cec:	dfc00415 	stw	ra,16(sp)
   17cf0:	df000315 	stw	fp,12(sp)
   17cf4:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   17cf8:	01c00204 	movi	r7,8
   17cfc:	000d883a 	mov	r6,zero
   17d00:	000b883a 	mov	r5,zero
   17d04:	013fc834 	movhi	r4,65312
   17d08:	21080004 	addi	r4,r4,8192
   17d0c:	00192940 	call	19294 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   17d10:	01800204 	movi	r6,8
   17d14:	000b883a 	mov	r5,zero
   17d18:	010000b4 	movhi	r4,2
   17d1c:	21334104 	addi	r4,r4,-13052
   17d20:	00186200 	call	18620 <altera_avalon_jtag_uart_init>
   17d24:	010000b4 	movhi	r4,2
   17d28:	21333704 	addi	r4,r4,-13092
   17d2c:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   17d30:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   17d34:	010000b4 	movhi	r4,2
   17d38:	21375204 	addi	r4,r4,-8888
   17d3c:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   17d40:	010000b4 	movhi	r4,2
   17d44:	21375e04 	addi	r4,r4,-8840
   17d48:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   17d4c:	010000b4 	movhi	r4,2
   17d50:	21376a04 	addi	r4,r4,-8792
   17d54:	00193c40 	call	193c4 <alt_up_character_lcd_init>
   17d58:	010000b4 	movhi	r4,2
   17d5c:	21376a04 	addi	r4,r4,-8792
   17d60:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   17d64:	010000b4 	movhi	r4,2
   17d68:	21377504 	addi	r4,r4,-8748
   17d6c:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   17d70:	010000b4 	movhi	r4,2
   17d74:	21378004 	addi	r4,r4,-8704
   17d78:	0019cc00 	call	19cc0 <alt_up_ps2_init>
   17d7c:	010000b4 	movhi	r4,2
   17d80:	21378004 	addi	r4,r4,-8704
   17d84:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   17d88:	010000b4 	movhi	r4,2
   17d8c:	21378e04 	addi	r4,r4,-8648
   17d90:	0019cc00 	call	19cc0 <alt_up_ps2_init>
   17d94:	010000b4 	movhi	r4,2
   17d98:	21378e04 	addi	r4,r4,-8648
   17d9c:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   17da0:	010000b4 	movhi	r4,2
   17da4:	21379c04 	addi	r4,r4,-8592
   17da8:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   17dac:	010000b4 	movhi	r4,2
   17db0:	2137a704 	addi	r4,r4,-8548
   17db4:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   17db8:	008000b4 	movhi	r2,2
   17dbc:	10b7be17 	ldw	r2,-8456(r2)
   17dc0:	10800017 	ldw	r2,0(r2)
   17dc4:	1007883a 	mov	r3,r2
   17dc8:	008000b4 	movhi	r2,2
   17dcc:	10f7bf15 	stw	r3,-8452(r2)
   17dd0:	008000b4 	movhi	r2,2
   17dd4:	10b7be17 	ldw	r2,-8456(r2)
   17dd8:	10800104 	addi	r2,r2,4
   17ddc:	10800017 	ldw	r2,0(r2)
   17de0:	1007883a 	mov	r3,r2
   17de4:	008000b4 	movhi	r2,2
   17de8:	10f7c015 	stw	r3,-8448(r2)
   17dec:	008000b4 	movhi	r2,2
   17df0:	10b7be17 	ldw	r2,-8456(r2)
   17df4:	10800204 	addi	r2,r2,8
   17df8:	10800017 	ldw	r2,0(r2)
   17dfc:	10ffffcc 	andi	r3,r2,65535
   17e00:	008000b4 	movhi	r2,2
   17e04:	10f7c515 	stw	r3,-8428(r2)
   17e08:	008000b4 	movhi	r2,2
   17e0c:	10b7be17 	ldw	r2,-8456(r2)
   17e10:	10800204 	addi	r2,r2,8
   17e14:	10800017 	ldw	r2,0(r2)
   17e18:	1006d43a 	srli	r3,r2,16
   17e1c:	008000b4 	movhi	r2,2
   17e20:	10f7c615 	stw	r3,-8424(r2)
   17e24:	008000b4 	movhi	r2,2
   17e28:	10b7be17 	ldw	r2,-8456(r2)
   17e2c:	10800304 	addi	r2,r2,12
   17e30:	10800017 	ldw	r2,0(r2)
   17e34:	1005d07a 	srai	r2,r2,1
   17e38:	10c0004c 	andi	r3,r2,1
   17e3c:	008000b4 	movhi	r2,2
   17e40:	10f7c115 	stw	r3,-8444(r2)
   17e44:	008000b4 	movhi	r2,2
   17e48:	10b7be17 	ldw	r2,-8456(r2)
   17e4c:	10800304 	addi	r2,r2,12
   17e50:	10800017 	ldw	r2,0(r2)
   17e54:	1005d23a 	srai	r2,r2,8
   17e58:	108003cc 	andi	r2,r2,15
   17e5c:	10800044 	addi	r2,r2,1
   17e60:	1007883a 	mov	r3,r2
   17e64:	008000b4 	movhi	r2,2
   17e68:	10f7c215 	stw	r3,-8440(r2)
   17e6c:	008000b4 	movhi	r2,2
   17e70:	10b7be17 	ldw	r2,-8456(r2)
   17e74:	10800304 	addi	r2,r2,12
   17e78:	10800017 	ldw	r2,0(r2)
   17e7c:	1005d1ba 	srai	r2,r2,6
   17e80:	108000cc 	andi	r2,r2,3
   17e84:	10800044 	addi	r2,r2,1
   17e88:	1007883a 	mov	r3,r2
   17e8c:	008000b4 	movhi	r2,2
   17e90:	10f7c315 	stw	r3,-8436(r2)
   17e94:	008000b4 	movhi	r2,2
   17e98:	10b7c217 	ldw	r2,-8440(r2)
   17e9c:	1007883a 	mov	r3,r2
   17ea0:	008000b4 	movhi	r2,2
   17ea4:	10b7c317 	ldw	r2,-8436(r2)
   17ea8:	1885383a 	mul	r2,r3,r2
   17eac:	e0bfffc5 	stb	r2,-1(fp)
   17eb0:	e0bfffc3 	ldbu	r2,-1(fp)
   17eb4:	10800268 	cmpgeui	r2,r2,9
   17eb8:	1000041e 	bne	r2,zero,17ecc <alt_sys_init+0x1e4>
   17ebc:	00c00044 	movi	r3,1
   17ec0:	008000b4 	movhi	r2,2
   17ec4:	10f7c415 	stw	r3,-8432(r2)
   17ec8:	00000a06 	br	17ef4 <alt_sys_init+0x20c>
   17ecc:	e0bfffc3 	ldbu	r2,-1(fp)
   17ed0:	10800468 	cmpgeui	r2,r2,17
   17ed4:	1000041e 	bne	r2,zero,17ee8 <alt_sys_init+0x200>
   17ed8:	00c00084 	movi	r3,2
   17edc:	008000b4 	movhi	r2,2
   17ee0:	10f7c415 	stw	r3,-8432(r2)
   17ee4:	00000306 	br	17ef4 <alt_sys_init+0x20c>
   17ee8:	00c00104 	movi	r3,4
   17eec:	008000b4 	movhi	r2,2
   17ef0:	10f7c415 	stw	r3,-8432(r2)
   17ef4:	008000b4 	movhi	r2,2
   17ef8:	10b7be17 	ldw	r2,-8456(r2)
   17efc:	10800304 	addi	r2,r2,12
   17f00:	10800017 	ldw	r2,0(r2)
   17f04:	1005d43a 	srai	r2,r2,16
   17f08:	e0bfff85 	stb	r2,-2(fp)
   17f0c:	008000b4 	movhi	r2,2
   17f10:	10b7be17 	ldw	r2,-8456(r2)
   17f14:	10800304 	addi	r2,r2,12
   17f18:	10800017 	ldw	r2,0(r2)
   17f1c:	1004d63a 	srli	r2,r2,24
   17f20:	e0bfff45 	stb	r2,-3(fp)
   17f24:	008000b4 	movhi	r2,2
   17f28:	10b7c417 	ldw	r2,-8432(r2)
   17f2c:	10800058 	cmpnei	r2,r2,1
   17f30:	1000031e 	bne	r2,zero,17f40 <alt_sys_init+0x258>
   17f34:	008000b4 	movhi	r2,2
   17f38:	1037c715 	stw	zero,-8420(r2)
   17f3c:	00000b06 	br	17f6c <alt_sys_init+0x284>
   17f40:	008000b4 	movhi	r2,2
   17f44:	10b7c417 	ldw	r2,-8432(r2)
   17f48:	10800098 	cmpnei	r2,r2,2
   17f4c:	1000041e 	bne	r2,zero,17f60 <alt_sys_init+0x278>
   17f50:	00c00044 	movi	r3,1
   17f54:	008000b4 	movhi	r2,2
   17f58:	10f7c715 	stw	r3,-8420(r2)
   17f5c:	00000306 	br	17f6c <alt_sys_init+0x284>
   17f60:	00c00084 	movi	r3,2
   17f64:	008000b4 	movhi	r2,2
   17f68:	10f7c715 	stw	r3,-8420(r2)
   17f6c:	e0bfff83 	ldbu	r2,-2(fp)
   17f70:	00c00804 	movi	r3,32
   17f74:	1885c83a 	sub	r2,r3,r2
   17f78:	00ffffc4 	movi	r3,-1
   17f7c:	1886d83a 	srl	r3,r3,r2
   17f80:	008000b4 	movhi	r2,2
   17f84:	10f7c815 	stw	r3,-8416(r2)
   17f88:	e0ffff83 	ldbu	r3,-2(fp)
   17f8c:	008000b4 	movhi	r2,2
   17f90:	10b7c717 	ldw	r2,-8420(r2)
   17f94:	1887883a 	add	r3,r3,r2
   17f98:	008000b4 	movhi	r2,2
   17f9c:	10f7c915 	stw	r3,-8412(r2)
   17fa0:	e0bfff43 	ldbu	r2,-3(fp)
   17fa4:	00c00804 	movi	r3,32
   17fa8:	1885c83a 	sub	r2,r3,r2
   17fac:	00ffffc4 	movi	r3,-1
   17fb0:	1886d83a 	srl	r3,r3,r2
   17fb4:	008000b4 	movhi	r2,2
   17fb8:	10f7ca15 	stw	r3,-8408(r2)
   17fbc:	010000b4 	movhi	r4,2
   17fc0:	2137b404 	addi	r4,r4,-8496
   17fc4:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   17fc8:	008000b4 	movhi	r2,2
   17fcc:	10b7d517 	ldw	r2,-8364(r2)
   17fd0:	10800017 	ldw	r2,0(r2)
   17fd4:	1007883a 	mov	r3,r2
   17fd8:	008000b4 	movhi	r2,2
   17fdc:	10f7d615 	stw	r3,-8360(r2)
   17fe0:	008000b4 	movhi	r2,2
   17fe4:	10b7d517 	ldw	r2,-8364(r2)
   17fe8:	10800104 	addi	r2,r2,4
   17fec:	10800017 	ldw	r2,0(r2)
   17ff0:	1007883a 	mov	r3,r2
   17ff4:	008000b4 	movhi	r2,2
   17ff8:	10f7d715 	stw	r3,-8356(r2)
   17ffc:	008000b4 	movhi	r2,2
   18000:	10b7d517 	ldw	r2,-8364(r2)
   18004:	10800204 	addi	r2,r2,8
   18008:	10800017 	ldw	r2,0(r2)
   1800c:	10ffffcc 	andi	r3,r2,65535
   18010:	008000b4 	movhi	r2,2
   18014:	10f7dc15 	stw	r3,-8336(r2)
   18018:	008000b4 	movhi	r2,2
   1801c:	10b7d517 	ldw	r2,-8364(r2)
   18020:	10800204 	addi	r2,r2,8
   18024:	10800017 	ldw	r2,0(r2)
   18028:	1006d43a 	srli	r3,r2,16
   1802c:	008000b4 	movhi	r2,2
   18030:	10f7dd15 	stw	r3,-8332(r2)
   18034:	008000b4 	movhi	r2,2
   18038:	10b7d517 	ldw	r2,-8364(r2)
   1803c:	10800304 	addi	r2,r2,12
   18040:	10800017 	ldw	r2,0(r2)
   18044:	1005d07a 	srai	r2,r2,1
   18048:	10c0004c 	andi	r3,r2,1
   1804c:	008000b4 	movhi	r2,2
   18050:	10f7d815 	stw	r3,-8352(r2)
   18054:	008000b4 	movhi	r2,2
   18058:	10b7d517 	ldw	r2,-8364(r2)
   1805c:	10800304 	addi	r2,r2,12
   18060:	10800017 	ldw	r2,0(r2)
   18064:	1005d23a 	srai	r2,r2,8
   18068:	108003cc 	andi	r2,r2,15
   1806c:	10800044 	addi	r2,r2,1
   18070:	1007883a 	mov	r3,r2
   18074:	008000b4 	movhi	r2,2
   18078:	10f7d915 	stw	r3,-8348(r2)
   1807c:	008000b4 	movhi	r2,2
   18080:	10b7d517 	ldw	r2,-8364(r2)
   18084:	10800304 	addi	r2,r2,12
   18088:	10800017 	ldw	r2,0(r2)
   1808c:	1005d1ba 	srai	r2,r2,6
   18090:	108000cc 	andi	r2,r2,3
   18094:	10800044 	addi	r2,r2,1
   18098:	1007883a 	mov	r3,r2
   1809c:	008000b4 	movhi	r2,2
   180a0:	10f7da15 	stw	r3,-8344(r2)
   180a4:	008000b4 	movhi	r2,2
   180a8:	10b7d917 	ldw	r2,-8348(r2)
   180ac:	1007883a 	mov	r3,r2
   180b0:	008000b4 	movhi	r2,2
   180b4:	10b7da17 	ldw	r2,-8344(r2)
   180b8:	1885383a 	mul	r2,r3,r2
   180bc:	e0bfff05 	stb	r2,-4(fp)
   180c0:	e0bfff03 	ldbu	r2,-4(fp)
   180c4:	10800268 	cmpgeui	r2,r2,9
   180c8:	1000041e 	bne	r2,zero,180dc <alt_sys_init+0x3f4>
   180cc:	00c00044 	movi	r3,1
   180d0:	008000b4 	movhi	r2,2
   180d4:	10f7db15 	stw	r3,-8340(r2)
   180d8:	00000a06 	br	18104 <alt_sys_init+0x41c>
   180dc:	e0bfff03 	ldbu	r2,-4(fp)
   180e0:	10800468 	cmpgeui	r2,r2,17
   180e4:	1000041e 	bne	r2,zero,180f8 <alt_sys_init+0x410>
   180e8:	00c00084 	movi	r3,2
   180ec:	008000b4 	movhi	r2,2
   180f0:	10f7db15 	stw	r3,-8340(r2)
   180f4:	00000306 	br	18104 <alt_sys_init+0x41c>
   180f8:	00c00104 	movi	r3,4
   180fc:	008000b4 	movhi	r2,2
   18100:	10f7db15 	stw	r3,-8340(r2)
   18104:	008000b4 	movhi	r2,2
   18108:	10b7d517 	ldw	r2,-8364(r2)
   1810c:	10800304 	addi	r2,r2,12
   18110:	10800017 	ldw	r2,0(r2)
   18114:	1005d43a 	srai	r2,r2,16
   18118:	e0bffec5 	stb	r2,-5(fp)
   1811c:	008000b4 	movhi	r2,2
   18120:	10b7d517 	ldw	r2,-8364(r2)
   18124:	10800304 	addi	r2,r2,12
   18128:	10800017 	ldw	r2,0(r2)
   1812c:	1004d63a 	srli	r2,r2,24
   18130:	e0bffe85 	stb	r2,-6(fp)
   18134:	008000b4 	movhi	r2,2
   18138:	10b7db17 	ldw	r2,-8340(r2)
   1813c:	10800058 	cmpnei	r2,r2,1
   18140:	1000031e 	bne	r2,zero,18150 <alt_sys_init+0x468>
   18144:	008000b4 	movhi	r2,2
   18148:	1037de15 	stw	zero,-8328(r2)
   1814c:	00000b06 	br	1817c <alt_sys_init+0x494>
   18150:	008000b4 	movhi	r2,2
   18154:	10b7db17 	ldw	r2,-8340(r2)
   18158:	10800098 	cmpnei	r2,r2,2
   1815c:	1000041e 	bne	r2,zero,18170 <alt_sys_init+0x488>
   18160:	00c00044 	movi	r3,1
   18164:	008000b4 	movhi	r2,2
   18168:	10f7de15 	stw	r3,-8328(r2)
   1816c:	00000306 	br	1817c <alt_sys_init+0x494>
   18170:	00c00084 	movi	r3,2
   18174:	008000b4 	movhi	r2,2
   18178:	10f7de15 	stw	r3,-8328(r2)
   1817c:	e0bffec3 	ldbu	r2,-5(fp)
   18180:	00c00804 	movi	r3,32
   18184:	1885c83a 	sub	r2,r3,r2
   18188:	00ffffc4 	movi	r3,-1
   1818c:	1886d83a 	srl	r3,r3,r2
   18190:	008000b4 	movhi	r2,2
   18194:	10f7df15 	stw	r3,-8324(r2)
   18198:	e0fffec3 	ldbu	r3,-5(fp)
   1819c:	008000b4 	movhi	r2,2
   181a0:	10b7de17 	ldw	r2,-8328(r2)
   181a4:	1887883a 	add	r3,r3,r2
   181a8:	008000b4 	movhi	r2,2
   181ac:	10f7e015 	stw	r3,-8320(r2)
   181b0:	e0bffe83 	ldbu	r2,-6(fp)
   181b4:	00c00804 	movi	r3,32
   181b8:	1885c83a 	sub	r2,r3,r2
   181bc:	00ffffc4 	movi	r3,-1
   181c0:	1886d83a 	srl	r3,r3,r2
   181c4:	008000b4 	movhi	r2,2
   181c8:	10f7e115 	stw	r3,-8316(r2)
   181cc:	010000b4 	movhi	r4,2
   181d0:	2137cb04 	addi	r4,r4,-8404
   181d4:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   181d8:	008000b4 	movhi	r2,2
   181dc:	10b7ec17 	ldw	r2,-8272(r2)
   181e0:	10800017 	ldw	r2,0(r2)
   181e4:	1007883a 	mov	r3,r2
   181e8:	008000b4 	movhi	r2,2
   181ec:	10f7ed15 	stw	r3,-8268(r2)
   181f0:	008000b4 	movhi	r2,2
   181f4:	10b7ec17 	ldw	r2,-8272(r2)
   181f8:	10800104 	addi	r2,r2,4
   181fc:	10800017 	ldw	r2,0(r2)
   18200:	1007883a 	mov	r3,r2
   18204:	008000b4 	movhi	r2,2
   18208:	10f7ee15 	stw	r3,-8264(r2)
   1820c:	008000b4 	movhi	r2,2
   18210:	10b7ec17 	ldw	r2,-8272(r2)
   18214:	10800204 	addi	r2,r2,8
   18218:	10800017 	ldw	r2,0(r2)
   1821c:	10ffffcc 	andi	r3,r2,65535
   18220:	008000b4 	movhi	r2,2
   18224:	10f7f315 	stw	r3,-8244(r2)
   18228:	008000b4 	movhi	r2,2
   1822c:	10b7ec17 	ldw	r2,-8272(r2)
   18230:	10800204 	addi	r2,r2,8
   18234:	10800017 	ldw	r2,0(r2)
   18238:	1006d43a 	srli	r3,r2,16
   1823c:	008000b4 	movhi	r2,2
   18240:	10f7f415 	stw	r3,-8240(r2)
   18244:	008000b4 	movhi	r2,2
   18248:	10b7ec17 	ldw	r2,-8272(r2)
   1824c:	10800304 	addi	r2,r2,12
   18250:	10800017 	ldw	r2,0(r2)
   18254:	1005d07a 	srai	r2,r2,1
   18258:	10c0004c 	andi	r3,r2,1
   1825c:	008000b4 	movhi	r2,2
   18260:	10f7ef15 	stw	r3,-8260(r2)
   18264:	008000b4 	movhi	r2,2
   18268:	10b7ec17 	ldw	r2,-8272(r2)
   1826c:	10800304 	addi	r2,r2,12
   18270:	10800017 	ldw	r2,0(r2)
   18274:	1005d23a 	srai	r2,r2,8
   18278:	108003cc 	andi	r2,r2,15
   1827c:	10800044 	addi	r2,r2,1
   18280:	1007883a 	mov	r3,r2
   18284:	008000b4 	movhi	r2,2
   18288:	10f7f015 	stw	r3,-8256(r2)
   1828c:	008000b4 	movhi	r2,2
   18290:	10b7ec17 	ldw	r2,-8272(r2)
   18294:	10800304 	addi	r2,r2,12
   18298:	10800017 	ldw	r2,0(r2)
   1829c:	1005d1ba 	srai	r2,r2,6
   182a0:	108000cc 	andi	r2,r2,3
   182a4:	10800044 	addi	r2,r2,1
   182a8:	1007883a 	mov	r3,r2
   182ac:	008000b4 	movhi	r2,2
   182b0:	10f7f115 	stw	r3,-8252(r2)
   182b4:	008000b4 	movhi	r2,2
   182b8:	10b7f017 	ldw	r2,-8256(r2)
   182bc:	1007883a 	mov	r3,r2
   182c0:	008000b4 	movhi	r2,2
   182c4:	10b7f117 	ldw	r2,-8252(r2)
   182c8:	1885383a 	mul	r2,r3,r2
   182cc:	e0bffe45 	stb	r2,-7(fp)
   182d0:	e0bffe43 	ldbu	r2,-7(fp)
   182d4:	10800268 	cmpgeui	r2,r2,9
   182d8:	1000041e 	bne	r2,zero,182ec <alt_sys_init+0x604>
   182dc:	00c00044 	movi	r3,1
   182e0:	008000b4 	movhi	r2,2
   182e4:	10f7f215 	stw	r3,-8248(r2)
   182e8:	00000a06 	br	18314 <alt_sys_init+0x62c>
   182ec:	e0bffe43 	ldbu	r2,-7(fp)
   182f0:	10800468 	cmpgeui	r2,r2,17
   182f4:	1000041e 	bne	r2,zero,18308 <alt_sys_init+0x620>
   182f8:	00c00084 	movi	r3,2
   182fc:	008000b4 	movhi	r2,2
   18300:	10f7f215 	stw	r3,-8248(r2)
   18304:	00000306 	br	18314 <alt_sys_init+0x62c>
   18308:	00c00104 	movi	r3,4
   1830c:	008000b4 	movhi	r2,2
   18310:	10f7f215 	stw	r3,-8248(r2)
   18314:	008000b4 	movhi	r2,2
   18318:	10b7ec17 	ldw	r2,-8272(r2)
   1831c:	10800304 	addi	r2,r2,12
   18320:	10800017 	ldw	r2,0(r2)
   18324:	1005d43a 	srai	r2,r2,16
   18328:	e0bffe05 	stb	r2,-8(fp)
   1832c:	008000b4 	movhi	r2,2
   18330:	10b7ec17 	ldw	r2,-8272(r2)
   18334:	10800304 	addi	r2,r2,12
   18338:	10800017 	ldw	r2,0(r2)
   1833c:	1004d63a 	srli	r2,r2,24
   18340:	e0bffdc5 	stb	r2,-9(fp)
   18344:	008000b4 	movhi	r2,2
   18348:	10b7f217 	ldw	r2,-8248(r2)
   1834c:	10800058 	cmpnei	r2,r2,1
   18350:	1000031e 	bne	r2,zero,18360 <alt_sys_init+0x678>
   18354:	008000b4 	movhi	r2,2
   18358:	1037f515 	stw	zero,-8236(r2)
   1835c:	00000b06 	br	1838c <alt_sys_init+0x6a4>
   18360:	008000b4 	movhi	r2,2
   18364:	10b7f217 	ldw	r2,-8248(r2)
   18368:	10800098 	cmpnei	r2,r2,2
   1836c:	1000041e 	bne	r2,zero,18380 <alt_sys_init+0x698>
   18370:	00c00044 	movi	r3,1
   18374:	008000b4 	movhi	r2,2
   18378:	10f7f515 	stw	r3,-8236(r2)
   1837c:	00000306 	br	1838c <alt_sys_init+0x6a4>
   18380:	00c00084 	movi	r3,2
   18384:	008000b4 	movhi	r2,2
   18388:	10f7f515 	stw	r3,-8236(r2)
   1838c:	e0bffe03 	ldbu	r2,-8(fp)
   18390:	00c00804 	movi	r3,32
   18394:	1885c83a 	sub	r2,r3,r2
   18398:	00ffffc4 	movi	r3,-1
   1839c:	1886d83a 	srl	r3,r3,r2
   183a0:	008000b4 	movhi	r2,2
   183a4:	10f7f615 	stw	r3,-8232(r2)
   183a8:	e0fffe03 	ldbu	r3,-8(fp)
   183ac:	008000b4 	movhi	r2,2
   183b0:	10b7f517 	ldw	r2,-8236(r2)
   183b4:	1887883a 	add	r3,r3,r2
   183b8:	008000b4 	movhi	r2,2
   183bc:	10f7f715 	stw	r3,-8228(r2)
   183c0:	e0bffdc3 	ldbu	r2,-9(fp)
   183c4:	00c00804 	movi	r3,32
   183c8:	1885c83a 	sub	r2,r3,r2
   183cc:	00ffffc4 	movi	r3,-1
   183d0:	1886d83a 	srl	r3,r3,r2
   183d4:	008000b4 	movhi	r2,2
   183d8:	10f7f815 	stw	r3,-8224(r2)
   183dc:	010000b4 	movhi	r4,2
   183e0:	2137e204 	addi	r4,r4,-8312
   183e4:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   183e8:	008000b4 	movhi	r2,2
   183ec:	10b80317 	ldw	r2,-8180(r2)
   183f0:	10800017 	ldw	r2,0(r2)
   183f4:	10c003cc 	andi	r3,r2,15
   183f8:	008000b4 	movhi	r2,2
   183fc:	10f80415 	stw	r3,-8176(r2)
   18400:	008000b4 	movhi	r2,2
   18404:	10b80317 	ldw	r2,-8180(r2)
   18408:	10800017 	ldw	r2,0(r2)
   1840c:	1005d13a 	srai	r2,r2,4
   18410:	10c0004c 	andi	r3,r2,1
   18414:	008000b4 	movhi	r2,2
   18418:	10f80515 	stw	r3,-8172(r2)
   1841c:	008000b4 	movhi	r2,2
   18420:	10b80317 	ldw	r2,-8180(r2)
   18424:	10800017 	ldw	r2,0(r2)
   18428:	1005d17a 	srai	r2,r2,5
   1842c:	10c0004c 	andi	r3,r2,1
   18430:	008000b4 	movhi	r2,2
   18434:	10f80615 	stw	r3,-8168(r2)
   18438:	008000b4 	movhi	r2,2
   1843c:	10b80317 	ldw	r2,-8180(r2)
   18440:	10800017 	ldw	r2,0(r2)
   18444:	1005d43a 	srai	r2,r2,16
   18448:	10c003cc 	andi	r3,r2,15
   1844c:	008000b4 	movhi	r2,2
   18450:	10f80715 	stw	r3,-8164(r2)
   18454:	008000b4 	movhi	r2,2
   18458:	10b80317 	ldw	r2,-8180(r2)
   1845c:	10800017 	ldw	r2,0(r2)
   18460:	1005d53a 	srai	r2,r2,20
   18464:	10c0004c 	andi	r3,r2,1
   18468:	008000b4 	movhi	r2,2
   1846c:	10f80815 	stw	r3,-8160(r2)
   18470:	008000b4 	movhi	r2,2
   18474:	10b80317 	ldw	r2,-8180(r2)
   18478:	10800017 	ldw	r2,0(r2)
   1847c:	1005d57a 	srai	r2,r2,21
   18480:	10c0004c 	andi	r3,r2,1
   18484:	008000b4 	movhi	r2,2
   18488:	10f80915 	stw	r3,-8156(r2)
   1848c:	010000b4 	movhi	r4,2
   18490:	2137f904 	addi	r4,r4,-8220
   18494:	0017c780 	call	17c78 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   18498:	010000b4 	movhi	r4,2
   1849c:	21380a04 	addi	r4,r4,-8152
   184a0:	0017c780 	call	17c78 <alt_dev_reg>
}
   184a4:	0001883a 	nop
   184a8:	e037883a 	mov	sp,fp
   184ac:	dfc00117 	ldw	ra,4(sp)
   184b0:	df000017 	ldw	fp,0(sp)
   184b4:	dec00204 	addi	sp,sp,8
   184b8:	f800283a 	ret

000184bc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   184bc:	defffa04 	addi	sp,sp,-24
   184c0:	dfc00515 	stw	ra,20(sp)
   184c4:	df000415 	stw	fp,16(sp)
   184c8:	df000404 	addi	fp,sp,16
   184cc:	e13ffe15 	stw	r4,-8(fp)
   184d0:	e17ffd15 	stw	r5,-12(fp)
   184d4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   184d8:	e0bffe17 	ldw	r2,-8(fp)
   184dc:	10800017 	ldw	r2,0(r2)
   184e0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   184e4:	e0bfff17 	ldw	r2,-4(fp)
   184e8:	10c00a04 	addi	r3,r2,40
   184ec:	e0bffe17 	ldw	r2,-8(fp)
   184f0:	10800217 	ldw	r2,8(r2)
   184f4:	100f883a 	mov	r7,r2
   184f8:	e1bffc17 	ldw	r6,-16(fp)
   184fc:	e17ffd17 	ldw	r5,-12(fp)
   18500:	1809883a 	mov	r4,r3
   18504:	0018c7c0 	call	18c7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   18508:	e037883a 	mov	sp,fp
   1850c:	dfc00117 	ldw	ra,4(sp)
   18510:	df000017 	ldw	fp,0(sp)
   18514:	dec00204 	addi	sp,sp,8
   18518:	f800283a 	ret

0001851c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1851c:	defffa04 	addi	sp,sp,-24
   18520:	dfc00515 	stw	ra,20(sp)
   18524:	df000415 	stw	fp,16(sp)
   18528:	df000404 	addi	fp,sp,16
   1852c:	e13ffe15 	stw	r4,-8(fp)
   18530:	e17ffd15 	stw	r5,-12(fp)
   18534:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18538:	e0bffe17 	ldw	r2,-8(fp)
   1853c:	10800017 	ldw	r2,0(r2)
   18540:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   18544:	e0bfff17 	ldw	r2,-4(fp)
   18548:	10c00a04 	addi	r3,r2,40
   1854c:	e0bffe17 	ldw	r2,-8(fp)
   18550:	10800217 	ldw	r2,8(r2)
   18554:	100f883a 	mov	r7,r2
   18558:	e1bffc17 	ldw	r6,-16(fp)
   1855c:	e17ffd17 	ldw	r5,-12(fp)
   18560:	1809883a 	mov	r4,r3
   18564:	0018f440 	call	18f44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   18568:	e037883a 	mov	sp,fp
   1856c:	dfc00117 	ldw	ra,4(sp)
   18570:	df000017 	ldw	fp,0(sp)
   18574:	dec00204 	addi	sp,sp,8
   18578:	f800283a 	ret

0001857c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1857c:	defffc04 	addi	sp,sp,-16
   18580:	dfc00315 	stw	ra,12(sp)
   18584:	df000215 	stw	fp,8(sp)
   18588:	df000204 	addi	fp,sp,8
   1858c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18590:	e0bffe17 	ldw	r2,-8(fp)
   18594:	10800017 	ldw	r2,0(r2)
   18598:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1859c:	e0bfff17 	ldw	r2,-4(fp)
   185a0:	10c00a04 	addi	r3,r2,40
   185a4:	e0bffe17 	ldw	r2,-8(fp)
   185a8:	10800217 	ldw	r2,8(r2)
   185ac:	100b883a 	mov	r5,r2
   185b0:	1809883a 	mov	r4,r3
   185b4:	0018b200 	call	18b20 <altera_avalon_jtag_uart_close>
}
   185b8:	e037883a 	mov	sp,fp
   185bc:	dfc00117 	ldw	ra,4(sp)
   185c0:	df000017 	ldw	fp,0(sp)
   185c4:	dec00204 	addi	sp,sp,8
   185c8:	f800283a 	ret

000185cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   185cc:	defffa04 	addi	sp,sp,-24
   185d0:	dfc00515 	stw	ra,20(sp)
   185d4:	df000415 	stw	fp,16(sp)
   185d8:	df000404 	addi	fp,sp,16
   185dc:	e13ffe15 	stw	r4,-8(fp)
   185e0:	e17ffd15 	stw	r5,-12(fp)
   185e4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   185e8:	e0bffe17 	ldw	r2,-8(fp)
   185ec:	10800017 	ldw	r2,0(r2)
   185f0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   185f4:	e0bfff17 	ldw	r2,-4(fp)
   185f8:	10800a04 	addi	r2,r2,40
   185fc:	e1bffc17 	ldw	r6,-16(fp)
   18600:	e17ffd17 	ldw	r5,-12(fp)
   18604:	1009883a 	mov	r4,r2
   18608:	0018b880 	call	18b88 <altera_avalon_jtag_uart_ioctl>
}
   1860c:	e037883a 	mov	sp,fp
   18610:	dfc00117 	ldw	ra,4(sp)
   18614:	df000017 	ldw	fp,0(sp)
   18618:	dec00204 	addi	sp,sp,8
   1861c:	f800283a 	ret

00018620 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   18620:	defff504 	addi	sp,sp,-44
   18624:	dfc00a15 	stw	ra,40(sp)
   18628:	df000915 	stw	fp,36(sp)
   1862c:	df000904 	addi	fp,sp,36
   18630:	e13ff915 	stw	r4,-28(fp)
   18634:	e17ff815 	stw	r5,-32(fp)
   18638:	e1bff715 	stw	r6,-36(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1863c:	e0bff917 	ldw	r2,-28(fp)
   18640:	10800c04 	addi	r2,r2,48
   18644:	e0bffb15 	stw	r2,-20(fp)
   18648:	e03ffa8d 	sth	zero,-22(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1864c:	e0bffa8b 	ldhu	r2,-22(fp)
   18650:	e0fffa44 	addi	r3,fp,-23
   18654:	180b883a 	mov	r5,r3
   18658:	1009883a 	mov	r4,r2
   1865c:	00117140 	call	11714 <OSFlagCreate>
   18660:	1007883a 	mov	r3,r2
   18664:	e0bffb17 	ldw	r2,-20(fp)
   18668:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1866c:	e0bff917 	ldw	r2,-28(fp)
   18670:	10800a04 	addi	r2,r2,40
   18674:	e0bffd15 	stw	r2,-12(fp)
   18678:	00800044 	movi	r2,1
   1867c:	e0bffc8d 	sth	r2,-14(fp)
  *sem = OSSemCreate (value);
   18680:	e0bffc8b 	ldhu	r2,-14(fp)
   18684:	1009883a 	mov	r4,r2
   18688:	00156440 	call	15644 <OSSemCreate>
   1868c:	1007883a 	mov	r3,r2
   18690:	e0bffd17 	ldw	r2,-12(fp)
   18694:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   18698:	0001883a 	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1869c:	e0bff917 	ldw	r2,-28(fp)
   186a0:	10800b04 	addi	r2,r2,44
   186a4:	e0bfff15 	stw	r2,-4(fp)
   186a8:	00800044 	movi	r2,1
   186ac:	e0bffe8d 	sth	r2,-6(fp)
  *sem = OSSemCreate (value);
   186b0:	e0bffe8b 	ldhu	r2,-6(fp)
   186b4:	1009883a 	mov	r4,r2
   186b8:	00156440 	call	15644 <OSSemCreate>
   186bc:	1007883a 	mov	r3,r2
   186c0:	e0bfff17 	ldw	r2,-4(fp)
   186c4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
   186c8:	0001883a 	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   186cc:	e0bff917 	ldw	r2,-28(fp)
   186d0:	00c00044 	movi	r3,1
   186d4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   186d8:	e0bff917 	ldw	r2,-28(fp)
   186dc:	10800017 	ldw	r2,0(r2)
   186e0:	10800104 	addi	r2,r2,4
   186e4:	1007883a 	mov	r3,r2
   186e8:	e0bff917 	ldw	r2,-28(fp)
   186ec:	10800817 	ldw	r2,32(r2)
   186f0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   186f4:	e0bff717 	ldw	r2,-36(fp)
   186f8:	018000b4 	movhi	r6,2
   186fc:	31a1d904 	addi	r6,r6,-30876
   18700:	e17ff917 	ldw	r5,-28(fp)
   18704:	1009883a 	mov	r4,r2
   18708:	001aacc0 	call	1aacc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1870c:	e0bff917 	ldw	r2,-28(fp)
   18710:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   18714:	e0bff917 	ldw	r2,-28(fp)
   18718:	10800204 	addi	r2,r2,8
   1871c:	d0e82a17 	ldw	r3,-24408(gp)
   18720:	e1fff917 	ldw	r7,-28(fp)
   18724:	018000b4 	movhi	r6,2
   18728:	31a28504 	addi	r6,r6,-30188
   1872c:	180b883a 	mov	r5,r3
   18730:	1009883a 	mov	r4,r2
   18734:	001a5dc0 	call	1a5dc <alt_alarm_start>
   18738:	1000040e 	bge	r2,zero,1874c <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1873c:	e0fff917 	ldw	r3,-28(fp)
   18740:	00a00034 	movhi	r2,32768
   18744:	10bfffc4 	addi	r2,r2,-1
   18748:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1874c:	0001883a 	nop
   18750:	e037883a 	mov	sp,fp
   18754:	dfc00117 	ldw	ra,4(sp)
   18758:	df000017 	ldw	fp,0(sp)
   1875c:	dec00204 	addi	sp,sp,8
   18760:	f800283a 	ret

00018764 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   18764:	defff104 	addi	sp,sp,-60
   18768:	dfc00e15 	stw	ra,56(sp)
   1876c:	df000d15 	stw	fp,52(sp)
   18770:	df000d04 	addi	fp,sp,52
   18774:	e13ff415 	stw	r4,-48(fp)
   18778:	e17ff315 	stw	r5,-52(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1877c:	e0bff417 	ldw	r2,-48(fp)
   18780:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   18784:	e0bffd17 	ldw	r2,-12(fp)
   18788:	10800017 	ldw	r2,0(r2)
   1878c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   18790:	e0bffc17 	ldw	r2,-16(fp)
   18794:	10800104 	addi	r2,r2,4
   18798:	10800037 	ldwio	r2,0(r2)
   1879c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   187a0:	e0bffb17 	ldw	r2,-20(fp)
   187a4:	1080c00c 	andi	r2,r2,768
   187a8:	10009326 	beq	r2,zero,189f8 <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   187ac:	e0bffb17 	ldw	r2,-20(fp)
   187b0:	1080400c 	andi	r2,r2,256
   187b4:	10004826 	beq	r2,zero,188d8 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   187b8:	00800074 	movhi	r2,1
   187bc:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   187c0:	e0bffd17 	ldw	r2,-12(fp)
   187c4:	10800d17 	ldw	r2,52(r2)
   187c8:	10800044 	addi	r2,r2,1
   187cc:	1081ffcc 	andi	r2,r2,2047
   187d0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   187d4:	e0bffd17 	ldw	r2,-12(fp)
   187d8:	10800e17 	ldw	r2,56(r2)
   187dc:	e0fffa17 	ldw	r3,-24(fp)
   187e0:	18802826 	beq	r3,r2,18884 <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   187e4:	e0bffc17 	ldw	r2,-16(fp)
   187e8:	10800037 	ldwio	r2,0(r2)
   187ec:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   187f0:	e0bfff17 	ldw	r2,-4(fp)
   187f4:	10a0000c 	andi	r2,r2,32768
   187f8:	10002426 	beq	r2,zero,1888c <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   187fc:	e0bffd17 	ldw	r2,-12(fp)
   18800:	10800d17 	ldw	r2,52(r2)
   18804:	e0ffff17 	ldw	r3,-4(fp)
   18808:	1809883a 	mov	r4,r3
   1880c:	e0fffd17 	ldw	r3,-12(fp)
   18810:	1885883a 	add	r2,r3,r2
   18814:	11001105 	stb	r4,68(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18818:	e0bffd17 	ldw	r2,-12(fp)
   1881c:	10800d17 	ldw	r2,52(r2)
   18820:	10800044 	addi	r2,r2,1
   18824:	10c1ffcc 	andi	r3,r2,2047
   18828:	e0bffd17 	ldw	r2,-12(fp)
   1882c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   18830:	e0bffd17 	ldw	r2,-12(fp)
   18834:	10800c17 	ldw	r2,48(r2)
   18838:	e0bff915 	stw	r2,-28(fp)
   1883c:	00800044 	movi	r2,1
   18840:	e0bff88d 	sth	r2,-30(fp)
   18844:	00800044 	movi	r2,1
   18848:	e0bff845 	stb	r2,-31(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1884c:	d0a83843 	ldbu	r2,-24351(gp)
   18850:	10803fcc 	andi	r2,r2,255
   18854:	10000926 	beq	r2,zero,1887c <altera_avalon_jtag_uart_irq+0x118>
  {
    OSFlagPost (group, flags, opt, &err);
   18858:	e0bff88b 	ldhu	r2,-30(fp)
   1885c:	e0fff843 	ldbu	r3,-31(fp)
   18860:	e13ff604 	addi	r4,fp,-40
   18864:	200f883a 	mov	r7,r4
   18868:	180d883a 	mov	r6,r3
   1886c:	100b883a 	mov	r5,r2
   18870:	e13ff917 	ldw	r4,-28(fp)
   18874:	00123640 	call	12364 <OSFlagPost>
    return err;
   18878:	00000106 	br	18880 <altera_avalon_jtag_uart_irq+0x11c>
  }
  return OS_ERR_PEND_ISR;
   1887c:	0001883a 	nop
      {
   18880:	003fcf06 	br	187c0 <altera_avalon_jtag_uart_irq+0x5c>
          break;
   18884:	0001883a 	nop
   18888:	00000106 	br	18890 <altera_avalon_jtag_uart_irq+0x12c>
          break;
   1888c:	0001883a 	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   18890:	e0bfff17 	ldw	r2,-4(fp)
   18894:	10bfffec 	andhi	r2,r2,65535
   18898:	10000f26 	beq	r2,zero,188d8 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1889c:	e0bffd17 	ldw	r2,-12(fp)
   188a0:	10c00817 	ldw	r3,32(r2)
   188a4:	00bfff84 	movi	r2,-2
   188a8:	1886703a 	and	r3,r3,r2
   188ac:	e0bffd17 	ldw	r2,-12(fp)
   188b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   188b4:	e0bffc17 	ldw	r2,-16(fp)
   188b8:	10800104 	addi	r2,r2,4
   188bc:	1007883a 	mov	r3,r2
   188c0:	e0bffd17 	ldw	r2,-12(fp)
   188c4:	10800817 	ldw	r2,32(r2)
   188c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   188cc:	e0bffc17 	ldw	r2,-16(fp)
   188d0:	10800104 	addi	r2,r2,4
   188d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   188d8:	e0bffb17 	ldw	r2,-20(fp)
   188dc:	1080800c 	andi	r2,r2,512
   188e0:	103fab26 	beq	r2,zero,18790 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   188e4:	e0bffb17 	ldw	r2,-20(fp)
   188e8:	1004d43a 	srli	r2,r2,16
   188ec:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   188f0:	00002706 	br	18990 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   188f4:	e0bffc17 	ldw	r2,-16(fp)
   188f8:	e0fffd17 	ldw	r3,-12(fp)
   188fc:	18c01017 	ldw	r3,64(r3)
   18900:	e13ffd17 	ldw	r4,-12(fp)
   18904:	20c7883a 	add	r3,r4,r3
   18908:	18c21103 	ldbu	r3,2116(r3)
   1890c:	18c03fcc 	andi	r3,r3,255
   18910:	18c0201c 	xori	r3,r3,128
   18914:	18ffe004 	addi	r3,r3,-128
   18918:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1891c:	e0bffd17 	ldw	r2,-12(fp)
   18920:	10801017 	ldw	r2,64(r2)
   18924:	10800044 	addi	r2,r2,1
   18928:	10c1ffcc 	andi	r3,r2,2047
   1892c:	e0bffd17 	ldw	r2,-12(fp)
   18930:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   18934:	e0bffd17 	ldw	r2,-12(fp)
   18938:	10800c17 	ldw	r2,48(r2)
   1893c:	e0bff715 	stw	r2,-36(fp)
   18940:	00800084 	movi	r2,2
   18944:	e0bff68d 	sth	r2,-38(fp)
   18948:	00800044 	movi	r2,1
   1894c:	e0bff645 	stb	r2,-39(fp)
  if (OSRunning)
   18950:	d0a83843 	ldbu	r2,-24351(gp)
   18954:	10803fcc 	andi	r2,r2,255
   18958:	10000926 	beq	r2,zero,18980 <altera_avalon_jtag_uart_irq+0x21c>
    OSFlagPost (group, flags, opt, &err);
   1895c:	e0bff68b 	ldhu	r2,-38(fp)
   18960:	e0fff643 	ldbu	r3,-39(fp)
   18964:	e13ff5c4 	addi	r4,fp,-41
   18968:	200f883a 	mov	r7,r4
   1896c:	180d883a 	mov	r6,r3
   18970:	100b883a 	mov	r5,r2
   18974:	e13ff717 	ldw	r4,-36(fp)
   18978:	00123640 	call	12364 <OSFlagPost>
    return err;
   1897c:	00000106 	br	18984 <altera_avalon_jtag_uart_irq+0x220>
  return OS_ERR_PEND_ISR;
   18980:	0001883a 	nop

        space--;
   18984:	e0bffe17 	ldw	r2,-8(fp)
   18988:	10bfffc4 	addi	r2,r2,-1
   1898c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   18990:	e0bffe17 	ldw	r2,-8(fp)
   18994:	10000526 	beq	r2,zero,189ac <altera_avalon_jtag_uart_irq+0x248>
   18998:	e0bffd17 	ldw	r2,-12(fp)
   1899c:	10c01017 	ldw	r3,64(r2)
   189a0:	e0bffd17 	ldw	r2,-12(fp)
   189a4:	10800f17 	ldw	r2,60(r2)
   189a8:	18bfd21e 	bne	r3,r2,188f4 <altera_avalon_jtag_uart_irq+0x190>
      }

      if (space > 0)
   189ac:	e0bffe17 	ldw	r2,-8(fp)
   189b0:	103f7726 	beq	r2,zero,18790 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   189b4:	e0bffd17 	ldw	r2,-12(fp)
   189b8:	10c00817 	ldw	r3,32(r2)
   189bc:	00bfff44 	movi	r2,-3
   189c0:	1886703a 	and	r3,r3,r2
   189c4:	e0bffd17 	ldw	r2,-12(fp)
   189c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   189cc:	e0bffd17 	ldw	r2,-12(fp)
   189d0:	10800017 	ldw	r2,0(r2)
   189d4:	10800104 	addi	r2,r2,4
   189d8:	1007883a 	mov	r3,r2
   189dc:	e0bffd17 	ldw	r2,-12(fp)
   189e0:	10800817 	ldw	r2,32(r2)
   189e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   189e8:	e0bffc17 	ldw	r2,-16(fp)
   189ec:	10800104 	addi	r2,r2,4
   189f0:	10800037 	ldwio	r2,0(r2)
  {
   189f4:	003f6606 	br	18790 <altera_avalon_jtag_uart_irq+0x2c>
      break;
   189f8:	0001883a 	nop
      }
    }
  }
}
   189fc:	0001883a 	nop
   18a00:	e037883a 	mov	sp,fp
   18a04:	dfc00117 	ldw	ra,4(sp)
   18a08:	df000017 	ldw	fp,0(sp)
   18a0c:	dec00204 	addi	sp,sp,8
   18a10:	f800283a 	ret

00018a14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   18a14:	defff904 	addi	sp,sp,-28
   18a18:	dfc00615 	stw	ra,24(sp)
   18a1c:	df000515 	stw	fp,20(sp)
   18a20:	df000504 	addi	fp,sp,20
   18a24:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   18a28:	e0bffb17 	ldw	r2,-20(fp)
   18a2c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   18a30:	e0bfff17 	ldw	r2,-4(fp)
   18a34:	10800017 	ldw	r2,0(r2)
   18a38:	10800104 	addi	r2,r2,4
   18a3c:	10800037 	ldwio	r2,0(r2)
   18a40:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   18a44:	e0bffe17 	ldw	r2,-8(fp)
   18a48:	1081000c 	andi	r2,r2,1024
   18a4c:	10000b26 	beq	r2,zero,18a7c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   18a50:	e0bfff17 	ldw	r2,-4(fp)
   18a54:	10800017 	ldw	r2,0(r2)
   18a58:	10800104 	addi	r2,r2,4
   18a5c:	1007883a 	mov	r3,r2
   18a60:	e0bfff17 	ldw	r2,-4(fp)
   18a64:	10800817 	ldw	r2,32(r2)
   18a68:	10810014 	ori	r2,r2,1024
   18a6c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   18a70:	e0bfff17 	ldw	r2,-4(fp)
   18a74:	10000915 	stw	zero,36(r2)
   18a78:	00002306 	br	18b08 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   18a7c:	e0bfff17 	ldw	r2,-4(fp)
   18a80:	10c00917 	ldw	r3,36(r2)
   18a84:	00a00034 	movhi	r2,32768
   18a88:	10bfff04 	addi	r2,r2,-4
   18a8c:	10c01e36 	bltu	r2,r3,18b08 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   18a90:	e0bfff17 	ldw	r2,-4(fp)
   18a94:	10800917 	ldw	r2,36(r2)
   18a98:	10c00044 	addi	r3,r2,1
   18a9c:	e0bfff17 	ldw	r2,-4(fp)
   18aa0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   18aa4:	e0bfff17 	ldw	r2,-4(fp)
   18aa8:	10c00917 	ldw	r3,36(r2)
   18aac:	e0bfff17 	ldw	r2,-4(fp)
   18ab0:	10800117 	ldw	r2,4(r2)
   18ab4:	18801436 	bltu	r3,r2,18b08 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   18ab8:	e0bfff17 	ldw	r2,-4(fp)
   18abc:	10800c17 	ldw	r2,48(r2)
   18ac0:	e0bffd15 	stw	r2,-12(fp)
   18ac4:	00800104 	movi	r2,4
   18ac8:	e0bffc8d 	sth	r2,-14(fp)
   18acc:	00800044 	movi	r2,1
   18ad0:	e0bffc45 	stb	r2,-15(fp)
  if (OSRunning)
   18ad4:	d0a83843 	ldbu	r2,-24351(gp)
   18ad8:	10803fcc 	andi	r2,r2,255
   18adc:	10000926 	beq	r2,zero,18b04 <altera_avalon_jtag_uart_timeout+0xf0>
    OSFlagPost (group, flags, opt, &err);
   18ae0:	e0bffc8b 	ldhu	r2,-14(fp)
   18ae4:	e0fffc43 	ldbu	r3,-15(fp)
   18ae8:	e13ffc04 	addi	r4,fp,-16
   18aec:	200f883a 	mov	r7,r4
   18af0:	180d883a 	mov	r6,r3
   18af4:	100b883a 	mov	r5,r2
   18af8:	e13ffd17 	ldw	r4,-12(fp)
   18afc:	00123640 	call	12364 <OSFlagPost>
    return err;
   18b00:	00000106 	br	18b08 <altera_avalon_jtag_uart_timeout+0xf4>
  return OS_ERR_PEND_ISR;
   18b04:	0001883a 	nop
   18b08:	d0a82a17 	ldw	r2,-24408(gp)
    }
  }

  return alt_ticks_per_second();
}
   18b0c:	e037883a 	mov	sp,fp
   18b10:	dfc00117 	ldw	ra,4(sp)
   18b14:	df000017 	ldw	fp,0(sp)
   18b18:	dec00204 	addi	sp,sp,8
   18b1c:	f800283a 	ret

00018b20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   18b20:	defffd04 	addi	sp,sp,-12
   18b24:	df000215 	stw	fp,8(sp)
   18b28:	df000204 	addi	fp,sp,8
   18b2c:	e13fff15 	stw	r4,-4(fp)
   18b30:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   18b34:	00000506 	br	18b4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   18b38:	e0bffe17 	ldw	r2,-8(fp)
   18b3c:	1090000c 	andi	r2,r2,16384
   18b40:	10000226 	beq	r2,zero,18b4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   18b44:	00bffd44 	movi	r2,-11
   18b48:	00000b06 	br	18b78 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   18b4c:	e0bfff17 	ldw	r2,-4(fp)
   18b50:	10c01017 	ldw	r3,64(r2)
   18b54:	e0bfff17 	ldw	r2,-4(fp)
   18b58:	10800f17 	ldw	r2,60(r2)
   18b5c:	18800526 	beq	r3,r2,18b74 <altera_avalon_jtag_uart_close+0x54>
   18b60:	e0bfff17 	ldw	r2,-4(fp)
   18b64:	10c00917 	ldw	r3,36(r2)
   18b68:	e0bfff17 	ldw	r2,-4(fp)
   18b6c:	10800117 	ldw	r2,4(r2)
   18b70:	18bff136 	bltu	r3,r2,18b38 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   18b74:	0005883a 	mov	r2,zero
}
   18b78:	e037883a 	mov	sp,fp
   18b7c:	df000017 	ldw	fp,0(sp)
   18b80:	dec00104 	addi	sp,sp,4
   18b84:	f800283a 	ret

00018b88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   18b88:	defffa04 	addi	sp,sp,-24
   18b8c:	df000515 	stw	fp,20(sp)
   18b90:	df000504 	addi	fp,sp,20
   18b94:	e13ffd15 	stw	r4,-12(fp)
   18b98:	e17ffc15 	stw	r5,-16(fp)
   18b9c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   18ba0:	00bff9c4 	movi	r2,-25
   18ba4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   18ba8:	e0bffc17 	ldw	r2,-16(fp)
   18bac:	109a8060 	cmpeqi	r2,r2,27137
   18bb0:	1000041e 	bne	r2,zero,18bc4 <altera_avalon_jtag_uart_ioctl+0x3c>
   18bb4:	e0bffc17 	ldw	r2,-16(fp)
   18bb8:	109a80a0 	cmpeqi	r2,r2,27138
   18bbc:	1000181e 	bne	r2,zero,18c20 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   18bc0:	00002906 	br	18c68 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   18bc4:	e0bffd17 	ldw	r2,-12(fp)
   18bc8:	10c00117 	ldw	r3,4(r2)
   18bcc:	00a00034 	movhi	r2,32768
   18bd0:	10bfffc4 	addi	r2,r2,-1
   18bd4:	18802126 	beq	r3,r2,18c5c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   18bd8:	e0bffb17 	ldw	r2,-20(fp)
   18bdc:	10800017 	ldw	r2,0(r2)
   18be0:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   18be4:	e0bffe17 	ldw	r2,-8(fp)
   18be8:	10800090 	cmplti	r2,r2,2
   18bec:	1000061e 	bne	r2,zero,18c08 <altera_avalon_jtag_uart_ioctl+0x80>
   18bf0:	e0fffe17 	ldw	r3,-8(fp)
   18bf4:	00a00034 	movhi	r2,32768
   18bf8:	10bfffc4 	addi	r2,r2,-1
   18bfc:	18800226 	beq	r3,r2,18c08 <altera_avalon_jtag_uart_ioctl+0x80>
   18c00:	e0bffe17 	ldw	r2,-8(fp)
   18c04:	00000206 	br	18c10 <altera_avalon_jtag_uart_ioctl+0x88>
   18c08:	00a00034 	movhi	r2,32768
   18c0c:	10bfff84 	addi	r2,r2,-2
   18c10:	e0fffd17 	ldw	r3,-12(fp)
   18c14:	18800115 	stw	r2,4(r3)
      rc = 0;
   18c18:	e03fff15 	stw	zero,-4(fp)
    break;
   18c1c:	00000f06 	br	18c5c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   18c20:	e0bffd17 	ldw	r2,-12(fp)
   18c24:	10c00117 	ldw	r3,4(r2)
   18c28:	00a00034 	movhi	r2,32768
   18c2c:	10bfffc4 	addi	r2,r2,-1
   18c30:	18800c26 	beq	r3,r2,18c64 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   18c34:	e0bffd17 	ldw	r2,-12(fp)
   18c38:	10c00917 	ldw	r3,36(r2)
   18c3c:	e0bffd17 	ldw	r2,-12(fp)
   18c40:	10800117 	ldw	r2,4(r2)
   18c44:	1885803a 	cmpltu	r2,r3,r2
   18c48:	10c03fcc 	andi	r3,r2,255
   18c4c:	e0bffb17 	ldw	r2,-20(fp)
   18c50:	10c00015 	stw	r3,0(r2)
      rc = 0;
   18c54:	e03fff15 	stw	zero,-4(fp)
    break;
   18c58:	00000206 	br	18c64 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   18c5c:	0001883a 	nop
   18c60:	00000106 	br	18c68 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   18c64:	0001883a 	nop
  }

  return rc;
   18c68:	e0bfff17 	ldw	r2,-4(fp)
}
   18c6c:	e037883a 	mov	sp,fp
   18c70:	df000017 	ldw	fp,0(sp)
   18c74:	dec00104 	addi	sp,sp,4
   18c78:	f800283a 	ret

00018c7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   18c7c:	deffec04 	addi	sp,sp,-80
   18c80:	dfc01315 	stw	ra,76(sp)
   18c84:	df001215 	stw	fp,72(sp)
   18c88:	df001204 	addi	fp,sp,72
   18c8c:	e13ff215 	stw	r4,-56(fp)
   18c90:	e17ff115 	stw	r5,-60(fp)
   18c94:	e1bff015 	stw	r6,-64(fp)
   18c98:	e1ffef15 	stw	r7,-68(fp)
  char * ptr = buffer;
   18c9c:	e0bff117 	ldw	r2,-60(fp)
   18ca0:	e0bfff15 	stw	r2,-4(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   18ca4:	e0bff217 	ldw	r2,-56(fp)
   18ca8:	10800a17 	ldw	r2,40(r2)
   18cac:	e0bffa15 	stw	r2,-24(fp)
   18cb0:	e03ff98d 	sth	zero,-26(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   18cb4:	e0bff98b 	ldhu	r2,-26(fp)
   18cb8:	e0fff3c4 	addi	r3,fp,-49
   18cbc:	180d883a 	mov	r6,r3
   18cc0:	100b883a 	mov	r5,r2
   18cc4:	e13ffa17 	ldw	r4,-24(fp)
   18cc8:	00159700 	call	15970 <OSSemPend>

  while (space > 0)
   18ccc:	00006306 	br	18e5c <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   18cd0:	e0bff217 	ldw	r2,-56(fp)
   18cd4:	10800d17 	ldw	r2,52(r2)
   18cd8:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   18cdc:	e0bff217 	ldw	r2,-56(fp)
   18ce0:	10800e17 	ldw	r2,56(r2)
   18ce4:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   18ce8:	e0fffd17 	ldw	r3,-12(fp)
   18cec:	e0bffc17 	ldw	r2,-16(fp)
   18cf0:	18800536 	bltu	r3,r2,18d08 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   18cf4:	e0fffd17 	ldw	r3,-12(fp)
   18cf8:	e0bffc17 	ldw	r2,-16(fp)
   18cfc:	1885c83a 	sub	r2,r3,r2
   18d00:	e0bffe15 	stw	r2,-8(fp)
   18d04:	00000406 	br	18d18 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   18d08:	00c20004 	movi	r3,2048
   18d0c:	e0bffc17 	ldw	r2,-16(fp)
   18d10:	1885c83a 	sub	r2,r3,r2
   18d14:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   18d18:	e0bffe17 	ldw	r2,-8(fp)
   18d1c:	10001e26 	beq	r2,zero,18d98 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   18d20:	e0fff017 	ldw	r3,-64(fp)
   18d24:	e0bffe17 	ldw	r2,-8(fp)
   18d28:	1880022e 	bgeu	r3,r2,18d34 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   18d2c:	e0bff017 	ldw	r2,-64(fp)
   18d30:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   18d34:	e0bff217 	ldw	r2,-56(fp)
   18d38:	10c01104 	addi	r3,r2,68
   18d3c:	e0bffc17 	ldw	r2,-16(fp)
   18d40:	1885883a 	add	r2,r3,r2
   18d44:	e1bffe17 	ldw	r6,-8(fp)
   18d48:	100b883a 	mov	r5,r2
   18d4c:	e13fff17 	ldw	r4,-4(fp)
   18d50:	00011f40 	call	11f4 <memcpy>
      ptr   += n;
   18d54:	e0ffff17 	ldw	r3,-4(fp)
   18d58:	e0bffe17 	ldw	r2,-8(fp)
   18d5c:	1885883a 	add	r2,r3,r2
   18d60:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   18d64:	e0fff017 	ldw	r3,-64(fp)
   18d68:	e0bffe17 	ldw	r2,-8(fp)
   18d6c:	1885c83a 	sub	r2,r3,r2
   18d70:	e0bff015 	stw	r2,-64(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18d74:	e0fffc17 	ldw	r3,-16(fp)
   18d78:	e0bffe17 	ldw	r2,-8(fp)
   18d7c:	1885883a 	add	r2,r3,r2
   18d80:	10c1ffcc 	andi	r3,r2,2047
   18d84:	e0bff217 	ldw	r2,-56(fp)
   18d88:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   18d8c:	e0bff017 	ldw	r2,-64(fp)
   18d90:	00bfcf16 	blt	zero,r2,18cd0 <altera_avalon_jtag_uart_read+0x54>
   18d94:	00000106 	br	18d9c <altera_avalon_jtag_uart_read+0x120>
        break; /* No more data available */
   18d98:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   18d9c:	e0ffff17 	ldw	r3,-4(fp)
   18da0:	e0bff117 	ldw	r2,-60(fp)
   18da4:	1880301e 	bne	r3,r2,18e68 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   18da8:	e0bfef17 	ldw	r2,-68(fp)
   18dac:	1090000c 	andi	r2,r2,16384
   18db0:	10002f1e 	bne	r2,zero,18e70 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   18db4:	d0a83843 	ldbu	r2,-24351(gp)
   18db8:	10803fcc 	andi	r2,r2,255
   18dbc:	10800058 	cmpnei	r2,r2,1
   18dc0:	1000161e 	bne	r2,zero,18e1c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   18dc4:	e0bff217 	ldw	r2,-56(fp)
   18dc8:	10800c17 	ldw	r2,48(r2)
   18dcc:	e0bff815 	stw	r2,-32(fp)
   18dd0:	00800144 	movi	r2,5
   18dd4:	e0bff78d 	sth	r2,-34(fp)
   18dd8:	00bfe0c4 	movi	r2,-125
   18ddc:	e0bff745 	stb	r2,-35(fp)
   18de0:	e03ff68d 	sth	zero,-38(fp)
  if (OSRunning)
   18de4:	d0a83843 	ldbu	r2,-24351(gp)
   18de8:	10803fcc 	andi	r2,r2,255
   18dec:	10001626 	beq	r2,zero,18e48 <altera_avalon_jtag_uart_read+0x1cc>
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18df0:	e0fff78b 	ldhu	r3,-34(fp)
   18df4:	e13ff743 	ldbu	r4,-35(fp)
   18df8:	e17ff68b 	ldhu	r5,-38(fp)
   18dfc:	e0bff384 	addi	r2,fp,-50
   18e00:	d8800015 	stw	r2,0(sp)
   18e04:	280f883a 	mov	r7,r5
   18e08:	200d883a 	mov	r6,r4
   18e0c:	180b883a 	mov	r5,r3
   18e10:	e13ff817 	ldw	r4,-32(fp)
   18e14:	0011d000 	call	11d00 <OSFlagPend>
    return err;
   18e18:	00000c06 	br	18e4c <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   18e1c:	0001883a 	nop
   18e20:	e0bff217 	ldw	r2,-56(fp)
   18e24:	10800d17 	ldw	r2,52(r2)
   18e28:	e0fffd17 	ldw	r3,-12(fp)
   18e2c:	1880071e 	bne	r3,r2,18e4c <altera_avalon_jtag_uart_read+0x1d0>
   18e30:	e0bff217 	ldw	r2,-56(fp)
   18e34:	10c00917 	ldw	r3,36(r2)
   18e38:	e0bff217 	ldw	r2,-56(fp)
   18e3c:	10800117 	ldw	r2,4(r2)
   18e40:	18bff736 	bltu	r3,r2,18e20 <altera_avalon_jtag_uart_read+0x1a4>
   18e44:	00000106 	br	18e4c <altera_avalon_jtag_uart_read+0x1d0>
  return OS_ERR_PEND_ISR;
   18e48:	0001883a 	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   18e4c:	e0bff217 	ldw	r2,-56(fp)
   18e50:	10800d17 	ldw	r2,52(r2)
   18e54:	e0fffd17 	ldw	r3,-12(fp)
   18e58:	18800726 	beq	r3,r2,18e78 <altera_avalon_jtag_uart_read+0x1fc>
  while (space > 0)
   18e5c:	e0bff017 	ldw	r2,-64(fp)
   18e60:	00bf9b16 	blt	zero,r2,18cd0 <altera_avalon_jtag_uart_read+0x54>
   18e64:	00000506 	br	18e7c <altera_avalon_jtag_uart_read+0x200>
      break;
   18e68:	0001883a 	nop
   18e6c:	00000306 	br	18e7c <altera_avalon_jtag_uart_read+0x200>
      break;
   18e70:	0001883a 	nop
   18e74:	00000106 	br	18e7c <altera_avalon_jtag_uart_read+0x200>
      break;
   18e78:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   18e7c:	e0bff217 	ldw	r2,-56(fp)
   18e80:	10800a17 	ldw	r2,40(r2)
   18e84:	1009883a 	mov	r4,r2
   18e88:	0015cf80 	call	15cf8 <OSSemPost>

  if (ptr != buffer)
   18e8c:	e0ffff17 	ldw	r3,-4(fp)
   18e90:	e0bff117 	ldw	r2,-60(fp)
   18e94:	18801926 	beq	r3,r2,18efc <altera_avalon_jtag_uart_read+0x280>
  NIOS2_READ_STATUS (context);
   18e98:	0005303a 	rdctl	r2,status
   18e9c:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18ea0:	e0fff417 	ldw	r3,-48(fp)
   18ea4:	00bfff84 	movi	r2,-2
   18ea8:	1884703a 	and	r2,r3,r2
   18eac:	1001703a 	wrctl	status,r2
  return context;
   18eb0:	e0bff417 	ldw	r2,-48(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   18eb4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18eb8:	e0bff217 	ldw	r2,-56(fp)
   18ebc:	10800817 	ldw	r2,32(r2)
   18ec0:	10c00054 	ori	r3,r2,1
   18ec4:	e0bff217 	ldw	r2,-56(fp)
   18ec8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18ecc:	e0bff217 	ldw	r2,-56(fp)
   18ed0:	10800017 	ldw	r2,0(r2)
   18ed4:	10800104 	addi	r2,r2,4
   18ed8:	1007883a 	mov	r3,r2
   18edc:	e0bff217 	ldw	r2,-56(fp)
   18ee0:	10800817 	ldw	r2,32(r2)
   18ee4:	18800035 	stwio	r2,0(r3)
   18ee8:	e0bffb17 	ldw	r2,-20(fp)
   18eec:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   18ef0:	e0bff517 	ldw	r2,-44(fp)
   18ef4:	1001703a 	wrctl	status,r2
}
   18ef8:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   18efc:	e0ffff17 	ldw	r3,-4(fp)
   18f00:	e0bff117 	ldw	r2,-60(fp)
   18f04:	18800426 	beq	r3,r2,18f18 <altera_avalon_jtag_uart_read+0x29c>
    return ptr - buffer;
   18f08:	e0ffff17 	ldw	r3,-4(fp)
   18f0c:	e0bff117 	ldw	r2,-60(fp)
   18f10:	1885c83a 	sub	r2,r3,r2
   18f14:	00000606 	br	18f30 <altera_avalon_jtag_uart_read+0x2b4>
  else if (flags & O_NONBLOCK)
   18f18:	e0bfef17 	ldw	r2,-68(fp)
   18f1c:	1090000c 	andi	r2,r2,16384
   18f20:	10000226 	beq	r2,zero,18f2c <altera_avalon_jtag_uart_read+0x2b0>
    return -EWOULDBLOCK;
   18f24:	00bffd44 	movi	r2,-11
   18f28:	00000106 	br	18f30 <altera_avalon_jtag_uart_read+0x2b4>
  else
    return -EIO;
   18f2c:	00bffec4 	movi	r2,-5
}
   18f30:	e037883a 	mov	sp,fp
   18f34:	dfc00117 	ldw	ra,4(sp)
   18f38:	df000017 	ldw	fp,0(sp)
   18f3c:	dec00204 	addi	sp,sp,8
   18f40:	f800283a 	ret

00018f44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   18f44:	deffed04 	addi	sp,sp,-76
   18f48:	dfc01215 	stw	ra,72(sp)
   18f4c:	df001115 	stw	fp,68(sp)
   18f50:	df001104 	addi	fp,sp,68
   18f54:	e13ff315 	stw	r4,-52(fp)
   18f58:	e17ff215 	stw	r5,-56(fp)
   18f5c:	e1bff115 	stw	r6,-60(fp)
   18f60:	e1fff015 	stw	r7,-64(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   18f64:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   18f68:	e0bff217 	ldw	r2,-56(fp)
   18f6c:	e0bffd15 	stw	r2,-12(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   18f70:	e0bff317 	ldw	r2,-52(fp)
   18f74:	10800b17 	ldw	r2,44(r2)
   18f78:	e0bffa15 	stw	r2,-24(fp)
   18f7c:	e03ff98d 	sth	zero,-26(fp)
   18f80:	e0bff98b 	ldhu	r2,-26(fp)
   18f84:	e0fff404 	addi	r3,fp,-48
   18f88:	180d883a 	mov	r6,r3
   18f8c:	100b883a 	mov	r5,r2
   18f90:	e13ffa17 	ldw	r4,-24(fp)
   18f94:	00159700 	call	15970 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18f98:	00003706 	br	19078 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18f9c:	e0bff317 	ldw	r2,-52(fp)
   18fa0:	10800f17 	ldw	r2,60(r2)
   18fa4:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   18fa8:	e0bff317 	ldw	r2,-52(fp)
   18fac:	10801017 	ldw	r2,64(r2)
   18fb0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   18fb4:	e0fffc17 	ldw	r3,-16(fp)
   18fb8:	e0bfff17 	ldw	r2,-4(fp)
   18fbc:	1880062e 	bgeu	r3,r2,18fd8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18fc0:	e0ffff17 	ldw	r3,-4(fp)
   18fc4:	e0bffc17 	ldw	r2,-16(fp)
   18fc8:	1885c83a 	sub	r2,r3,r2
   18fcc:	10bfffc4 	addi	r2,r2,-1
   18fd0:	e0bffe15 	stw	r2,-8(fp)
   18fd4:	00000b06 	br	19004 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   18fd8:	e0bfff17 	ldw	r2,-4(fp)
   18fdc:	10000526 	beq	r2,zero,18ff4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   18fe0:	00c20004 	movi	r3,2048
   18fe4:	e0bffc17 	ldw	r2,-16(fp)
   18fe8:	1885c83a 	sub	r2,r3,r2
   18fec:	e0bffe15 	stw	r2,-8(fp)
   18ff0:	00000406 	br	19004 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   18ff4:	00c1ffc4 	movi	r3,2047
   18ff8:	e0bffc17 	ldw	r2,-16(fp)
   18ffc:	1885c83a 	sub	r2,r3,r2
   19000:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   19004:	e0bffe17 	ldw	r2,-8(fp)
   19008:	10001e26 	beq	r2,zero,19084 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1900c:	e0fff117 	ldw	r3,-60(fp)
   19010:	e0bffe17 	ldw	r2,-8(fp)
   19014:	1880022e 	bgeu	r3,r2,19020 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   19018:	e0bff117 	ldw	r2,-60(fp)
   1901c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   19020:	e0bff317 	ldw	r2,-52(fp)
   19024:	10c21104 	addi	r3,r2,2116
   19028:	e0bffc17 	ldw	r2,-16(fp)
   1902c:	1885883a 	add	r2,r3,r2
   19030:	e1bffe17 	ldw	r6,-8(fp)
   19034:	e17ff217 	ldw	r5,-56(fp)
   19038:	1009883a 	mov	r4,r2
   1903c:	00011f40 	call	11f4 <memcpy>
      ptr   += n;
   19040:	e0fff217 	ldw	r3,-56(fp)
   19044:	e0bffe17 	ldw	r2,-8(fp)
   19048:	1885883a 	add	r2,r3,r2
   1904c:	e0bff215 	stw	r2,-56(fp)
      count -= n;
   19050:	e0fff117 	ldw	r3,-60(fp)
   19054:	e0bffe17 	ldw	r2,-8(fp)
   19058:	1885c83a 	sub	r2,r3,r2
   1905c:	e0bff115 	stw	r2,-60(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   19060:	e0fffc17 	ldw	r3,-16(fp)
   19064:	e0bffe17 	ldw	r2,-8(fp)
   19068:	1885883a 	add	r2,r3,r2
   1906c:	10c1ffcc 	andi	r3,r2,2047
   19070:	e0bff317 	ldw	r2,-52(fp)
   19074:	10c00f15 	stw	r3,60(r2)
    while (count > 0)
   19078:	e0bff117 	ldw	r2,-60(fp)
   1907c:	00bfc716 	blt	zero,r2,18f9c <altera_avalon_jtag_uart_write+0x58>
   19080:	00000106 	br	19088 <altera_avalon_jtag_uart_write+0x144>
        break;
   19084:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   19088:	0005303a 	rdctl	r2,status
   1908c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19090:	e0fff717 	ldw	r3,-36(fp)
   19094:	00bfff84 	movi	r2,-2
   19098:	1884703a 	and	r2,r3,r2
   1909c:	1001703a 	wrctl	status,r2
  return context;
   190a0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   190a4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   190a8:	e0bff317 	ldw	r2,-52(fp)
   190ac:	10800817 	ldw	r2,32(r2)
   190b0:	10c00094 	ori	r3,r2,2
   190b4:	e0bff317 	ldw	r2,-52(fp)
   190b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   190bc:	e0bff317 	ldw	r2,-52(fp)
   190c0:	10800017 	ldw	r2,0(r2)
   190c4:	10800104 	addi	r2,r2,4
   190c8:	1007883a 	mov	r3,r2
   190cc:	e0bff317 	ldw	r2,-52(fp)
   190d0:	10800817 	ldw	r2,32(r2)
   190d4:	18800035 	stwio	r2,0(r3)
   190d8:	e0bffb17 	ldw	r2,-20(fp)
   190dc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_WRITE_STATUS (context);
   190e0:	e0bff817 	ldw	r2,-32(fp)
   190e4:	1001703a 	wrctl	status,r2
}
   190e8:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   190ec:	e0bff117 	ldw	r2,-60(fp)
   190f0:	00802c0e 	bge	zero,r2,191a4 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
   190f4:	e0bff017 	ldw	r2,-64(fp)
   190f8:	1090000c 	andi	r2,r2,16384
   190fc:	10002c1e 	bne	r2,zero,191b0 <altera_avalon_jtag_uart_write+0x26c>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   19100:	d0a83843 	ldbu	r2,-24351(gp)
   19104:	10803fcc 	andi	r2,r2,255
   19108:	10800058 	cmpnei	r2,r2,1
   1910c:	1000161e 	bne	r2,zero,19168 <altera_avalon_jtag_uart_write+0x224>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   19110:	e0bff317 	ldw	r2,-52(fp)
   19114:	10800c17 	ldw	r2,48(r2)
   19118:	e0bff615 	stw	r2,-40(fp)
   1911c:	00800184 	movi	r2,6
   19120:	e0bff58d 	sth	r2,-42(fp)
   19124:	00bfe0c4 	movi	r2,-125
   19128:	e0bff545 	stb	r2,-43(fp)
   1912c:	e03ff48d 	sth	zero,-46(fp)
  if (OSRunning)
   19130:	d0a83843 	ldbu	r2,-24351(gp)
   19134:	10803fcc 	andi	r2,r2,255
   19138:	10001626 	beq	r2,zero,19194 <altera_avalon_jtag_uart_write+0x250>
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1913c:	e0fff58b 	ldhu	r3,-42(fp)
   19140:	e13ff543 	ldbu	r4,-43(fp)
   19144:	e17ff48b 	ldhu	r5,-46(fp)
   19148:	e0bff444 	addi	r2,fp,-47
   1914c:	d8800015 	stw	r2,0(sp)
   19150:	280f883a 	mov	r7,r5
   19154:	200d883a 	mov	r6,r4
   19158:	180b883a 	mov	r5,r3
   1915c:	e13ff617 	ldw	r4,-40(fp)
   19160:	0011d000 	call	11d00 <OSFlagPend>
    return err;
   19164:	00000c06 	br	19198 <altera_avalon_jtag_uart_write+0x254>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   19168:	0001883a 	nop
   1916c:	e0bff317 	ldw	r2,-52(fp)
   19170:	10801017 	ldw	r2,64(r2)
   19174:	e0ffff17 	ldw	r3,-4(fp)
   19178:	1880071e 	bne	r3,r2,19198 <altera_avalon_jtag_uart_write+0x254>
   1917c:	e0bff317 	ldw	r2,-52(fp)
   19180:	10c00917 	ldw	r3,36(r2)
   19184:	e0bff317 	ldw	r2,-52(fp)
   19188:	10800117 	ldw	r2,4(r2)
   1918c:	18bff736 	bltu	r3,r2,1916c <altera_avalon_jtag_uart_write+0x228>
   19190:	00000106 	br	19198 <altera_avalon_jtag_uart_write+0x254>
  return OS_ERR_PEND_ISR;
   19194:	0001883a 	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   19198:	e0bff317 	ldw	r2,-52(fp)
   1919c:	10800917 	ldw	r2,36(r2)
   191a0:	1000051e 	bne	r2,zero,191b8 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
   191a4:	e0bff117 	ldw	r2,-60(fp)
   191a8:	00bfb316 	blt	zero,r2,19078 <altera_avalon_jtag_uart_write+0x134>
   191ac:	00000306 	br	191bc <altera_avalon_jtag_uart_write+0x278>
        break;
   191b0:	0001883a 	nop
   191b4:	00000106 	br	191bc <altera_avalon_jtag_uart_write+0x278>
         break;
   191b8:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   191bc:	e0bff317 	ldw	r2,-52(fp)
   191c0:	10800b17 	ldw	r2,44(r2)
   191c4:	1009883a 	mov	r4,r2
   191c8:	0015cf80 	call	15cf8 <OSSemPost>

  if (ptr != start)
   191cc:	e0fff217 	ldw	r3,-56(fp)
   191d0:	e0bffd17 	ldw	r2,-12(fp)
   191d4:	18800426 	beq	r3,r2,191e8 <altera_avalon_jtag_uart_write+0x2a4>
    return ptr - start;
   191d8:	e0fff217 	ldw	r3,-56(fp)
   191dc:	e0bffd17 	ldw	r2,-12(fp)
   191e0:	1885c83a 	sub	r2,r3,r2
   191e4:	00000606 	br	19200 <altera_avalon_jtag_uart_write+0x2bc>
  else if (flags & O_NONBLOCK)
   191e8:	e0bff017 	ldw	r2,-64(fp)
   191ec:	1090000c 	andi	r2,r2,16384
   191f0:	10000226 	beq	r2,zero,191fc <altera_avalon_jtag_uart_write+0x2b8>
    return -EWOULDBLOCK;
   191f4:	00bffd44 	movi	r2,-11
   191f8:	00000106 	br	19200 <altera_avalon_jtag_uart_write+0x2bc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   191fc:	00bffec4 	movi	r2,-5
}
   19200:	e037883a 	mov	sp,fp
   19204:	dfc00117 	ldw	ra,4(sp)
   19208:	df000017 	ldw	fp,0(sp)
   1920c:	dec00204 	addi	sp,sp,8
   19210:	f800283a 	ret

00019214 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   19214:	defff904 	addi	sp,sp,-28
   19218:	dfc00615 	stw	ra,24(sp)
   1921c:	df000515 	stw	fp,20(sp)
   19220:	df000504 	addi	fp,sp,20
   19224:	e13ffc15 	stw	r4,-16(fp)
   19228:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1922c:	0007883a 	mov	r3,zero
   19230:	e0bffc17 	ldw	r2,-16(fp)
   19234:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   19238:	e0bffc17 	ldw	r2,-16(fp)
   1923c:	10800104 	addi	r2,r2,4
   19240:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   19244:	0005303a 	rdctl	r2,status
   19248:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1924c:	e0fffd17 	ldw	r3,-12(fp)
   19250:	00bfff84 	movi	r2,-2
   19254:	1884703a 	and	r2,r3,r2
   19258:	1001703a 	wrctl	status,r2
  return context;
   1925c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   19260:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   19264:	000ecc80 	call	ecc8 <alt_tick>
   19268:	e0bfff17 	ldw	r2,-4(fp)
   1926c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   19270:	e0bffe17 	ldw	r2,-8(fp)
   19274:	1001703a 	wrctl	status,r2
}
   19278:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   1927c:	0001883a 	nop
   19280:	e037883a 	mov	sp,fp
   19284:	dfc00117 	ldw	ra,4(sp)
   19288:	df000017 	ldw	fp,0(sp)
   1928c:	dec00204 	addi	sp,sp,8
   19290:	f800283a 	ret

00019294 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   19294:	defff904 	addi	sp,sp,-28
   19298:	dfc00615 	stw	ra,24(sp)
   1929c:	df000515 	stw	fp,20(sp)
   192a0:	df000504 	addi	fp,sp,20
   192a4:	e13ffe15 	stw	r4,-8(fp)
   192a8:	e17ffd15 	stw	r5,-12(fp)
   192ac:	e1bffc15 	stw	r6,-16(fp)
   192b0:	e1fffb15 	stw	r7,-20(fp)
   192b4:	e0bffb17 	ldw	r2,-20(fp)
   192b8:	e0bfff15 	stw	r2,-4(fp)
  if (! _alt_tick_rate)
   192bc:	d0a82a17 	ldw	r2,-24408(gp)
   192c0:	1000031e 	bne	r2,zero,192d0 <alt_avalon_timer_sc_init+0x3c>
    _alt_tick_rate = nticks;
   192c4:	e0bfff17 	ldw	r2,-4(fp)
   192c8:	d0a82a15 	stw	r2,-24408(gp)
    return 0;
   192cc:	00000106 	br	192d4 <alt_avalon_timer_sc_init+0x40>
    return -1;
   192d0:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   192d4:	e0bffe17 	ldw	r2,-8(fp)
   192d8:	10800104 	addi	r2,r2,4
   192dc:	00c001c4 	movi	r3,7
   192e0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   192e4:	018000b4 	movhi	r6,2
   192e8:	31a48504 	addi	r6,r6,-28140
   192ec:	e17ffe17 	ldw	r5,-8(fp)
   192f0:	e13ffc17 	ldw	r4,-16(fp)
   192f4:	001aacc0 	call	1aacc <alt_irq_register>
#endif  
}
   192f8:	0001883a 	nop
   192fc:	e037883a 	mov	sp,fp
   19300:	dfc00117 	ldw	ra,4(sp)
   19304:	df000017 	ldw	fp,0(sp)
   19308:	dec00204 	addi	sp,sp,8
   1930c:	f800283a 	ret

00019310 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   19310:	defffc04 	addi	sp,sp,-16
   19314:	df000315 	stw	fp,12(sp)
   19318:	df000304 	addi	fp,sp,12
   1931c:	e13ffe15 	stw	r4,-8(fp)
   19320:	e17ffd15 	stw	r5,-12(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   19324:	e03fffc5 	stb	zero,-1(fp)
	if (y_pos == 0)
   19328:	e0bffd17 	ldw	r2,-12(fp)
   1932c:	1000061e 	bne	r2,zero,19348 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   19330:	e0bffe17 	ldw	r2,-8(fp)
   19334:	1007883a 	mov	r3,r2
   19338:	e0bfffc3 	ldbu	r2,-1(fp)
   1933c:	10c4b03a 	or	r2,r2,r3
   19340:	e0bfffc5 	stb	r2,-1(fp)
   19344:	00000806 	br	19368 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   19348:	e0bffe17 	ldw	r2,-8(fp)
   1934c:	1007883a 	mov	r3,r2
   19350:	e0bfffc3 	ldbu	r2,-1(fp)
   19354:	10c4b03a 	or	r2,r2,r3
   19358:	e0bfffc5 	stb	r2,-1(fp)
		addr |= 0x00000040;
   1935c:	e0bfffc3 	ldbu	r2,-1(fp)
   19360:	10801014 	ori	r2,r2,64
   19364:	e0bfffc5 	stb	r2,-1(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   19368:	e0ffffc3 	ldbu	r3,-1(fp)
   1936c:	00bfe004 	movi	r2,-128
   19370:	1884b03a 	or	r2,r3,r2
}
   19374:	e037883a 	mov	sp,fp
   19378:	df000017 	ldw	fp,0(sp)
   1937c:	dec00104 	addi	sp,sp,4
   19380:	f800283a 	ret

00019384 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   19384:	defffd04 	addi	sp,sp,-12
   19388:	df000215 	stw	fp,8(sp)
   1938c:	df000204 	addi	fp,sp,8
   19390:	e13fff15 	stw	r4,-4(fp)
   19394:	2805883a 	mov	r2,r5
   19398:	e0bffe05 	stb	r2,-8(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1939c:	e0bfff17 	ldw	r2,-4(fp)
   193a0:	10800a17 	ldw	r2,40(r2)
   193a4:	1007883a 	mov	r3,r2
   193a8:	e0bffe03 	ldbu	r2,-8(fp)
   193ac:	18800025 	stbio	r2,0(r3)
}
   193b0:	0001883a 	nop
   193b4:	e037883a 	mov	sp,fp
   193b8:	df000017 	ldw	fp,0(sp)
   193bc:	dec00104 	addi	sp,sp,4
   193c0:	f800283a 	ret

000193c4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   193c4:	defffe04 	addi	sp,sp,-8
   193c8:	df000115 	stw	fp,4(sp)
   193cc:	df000104 	addi	fp,sp,4
   193d0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   193d4:	e0bfff17 	ldw	r2,-4(fp)
   193d8:	10800a17 	ldw	r2,40(r2)
   193dc:	1007883a 	mov	r3,r2
   193e0:	00800044 	movi	r2,1
   193e4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   193e8:	0001883a 	nop
   193ec:	e037883a 	mov	sp,fp
   193f0:	df000017 	ldw	fp,0(sp)
   193f4:	dec00104 	addi	sp,sp,4
   193f8:	f800283a 	ret

000193fc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   193fc:	defffc04 	addi	sp,sp,-16
   19400:	dfc00315 	stw	ra,12(sp)
   19404:	df000215 	stw	fp,8(sp)
   19408:	df000204 	addi	fp,sp,8
   1940c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   19410:	d1600804 	addi	r5,gp,-32736
   19414:	e13ffe17 	ldw	r4,-8(fp)
   19418:	001a8dc0 	call	1a8dc <alt_find_dev>
   1941c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   19420:	e0bfff17 	ldw	r2,-4(fp)
}
   19424:	e037883a 	mov	sp,fp
   19428:	dfc00117 	ldw	ra,4(sp)
   1942c:	df000017 	ldw	fp,0(sp)
   19430:	dec00204 	addi	sp,sp,8
   19434:	f800283a 	ret

00019438 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   19438:	defffb04 	addi	sp,sp,-20
   1943c:	df000415 	stw	fp,16(sp)
   19440:	df000404 	addi	fp,sp,16
   19444:	e13ffe15 	stw	r4,-8(fp)
   19448:	e17ffd15 	stw	r5,-12(fp)
   1944c:	e1bffc15 	stw	r6,-16(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   19450:	e03fff15 	stw	zero,-4(fp)
   19454:	00000f06 	br	19494 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   19458:	e0bffe17 	ldw	r2,-8(fp)
   1945c:	10800a17 	ldw	r2,40(r2)
   19460:	10800044 	addi	r2,r2,1
   19464:	1009883a 	mov	r4,r2
   19468:	e0fffd17 	ldw	r3,-12(fp)
   1946c:	e0bfff17 	ldw	r2,-4(fp)
   19470:	1885883a 	add	r2,r3,r2
   19474:	10800003 	ldbu	r2,0(r2)
   19478:	10803fcc 	andi	r2,r2,255
   1947c:	1080201c 	xori	r2,r2,128
   19480:	10bfe004 	addi	r2,r2,-128
   19484:	20800025 	stbio	r2,0(r4)
	for (i = 0; i < len; i++)
   19488:	e0bfff17 	ldw	r2,-4(fp)
   1948c:	10800044 	addi	r2,r2,1
   19490:	e0bfff15 	stw	r2,-4(fp)
   19494:	e0ffff17 	ldw	r3,-4(fp)
   19498:	e0bffc17 	ldw	r2,-16(fp)
   1949c:	18bfee36 	bltu	r3,r2,19458 <alt_up_character_lcd_write+0x20>
	}
}
   194a0:	0001883a 	nop
   194a4:	0001883a 	nop
   194a8:	e037883a 	mov	sp,fp
   194ac:	df000017 	ldw	fp,0(sp)
   194b0:	dec00104 	addi	sp,sp,4
   194b4:	f800283a 	ret

000194b8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   194b8:	defffd04 	addi	sp,sp,-12
   194bc:	df000215 	stw	fp,8(sp)
   194c0:	df000204 	addi	fp,sp,8
   194c4:	e13fff15 	stw	r4,-4(fp)
   194c8:	e17ffe15 	stw	r5,-8(fp)
	while ( *ptr )
   194cc:	00000d06 	br	19504 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   194d0:	e0bfff17 	ldw	r2,-4(fp)
   194d4:	10800a17 	ldw	r2,40(r2)
   194d8:	10800044 	addi	r2,r2,1
   194dc:	1007883a 	mov	r3,r2
   194e0:	e0bffe17 	ldw	r2,-8(fp)
   194e4:	10800003 	ldbu	r2,0(r2)
   194e8:	10803fcc 	andi	r2,r2,255
   194ec:	1080201c 	xori	r2,r2,128
   194f0:	10bfe004 	addi	r2,r2,-128
   194f4:	18800025 	stbio	r2,0(r3)
		++ptr;
   194f8:	e0bffe17 	ldw	r2,-8(fp)
   194fc:	10800044 	addi	r2,r2,1
   19500:	e0bffe15 	stw	r2,-8(fp)
	while ( *ptr )
   19504:	e0bffe17 	ldw	r2,-8(fp)
   19508:	10800003 	ldbu	r2,0(r2)
   1950c:	10803fcc 	andi	r2,r2,255
   19510:	1080201c 	xori	r2,r2,128
   19514:	10bfe004 	addi	r2,r2,-128
   19518:	103fed1e 	bne	r2,zero,194d0 <alt_up_character_lcd_string+0x18>
	}
}
   1951c:	0001883a 	nop
   19520:	0001883a 	nop
   19524:	e037883a 	mov	sp,fp
   19528:	df000017 	ldw	fp,0(sp)
   1952c:	dec00104 	addi	sp,sp,4
   19530:	f800283a 	ret

00019534 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   19534:	defffb04 	addi	sp,sp,-20
   19538:	dfc00415 	stw	ra,16(sp)
   1953c:	df000315 	stw	fp,12(sp)
   19540:	df000304 	addi	fp,sp,12
   19544:	e13fff15 	stw	r4,-4(fp)
   19548:	e17ffe15 	stw	r5,-8(fp)
   1954c:	e1bffd15 	stw	r6,-12(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   19550:	e0bfff17 	ldw	r2,-4(fp)
   19554:	10800017 	ldw	r2,0(r2)
   19558:	e0fffd17 	ldw	r3,-12(fp)
   1955c:	180d883a 	mov	r6,r3
   19560:	e17ffe17 	ldw	r5,-8(fp)
   19564:	1009883a 	mov	r4,r2
   19568:	00194380 	call	19438 <alt_up_character_lcd_write>
	return 0;
   1956c:	0005883a 	mov	r2,zero
}
   19570:	e037883a 	mov	sp,fp
   19574:	dfc00117 	ldw	ra,4(sp)
   19578:	df000017 	ldw	fp,0(sp)
   1957c:	dec00204 	addi	sp,sp,8
   19580:	f800283a 	ret

00019584 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   19584:	defffa04 	addi	sp,sp,-24
   19588:	dfc00515 	stw	ra,20(sp)
   1958c:	df000415 	stw	fp,16(sp)
   19590:	df000404 	addi	fp,sp,16
   19594:	e13ffe15 	stw	r4,-8(fp)
   19598:	e17ffd15 	stw	r5,-12(fp)
   1959c:	e1bffc15 	stw	r6,-16(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   195a0:	e0bffd17 	ldw	r2,-12(fp)
   195a4:	10800a28 	cmpgeui	r2,r2,40
   195a8:	1000031e 	bne	r2,zero,195b8 <alt_up_character_lcd_set_cursor_pos+0x34>
   195ac:	e0bffc17 	ldw	r2,-16(fp)
   195b0:	108000b0 	cmpltui	r2,r2,2
   195b4:	1000021e 	bne	r2,zero,195c0 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   195b8:	00bfffc4 	movi	r2,-1
   195bc:	00000906 	br	195e4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   195c0:	e17ffc17 	ldw	r5,-16(fp)
   195c4:	e13ffd17 	ldw	r4,-12(fp)
   195c8:	00193100 	call	19310 <get_DDRAM_addr>
   195cc:	e0bfffc5 	stb	r2,-1(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   195d0:	e0bfffc3 	ldbu	r2,-1(fp)
   195d4:	100b883a 	mov	r5,r2
   195d8:	e13ffe17 	ldw	r4,-8(fp)
   195dc:	00193840 	call	19384 <alt_up_character_lcd_send_cmd>
	return 0;
   195e0:	0005883a 	mov	r2,zero
}
   195e4:	e037883a 	mov	sp,fp
   195e8:	dfc00117 	ldw	ra,4(sp)
   195ec:	df000017 	ldw	fp,0(sp)
   195f0:	dec00204 	addi	sp,sp,8
   195f4:	f800283a 	ret

000195f8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   195f8:	defffb04 	addi	sp,sp,-20
   195fc:	dfc00415 	stw	ra,16(sp)
   19600:	df000315 	stw	fp,12(sp)
   19604:	df000304 	addi	fp,sp,12
   19608:	e13ffe15 	stw	r4,-8(fp)
   1960c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   19610:	e0bffd17 	ldw	r2,-12(fp)
   19614:	10001526 	beq	r2,zero,1966c <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   19618:	e0bffd17 	ldw	r2,-12(fp)
   1961c:	0080020e 	bge	zero,r2,19628 <alt_up_character_lcd_shift_cursor+0x30>
   19620:	00800504 	movi	r2,20
   19624:	00000106 	br	1962c <alt_up_character_lcd_shift_cursor+0x34>
   19628:	00800404 	movi	r2,16
   1962c:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   19630:	e0bffd17 	ldw	r2,-12(fp)
   19634:	1000010e 	bge	r2,zero,1963c <alt_up_character_lcd_shift_cursor+0x44>
   19638:	0085c83a 	sub	r2,zero,r2
   1963c:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   19640:	00000406 	br	19654 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   19644:	e0bfff83 	ldbu	r2,-2(fp)
   19648:	100b883a 	mov	r5,r2
   1964c:	e13ffe17 	ldw	r4,-8(fp)
   19650:	00193840 	call	19384 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   19654:	e0bfffc3 	ldbu	r2,-1(fp)
   19658:	10ffffc4 	addi	r3,r2,-1
   1965c:	e0ffffc5 	stb	r3,-1(fp)
   19660:	10803fcc 	andi	r2,r2,255
   19664:	103ff71e 	bne	r2,zero,19644 <alt_up_character_lcd_shift_cursor+0x4c>
   19668:	00000106 	br	19670 <alt_up_character_lcd_shift_cursor+0x78>
		return;
   1966c:	0001883a 	nop
}
   19670:	e037883a 	mov	sp,fp
   19674:	dfc00117 	ldw	ra,4(sp)
   19678:	df000017 	ldw	fp,0(sp)
   1967c:	dec00204 	addi	sp,sp,8
   19680:	f800283a 	ret

00019684 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   19684:	defffb04 	addi	sp,sp,-20
   19688:	dfc00415 	stw	ra,16(sp)
   1968c:	df000315 	stw	fp,12(sp)
   19690:	df000304 	addi	fp,sp,12
   19694:	e13ffe15 	stw	r4,-8(fp)
   19698:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   1969c:	e0bffd17 	ldw	r2,-12(fp)
   196a0:	10001526 	beq	r2,zero,196f8 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   196a4:	e0bffd17 	ldw	r2,-12(fp)
   196a8:	0080020e 	bge	zero,r2,196b4 <alt_up_character_lcd_shift_display+0x30>
   196ac:	00800704 	movi	r2,28
   196b0:	00000106 	br	196b8 <alt_up_character_lcd_shift_display+0x34>
   196b4:	00800604 	movi	r2,24
   196b8:	e0bfff85 	stb	r2,-2(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   196bc:	e0bffd17 	ldw	r2,-12(fp)
   196c0:	1000010e 	bge	r2,zero,196c8 <alt_up_character_lcd_shift_display+0x44>
   196c4:	0085c83a 	sub	r2,zero,r2
   196c8:	e0bfffc5 	stb	r2,-1(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   196cc:	00000406 	br	196e0 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   196d0:	e0bfff83 	ldbu	r2,-2(fp)
   196d4:	100b883a 	mov	r5,r2
   196d8:	e13ffe17 	ldw	r4,-8(fp)
   196dc:	00193840 	call	19384 <alt_up_character_lcd_send_cmd>
	while (num_offset-- > 0)
   196e0:	e0bfffc3 	ldbu	r2,-1(fp)
   196e4:	10ffffc4 	addi	r3,r2,-1
   196e8:	e0ffffc5 	stb	r3,-1(fp)
   196ec:	10803fcc 	andi	r2,r2,255
   196f0:	103ff71e 	bne	r2,zero,196d0 <alt_up_character_lcd_shift_display+0x4c>
   196f4:	00000106 	br	196fc <alt_up_character_lcd_shift_display+0x78>
		return;
   196f8:	0001883a 	nop
}
   196fc:	e037883a 	mov	sp,fp
   19700:	dfc00117 	ldw	ra,4(sp)
   19704:	df000017 	ldw	fp,0(sp)
   19708:	dec00204 	addi	sp,sp,8
   1970c:	f800283a 	ret

00019710 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   19710:	defffa04 	addi	sp,sp,-24
   19714:	dfc00515 	stw	ra,20(sp)
   19718:	df000415 	stw	fp,16(sp)
   1971c:	df000404 	addi	fp,sp,16
   19720:	e13ffe15 	stw	r4,-8(fp)
   19724:	e17ffd15 	stw	r5,-12(fp)
   19728:	e1bffc15 	stw	r6,-16(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1972c:	e0bffd17 	ldw	r2,-12(fp)
   19730:	10800a28 	cmpgeui	r2,r2,40
   19734:	1000031e 	bne	r2,zero,19744 <alt_up_character_lcd_erase_pos+0x34>
   19738:	e0bffc17 	ldw	r2,-16(fp)
   1973c:	108000b0 	cmpltui	r2,r2,2
   19740:	1000021e 	bne	r2,zero,1974c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   19744:	00bfffc4 	movi	r2,-1
   19748:	00000f06 	br	19788 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1974c:	e17ffc17 	ldw	r5,-16(fp)
   19750:	e13ffd17 	ldw	r4,-12(fp)
   19754:	00193100 	call	19310 <get_DDRAM_addr>
   19758:	e0bfffc5 	stb	r2,-1(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1975c:	e0bfffc3 	ldbu	r2,-1(fp)
   19760:	100b883a 	mov	r5,r2
   19764:	e13ffe17 	ldw	r4,-8(fp)
   19768:	00193840 	call	19384 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1976c:	e0bffe17 	ldw	r2,-8(fp)
   19770:	10800a17 	ldw	r2,40(r2)
   19774:	10800044 	addi	r2,r2,1
   19778:	1007883a 	mov	r3,r2
   1977c:	00800084 	movi	r2,2
   19780:	18800025 	stbio	r2,0(r3)
	return 0;
   19784:	0005883a 	mov	r2,zero
}
   19788:	e037883a 	mov	sp,fp
   1978c:	dfc00117 	ldw	ra,4(sp)
   19790:	df000017 	ldw	fp,0(sp)
   19794:	dec00204 	addi	sp,sp,8
   19798:	f800283a 	ret

0001979c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1979c:	defffd04 	addi	sp,sp,-12
   197a0:	dfc00215 	stw	ra,8(sp)
   197a4:	df000115 	stw	fp,4(sp)
   197a8:	df000104 	addi	fp,sp,4
   197ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   197b0:	01400304 	movi	r5,12
   197b4:	e13fff17 	ldw	r4,-4(fp)
   197b8:	00193840 	call	19384 <alt_up_character_lcd_send_cmd>
}
   197bc:	0001883a 	nop
   197c0:	e037883a 	mov	sp,fp
   197c4:	dfc00117 	ldw	ra,4(sp)
   197c8:	df000017 	ldw	fp,0(sp)
   197cc:	dec00204 	addi	sp,sp,8
   197d0:	f800283a 	ret

000197d4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   197d4:	defffd04 	addi	sp,sp,-12
   197d8:	dfc00215 	stw	ra,8(sp)
   197dc:	df000115 	stw	fp,4(sp)
   197e0:	df000104 	addi	fp,sp,4
   197e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   197e8:	014003c4 	movi	r5,15
   197ec:	e13fff17 	ldw	r4,-4(fp)
   197f0:	00193840 	call	19384 <alt_up_character_lcd_send_cmd>
}
   197f4:	0001883a 	nop
   197f8:	e037883a 	mov	sp,fp
   197fc:	dfc00117 	ldw	ra,4(sp)
   19800:	df000017 	ldw	fp,0(sp)
   19804:	dec00204 	addi	sp,sp,8
   19808:	f800283a 	ret

0001980c <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1980c:	defffd04 	addi	sp,sp,-12
   19810:	df000215 	stw	fp,8(sp)
   19814:	df000204 	addi	fp,sp,8
   19818:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1981c:	e0bffe17 	ldw	r2,-8(fp)
   19820:	10800a17 	ldw	r2,40(r2)
   19824:	10800104 	addi	r2,r2,4
   19828:	10800037 	ldwio	r2,0(r2)
   1982c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   19830:	e0bfff17 	ldw	r2,-4(fp)
   19834:	10800054 	ori	r2,r2,1
   19838:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1983c:	e0bffe17 	ldw	r2,-8(fp)
   19840:	10800a17 	ldw	r2,40(r2)
   19844:	10800104 	addi	r2,r2,4
   19848:	1007883a 	mov	r3,r2
   1984c:	e0bfff17 	ldw	r2,-4(fp)
   19850:	18800035 	stwio	r2,0(r3)
}
   19854:	0001883a 	nop
   19858:	e037883a 	mov	sp,fp
   1985c:	df000017 	ldw	fp,0(sp)
   19860:	dec00104 	addi	sp,sp,4
   19864:	f800283a 	ret

00019868 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   19868:	defffd04 	addi	sp,sp,-12
   1986c:	df000215 	stw	fp,8(sp)
   19870:	df000204 	addi	fp,sp,8
   19874:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19878:	e0bffe17 	ldw	r2,-8(fp)
   1987c:	10800a17 	ldw	r2,40(r2)
   19880:	10800104 	addi	r2,r2,4
   19884:	10800037 	ldwio	r2,0(r2)
   19888:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1988c:	e0ffff17 	ldw	r3,-4(fp)
   19890:	00bfff84 	movi	r2,-2
   19894:	1884703a 	and	r2,r3,r2
   19898:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1989c:	e0bffe17 	ldw	r2,-8(fp)
   198a0:	10800a17 	ldw	r2,40(r2)
   198a4:	10800104 	addi	r2,r2,4
   198a8:	1007883a 	mov	r3,r2
   198ac:	e0bfff17 	ldw	r2,-4(fp)
   198b0:	18800035 	stwio	r2,0(r3)
}
   198b4:	0001883a 	nop
   198b8:	e037883a 	mov	sp,fp
   198bc:	df000017 	ldw	fp,0(sp)
   198c0:	dec00104 	addi	sp,sp,4
   198c4:	f800283a 	ret

000198c8 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   198c8:	defffd04 	addi	sp,sp,-12
   198cc:	df000215 	stw	fp,8(sp)
   198d0:	df000204 	addi	fp,sp,8
   198d4:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
   198d8:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   198dc:	e0bffe17 	ldw	r2,-8(fp)
   198e0:	10800a17 	ldw	r2,40(r2)
   198e4:	10800084 	addi	r2,r2,2
   198e8:	1080002b 	ldhuio	r2,0(r2)
   198ec:	10bfffcc 	andi	r2,r2,65535
   198f0:	e0bfff8d 	sth	r2,-2(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   198f4:	e0bfff8b 	ldhu	r2,-2(fp)
}
   198f8:	e037883a 	mov	sp,fp
   198fc:	df000017 	ldw	fp,0(sp)
   19900:	dec00104 	addi	sp,sp,4
   19904:	f800283a 	ret

00019908 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   19908:	defffd04 	addi	sp,sp,-12
   1990c:	df000215 	stw	fp,8(sp)
   19910:	df000204 	addi	fp,sp,8
   19914:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   19918:	e0bffe17 	ldw	r2,-8(fp)
   1991c:	10800a17 	ldw	r2,40(r2)
   19920:	10800104 	addi	r2,r2,4
   19924:	10800037 	ldwio	r2,0(r2)
   19928:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1992c:	e0bfff17 	ldw	r2,-4(fp)
   19930:	1004d43a 	srli	r2,r2,16
}
   19934:	e037883a 	mov	sp,fp
   19938:	df000017 	ldw	fp,0(sp)
   1993c:	dec00104 	addi	sp,sp,4
   19940:	f800283a 	ret

00019944 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   19944:	defffd04 	addi	sp,sp,-12
   19948:	df000215 	stw	fp,8(sp)
   1994c:	df000204 	addi	fp,sp,8
   19950:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   19954:	e0bffe17 	ldw	r2,-8(fp)
   19958:	1004d27a 	srli	r2,r2,9
   1995c:	1080004c 	andi	r2,r2,1
   19960:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
   19964:	e0bfff17 	ldw	r2,-4(fp)
   19968:	10000226 	beq	r2,zero,19974 <alt_up_irda_check_parity+0x30>
   1996c:	00bfffc4 	movi	r2,-1
   19970:	00000106 	br	19978 <alt_up_irda_check_parity+0x34>
   19974:	0005883a 	mov	r2,zero
}
   19978:	e037883a 	mov	sp,fp
   1997c:	df000017 	ldw	fp,0(sp)
   19980:	dec00104 	addi	sp,sp,4
   19984:	f800283a 	ret

00019988 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   19988:	defffd04 	addi	sp,sp,-12
   1998c:	df000215 	stw	fp,8(sp)
   19990:	df000204 	addi	fp,sp,8
   19994:	e13fff15 	stw	r4,-4(fp)
   19998:	2805883a 	mov	r2,r5
   1999c:	e0bffe05 	stb	r2,-8(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   199a0:	e0bfff17 	ldw	r2,-4(fp)
   199a4:	10800a17 	ldw	r2,40(r2)
   199a8:	1007883a 	mov	r3,r2
   199ac:	e0bffe03 	ldbu	r2,-8(fp)
   199b0:	18800035 	stwio	r2,0(r3)
	return 0;
   199b4:	0005883a 	mov	r2,zero
}
   199b8:	e037883a 	mov	sp,fp
   199bc:	df000017 	ldw	fp,0(sp)
   199c0:	dec00104 	addi	sp,sp,4
   199c4:	f800283a 	ret

000199c8 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   199c8:	defffa04 	addi	sp,sp,-24
   199cc:	dfc00515 	stw	ra,20(sp)
   199d0:	df000415 	stw	fp,16(sp)
   199d4:	df000404 	addi	fp,sp,16
   199d8:	e13ffe15 	stw	r4,-8(fp)
   199dc:	e17ffd15 	stw	r5,-12(fp)
   199e0:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   199e4:	e0bffe17 	ldw	r2,-8(fp)
   199e8:	10800a17 	ldw	r2,40(r2)
   199ec:	10800037 	ldwio	r2,0(r2)
   199f0:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   199f4:	e0bfff17 	ldw	r2,-4(fp)
   199f8:	1007883a 	mov	r3,r2
   199fc:	e0bffd17 	ldw	r2,-12(fp)
   19a00:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   19a04:	e13fff17 	ldw	r4,-4(fp)
   19a08:	00199440 	call	19944 <alt_up_irda_check_parity>
   19a0c:	1007883a 	mov	r3,r2
   19a10:	e0bffc17 	ldw	r2,-16(fp)
   19a14:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   19a18:	e0bfff17 	ldw	r2,-4(fp)
   19a1c:	1004d3fa 	srli	r2,r2,15
   19a20:	1080004c 	andi	r2,r2,1
   19a24:	10bfffc4 	addi	r2,r2,-1
}
   19a28:	e037883a 	mov	sp,fp
   19a2c:	dfc00117 	ldw	ra,4(sp)
   19a30:	df000017 	ldw	fp,0(sp)
   19a34:	dec00204 	addi	sp,sp,8
   19a38:	f800283a 	ret

00019a3c <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   19a3c:	defff804 	addi	sp,sp,-32
   19a40:	dfc00715 	stw	ra,28(sp)
   19a44:	df000615 	stw	fp,24(sp)
   19a48:	df000604 	addi	fp,sp,24
   19a4c:	e13ffc15 	stw	r4,-16(fp)
   19a50:	e17ffb15 	stw	r5,-20(fp)
   19a54:	e1bffa15 	stw	r6,-24(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19a58:	e0bffc17 	ldw	r2,-16(fp)
   19a5c:	10800017 	ldw	r2,0(r2)
   19a60:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   19a64:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
   19a68:	00000c06 	br	19a9c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   19a6c:	e0bffb17 	ldw	r2,-20(fp)
   19a70:	10c00044 	addi	r3,r2,1
   19a74:	e0fffb15 	stw	r3,-20(fp)
   19a78:	e0fffdc4 	addi	r3,fp,-9
   19a7c:	180d883a 	mov	r6,r3
   19a80:	100b883a 	mov	r5,r2
   19a84:	e13ffe17 	ldw	r4,-8(fp)
   19a88:	00199c80 	call	199c8 <alt_up_irda_read_data>
   19a8c:	1000081e 	bne	r2,zero,19ab0 <alt_up_irda_read_fd+0x74>
			count++;
   19a90:	e0bfff17 	ldw	r2,-4(fp)
   19a94:	10800044 	addi	r2,r2,1
   19a98:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   19a9c:	e0bffa17 	ldw	r2,-24(fp)
   19aa0:	10ffffc4 	addi	r3,r2,-1
   19aa4:	e0fffa15 	stw	r3,-24(fp)
   19aa8:	103ff01e 	bne	r2,zero,19a6c <alt_up_irda_read_fd+0x30>
   19aac:	00000106 	br	19ab4 <alt_up_irda_read_fd+0x78>
		else
			break;
   19ab0:	0001883a 	nop
	}
	return count;
   19ab4:	e0bfff17 	ldw	r2,-4(fp)
}
   19ab8:	e037883a 	mov	sp,fp
   19abc:	dfc00117 	ldw	ra,4(sp)
   19ac0:	df000017 	ldw	fp,0(sp)
   19ac4:	dec00204 	addi	sp,sp,8
   19ac8:	f800283a 	ret

00019acc <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   19acc:	defff904 	addi	sp,sp,-28
   19ad0:	dfc00615 	stw	ra,24(sp)
   19ad4:	df000515 	stw	fp,20(sp)
   19ad8:	df000504 	addi	fp,sp,20
   19adc:	e13ffd15 	stw	r4,-12(fp)
   19ae0:	e17ffc15 	stw	r5,-16(fp)
   19ae4:	e1bffb15 	stw	r6,-20(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   19ae8:	e0bffd17 	ldw	r2,-12(fp)
   19aec:	10800017 	ldw	r2,0(r2)
   19af0:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   19af4:	e03fff15 	stw	zero,-4(fp)
	while(len--)
   19af8:	00000c06 	br	19b2c <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   19afc:	e0bffc17 	ldw	r2,-16(fp)
   19b00:	10c00044 	addi	r3,r2,1
   19b04:	e0fffc15 	stw	r3,-16(fp)
   19b08:	10800003 	ldbu	r2,0(r2)
   19b0c:	10803fcc 	andi	r2,r2,255
   19b10:	100b883a 	mov	r5,r2
   19b14:	e13ffe17 	ldw	r4,-8(fp)
   19b18:	00199880 	call	19988 <alt_up_irda_write_data>
   19b1c:	1000081e 	bne	r2,zero,19b40 <alt_up_irda_write_fd+0x74>
			count++;
   19b20:	e0bfff17 	ldw	r2,-4(fp)
   19b24:	10800044 	addi	r2,r2,1
   19b28:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   19b2c:	e0bffb17 	ldw	r2,-20(fp)
   19b30:	10ffffc4 	addi	r3,r2,-1
   19b34:	e0fffb15 	stw	r3,-20(fp)
   19b38:	103ff01e 	bne	r2,zero,19afc <alt_up_irda_write_fd+0x30>
   19b3c:	00000106 	br	19b44 <alt_up_irda_write_fd+0x78>
		else
			break;
   19b40:	0001883a 	nop
	}
	return count;
   19b44:	e0bfff17 	ldw	r2,-4(fp)
}
   19b48:	e037883a 	mov	sp,fp
   19b4c:	dfc00117 	ldw	ra,4(sp)
   19b50:	df000017 	ldw	fp,0(sp)
   19b54:	dec00204 	addi	sp,sp,8
   19b58:	f800283a 	ret

00019b5c <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   19b5c:	defffc04 	addi	sp,sp,-16
   19b60:	dfc00315 	stw	ra,12(sp)
   19b64:	df000215 	stw	fp,8(sp)
   19b68:	df000204 	addi	fp,sp,8
   19b6c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   19b70:	d1600804 	addi	r5,gp,-32736
   19b74:	e13ffe17 	ldw	r4,-8(fp)
   19b78:	001a8dc0 	call	1a8dc <alt_find_dev>
   19b7c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   19b80:	e0bfff17 	ldw	r2,-4(fp)
}
   19b84:	e037883a 	mov	sp,fp
   19b88:	dfc00117 	ldw	ra,4(sp)
   19b8c:	df000017 	ldw	fp,0(sp)
   19b90:	dec00204 	addi	sp,sp,8
   19b94:	f800283a 	ret

00019b98 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   19b98:	defffd04 	addi	sp,sp,-12
   19b9c:	df000215 	stw	fp,8(sp)
   19ba0:	df000204 	addi	fp,sp,8
   19ba4:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   19ba8:	e0bffe17 	ldw	r2,-8(fp)
   19bac:	1004d23a 	srli	r2,r2,8
   19bb0:	1080004c 	andi	r2,r2,1
   19bb4:	e0bfffc5 	stb	r2,-1(fp)
	return ri;
   19bb8:	e0bfffc3 	ldbu	r2,-1(fp)
}
   19bbc:	e037883a 	mov	sp,fp
   19bc0:	df000017 	ldw	fp,0(sp)
   19bc4:	dec00104 	addi	sp,sp,4
   19bc8:	f800283a 	ret

00019bcc <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   19bcc:	defffd04 	addi	sp,sp,-12
   19bd0:	df000215 	stw	fp,8(sp)
   19bd4:	df000204 	addi	fp,sp,8
   19bd8:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   19bdc:	e0bffe17 	ldw	r2,-8(fp)
   19be0:	1080004c 	andi	r2,r2,1
   19be4:	e0bfffc5 	stb	r2,-1(fp)
	return re;
   19be8:	e0bfffc3 	ldbu	r2,-1(fp)
}
   19bec:	e037883a 	mov	sp,fp
   19bf0:	df000017 	ldw	fp,0(sp)
   19bf4:	dec00104 	addi	sp,sp,4
   19bf8:	f800283a 	ret

00019bfc <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   19bfc:	defffd04 	addi	sp,sp,-12
   19c00:	df000215 	stw	fp,8(sp)
   19c04:	df000204 	addi	fp,sp,8
   19c08:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   19c0c:	e0bffe17 	ldw	r2,-8(fp)
   19c10:	1004d2ba 	srli	r2,r2,10
   19c14:	1080004c 	andi	r2,r2,1
   19c18:	e0bfffc5 	stb	r2,-1(fp)
	return re;
   19c1c:	e0bfffc3 	ldbu	r2,-1(fp)
}
   19c20:	e037883a 	mov	sp,fp
   19c24:	df000017 	ldw	fp,0(sp)
   19c28:	dec00104 	addi	sp,sp,4
   19c2c:	f800283a 	ret

00019c30 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   19c30:	defffd04 	addi	sp,sp,-12
   19c34:	df000215 	stw	fp,8(sp)
   19c38:	df000204 	addi	fp,sp,8
   19c3c:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   19c40:	e0bffe17 	ldw	r2,-8(fp)
   19c44:	1004d43a 	srli	r2,r2,16
   19c48:	e0bfff8d 	sth	r2,-2(fp)
	return ravail;
   19c4c:	e0bfff8b 	ldhu	r2,-2(fp)
}
   19c50:	e037883a 	mov	sp,fp
   19c54:	df000017 	ldw	fp,0(sp)
   19c58:	dec00104 	addi	sp,sp,4
   19c5c:	f800283a 	ret

00019c60 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   19c60:	defffd04 	addi	sp,sp,-12
   19c64:	df000215 	stw	fp,8(sp)
   19c68:	df000204 	addi	fp,sp,8
   19c6c:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   19c70:	e0bffe17 	ldw	r2,-8(fp)
   19c74:	1004d3fa 	srli	r2,r2,15
   19c78:	1080004c 	andi	r2,r2,1
   19c7c:	e0bfffc5 	stb	r2,-1(fp)
	return rvalid;
   19c80:	e0bfffc3 	ldbu	r2,-1(fp)
}
   19c84:	e037883a 	mov	sp,fp
   19c88:	df000017 	ldw	fp,0(sp)
   19c8c:	dec00104 	addi	sp,sp,4
   19c90:	f800283a 	ret

00019c94 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   19c94:	defffd04 	addi	sp,sp,-12
   19c98:	df000215 	stw	fp,8(sp)
   19c9c:	df000204 	addi	fp,sp,8
   19ca0:	e13ffe15 	stw	r4,-8(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   19ca4:	e0bffe17 	ldw	r2,-8(fp)
   19ca8:	e0bfffc5 	stb	r2,-1(fp)
	return data;
   19cac:	e0bfffc3 	ldbu	r2,-1(fp)
}
   19cb0:	e037883a 	mov	sp,fp
   19cb4:	df000017 	ldw	fp,0(sp)
   19cb8:	dec00104 	addi	sp,sp,4
   19cbc:	f800283a 	ret

00019cc0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   19cc0:	defffb04 	addi	sp,sp,-20
   19cc4:	dfc00415 	stw	ra,16(sp)
   19cc8:	df000315 	stw	fp,12(sp)
   19ccc:	df000304 	addi	fp,sp,12
   19cd0:	e13ffd15 	stw	r4,-12(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   19cd4:	01403fc4 	movi	r5,255
   19cd8:	e13ffd17 	ldw	r4,-12(fp)
   19cdc:	0019f200 	call	19f20 <alt_up_ps2_write_data_byte_with_ack>
   19ce0:	e0bfff15 	stw	r2,-4(fp)
	if (status == 0)
   19ce4:	e0bfff17 	ldw	r2,-4(fp)
   19ce8:	1000211e 	bne	r2,zero,19d70 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19cec:	e0bffec4 	addi	r2,fp,-5
   19cf0:	100b883a 	mov	r5,r2
   19cf4:	e13ffd17 	ldw	r4,-12(fp)
   19cf8:	0019f840 	call	19f84 <alt_up_ps2_read_data_byte_timeout>
   19cfc:	e0bfff15 	stw	r2,-4(fp)
		if (status == 0 && byte == 0xAA)
   19d00:	e0bfff17 	ldw	r2,-4(fp)
   19d04:	10001a1e 	bne	r2,zero,19d70 <alt_up_ps2_init+0xb0>
   19d08:	e0bffec3 	ldbu	r2,-5(fp)
   19d0c:	10803fcc 	andi	r2,r2,255
   19d10:	10802a98 	cmpnei	r2,r2,170
   19d14:	1000161e 	bne	r2,zero,19d70 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   19d18:	e0bffec4 	addi	r2,fp,-5
   19d1c:	100b883a 	mov	r5,r2
   19d20:	e13ffd17 	ldw	r4,-12(fp)
   19d24:	0019f840 	call	19f84 <alt_up_ps2_read_data_byte_timeout>
   19d28:	e0bfff15 	stw	r2,-4(fp)
			if (status == -ETIMEDOUT)
   19d2c:	e0bfff17 	ldw	r2,-4(fp)
   19d30:	10bfe318 	cmpnei	r2,r2,-116
   19d34:	1000041e 	bne	r2,zero,19d48 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   19d38:	e0bffd17 	ldw	r2,-12(fp)
   19d3c:	00c00044 	movi	r3,1
   19d40:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   19d44:	00000a06 	br	19d70 <alt_up_ps2_init+0xb0>
			else if (status == 0 && byte == 0x00)
   19d48:	e0bfff17 	ldw	r2,-4(fp)
   19d4c:	1000081e 	bne	r2,zero,19d70 <alt_up_ps2_init+0xb0>
   19d50:	e0bffec3 	ldbu	r2,-5(fp)
   19d54:	10803fcc 	andi	r2,r2,255
   19d58:	1000051e 	bne	r2,zero,19d70 <alt_up_ps2_init+0xb0>
				ps2->device_type = PS2_MOUSE;
   19d5c:	e0bffd17 	ldw	r2,-12(fp)
   19d60:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   19d64:	01403d04 	movi	r5,244
   19d68:	e13ffd17 	ldw	r4,-12(fp)
   19d6c:	0019e440 	call	19e44 <alt_up_ps2_write_data_byte>
}
   19d70:	0001883a 	nop
   19d74:	e037883a 	mov	sp,fp
   19d78:	dfc00117 	ldw	ra,4(sp)
   19d7c:	df000017 	ldw	fp,0(sp)
   19d80:	dec00204 	addi	sp,sp,8
   19d84:	f800283a 	ret

00019d88 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   19d88:	defffd04 	addi	sp,sp,-12
   19d8c:	df000215 	stw	fp,8(sp)
   19d90:	df000204 	addi	fp,sp,8
   19d94:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19d98:	e0bffe17 	ldw	r2,-8(fp)
   19d9c:	10800a17 	ldw	r2,40(r2)
   19da0:	10800104 	addi	r2,r2,4
   19da4:	10800037 	ldwio	r2,0(r2)
   19da8:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   19dac:	e0bfff17 	ldw	r2,-4(fp)
   19db0:	10800054 	ori	r2,r2,1
   19db4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   19db8:	e0bffe17 	ldw	r2,-8(fp)
   19dbc:	10800a17 	ldw	r2,40(r2)
   19dc0:	10800104 	addi	r2,r2,4
   19dc4:	1007883a 	mov	r3,r2
   19dc8:	e0bfff17 	ldw	r2,-4(fp)
   19dcc:	18800035 	stwio	r2,0(r3)
}
   19dd0:	0001883a 	nop
   19dd4:	e037883a 	mov	sp,fp
   19dd8:	df000017 	ldw	fp,0(sp)
   19ddc:	dec00104 	addi	sp,sp,4
   19de0:	f800283a 	ret

00019de4 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   19de4:	defffd04 	addi	sp,sp,-12
   19de8:	df000215 	stw	fp,8(sp)
   19dec:	df000204 	addi	fp,sp,8
   19df0:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   19df4:	e0bffe17 	ldw	r2,-8(fp)
   19df8:	10800a17 	ldw	r2,40(r2)
   19dfc:	10800104 	addi	r2,r2,4
   19e00:	10800037 	ldwio	r2,0(r2)
   19e04:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   19e08:	e0ffff17 	ldw	r3,-4(fp)
   19e0c:	00bfff84 	movi	r2,-2
   19e10:	1884703a 	and	r2,r3,r2
   19e14:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   19e18:	e0bffe17 	ldw	r2,-8(fp)
   19e1c:	10800a17 	ldw	r2,40(r2)
   19e20:	10800104 	addi	r2,r2,4
   19e24:	1007883a 	mov	r3,r2
   19e28:	e0bfff17 	ldw	r2,-4(fp)
   19e2c:	18800035 	stwio	r2,0(r3)
}
   19e30:	0001883a 	nop
   19e34:	e037883a 	mov	sp,fp
   19e38:	df000017 	ldw	fp,0(sp)
   19e3c:	dec00104 	addi	sp,sp,4
   19e40:	f800283a 	ret

00019e44 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19e44:	defffb04 	addi	sp,sp,-20
   19e48:	dfc00415 	stw	ra,16(sp)
   19e4c:	df000315 	stw	fp,12(sp)
   19e50:	df000304 	addi	fp,sp,12
   19e54:	e13ffe15 	stw	r4,-8(fp)
   19e58:	2805883a 	mov	r2,r5
   19e5c:	e0bffd05 	stb	r2,-12(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   19e60:	e0bffe17 	ldw	r2,-8(fp)
   19e64:	10800a17 	ldw	r2,40(r2)
   19e68:	1007883a 	mov	r3,r2
   19e6c:	e0bffd03 	ldbu	r2,-12(fp)
   19e70:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   19e74:	e0bffe17 	ldw	r2,-8(fp)
   19e78:	10800a17 	ldw	r2,40(r2)
   19e7c:	10800104 	addi	r2,r2,4
   19e80:	10800037 	ldwio	r2,0(r2)
   19e84:	e0bfff15 	stw	r2,-4(fp)
	if (read_CE_bit(ctrl_reg))
   19e88:	e13fff17 	ldw	r4,-4(fp)
   19e8c:	0019bfc0 	call	19bfc <read_CE_bit>
   19e90:	10803fcc 	andi	r2,r2,255
   19e94:	10000226 	beq	r2,zero,19ea0 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   19e98:	00bffec4 	movi	r2,-5
   19e9c:	00000106 	br	19ea4 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   19ea0:	0005883a 	mov	r2,zero
}
   19ea4:	e037883a 	mov	sp,fp
   19ea8:	dfc00117 	ldw	ra,4(sp)
   19eac:	df000017 	ldw	fp,0(sp)
   19eb0:	dec00204 	addi	sp,sp,8
   19eb4:	f800283a 	ret

00019eb8 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   19eb8:	defffc04 	addi	sp,sp,-16
   19ebc:	dfc00315 	stw	ra,12(sp)
   19ec0:	df000215 	stw	fp,8(sp)
   19ec4:	df000204 	addi	fp,sp,8
   19ec8:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
   19ecc:	e03fff85 	stb	zero,-2(fp)
	unsigned char status = 0;
   19ed0:	e03fffc5 	stb	zero,-1(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   19ed4:	e0bfff84 	addi	r2,fp,-2
   19ed8:	100b883a 	mov	r5,r2
   19edc:	e13ffe17 	ldw	r4,-8(fp)
   19ee0:	0019f840 	call	19f84 <alt_up_ps2_read_data_byte_timeout>
   19ee4:	e0bfffc5 	stb	r2,-1(fp)
		if ( status == 0)
   19ee8:	e0bfffc3 	ldbu	r2,-1(fp)
   19eec:	1000061e 	bne	r2,zero,19f08 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   19ef0:	e0bfff83 	ldbu	r2,-2(fp)
   19ef4:	10803fcc 	andi	r2,r2,255
   19ef8:	10803e98 	cmpnei	r2,r2,250
   19efc:	103ff51e 	bne	r2,zero,19ed4 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   19f00:	0005883a 	mov	r2,zero
   19f04:	00000106 	br	19f0c <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   19f08:	e0bfffc3 	ldbu	r2,-1(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   19f0c:	e037883a 	mov	sp,fp
   19f10:	dfc00117 	ldw	ra,4(sp)
   19f14:	df000017 	ldw	fp,0(sp)
   19f18:	dec00204 	addi	sp,sp,8
   19f1c:	f800283a 	ret

00019f20 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   19f20:	defffa04 	addi	sp,sp,-24
   19f24:	dfc00515 	stw	ra,20(sp)
   19f28:	df000415 	stw	fp,16(sp)
   19f2c:	df000404 	addi	fp,sp,16
   19f30:	e13ffd15 	stw	r4,-12(fp)
   19f34:	2805883a 	mov	r2,r5
   19f38:	e0bffc05 	stb	r2,-16(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   19f3c:	e0bffc03 	ldbu	r2,-16(fp)
   19f40:	100b883a 	mov	r5,r2
   19f44:	e13ffd17 	ldw	r4,-12(fp)
   19f48:	0019e440 	call	19e44 <alt_up_ps2_write_data_byte>
   19f4c:	e0bfff15 	stw	r2,-4(fp)
	if ( send_status != 0)
   19f50:	e0bfff17 	ldw	r2,-4(fp)
   19f54:	10000226 	beq	r2,zero,19f60 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   19f58:	e0bfff17 	ldw	r2,-4(fp)
   19f5c:	00000406 	br	19f70 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   19f60:	e13ffd17 	ldw	r4,-12(fp)
   19f64:	0019eb80 	call	19eb8 <alt_up_ps2_wait_for_ack>
   19f68:	e0bffe15 	stw	r2,-8(fp)
	return ack_status;
   19f6c:	e0bffe17 	ldw	r2,-8(fp)
}
   19f70:	e037883a 	mov	sp,fp
   19f74:	dfc00117 	ldw	ra,4(sp)
   19f78:	df000017 	ldw	fp,0(sp)
   19f7c:	dec00204 	addi	sp,sp,8
   19f80:	f800283a 	ret

00019f84 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   19f84:	defffa04 	addi	sp,sp,-24
   19f88:	dfc00515 	stw	ra,20(sp)
   19f8c:	df000415 	stw	fp,16(sp)
   19f90:	df000404 	addi	fp,sp,16
   19f94:	e13ffd15 	stw	r4,-12(fp)
   19f98:	e17ffc15 	stw	r5,-16(fp)
	unsigned int data_reg = 0; 
   19f9c:	e03ffe15 	stw	zero,-8(fp)
	unsigned int count = 0;
   19fa0:	e03fff15 	stw	zero,-4(fp)
	do {
		count++;
   19fa4:	e0bfff17 	ldw	r2,-4(fp)
   19fa8:	10800044 	addi	r2,r2,1
   19fac:	e0bfff15 	stw	r2,-4(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   19fb0:	e0bffd17 	ldw	r2,-12(fp)
   19fb4:	10800a17 	ldw	r2,40(r2)
   19fb8:	10800037 	ldwio	r2,0(r2)
   19fbc:	e0bffe15 	stw	r2,-8(fp)
		if (read_data_valid(data_reg))
   19fc0:	e13ffe17 	ldw	r4,-8(fp)
   19fc4:	0019c600 	call	19c60 <read_data_valid>
   19fc8:	10803fcc 	andi	r2,r2,255
   19fcc:	10000726 	beq	r2,zero,19fec <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   19fd0:	e13ffe17 	ldw	r4,-8(fp)
   19fd4:	0019c940 	call	19c94 <read_data_byte>
   19fd8:	1007883a 	mov	r3,r2
   19fdc:	e0bffc17 	ldw	r2,-16(fp)
   19fe0:	10c00005 	stb	r3,0(r2)
			return 0;
   19fe4:	0005883a 	mov	r2,zero
   19fe8:	00000806 	br	1a00c <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   19fec:	e0bffd17 	ldw	r2,-12(fp)
   19ff0:	10800c17 	ldw	r2,48(r2)
   19ff4:	103feb26 	beq	r2,zero,19fa4 <alt_up_ps2_read_data_byte_timeout+0x20>
   19ff8:	e0bffd17 	ldw	r2,-12(fp)
   19ffc:	10c00c17 	ldw	r3,48(r2)
   1a000:	e0bfff17 	ldw	r2,-4(fp)
   1a004:	18bfe72e 	bgeu	r3,r2,19fa4 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   1a008:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1a00c:	e037883a 	mov	sp,fp
   1a010:	dfc00117 	ldw	ra,4(sp)
   1a014:	df000017 	ldw	fp,0(sp)
   1a018:	dec00204 	addi	sp,sp,8
   1a01c:	f800283a 	ret

0001a020 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1a020:	defffb04 	addi	sp,sp,-20
   1a024:	dfc00415 	stw	ra,16(sp)
   1a028:	df000315 	stw	fp,12(sp)
   1a02c:	df000304 	addi	fp,sp,12
   1a030:	e13ffe15 	stw	r4,-8(fp)
   1a034:	e17ffd15 	stw	r5,-12(fp)
	unsigned int data_reg = 0; 
   1a038:	e03fff15 	stw	zero,-4(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a03c:	e0bffe17 	ldw	r2,-8(fp)
   1a040:	10800a17 	ldw	r2,40(r2)
   1a044:	10800037 	ldwio	r2,0(r2)
   1a048:	e0bfff15 	stw	r2,-4(fp)
	if (read_data_valid(data_reg))
   1a04c:	e13fff17 	ldw	r4,-4(fp)
   1a050:	0019c600 	call	19c60 <read_data_valid>
   1a054:	10803fcc 	andi	r2,r2,255
   1a058:	10000726 	beq	r2,zero,1a078 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1a05c:	e13fff17 	ldw	r4,-4(fp)
   1a060:	0019c940 	call	19c94 <read_data_byte>
   1a064:	1007883a 	mov	r3,r2
   1a068:	e0bffd17 	ldw	r2,-12(fp)
   1a06c:	10c00005 	stb	r3,0(r2)
		return 0;
   1a070:	0005883a 	mov	r2,zero
   1a074:	00000106 	br	1a07c <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1a078:	00bfffc4 	movi	r2,-1
}
   1a07c:	e037883a 	mov	sp,fp
   1a080:	dfc00117 	ldw	ra,4(sp)
   1a084:	df000017 	ldw	fp,0(sp)
   1a088:	dec00204 	addi	sp,sp,8
   1a08c:	f800283a 	ret

0001a090 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1a090:	defffb04 	addi	sp,sp,-20
   1a094:	dfc00415 	stw	ra,16(sp)
   1a098:	df000315 	stw	fp,12(sp)
   1a09c:	df000304 	addi	fp,sp,12
   1a0a0:	e13ffd15 	stw	r4,-12(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1a0a4:	e03fff8d 	sth	zero,-2(fp)
	unsigned int data_reg = 0;
   1a0a8:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1a0ac:	e0bffd17 	ldw	r2,-12(fp)
   1a0b0:	10800a17 	ldw	r2,40(r2)
   1a0b4:	10800037 	ldwio	r2,0(r2)
   1a0b8:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1a0bc:	e13ffe17 	ldw	r4,-8(fp)
   1a0c0:	0019c300 	call	19c30 <read_num_bytes_available>
   1a0c4:	e0bfff8d 	sth	r2,-2(fp)
	} while (num > 0);
   1a0c8:	e0bfff8b 	ldhu	r2,-2(fp)
   1a0cc:	103ff71e 	bne	r2,zero,1a0ac <alt_up_ps2_clear_fifo+0x1c>
}
   1a0d0:	0001883a 	nop
   1a0d4:	0001883a 	nop
   1a0d8:	e037883a 	mov	sp,fp
   1a0dc:	dfc00117 	ldw	ra,4(sp)
   1a0e0:	df000017 	ldw	fp,0(sp)
   1a0e4:	dec00204 	addi	sp,sp,8
   1a0e8:	f800283a 	ret

0001a0ec <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a0ec:	defff804 	addi	sp,sp,-32
   1a0f0:	dfc00715 	stw	ra,28(sp)
   1a0f4:	df000615 	stw	fp,24(sp)
   1a0f8:	df000604 	addi	fp,sp,24
   1a0fc:	e13ffc15 	stw	r4,-16(fp)
   1a100:	e17ffb15 	stw	r5,-20(fp)
   1a104:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a108:	e0bffc17 	ldw	r2,-16(fp)
   1a10c:	10800017 	ldw	r2,0(r2)
   1a110:	e0bfff15 	stw	r2,-4(fp)
	int status = 0;
   1a114:	e03ffe15 	stw	zero,-8(fp)
	int count = 0;
   1a118:	e03ffd15 	stw	zero,-12(fp)
	while (count < len);
   1a11c:	e0fffd17 	ldw	r3,-12(fp)
   1a120:	e0bffa17 	ldw	r2,-24(fp)
   1a124:	18bffd16 	blt	r3,r2,1a11c <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1a128:	e0bffb17 	ldw	r2,-20(fp)
   1a12c:	10c00044 	addi	r3,r2,1
   1a130:	e0fffb15 	stw	r3,-20(fp)
   1a134:	100b883a 	mov	r5,r2
   1a138:	e13fff17 	ldw	r4,-4(fp)
   1a13c:	0019f840 	call	19f84 <alt_up_ps2_read_data_byte_timeout>
   1a140:	e0bffe15 	stw	r2,-8(fp)
		if (status!=0)
   1a144:	e0bffe17 	ldw	r2,-8(fp)
   1a148:	10000226 	beq	r2,zero,1a154 <alt_up_ps2_read_fd+0x68>
			return count;
   1a14c:	e0bffd17 	ldw	r2,-12(fp)
   1a150:	00000406 	br	1a164 <alt_up_ps2_read_fd+0x78>
		count++;
   1a154:	e0bffd17 	ldw	r2,-12(fp)
   1a158:	10800044 	addi	r2,r2,1
   1a15c:	e0bffd15 	stw	r2,-12(fp)
	} 
	return count;
   1a160:	e0bffd17 	ldw	r2,-12(fp)
}
   1a164:	e037883a 	mov	sp,fp
   1a168:	dfc00117 	ldw	ra,4(sp)
   1a16c:	df000017 	ldw	fp,0(sp)
   1a170:	dec00204 	addi	sp,sp,8
   1a174:	f800283a 	ret

0001a178 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a178:	defff804 	addi	sp,sp,-32
   1a17c:	dfc00715 	stw	ra,28(sp)
   1a180:	df000615 	stw	fp,24(sp)
   1a184:	df000604 	addi	fp,sp,24
   1a188:	e13ffc15 	stw	r4,-16(fp)
   1a18c:	e17ffb15 	stw	r5,-20(fp)
   1a190:	e1bffa15 	stw	r6,-24(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1a194:	e0bffc17 	ldw	r2,-16(fp)
   1a198:	10800017 	ldw	r2,0(r2)
   1a19c:	e0bffe15 	stw	r2,-8(fp)
	int status = 0;
   1a1a0:	e03ffd15 	stw	zero,-12(fp)
	int count = 0;
   1a1a4:	e03fff15 	stw	zero,-4(fp)
	while (count < len)
   1a1a8:	00001006 	br	1a1ec <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1a1ac:	e0bffb17 	ldw	r2,-20(fp)
   1a1b0:	10c00044 	addi	r3,r2,1
   1a1b4:	e0fffb15 	stw	r3,-20(fp)
   1a1b8:	10800003 	ldbu	r2,0(r2)
   1a1bc:	10803fcc 	andi	r2,r2,255
   1a1c0:	100b883a 	mov	r5,r2
   1a1c4:	e13ffe17 	ldw	r4,-8(fp)
   1a1c8:	0019e440 	call	19e44 <alt_up_ps2_write_data_byte>
   1a1cc:	e0bffd15 	stw	r2,-12(fp)
		if (status!=0)
   1a1d0:	e0bffd17 	ldw	r2,-12(fp)
   1a1d4:	10000226 	beq	r2,zero,1a1e0 <alt_up_ps2_write_fd+0x68>
			return count;
   1a1d8:	e0bfff17 	ldw	r2,-4(fp)
   1a1dc:	00000706 	br	1a1fc <alt_up_ps2_write_fd+0x84>
		count++;
   1a1e0:	e0bfff17 	ldw	r2,-4(fp)
   1a1e4:	10800044 	addi	r2,r2,1
   1a1e8:	e0bfff15 	stw	r2,-4(fp)
	while (count < len)
   1a1ec:	e0ffff17 	ldw	r3,-4(fp)
   1a1f0:	e0bffa17 	ldw	r2,-24(fp)
   1a1f4:	18bfed16 	blt	r3,r2,1a1ac <alt_up_ps2_write_fd+0x34>
	}
	return count;
   1a1f8:	e0bfff17 	ldw	r2,-4(fp)
}
   1a1fc:	e037883a 	mov	sp,fp
   1a200:	dfc00117 	ldw	ra,4(sp)
   1a204:	df000017 	ldw	fp,0(sp)
   1a208:	dec00204 	addi	sp,sp,8
   1a20c:	f800283a 	ret

0001a210 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1a210:	defffc04 	addi	sp,sp,-16
   1a214:	dfc00315 	stw	ra,12(sp)
   1a218:	df000215 	stw	fp,8(sp)
   1a21c:	df000204 	addi	fp,sp,8
   1a220:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1a224:	d1600804 	addi	r5,gp,-32736
   1a228:	e13ffe17 	ldw	r4,-8(fp)
   1a22c:	001a8dc0 	call	1a8dc <alt_find_dev>
   1a230:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   1a234:	e0bfff17 	ldw	r2,-4(fp)
}
   1a238:	e037883a 	mov	sp,fp
   1a23c:	dfc00117 	ldw	ra,4(sp)
   1a240:	df000017 	ldw	fp,0(sp)
   1a244:	dec00204 	addi	sp,sp,8
   1a248:	f800283a 	ret

0001a24c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1a24c:	defffd04 	addi	sp,sp,-12
   1a250:	df000215 	stw	fp,8(sp)
   1a254:	df000204 	addi	fp,sp,8
   1a258:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1a25c:	e0bffe17 	ldw	r2,-8(fp)
   1a260:	10800a17 	ldw	r2,40(r2)
   1a264:	10800104 	addi	r2,r2,4
   1a268:	10800037 	ldwio	r2,0(r2)
   1a26c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1a270:	e0bfff17 	ldw	r2,-4(fp)
   1a274:	10800054 	ori	r2,r2,1
   1a278:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1a27c:	e0bffe17 	ldw	r2,-8(fp)
   1a280:	10800a17 	ldw	r2,40(r2)
   1a284:	10800104 	addi	r2,r2,4
   1a288:	1007883a 	mov	r3,r2
   1a28c:	e0bfff17 	ldw	r2,-4(fp)
   1a290:	18800035 	stwio	r2,0(r3)
}
   1a294:	0001883a 	nop
   1a298:	e037883a 	mov	sp,fp
   1a29c:	df000017 	ldw	fp,0(sp)
   1a2a0:	dec00104 	addi	sp,sp,4
   1a2a4:	f800283a 	ret

0001a2a8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1a2a8:	defffd04 	addi	sp,sp,-12
   1a2ac:	df000215 	stw	fp,8(sp)
   1a2b0:	df000204 	addi	fp,sp,8
   1a2b4:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1a2b8:	e0bffe17 	ldw	r2,-8(fp)
   1a2bc:	10800a17 	ldw	r2,40(r2)
   1a2c0:	10800104 	addi	r2,r2,4
   1a2c4:	10800037 	ldwio	r2,0(r2)
   1a2c8:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1a2cc:	e0ffff17 	ldw	r3,-4(fp)
   1a2d0:	00bfff84 	movi	r2,-2
   1a2d4:	1884703a 	and	r2,r3,r2
   1a2d8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1a2dc:	e0bffe17 	ldw	r2,-8(fp)
   1a2e0:	10800a17 	ldw	r2,40(r2)
   1a2e4:	10800104 	addi	r2,r2,4
   1a2e8:	1007883a 	mov	r3,r2
   1a2ec:	e0bfff17 	ldw	r2,-4(fp)
   1a2f0:	18800035 	stwio	r2,0(r3)
}
   1a2f4:	0001883a 	nop
   1a2f8:	e037883a 	mov	sp,fp
   1a2fc:	df000017 	ldw	fp,0(sp)
   1a300:	dec00104 	addi	sp,sp,4
   1a304:	f800283a 	ret

0001a308 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1a308:	defffd04 	addi	sp,sp,-12
   1a30c:	df000215 	stw	fp,8(sp)
   1a310:	df000204 	addi	fp,sp,8
   1a314:	e13ffe15 	stw	r4,-8(fp)
	alt_u16 ravail = 0;
   1a318:	e03fff8d 	sth	zero,-2(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1a31c:	e0bffe17 	ldw	r2,-8(fp)
   1a320:	10800a17 	ldw	r2,40(r2)
   1a324:	10800084 	addi	r2,r2,2
   1a328:	1080002b 	ldhuio	r2,0(r2)
   1a32c:	10bfffcc 	andi	r2,r2,65535
   1a330:	e0bfff8d 	sth	r2,-2(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1a334:	e0bfff8b 	ldhu	r2,-2(fp)
}
   1a338:	e037883a 	mov	sp,fp
   1a33c:	df000017 	ldw	fp,0(sp)
   1a340:	dec00104 	addi	sp,sp,4
   1a344:	f800283a 	ret

0001a348 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1a348:	defffd04 	addi	sp,sp,-12
   1a34c:	df000215 	stw	fp,8(sp)
   1a350:	df000204 	addi	fp,sp,8
   1a354:	e13ffe15 	stw	r4,-8(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1a358:	e0bffe17 	ldw	r2,-8(fp)
   1a35c:	10800a17 	ldw	r2,40(r2)
   1a360:	10800104 	addi	r2,r2,4
   1a364:	10800037 	ldwio	r2,0(r2)
   1a368:	e0bfff15 	stw	r2,-4(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1a36c:	e0bfff17 	ldw	r2,-4(fp)
   1a370:	1004d43a 	srli	r2,r2,16
}
   1a374:	e037883a 	mov	sp,fp
   1a378:	df000017 	ldw	fp,0(sp)
   1a37c:	dec00104 	addi	sp,sp,4
   1a380:	f800283a 	ret

0001a384 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1a384:	defffd04 	addi	sp,sp,-12
   1a388:	df000215 	stw	fp,8(sp)
   1a38c:	df000204 	addi	fp,sp,8
   1a390:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1a394:	e0bffe17 	ldw	r2,-8(fp)
   1a398:	1004d27a 	srli	r2,r2,9
   1a39c:	1080004c 	andi	r2,r2,1
   1a3a0:	e0bfff15 	stw	r2,-4(fp)
	return (parity_error ? -1 : 0);
   1a3a4:	e0bfff17 	ldw	r2,-4(fp)
   1a3a8:	10000226 	beq	r2,zero,1a3b4 <alt_up_rs232_check_parity+0x30>
   1a3ac:	00bfffc4 	movi	r2,-1
   1a3b0:	00000106 	br	1a3b8 <alt_up_rs232_check_parity+0x34>
   1a3b4:	0005883a 	mov	r2,zero
}
   1a3b8:	e037883a 	mov	sp,fp
   1a3bc:	df000017 	ldw	fp,0(sp)
   1a3c0:	dec00104 	addi	sp,sp,4
   1a3c4:	f800283a 	ret

0001a3c8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1a3c8:	defffd04 	addi	sp,sp,-12
   1a3cc:	df000215 	stw	fp,8(sp)
   1a3d0:	df000204 	addi	fp,sp,8
   1a3d4:	e13fff15 	stw	r4,-4(fp)
   1a3d8:	2805883a 	mov	r2,r5
   1a3dc:	e0bffe05 	stb	r2,-8(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1a3e0:	e0bfff17 	ldw	r2,-4(fp)
   1a3e4:	10800a17 	ldw	r2,40(r2)
   1a3e8:	1007883a 	mov	r3,r2
   1a3ec:	e0bffe03 	ldbu	r2,-8(fp)
   1a3f0:	18800035 	stwio	r2,0(r3)
	return 0;
   1a3f4:	0005883a 	mov	r2,zero
}
   1a3f8:	e037883a 	mov	sp,fp
   1a3fc:	df000017 	ldw	fp,0(sp)
   1a400:	dec00104 	addi	sp,sp,4
   1a404:	f800283a 	ret

0001a408 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1a408:	defffa04 	addi	sp,sp,-24
   1a40c:	dfc00515 	stw	ra,20(sp)
   1a410:	df000415 	stw	fp,16(sp)
   1a414:	df000404 	addi	fp,sp,16
   1a418:	e13ffe15 	stw	r4,-8(fp)
   1a41c:	e17ffd15 	stw	r5,-12(fp)
   1a420:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1a424:	e0bffe17 	ldw	r2,-8(fp)
   1a428:	10800a17 	ldw	r2,40(r2)
   1a42c:	10800037 	ldwio	r2,0(r2)
   1a430:	e0bfff15 	stw	r2,-4(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1a434:	e0bfff17 	ldw	r2,-4(fp)
   1a438:	1007883a 	mov	r3,r2
   1a43c:	e0bffd17 	ldw	r2,-12(fp)
   1a440:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1a444:	e13fff17 	ldw	r4,-4(fp)
   1a448:	001a3840 	call	1a384 <alt_up_rs232_check_parity>
   1a44c:	1007883a 	mov	r3,r2
   1a450:	e0bffc17 	ldw	r2,-16(fp)
   1a454:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1a458:	e0bfff17 	ldw	r2,-4(fp)
   1a45c:	1004d3fa 	srli	r2,r2,15
   1a460:	1080004c 	andi	r2,r2,1
   1a464:	10bfffc4 	addi	r2,r2,-1
}
   1a468:	e037883a 	mov	sp,fp
   1a46c:	dfc00117 	ldw	ra,4(sp)
   1a470:	df000017 	ldw	fp,0(sp)
   1a474:	dec00204 	addi	sp,sp,8
   1a478:	f800283a 	ret

0001a47c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1a47c:	defff804 	addi	sp,sp,-32
   1a480:	dfc00715 	stw	ra,28(sp)
   1a484:	df000615 	stw	fp,24(sp)
   1a488:	df000604 	addi	fp,sp,24
   1a48c:	e13ffc15 	stw	r4,-16(fp)
   1a490:	e17ffb15 	stw	r5,-20(fp)
   1a494:	e1bffa15 	stw	r6,-24(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1a498:	e0bffc17 	ldw	r2,-16(fp)
   1a49c:	10800017 	ldw	r2,0(r2)
   1a4a0:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   1a4a4:	e03fff15 	stw	zero,-4(fp)
	alt_u8 parity_error;
	while(len--)
   1a4a8:	00000c06 	br	1a4dc <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1a4ac:	e0bffb17 	ldw	r2,-20(fp)
   1a4b0:	10c00044 	addi	r3,r2,1
   1a4b4:	e0fffb15 	stw	r3,-20(fp)
   1a4b8:	e0fffdc4 	addi	r3,fp,-9
   1a4bc:	180d883a 	mov	r6,r3
   1a4c0:	100b883a 	mov	r5,r2
   1a4c4:	e13ffe17 	ldw	r4,-8(fp)
   1a4c8:	001a4080 	call	1a408 <alt_up_rs232_read_data>
   1a4cc:	1000081e 	bne	r2,zero,1a4f0 <alt_up_rs232_read_fd+0x74>
			count++;
   1a4d0:	e0bfff17 	ldw	r2,-4(fp)
   1a4d4:	10800044 	addi	r2,r2,1
   1a4d8:	e0bfff15 	stw	r2,-4(fp)
	while(len--)
   1a4dc:	e0bffa17 	ldw	r2,-24(fp)
   1a4e0:	10ffffc4 	addi	r3,r2,-1
   1a4e4:	e0fffa15 	stw	r3,-24(fp)
   1a4e8:	103ff01e 	bne	r2,zero,1a4ac <alt_up_rs232_read_fd+0x30>
   1a4ec:	00000106 	br	1a4f4 <alt_up_rs232_read_fd+0x78>
		else
			break;
   1a4f0:	0001883a 	nop
	}
	return count;
   1a4f4:	e0bfff17 	ldw	r2,-4(fp)
}
   1a4f8:	e037883a 	mov	sp,fp
   1a4fc:	dfc00117 	ldw	ra,4(sp)
   1a500:	df000017 	ldw	fp,0(sp)
   1a504:	dec00204 	addi	sp,sp,8
   1a508:	f800283a 	ret

0001a50c <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1a50c:	defff904 	addi	sp,sp,-28
   1a510:	dfc00615 	stw	ra,24(sp)
   1a514:	df000515 	stw	fp,20(sp)
   1a518:	df000504 	addi	fp,sp,20
   1a51c:	e13ffd15 	stw	r4,-12(fp)
   1a520:	e17ffc15 	stw	r5,-16(fp)
   1a524:	e1bffb15 	stw	r6,-20(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1a528:	e0bffd17 	ldw	r2,-12(fp)
   1a52c:	10800017 	ldw	r2,0(r2)
   1a530:	e0bffe15 	stw	r2,-8(fp)
	int count = 0;
   1a534:	e03fff15 	stw	zero,-4(fp)
	while(len--)
   1a538:	00000d06 	br	1a570 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1a53c:	e0bffc17 	ldw	r2,-16(fp)
   1a540:	10800003 	ldbu	r2,0(r2)
   1a544:	10803fcc 	andi	r2,r2,255
   1a548:	100b883a 	mov	r5,r2
   1a54c:	e13ffe17 	ldw	r4,-8(fp)
   1a550:	001a3c80 	call	1a3c8 <alt_up_rs232_write_data>
   1a554:	10000b1e 	bne	r2,zero,1a584 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1a558:	e0bfff17 	ldw	r2,-4(fp)
   1a55c:	10800044 	addi	r2,r2,1
   1a560:	e0bfff15 	stw	r2,-4(fp)
			ptr++;
   1a564:	e0bffc17 	ldw	r2,-16(fp)
   1a568:	10800044 	addi	r2,r2,1
   1a56c:	e0bffc15 	stw	r2,-16(fp)
	while(len--)
   1a570:	e0bffb17 	ldw	r2,-20(fp)
   1a574:	10ffffc4 	addi	r3,r2,-1
   1a578:	e0fffb15 	stw	r3,-20(fp)
   1a57c:	103fef1e 	bne	r2,zero,1a53c <alt_up_rs232_write_fd+0x30>
   1a580:	00000106 	br	1a588 <alt_up_rs232_write_fd+0x7c>
		}
		else
			break;
   1a584:	0001883a 	nop
	}
	return count;
   1a588:	e0bfff17 	ldw	r2,-4(fp)
}
   1a58c:	e037883a 	mov	sp,fp
   1a590:	dfc00117 	ldw	ra,4(sp)
   1a594:	df000017 	ldw	fp,0(sp)
   1a598:	dec00204 	addi	sp,sp,8
   1a59c:	f800283a 	ret

0001a5a0 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1a5a0:	defffc04 	addi	sp,sp,-16
   1a5a4:	dfc00315 	stw	ra,12(sp)
   1a5a8:	df000215 	stw	fp,8(sp)
   1a5ac:	df000204 	addi	fp,sp,8
   1a5b0:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1a5b4:	d1600804 	addi	r5,gp,-32736
   1a5b8:	e13ffe17 	ldw	r4,-8(fp)
   1a5bc:	001a8dc0 	call	1a8dc <alt_find_dev>
   1a5c0:	e0bfff15 	stw	r2,-4(fp)

  return dev;
   1a5c4:	e0bfff17 	ldw	r2,-4(fp)
}
   1a5c8:	e037883a 	mov	sp,fp
   1a5cc:	dfc00117 	ldw	ra,4(sp)
   1a5d0:	df000017 	ldw	fp,0(sp)
   1a5d4:	dec00204 	addi	sp,sp,8
   1a5d8:	f800283a 	ret

0001a5dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1a5dc:	defff504 	addi	sp,sp,-44
   1a5e0:	df000a15 	stw	fp,40(sp)
   1a5e4:	df000a04 	addi	fp,sp,40
   1a5e8:	e13ff915 	stw	r4,-28(fp)
   1a5ec:	e17ff815 	stw	r5,-32(fp)
   1a5f0:	e1bff715 	stw	r6,-36(fp)
   1a5f4:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1a5f8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   1a5fc:	d0a82a17 	ldw	r2,-24408(gp)
  
  if (alt_ticks_per_second ())
   1a600:	10003e26 	beq	r2,zero,1a6fc <alt_alarm_start+0x120>
  {
    if (alarm)
   1a604:	e0bff917 	ldw	r2,-28(fp)
   1a608:	10003a26 	beq	r2,zero,1a6f4 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
   1a60c:	e0bff917 	ldw	r2,-28(fp)
   1a610:	e0fff717 	ldw	r3,-36(fp)
   1a614:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1a618:	e0bff917 	ldw	r2,-28(fp)
   1a61c:	e0fff617 	ldw	r3,-40(fp)
   1a620:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   1a624:	0005303a 	rdctl	r2,status
   1a628:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a62c:	e0fffd17 	ldw	r3,-12(fp)
   1a630:	00bfff84 	movi	r2,-2
   1a634:	1884703a 	and	r2,r3,r2
   1a638:	1001703a 	wrctl	status,r2
  return context;
   1a63c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
   1a640:	e0bffe15 	stw	r2,-8(fp)
  return _alt_nticks;
   1a644:	d0a82b17 	ldw	r2,-24404(gp)
      
      current_nticks = alt_nticks();
   1a648:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1a64c:	e0fff817 	ldw	r3,-32(fp)
   1a650:	e0bfff17 	ldw	r2,-4(fp)
   1a654:	1885883a 	add	r2,r3,r2
   1a658:	10c00044 	addi	r3,r2,1
   1a65c:	e0bff917 	ldw	r2,-28(fp)
   1a660:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1a664:	e0bff917 	ldw	r2,-28(fp)
   1a668:	10c00217 	ldw	r3,8(r2)
   1a66c:	e0bfff17 	ldw	r2,-4(fp)
   1a670:	1880042e 	bgeu	r3,r2,1a684 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1a674:	e0bff917 	ldw	r2,-28(fp)
   1a678:	00c00044 	movi	r3,1
   1a67c:	10c00405 	stb	r3,16(r2)
   1a680:	00000206 	br	1a68c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1a684:	e0bff917 	ldw	r2,-28(fp)
   1a688:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1a68c:	e0bff917 	ldw	r2,-28(fp)
   1a690:	d0e00d04 	addi	r3,gp,-32716
   1a694:	e0fffb15 	stw	r3,-20(fp)
   1a698:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
   1a69c:	e0bffa17 	ldw	r2,-24(fp)
   1a6a0:	e0fffb17 	ldw	r3,-20(fp)
   1a6a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a6a8:	e0bffb17 	ldw	r2,-20(fp)
   1a6ac:	10c00017 	ldw	r3,0(r2)
   1a6b0:	e0bffa17 	ldw	r2,-24(fp)
   1a6b4:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   1a6b8:	e0bffb17 	ldw	r2,-20(fp)
   1a6bc:	10800017 	ldw	r2,0(r2)
   1a6c0:	e0fffa17 	ldw	r3,-24(fp)
   1a6c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a6c8:	e0bffb17 	ldw	r2,-20(fp)
   1a6cc:	e0fffa17 	ldw	r3,-24(fp)
   1a6d0:	10c00015 	stw	r3,0(r2)
}
   1a6d4:	0001883a 	nop
   1a6d8:	e0bffe17 	ldw	r2,-8(fp)
   1a6dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1a6e0:	e0bffc17 	ldw	r2,-16(fp)
   1a6e4:	1001703a 	wrctl	status,r2
}
   1a6e8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   1a6ec:	0005883a 	mov	r2,zero
   1a6f0:	00000306 	br	1a700 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
   1a6f4:	00bffa84 	movi	r2,-22
   1a6f8:	00000106 	br	1a700 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
   1a6fc:	00bfde84 	movi	r2,-134
  }
}
   1a700:	e037883a 	mov	sp,fp
   1a704:	df000017 	ldw	fp,0(sp)
   1a708:	dec00104 	addi	sp,sp,4
   1a70c:	f800283a 	ret

0001a710 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1a710:	deffff04 	addi	sp,sp,-4
   1a714:	df000015 	stw	fp,0(sp)
   1a718:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1a71c:	0001883a 	nop
   1a720:	e037883a 	mov	sp,fp
   1a724:	df000017 	ldw	fp,0(sp)
   1a728:	dec00104 	addi	sp,sp,4
   1a72c:	f800283a 	ret

0001a730 <alt_get_errno>:
{
   1a730:	defffe04 	addi	sp,sp,-8
   1a734:	dfc00115 	stw	ra,4(sp)
   1a738:	df000015 	stw	fp,0(sp)
   1a73c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a740:	d0a00b17 	ldw	r2,-32724(gp)
   1a744:	10000326 	beq	r2,zero,1a754 <alt_get_errno+0x24>
   1a748:	d0a00b17 	ldw	r2,-32724(gp)
   1a74c:	103ee83a 	callr	r2
   1a750:	00000106 	br	1a758 <alt_get_errno+0x28>
   1a754:	d0a81f04 	addi	r2,gp,-24452
}
   1a758:	e037883a 	mov	sp,fp
   1a75c:	dfc00117 	ldw	ra,4(sp)
   1a760:	df000017 	ldw	fp,0(sp)
   1a764:	dec00204 	addi	sp,sp,8
   1a768:	f800283a 	ret

0001a76c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1a76c:	defffa04 	addi	sp,sp,-24
   1a770:	dfc00515 	stw	ra,20(sp)
   1a774:	df000415 	stw	fp,16(sp)
   1a778:	df000404 	addi	fp,sp,16
   1a77c:	e13ffd15 	stw	r4,-12(fp)
   1a780:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1a784:	e0bffd17 	ldw	r2,-12(fp)
   1a788:	10000326 	beq	r2,zero,1a798 <alt_dev_llist_insert+0x2c>
   1a78c:	e0bffd17 	ldw	r2,-12(fp)
   1a790:	10800217 	ldw	r2,8(r2)
   1a794:	1000061e 	bne	r2,zero,1a7b0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1a798:	001a7300 	call	1a730 <alt_get_errno>
   1a79c:	1007883a 	mov	r3,r2
   1a7a0:	00800584 	movi	r2,22
   1a7a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1a7a8:	00bffa84 	movi	r2,-22
   1a7ac:	00001406 	br	1a800 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1a7b0:	e0bffd17 	ldw	r2,-12(fp)
   1a7b4:	e0fffc17 	ldw	r3,-16(fp)
   1a7b8:	e0ffff15 	stw	r3,-4(fp)
   1a7bc:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   1a7c0:	e0bffe17 	ldw	r2,-8(fp)
   1a7c4:	e0ffff17 	ldw	r3,-4(fp)
   1a7c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1a7cc:	e0bfff17 	ldw	r2,-4(fp)
   1a7d0:	10c00017 	ldw	r3,0(r2)
   1a7d4:	e0bffe17 	ldw	r2,-8(fp)
   1a7d8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   1a7dc:	e0bfff17 	ldw	r2,-4(fp)
   1a7e0:	10800017 	ldw	r2,0(r2)
   1a7e4:	e0fffe17 	ldw	r3,-8(fp)
   1a7e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1a7ec:	e0bfff17 	ldw	r2,-4(fp)
   1a7f0:	e0fffe17 	ldw	r3,-8(fp)
   1a7f4:	10c00015 	stw	r3,0(r2)
}
   1a7f8:	0001883a 	nop

  return 0;  
   1a7fc:	0005883a 	mov	r2,zero
}
   1a800:	e037883a 	mov	sp,fp
   1a804:	dfc00117 	ldw	ra,4(sp)
   1a808:	df000017 	ldw	fp,0(sp)
   1a80c:	dec00204 	addi	sp,sp,8
   1a810:	f800283a 	ret

0001a814 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1a814:	defffd04 	addi	sp,sp,-12
   1a818:	dfc00215 	stw	ra,8(sp)
   1a81c:	df000115 	stw	fp,4(sp)
   1a820:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a824:	008000b4 	movhi	r2,2
   1a828:	10addd04 	addi	r2,r2,-18572
   1a82c:	e0bfff15 	stw	r2,-4(fp)
   1a830:	00000606 	br	1a84c <_do_ctors+0x38>
        (*ctor) (); 
   1a834:	e0bfff17 	ldw	r2,-4(fp)
   1a838:	10800017 	ldw	r2,0(r2)
   1a83c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1a840:	e0bfff17 	ldw	r2,-4(fp)
   1a844:	10bfff04 	addi	r2,r2,-4
   1a848:	e0bfff15 	stw	r2,-4(fp)
   1a84c:	e0ffff17 	ldw	r3,-4(fp)
   1a850:	008000b4 	movhi	r2,2
   1a854:	10adde04 	addi	r2,r2,-18568
   1a858:	18bff62e 	bgeu	r3,r2,1a834 <_do_ctors+0x20>
}
   1a85c:	0001883a 	nop
   1a860:	0001883a 	nop
   1a864:	e037883a 	mov	sp,fp
   1a868:	dfc00117 	ldw	ra,4(sp)
   1a86c:	df000017 	ldw	fp,0(sp)
   1a870:	dec00204 	addi	sp,sp,8
   1a874:	f800283a 	ret

0001a878 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1a878:	defffd04 	addi	sp,sp,-12
   1a87c:	dfc00215 	stw	ra,8(sp)
   1a880:	df000115 	stw	fp,4(sp)
   1a884:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a888:	008000b4 	movhi	r2,2
   1a88c:	10addd04 	addi	r2,r2,-18572
   1a890:	e0bfff15 	stw	r2,-4(fp)
   1a894:	00000606 	br	1a8b0 <_do_dtors+0x38>
        (*dtor) (); 
   1a898:	e0bfff17 	ldw	r2,-4(fp)
   1a89c:	10800017 	ldw	r2,0(r2)
   1a8a0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1a8a4:	e0bfff17 	ldw	r2,-4(fp)
   1a8a8:	10bfff04 	addi	r2,r2,-4
   1a8ac:	e0bfff15 	stw	r2,-4(fp)
   1a8b0:	e0ffff17 	ldw	r3,-4(fp)
   1a8b4:	008000b4 	movhi	r2,2
   1a8b8:	10adde04 	addi	r2,r2,-18568
   1a8bc:	18bff62e 	bgeu	r3,r2,1a898 <_do_dtors+0x20>
}
   1a8c0:	0001883a 	nop
   1a8c4:	0001883a 	nop
   1a8c8:	e037883a 	mov	sp,fp
   1a8cc:	dfc00117 	ldw	ra,4(sp)
   1a8d0:	df000017 	ldw	fp,0(sp)
   1a8d4:	dec00204 	addi	sp,sp,8
   1a8d8:	f800283a 	ret

0001a8dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1a8dc:	defffa04 	addi	sp,sp,-24
   1a8e0:	dfc00515 	stw	ra,20(sp)
   1a8e4:	df000415 	stw	fp,16(sp)
   1a8e8:	df000404 	addi	fp,sp,16
   1a8ec:	e13ffd15 	stw	r4,-12(fp)
   1a8f0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1a8f4:	e0bffc17 	ldw	r2,-16(fp)
   1a8f8:	10800017 	ldw	r2,0(r2)
   1a8fc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1a900:	e13ffd17 	ldw	r4,-12(fp)
   1a904:	0007bfc0 	call	7bfc <strlen>
   1a908:	10800044 	addi	r2,r2,1
   1a90c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1a910:	00000d06 	br	1a948 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1a914:	e0bfff17 	ldw	r2,-4(fp)
   1a918:	10800217 	ldw	r2,8(r2)
   1a91c:	e0fffe17 	ldw	r3,-8(fp)
   1a920:	180d883a 	mov	r6,r3
   1a924:	e17ffd17 	ldw	r5,-12(fp)
   1a928:	1009883a 	mov	r4,r2
   1a92c:	001b5500 	call	1b550 <memcmp>
   1a930:	1000021e 	bne	r2,zero,1a93c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1a934:	e0bfff17 	ldw	r2,-4(fp)
   1a938:	00000706 	br	1a958 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1a93c:	e0bfff17 	ldw	r2,-4(fp)
   1a940:	10800017 	ldw	r2,0(r2)
   1a944:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   1a948:	e0ffff17 	ldw	r3,-4(fp)
   1a94c:	e0bffc17 	ldw	r2,-16(fp)
   1a950:	18bff01e 	bne	r3,r2,1a914 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   1a954:	0005883a 	mov	r2,zero
}
   1a958:	e037883a 	mov	sp,fp
   1a95c:	dfc00117 	ldw	ra,4(sp)
   1a960:	df000017 	ldw	fp,0(sp)
   1a964:	dec00204 	addi	sp,sp,8
   1a968:	f800283a 	ret

0001a96c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1a96c:	defffe04 	addi	sp,sp,-8
   1a970:	dfc00115 	stw	ra,4(sp)
   1a974:	df000015 	stw	fp,0(sp)
   1a978:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1a97c:	01440004 	movi	r5,4096
   1a980:	0009883a 	mov	r4,zero
   1a984:	001b3e00 	call	1b3e0 <alt_icache_flush>
#endif
}
   1a988:	0001883a 	nop
   1a98c:	e037883a 	mov	sp,fp
   1a990:	dfc00117 	ldw	ra,4(sp)
   1a994:	df000017 	ldw	fp,0(sp)
   1a998:	dec00204 	addi	sp,sp,8
   1a99c:	f800283a 	ret

0001a9a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1a9a0:	defff904 	addi	sp,sp,-28
   1a9a4:	dfc00615 	stw	ra,24(sp)
   1a9a8:	df000515 	stw	fp,20(sp)
   1a9ac:	df000504 	addi	fp,sp,20
   1a9b0:	e13ffe15 	stw	r4,-8(fp)
   1a9b4:	e17ffd15 	stw	r5,-12(fp)
   1a9b8:	e1bffc15 	stw	r6,-16(fp)
   1a9bc:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   1a9c0:	e1bffb17 	ldw	r6,-20(fp)
   1a9c4:	e17ffc17 	ldw	r5,-16(fp)
   1a9c8:	e13ffd17 	ldw	r4,-12(fp)
   1a9cc:	001ad400 	call	1ad40 <open>
   1a9d0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   1a9d4:	e0bfff17 	ldw	r2,-4(fp)
   1a9d8:	10001716 	blt	r2,zero,1aa38 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
   1a9dc:	e0bfff17 	ldw	r2,-4(fp)
   1a9e0:	10c00324 	muli	r3,r2,12
   1a9e4:	008000b4 	movhi	r2,2
   1a9e8:	1885883a 	add	r2,r3,r2
   1a9ec:	10f2d717 	ldw	r3,-13476(r2)
   1a9f0:	e0bffe17 	ldw	r2,-8(fp)
   1a9f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1a9f8:	e0bfff17 	ldw	r2,-4(fp)
   1a9fc:	10c00324 	muli	r3,r2,12
   1aa00:	008000b4 	movhi	r2,2
   1aa04:	1885883a 	add	r2,r3,r2
   1aa08:	10f2d817 	ldw	r3,-13472(r2)
   1aa0c:	e0bffe17 	ldw	r2,-8(fp)
   1aa10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1aa14:	e0bfff17 	ldw	r2,-4(fp)
   1aa18:	10c00324 	muli	r3,r2,12
   1aa1c:	008000b4 	movhi	r2,2
   1aa20:	1885883a 	add	r2,r3,r2
   1aa24:	10f2d917 	ldw	r3,-13468(r2)
   1aa28:	e0bffe17 	ldw	r2,-8(fp)
   1aa2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1aa30:	e13fff17 	ldw	r4,-4(fp)
   1aa34:	000eb140 	call	eb14 <alt_release_fd>
  }
} 
   1aa38:	0001883a 	nop
   1aa3c:	e037883a 	mov	sp,fp
   1aa40:	dfc00117 	ldw	ra,4(sp)
   1aa44:	df000017 	ldw	fp,0(sp)
   1aa48:	dec00204 	addi	sp,sp,8
   1aa4c:	f800283a 	ret

0001aa50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1aa50:	defffb04 	addi	sp,sp,-20
   1aa54:	dfc00415 	stw	ra,16(sp)
   1aa58:	df000315 	stw	fp,12(sp)
   1aa5c:	df000304 	addi	fp,sp,12
   1aa60:	e13fff15 	stw	r4,-4(fp)
   1aa64:	e17ffe15 	stw	r5,-8(fp)
   1aa68:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1aa6c:	01c07fc4 	movi	r7,511
   1aa70:	01800044 	movi	r6,1
   1aa74:	e17fff17 	ldw	r5,-4(fp)
   1aa78:	010000b4 	movhi	r4,2
   1aa7c:	2132da04 	addi	r4,r4,-13464
   1aa80:	001a9a00 	call	1a9a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1aa84:	01c07fc4 	movi	r7,511
   1aa88:	000d883a 	mov	r6,zero
   1aa8c:	e17ffe17 	ldw	r5,-8(fp)
   1aa90:	010000b4 	movhi	r4,2
   1aa94:	2132d704 	addi	r4,r4,-13476
   1aa98:	001a9a00 	call	1a9a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1aa9c:	01c07fc4 	movi	r7,511
   1aaa0:	01800044 	movi	r6,1
   1aaa4:	e17ffd17 	ldw	r5,-12(fp)
   1aaa8:	010000b4 	movhi	r4,2
   1aaac:	2132dd04 	addi	r4,r4,-13452
   1aab0:	001a9a00 	call	1a9a0 <alt_open_fd>
}  
   1aab4:	0001883a 	nop
   1aab8:	e037883a 	mov	sp,fp
   1aabc:	dfc00117 	ldw	ra,4(sp)
   1aac0:	df000017 	ldw	fp,0(sp)
   1aac4:	dec00204 	addi	sp,sp,8
   1aac8:	f800283a 	ret

0001aacc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1aacc:	defff004 	addi	sp,sp,-64
   1aad0:	df000f15 	stw	fp,60(sp)
   1aad4:	df000f04 	addi	fp,sp,60
   1aad8:	e13ff315 	stw	r4,-52(fp)
   1aadc:	e17ff215 	stw	r5,-56(fp)
   1aae0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   1aae4:	00bffa84 	movi	r2,-22
   1aae8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1aaec:	e0bff317 	ldw	r2,-52(fp)
   1aaf0:	10800828 	cmpgeui	r2,r2,32
   1aaf4:	1000501e 	bne	r2,zero,1ac38 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   1aaf8:	0005303a 	rdctl	r2,status
   1aafc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab00:	e0fffd17 	ldw	r3,-12(fp)
   1ab04:	00bfff84 	movi	r2,-2
   1ab08:	1884703a 	and	r2,r3,r2
   1ab0c:	1001703a 	wrctl	status,r2
  return context;
   1ab10:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1ab14:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   1ab18:	e0bff317 	ldw	r2,-52(fp)
   1ab1c:	100890fa 	slli	r4,r2,3
   1ab20:	e0fff117 	ldw	r3,-60(fp)
   1ab24:	008000f4 	movhi	r2,3
   1ab28:	2085883a 	add	r2,r4,r2
   1ab2c:	10fcff15 	stw	r3,-3076(r2)
    alt_irq[id].context = context;
   1ab30:	e0bff317 	ldw	r2,-52(fp)
   1ab34:	100890fa 	slli	r4,r2,3
   1ab38:	e0fff217 	ldw	r3,-56(fp)
   1ab3c:	008000f4 	movhi	r2,3
   1ab40:	2085883a 	add	r2,r4,r2
   1ab44:	10fd0015 	stw	r3,-3072(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1ab48:	e0bff117 	ldw	r2,-60(fp)
   1ab4c:	10001a26 	beq	r2,zero,1abb8 <alt_irq_register+0xec>
   1ab50:	e0bff317 	ldw	r2,-52(fp)
   1ab54:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   1ab58:	0005303a 	rdctl	r2,status
   1ab5c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab60:	e0fffb17 	ldw	r3,-20(fp)
   1ab64:	00bfff84 	movi	r2,-2
   1ab68:	1884703a 	and	r2,r3,r2
   1ab6c:	1001703a 	wrctl	status,r2
  return context;
   1ab70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1ab74:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   1ab78:	00c00044 	movi	r3,1
   1ab7c:	e0bffc17 	ldw	r2,-16(fp)
   1ab80:	1884983a 	sll	r2,r3,r2
   1ab84:	1007883a 	mov	r3,r2
   1ab88:	d0a84217 	ldw	r2,-24312(gp)
   1ab8c:	1884b03a 	or	r2,r3,r2
   1ab90:	d0a84215 	stw	r2,-24312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1ab94:	d0a84217 	ldw	r2,-24312(gp)
   1ab98:	100170fa 	wrctl	ienable,r2
   1ab9c:	e0bffa17 	ldw	r2,-24(fp)
   1aba0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   1aba4:	e0bff917 	ldw	r2,-28(fp)
   1aba8:	1001703a 	wrctl	status,r2
}
   1abac:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   1abb0:	0005883a 	mov	r2,zero
   1abb4:	00001a06 	br	1ac20 <alt_irq_register+0x154>
   1abb8:	e0bff317 	ldw	r2,-52(fp)
   1abbc:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   1abc0:	0005303a 	rdctl	r2,status
   1abc4:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1abc8:	e0fff717 	ldw	r3,-36(fp)
   1abcc:	00bfff84 	movi	r2,-2
   1abd0:	1884703a 	and	r2,r3,r2
   1abd4:	1001703a 	wrctl	status,r2
  return context;
   1abd8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   1abdc:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   1abe0:	00c00044 	movi	r3,1
   1abe4:	e0bff817 	ldw	r2,-32(fp)
   1abe8:	1884983a 	sll	r2,r3,r2
   1abec:	0084303a 	nor	r2,zero,r2
   1abf0:	1007883a 	mov	r3,r2
   1abf4:	d0a84217 	ldw	r2,-24312(gp)
   1abf8:	1884703a 	and	r2,r3,r2
   1abfc:	d0a84215 	stw	r2,-24312(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1ac00:	d0a84217 	ldw	r2,-24312(gp)
   1ac04:	100170fa 	wrctl	ienable,r2
   1ac08:	e0bff617 	ldw	r2,-40(fp)
   1ac0c:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   1ac10:	e0bff517 	ldw	r2,-44(fp)
   1ac14:	1001703a 	wrctl	status,r2
}
   1ac18:	0001883a 	nop
  return 0;
   1ac1c:	0005883a 	mov	r2,zero
   1ac20:	e0bfff15 	stw	r2,-4(fp)
   1ac24:	e0bffe17 	ldw	r2,-8(fp)
   1ac28:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   1ac2c:	e0bff417 	ldw	r2,-48(fp)
   1ac30:	1001703a 	wrctl	status,r2
}
   1ac34:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   1ac38:	e0bfff17 	ldw	r2,-4(fp)
}
   1ac3c:	e037883a 	mov	sp,fp
   1ac40:	df000017 	ldw	fp,0(sp)
   1ac44:	dec00104 	addi	sp,sp,4
   1ac48:	f800283a 	ret

0001ac4c <alt_get_errno>:
{
   1ac4c:	defffe04 	addi	sp,sp,-8
   1ac50:	dfc00115 	stw	ra,4(sp)
   1ac54:	df000015 	stw	fp,0(sp)
   1ac58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ac5c:	d0a00b17 	ldw	r2,-32724(gp)
   1ac60:	10000326 	beq	r2,zero,1ac70 <alt_get_errno+0x24>
   1ac64:	d0a00b17 	ldw	r2,-32724(gp)
   1ac68:	103ee83a 	callr	r2
   1ac6c:	00000106 	br	1ac74 <alt_get_errno+0x28>
   1ac70:	d0a81f04 	addi	r2,gp,-24452
}
   1ac74:	e037883a 	mov	sp,fp
   1ac78:	dfc00117 	ldw	ra,4(sp)
   1ac7c:	df000017 	ldw	fp,0(sp)
   1ac80:	dec00204 	addi	sp,sp,8
   1ac84:	f800283a 	ret

0001ac88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1ac88:	defffd04 	addi	sp,sp,-12
   1ac8c:	df000215 	stw	fp,8(sp)
   1ac90:	df000204 	addi	fp,sp,8
   1ac94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1ac98:	e0bffe17 	ldw	r2,-8(fp)
   1ac9c:	10800217 	ldw	r2,8(r2)
   1aca0:	10d00034 	orhi	r3,r2,16384
   1aca4:	e0bffe17 	ldw	r2,-8(fp)
   1aca8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1acac:	e03fff15 	stw	zero,-4(fp)
   1acb0:	00001a06 	br	1ad1c <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1acb4:	e0bfff17 	ldw	r2,-4(fp)
   1acb8:	10c00324 	muli	r3,r2,12
   1acbc:	008000b4 	movhi	r2,2
   1acc0:	1885883a 	add	r2,r3,r2
   1acc4:	10f2d717 	ldw	r3,-13476(r2)
   1acc8:	e0bffe17 	ldw	r2,-8(fp)
   1accc:	10800017 	ldw	r2,0(r2)
   1acd0:	18800f1e 	bne	r3,r2,1ad10 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1acd4:	e0bfff17 	ldw	r2,-4(fp)
   1acd8:	10c00324 	muli	r3,r2,12
   1acdc:	008000b4 	movhi	r2,2
   1ace0:	1885883a 	add	r2,r3,r2
   1ace4:	10b2d917 	ldw	r2,-13468(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
   1ace8:	1000090e 	bge	r2,zero,1ad10 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
   1acec:	e0bfff17 	ldw	r2,-4(fp)
   1acf0:	10c00324 	muli	r3,r2,12
   1acf4:	008000b4 	movhi	r2,2
   1acf8:	10b2d704 	addi	r2,r2,-13476
   1acfc:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1ad00:	e0fffe17 	ldw	r3,-8(fp)
   1ad04:	18800226 	beq	r3,r2,1ad10 <alt_file_locked+0x88>
    {
      return -EACCES;
   1ad08:	00bffcc4 	movi	r2,-13
   1ad0c:	00000806 	br	1ad30 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
   1ad10:	e0bfff17 	ldw	r2,-4(fp)
   1ad14:	10800044 	addi	r2,r2,1
   1ad18:	e0bfff15 	stw	r2,-4(fp)
   1ad1c:	d0a00a17 	ldw	r2,-32728(gp)
   1ad20:	1007883a 	mov	r3,r2
   1ad24:	e0bfff17 	ldw	r2,-4(fp)
   1ad28:	18bfe22e 	bgeu	r3,r2,1acb4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1ad2c:	0005883a 	mov	r2,zero
}
   1ad30:	e037883a 	mov	sp,fp
   1ad34:	df000017 	ldw	fp,0(sp)
   1ad38:	dec00104 	addi	sp,sp,4
   1ad3c:	f800283a 	ret

0001ad40 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1ad40:	defff604 	addi	sp,sp,-40
   1ad44:	dfc00915 	stw	ra,36(sp)
   1ad48:	df000815 	stw	fp,32(sp)
   1ad4c:	df000804 	addi	fp,sp,32
   1ad50:	e13ffa15 	stw	r4,-24(fp)
   1ad54:	e17ff915 	stw	r5,-28(fp)
   1ad58:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1ad5c:	00bfffc4 	movi	r2,-1
   1ad60:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   1ad64:	00bffb44 	movi	r2,-19
   1ad68:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   1ad6c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1ad70:	d1600804 	addi	r5,gp,-32736
   1ad74:	e13ffa17 	ldw	r4,-24(fp)
   1ad78:	001a8dc0 	call	1a8dc <alt_find_dev>
   1ad7c:	e0bfff15 	stw	r2,-4(fp)
   1ad80:	e0bfff17 	ldw	r2,-4(fp)
   1ad84:	1000051e 	bne	r2,zero,1ad9c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1ad88:	e13ffa17 	ldw	r4,-24(fp)
   1ad8c:	001b2000 	call	1b200 <alt_find_file>
   1ad90:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   1ad94:	00800044 	movi	r2,1
   1ad98:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1ad9c:	e0bfff17 	ldw	r2,-4(fp)
   1ada0:	10002926 	beq	r2,zero,1ae48 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1ada4:	e13fff17 	ldw	r4,-4(fp)
   1ada8:	001b3080 	call	1b308 <alt_get_fd>
   1adac:	e0bffe15 	stw	r2,-8(fp)
   1adb0:	e0bffe17 	ldw	r2,-8(fp)
   1adb4:	1000030e 	bge	r2,zero,1adc4 <open+0x84>
    {
      status = index;
   1adb8:	e0bffe17 	ldw	r2,-8(fp)
   1adbc:	e0bffd15 	stw	r2,-12(fp)
   1adc0:	00002306 	br	1ae50 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1adc4:	e0bffe17 	ldw	r2,-8(fp)
   1adc8:	10c00324 	muli	r3,r2,12
   1adcc:	008000b4 	movhi	r2,2
   1add0:	10b2d704 	addi	r2,r2,-13476
   1add4:	1885883a 	add	r2,r3,r2
   1add8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1addc:	e0fff917 	ldw	r3,-28(fp)
   1ade0:	00900034 	movhi	r2,16384
   1ade4:	10bfffc4 	addi	r2,r2,-1
   1ade8:	1886703a 	and	r3,r3,r2
   1adec:	e0bffb17 	ldw	r2,-20(fp)
   1adf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1adf4:	e0bffc17 	ldw	r2,-16(fp)
   1adf8:	1000051e 	bne	r2,zero,1ae10 <open+0xd0>
   1adfc:	e13ffb17 	ldw	r4,-20(fp)
   1ae00:	001ac880 	call	1ac88 <alt_file_locked>
   1ae04:	e0bffd15 	stw	r2,-12(fp)
   1ae08:	e0bffd17 	ldw	r2,-12(fp)
   1ae0c:	10001016 	blt	r2,zero,1ae50 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1ae10:	e0bfff17 	ldw	r2,-4(fp)
   1ae14:	10800317 	ldw	r2,12(r2)
   1ae18:	10000826 	beq	r2,zero,1ae3c <open+0xfc>
   1ae1c:	e0bfff17 	ldw	r2,-4(fp)
   1ae20:	10800317 	ldw	r2,12(r2)
   1ae24:	e1fff817 	ldw	r7,-32(fp)
   1ae28:	e1bff917 	ldw	r6,-28(fp)
   1ae2c:	e17ffa17 	ldw	r5,-24(fp)
   1ae30:	e13ffb17 	ldw	r4,-20(fp)
   1ae34:	103ee83a 	callr	r2
   1ae38:	00000106 	br	1ae40 <open+0x100>
   1ae3c:	0005883a 	mov	r2,zero
   1ae40:	e0bffd15 	stw	r2,-12(fp)
   1ae44:	00000206 	br	1ae50 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1ae48:	00bffb44 	movi	r2,-19
   1ae4c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1ae50:	e0bffd17 	ldw	r2,-12(fp)
   1ae54:	1000090e 	bge	r2,zero,1ae7c <open+0x13c>
  {
    alt_release_fd (index);  
   1ae58:	e13ffe17 	ldw	r4,-8(fp)
   1ae5c:	000eb140 	call	eb14 <alt_release_fd>
    ALT_ERRNO = -status;
   1ae60:	001ac4c0 	call	1ac4c <alt_get_errno>
   1ae64:	1007883a 	mov	r3,r2
   1ae68:	e0bffd17 	ldw	r2,-12(fp)
   1ae6c:	0085c83a 	sub	r2,zero,r2
   1ae70:	18800015 	stw	r2,0(r3)
    return -1;
   1ae74:	00bfffc4 	movi	r2,-1
   1ae78:	00000106 	br	1ae80 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1ae7c:	e0bffe17 	ldw	r2,-8(fp)
}
   1ae80:	e037883a 	mov	sp,fp
   1ae84:	dfc00117 	ldw	ra,4(sp)
   1ae88:	df000017 	ldw	fp,0(sp)
   1ae8c:	dec00204 	addi	sp,sp,8
   1ae90:	f800283a 	ret

0001ae94 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ae94:	deffff04 	addi	sp,sp,-4
   1ae98:	df000015 	stw	fp,0(sp)
   1ae9c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1aea0:	000170fa 	wrctl	ienable,zero
}
   1aea4:	0001883a 	nop
   1aea8:	e037883a 	mov	sp,fp
   1aeac:	df000017 	ldw	fp,0(sp)
   1aeb0:	dec00104 	addi	sp,sp,4
   1aeb4:	f800283a 	ret

0001aeb8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1aeb8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1aebc:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1aec0:	d1283a17 	ldw	r4,-24344(gp)

      stw ra,  0(sp)
   1aec4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1aec8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1aecc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1aed0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1aed4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1aed8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1aedc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1aee0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1aee4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1aee8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1aeec:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1aef0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1aef4:	001b11c0 	call	1b11c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1aef8:	d1283c17 	ldw	r4,-24336(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1aefc:	d1683707 	ldb	r5,-24356(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1af00:	d1283a15 	stw	r4,-24344(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1af04:	d16836c5 	stb	r5,-24357(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1af08:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1af0c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1af10:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1af14:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1af18:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1af1c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1af20:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1af24:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1af28:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1af2c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1af30:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1af34:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1af38:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1af3c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1af40:	f800283a 	ret

0001af44 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1af44:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1af48:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1af4c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1af50:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1af54:	001b11c0 	call	1b11c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1af58:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1af5c:	d4a83845 	stb	r18,-24351(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1af60:	003fe506 	br	1aef8 <OSCtxSw+0x40>

0001af64 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1af64:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1af68:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1af6c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1af70:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1af74:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1af78:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1af7c:	dec00204 	addi	sp,sp,8

      callr r2
   1af80:	103ee83a 	callr	r2

      nop
   1af84:	0001883a 	nop

0001af88 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1af88:	defff704 	addi	sp,sp,-36
   1af8c:	dfc00815 	stw	ra,32(sp)
   1af90:	df000715 	stw	fp,28(sp)
   1af94:	df000704 	addi	fp,sp,28
   1af98:	e13ffc15 	stw	r4,-16(fp)
   1af9c:	e17ffb15 	stw	r5,-20(fp)
   1afa0:	e1bffa15 	stw	r6,-24(fp)
   1afa4:	3805883a 	mov	r2,r7
   1afa8:	e0bff90d 	sth	r2,-28(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1afac:	e0fffa17 	ldw	r3,-24(fp)
   1afb0:	00bfff04 	movi	r2,-4
   1afb4:	1884703a 	and	r2,r3,r2
   1afb8:	10bef704 	addi	r2,r2,-1060
   1afbc:	e0bfff15 	stw	r2,-4(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1afc0:	01810904 	movi	r6,1060
   1afc4:	000b883a 	mov	r5,zero
   1afc8:	e13fff17 	ldw	r4,-4(fp)
   1afcc:	00068140 	call	6814 <memset>
   1afd0:	e0bfff17 	ldw	r2,-4(fp)
   1afd4:	10c0bb04 	addi	r3,r2,748
   1afd8:	e0bfff17 	ldw	r2,-4(fp)
   1afdc:	10c00115 	stw	r3,4(r2)
   1afe0:	e0bfff17 	ldw	r2,-4(fp)
   1afe4:	10c0d504 	addi	r3,r2,852
   1afe8:	e0bfff17 	ldw	r2,-4(fp)
   1afec:	10c00215 	stw	r3,8(r2)
   1aff0:	e0bfff17 	ldw	r2,-4(fp)
   1aff4:	10c0ef04 	addi	r3,r2,956
   1aff8:	e0bfff17 	ldw	r2,-4(fp)
   1affc:	10c00315 	stw	r3,12(r2)
   1b000:	e0bfff17 	ldw	r2,-4(fp)
   1b004:	00c00044 	movi	r3,1
   1b008:	10c02915 	stw	r3,164(r2)
   1b00c:	10002a15 	stw	zero,168(r2)
   1b010:	e0bfff17 	ldw	r2,-4(fp)
   1b014:	00ccc384 	movi	r3,13070
   1b018:	10c02b0d 	sth	r3,172(r2)
   1b01c:	e0bfff17 	ldw	r2,-4(fp)
   1b020:	00eaf344 	movi	r3,-21555
   1b024:	10c02b8d 	sth	r3,174(r2)
   1b028:	e0bfff17 	ldw	r2,-4(fp)
   1b02c:	00c48d04 	movi	r3,4660
   1b030:	10c02c0d 	sth	r3,176(r2)
   1b034:	e0bfff17 	ldw	r2,-4(fp)
   1b038:	00f99b44 	movi	r3,-6547
   1b03c:	10c02c8d 	sth	r3,178(r2)
   1b040:	e0bfff17 	ldw	r2,-4(fp)
   1b044:	00f7bb04 	movi	r3,-8468
   1b048:	10c02d0d 	sth	r3,180(r2)
   1b04c:	e0bfff17 	ldw	r2,-4(fp)
   1b050:	00c00144 	movi	r3,5
   1b054:	10c02d8d 	sth	r3,182(r2)
   1b058:	e0bfff17 	ldw	r2,-4(fp)
   1b05c:	00c002c4 	movi	r3,11
   1b060:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1b064:	e0bfff17 	ldw	r2,-4(fp)
   1b068:	e0bffe15 	stw	r2,-8(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1b06c:	e0bffe17 	ldw	r2,-8(fp)
   1b070:	10bff304 	addi	r2,r2,-52
   1b074:	e0bffd15 	stw	r2,-12(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1b078:	e0bffd17 	ldw	r2,-12(fp)
   1b07c:	10800c04 	addi	r2,r2,48
   1b080:	e0fffc17 	ldw	r3,-16(fp)
   1b084:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1b088:	e0bffd17 	ldw	r2,-12(fp)
   1b08c:	10800b04 	addi	r2,r2,44
   1b090:	e0fffb17 	ldw	r3,-20(fp)
   1b094:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1b098:	e0bffd17 	ldw	r2,-12(fp)
   1b09c:	10800a04 	addi	r2,r2,40
   1b0a0:	e0ffff17 	ldw	r3,-4(fp)
   1b0a4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1b0a8:	008000b4 	movhi	r2,2
   1b0ac:	10abd904 	addi	r2,r2,-20636
   1b0b0:	10c00104 	addi	r3,r2,4
   1b0b4:	e0bffd17 	ldw	r2,-12(fp)
   1b0b8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1b0bc:	e0bffd17 	ldw	r2,-12(fp)
}
   1b0c0:	e037883a 	mov	sp,fp
   1b0c4:	dfc00117 	ldw	ra,4(sp)
   1b0c8:	df000017 	ldw	fp,0(sp)
   1b0cc:	dec00204 	addi	sp,sp,8
   1b0d0:	f800283a 	ret

0001b0d4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1b0d4:	defffe04 	addi	sp,sp,-8
   1b0d8:	df000115 	stw	fp,4(sp)
   1b0dc:	df000104 	addi	fp,sp,4
   1b0e0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1b0e4:	0001883a 	nop
   1b0e8:	e037883a 	mov	sp,fp
   1b0ec:	df000017 	ldw	fp,0(sp)
   1b0f0:	dec00104 	addi	sp,sp,4
   1b0f4:	f800283a 	ret

0001b0f8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1b0f8:	defffe04 	addi	sp,sp,-8
   1b0fc:	df000115 	stw	fp,4(sp)
   1b100:	df000104 	addi	fp,sp,4
   1b104:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1b108:	0001883a 	nop
   1b10c:	e037883a 	mov	sp,fp
   1b110:	df000017 	ldw	fp,0(sp)
   1b114:	dec00104 	addi	sp,sp,4
   1b118:	f800283a 	ret

0001b11c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1b11c:	deffff04 	addi	sp,sp,-4
   1b120:	df000015 	stw	fp,0(sp)
   1b124:	d839883a 	mov	fp,sp
}
   1b128:	0001883a 	nop
   1b12c:	e037883a 	mov	sp,fp
   1b130:	df000017 	ldw	fp,0(sp)
   1b134:	dec00104 	addi	sp,sp,4
   1b138:	f800283a 	ret

0001b13c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1b13c:	deffff04 	addi	sp,sp,-4
   1b140:	df000015 	stw	fp,0(sp)
   1b144:	d839883a 	mov	fp,sp
}
   1b148:	0001883a 	nop
   1b14c:	e037883a 	mov	sp,fp
   1b150:	df000017 	ldw	fp,0(sp)
   1b154:	dec00104 	addi	sp,sp,4
   1b158:	f800283a 	ret

0001b15c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1b15c:	deffff04 	addi	sp,sp,-4
   1b160:	df000015 	stw	fp,0(sp)
   1b164:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1b168:	0001883a 	nop
   1b16c:	e037883a 	mov	sp,fp
   1b170:	df000017 	ldw	fp,0(sp)
   1b174:	dec00104 	addi	sp,sp,4
   1b178:	f800283a 	ret

0001b17c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1b17c:	deffff04 	addi	sp,sp,-4
   1b180:	df000015 	stw	fp,0(sp)
   1b184:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1b188:	0001883a 	nop
   1b18c:	e037883a 	mov	sp,fp
   1b190:	df000017 	ldw	fp,0(sp)
   1b194:	dec00104 	addi	sp,sp,4
   1b198:	f800283a 	ret

0001b19c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1b19c:	deffff04 	addi	sp,sp,-4
   1b1a0:	df000015 	stw	fp,0(sp)
   1b1a4:	d839883a 	mov	fp,sp
}
   1b1a8:	0001883a 	nop
   1b1ac:	e037883a 	mov	sp,fp
   1b1b0:	df000017 	ldw	fp,0(sp)
   1b1b4:	dec00104 	addi	sp,sp,4
   1b1b8:	f800283a 	ret

0001b1bc <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1b1bc:	deffff04 	addi	sp,sp,-4
   1b1c0:	df000015 	stw	fp,0(sp)
   1b1c4:	d839883a 	mov	fp,sp
}
   1b1c8:	0001883a 	nop
   1b1cc:	e037883a 	mov	sp,fp
   1b1d0:	df000017 	ldw	fp,0(sp)
   1b1d4:	dec00104 	addi	sp,sp,4
   1b1d8:	f800283a 	ret

0001b1dc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1b1dc:	defffe04 	addi	sp,sp,-8
   1b1e0:	df000115 	stw	fp,4(sp)
   1b1e4:	df000104 	addi	fp,sp,4
   1b1e8:	e13fff15 	stw	r4,-4(fp)
}
   1b1ec:	0001883a 	nop
   1b1f0:	e037883a 	mov	sp,fp
   1b1f4:	df000017 	ldw	fp,0(sp)
   1b1f8:	dec00104 	addi	sp,sp,4
   1b1fc:	f800283a 	ret

0001b200 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1b200:	defffb04 	addi	sp,sp,-20
   1b204:	dfc00415 	stw	ra,16(sp)
   1b208:	df000315 	stw	fp,12(sp)
   1b20c:	df000304 	addi	fp,sp,12
   1b210:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1b214:	d0a00617 	ldw	r2,-32744(gp)
   1b218:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1b21c:	00003106 	br	1b2e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1b220:	e0bfff17 	ldw	r2,-4(fp)
   1b224:	10800217 	ldw	r2,8(r2)
   1b228:	1009883a 	mov	r4,r2
   1b22c:	0007bfc0 	call	7bfc <strlen>
   1b230:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1b234:	e0bfff17 	ldw	r2,-4(fp)
   1b238:	10c00217 	ldw	r3,8(r2)
   1b23c:	e0bffe17 	ldw	r2,-8(fp)
   1b240:	10bfffc4 	addi	r2,r2,-1
   1b244:	1885883a 	add	r2,r3,r2
   1b248:	10800003 	ldbu	r2,0(r2)
   1b24c:	10803fcc 	andi	r2,r2,255
   1b250:	1080201c 	xori	r2,r2,128
   1b254:	10bfe004 	addi	r2,r2,-128
   1b258:	10800bd8 	cmpnei	r2,r2,47
   1b25c:	1000031e 	bne	r2,zero,1b26c <alt_find_file+0x6c>
    {
      len -= 1;
   1b260:	e0bffe17 	ldw	r2,-8(fp)
   1b264:	10bfffc4 	addi	r2,r2,-1
   1b268:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b26c:	e0bffe17 	ldw	r2,-8(fp)
   1b270:	e0fffd17 	ldw	r3,-12(fp)
   1b274:	1885883a 	add	r2,r3,r2
   1b278:	10800003 	ldbu	r2,0(r2)
   1b27c:	10803fcc 	andi	r2,r2,255
   1b280:	1080201c 	xori	r2,r2,128
   1b284:	10bfe004 	addi	r2,r2,-128
   1b288:	10800be0 	cmpeqi	r2,r2,47
   1b28c:	1000081e 	bne	r2,zero,1b2b0 <alt_find_file+0xb0>
   1b290:	e0bffe17 	ldw	r2,-8(fp)
   1b294:	e0fffd17 	ldw	r3,-12(fp)
   1b298:	1885883a 	add	r2,r3,r2
   1b29c:	10800003 	ldbu	r2,0(r2)
   1b2a0:	10803fcc 	andi	r2,r2,255
   1b2a4:	1080201c 	xori	r2,r2,128
   1b2a8:	10bfe004 	addi	r2,r2,-128
   1b2ac:	10000a1e 	bne	r2,zero,1b2d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1b2b0:	e0bfff17 	ldw	r2,-4(fp)
   1b2b4:	10800217 	ldw	r2,8(r2)
   1b2b8:	e0fffe17 	ldw	r3,-8(fp)
   1b2bc:	180d883a 	mov	r6,r3
   1b2c0:	e17ffd17 	ldw	r5,-12(fp)
   1b2c4:	1009883a 	mov	r4,r2
   1b2c8:	001b5500 	call	1b550 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   1b2cc:	1000021e 	bne	r2,zero,1b2d8 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   1b2d0:	e0bfff17 	ldw	r2,-4(fp)
   1b2d4:	00000706 	br	1b2f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1b2d8:	e0bfff17 	ldw	r2,-4(fp)
   1b2dc:	10800017 	ldw	r2,0(r2)
   1b2e0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   1b2e4:	e0ffff17 	ldw	r3,-4(fp)
   1b2e8:	d0a00604 	addi	r2,gp,-32744
   1b2ec:	18bfcc1e 	bne	r3,r2,1b220 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   1b2f0:	0005883a 	mov	r2,zero
}
   1b2f4:	e037883a 	mov	sp,fp
   1b2f8:	dfc00117 	ldw	ra,4(sp)
   1b2fc:	df000017 	ldw	fp,0(sp)
   1b300:	dec00204 	addi	sp,sp,8
   1b304:	f800283a 	ret

0001b308 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1b308:	defff904 	addi	sp,sp,-28
   1b30c:	dfc00615 	stw	ra,24(sp)
   1b310:	df000515 	stw	fp,20(sp)
   1b314:	df000504 	addi	fp,sp,20
   1b318:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
   1b31c:	00bffa04 	movi	r2,-24
   1b320:	e0bffe15 	stw	r2,-8(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1b324:	d0a82417 	ldw	r2,-24432(gp)
   1b328:	e0bffd15 	stw	r2,-12(fp)
   1b32c:	e03ffc8d 	sth	zero,-14(fp)
   1b330:	e0bffc8b 	ldhu	r2,-14(fp)
   1b334:	e0fffc44 	addi	r3,fp,-15
   1b338:	180d883a 	mov	r6,r3
   1b33c:	100b883a 	mov	r5,r2
   1b340:	e13ffd17 	ldw	r4,-12(fp)
   1b344:	00159700 	call	15970 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1b348:	e03fff15 	stw	zero,-4(fp)
   1b34c:	00001706 	br	1b3ac <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
   1b350:	e0bfff17 	ldw	r2,-4(fp)
   1b354:	10c00324 	muli	r3,r2,12
   1b358:	008000b4 	movhi	r2,2
   1b35c:	1885883a 	add	r2,r3,r2
   1b360:	10b2d717 	ldw	r2,-13476(r2)
   1b364:	10000e1e 	bne	r2,zero,1b3a0 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
   1b368:	e0bfff17 	ldw	r2,-4(fp)
   1b36c:	11000324 	muli	r4,r2,12
   1b370:	e0fffb17 	ldw	r3,-20(fp)
   1b374:	008000b4 	movhi	r2,2
   1b378:	2085883a 	add	r2,r4,r2
   1b37c:	10f2d715 	stw	r3,-13476(r2)
      if (i > alt_max_fd)
   1b380:	d0e00a17 	ldw	r3,-32728(gp)
   1b384:	e0bfff17 	ldw	r2,-4(fp)
   1b388:	1880020e 	bge	r3,r2,1b394 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
   1b38c:	e0bfff17 	ldw	r2,-4(fp)
   1b390:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1b394:	e0bfff17 	ldw	r2,-4(fp)
   1b398:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1b39c:	00000706 	br	1b3bc <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
   1b3a0:	e0bfff17 	ldw	r2,-4(fp)
   1b3a4:	10800044 	addi	r2,r2,1
   1b3a8:	e0bfff15 	stw	r2,-4(fp)
   1b3ac:	e0bfff17 	ldw	r2,-4(fp)
   1b3b0:	10800810 	cmplti	r2,r2,32
   1b3b4:	103fe61e 	bne	r2,zero,1b350 <alt_get_fd+0x48>
    }
  }

 alt_get_fd_exit:
   1b3b8:	0001883a 	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1b3bc:	d0a82417 	ldw	r2,-24432(gp)
   1b3c0:	1009883a 	mov	r4,r2
   1b3c4:	0015cf80 	call	15cf8 <OSSemPost>

  return rc;
   1b3c8:	e0bffe17 	ldw	r2,-8(fp)
}
   1b3cc:	e037883a 	mov	sp,fp
   1b3d0:	dfc00117 	ldw	ra,4(sp)
   1b3d4:	df000017 	ldw	fp,0(sp)
   1b3d8:	dec00204 	addi	sp,sp,8
   1b3dc:	f800283a 	ret

0001b3e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1b3e0:	defffb04 	addi	sp,sp,-20
   1b3e4:	df000415 	stw	fp,16(sp)
   1b3e8:	df000404 	addi	fp,sp,16
   1b3ec:	e13ffd15 	stw	r4,-12(fp)
   1b3f0:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1b3f4:	e0bffc17 	ldw	r2,-16(fp)
   1b3f8:	10840070 	cmpltui	r2,r2,4097
   1b3fc:	1000021e 	bne	r2,zero,1b408 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1b400:	00840004 	movi	r2,4096
   1b404:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
   1b408:	e0fffd17 	ldw	r3,-12(fp)
   1b40c:	e0bffc17 	ldw	r2,-16(fp)
   1b410:	1885883a 	add	r2,r3,r2
   1b414:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b418:	e0bffd17 	ldw	r2,-12(fp)
   1b41c:	e0bfff15 	stw	r2,-4(fp)
   1b420:	00000506 	br	1b438 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1b424:	e0bfff17 	ldw	r2,-4(fp)
   1b428:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1b42c:	e0bfff17 	ldw	r2,-4(fp)
   1b430:	10800804 	addi	r2,r2,32
   1b434:	e0bfff15 	stw	r2,-4(fp)
   1b438:	e0ffff17 	ldw	r3,-4(fp)
   1b43c:	e0bffe17 	ldw	r2,-8(fp)
   1b440:	18bff836 	bltu	r3,r2,1b424 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1b444:	e0bffd17 	ldw	r2,-12(fp)
   1b448:	108007cc 	andi	r2,r2,31
   1b44c:	10000226 	beq	r2,zero,1b458 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1b450:	e0bfff17 	ldw	r2,-4(fp)
   1b454:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1b458:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1b45c:	0001883a 	nop
   1b460:	e037883a 	mov	sp,fp
   1b464:	df000017 	ldw	fp,0(sp)
   1b468:	dec00104 	addi	sp,sp,4
   1b46c:	f800283a 	ret

0001b470 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1b470:	defffe04 	addi	sp,sp,-8
   1b474:	df000115 	stw	fp,4(sp)
   1b478:	df000104 	addi	fp,sp,4
   1b47c:	e13fff15 	stw	r4,-4(fp)
   1b480:	e0bfff17 	ldw	r2,-4(fp)
   1b484:	10bffe84 	addi	r2,r2,-6
   1b488:	10c00428 	cmpgeui	r3,r2,16
   1b48c:	1800191e 	bne	r3,zero,1b4f4 <alt_exception_cause_generated_bad_addr+0x84>
   1b490:	100690ba 	slli	r3,r2,2
   1b494:	008000b4 	movhi	r2,2
   1b498:	1885883a 	add	r2,r3,r2
   1b49c:	10ad2917 	ldw	r2,-19292(r2)
   1b4a0:	1000683a 	jmp	r2
   1b4a4:	0001b4e4 	muli	zero,zero,1747
   1b4a8:	0001b4e4 	muli	zero,zero,1747
   1b4ac:	0001b4f4 	movhi	zero,1747
   1b4b0:	0001b4f4 	movhi	zero,1747
   1b4b4:	0001b4f4 	movhi	zero,1747
   1b4b8:	0001b4e4 	muli	zero,zero,1747
   1b4bc:	0001b4ec 	andhi	zero,zero,1747
   1b4c0:	0001b4f4 	movhi	zero,1747
   1b4c4:	0001b4e4 	muli	zero,zero,1747
   1b4c8:	0001b4e4 	muli	zero,zero,1747
   1b4cc:	0001b4f4 	movhi	zero,1747
   1b4d0:	0001b4e4 	muli	zero,zero,1747
   1b4d4:	0001b4ec 	andhi	zero,zero,1747
   1b4d8:	0001b4f4 	movhi	zero,1747
   1b4dc:	0001b4f4 	movhi	zero,1747
   1b4e0:	0001b4e4 	muli	zero,zero,1747
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1b4e4:	00800044 	movi	r2,1
   1b4e8:	00000306 	br	1b4f8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1b4ec:	0005883a 	mov	r2,zero
   1b4f0:	00000106 	br	1b4f8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   1b4f4:	0005883a 	mov	r2,zero
  }
}
   1b4f8:	e037883a 	mov	sp,fp
   1b4fc:	df000017 	ldw	fp,0(sp)
   1b500:	dec00104 	addi	sp,sp,4
   1b504:	f800283a 	ret

0001b508 <atexit>:
   1b508:	200b883a 	mov	r5,r4
   1b50c:	000f883a 	mov	r7,zero
   1b510:	000d883a 	mov	r6,zero
   1b514:	0009883a 	mov	r4,zero
   1b518:	001b5c81 	jmpi	1b5c8 <__register_exitproc>

0001b51c <exit>:
   1b51c:	defffe04 	addi	sp,sp,-8
   1b520:	000b883a 	mov	r5,zero
   1b524:	dc000015 	stw	r16,0(sp)
   1b528:	dfc00115 	stw	ra,4(sp)
   1b52c:	2021883a 	mov	r16,r4
   1b530:	001b6580 	call	1b658 <__call_exitprocs>
   1b534:	008000b4 	movhi	r2,2
   1b538:	11381717 	ldw	r4,-8100(r2)
   1b53c:	20800f17 	ldw	r2,60(r4)
   1b540:	10000126 	beq	r2,zero,1b548 <exit+0x2c>
   1b544:	103ee83a 	callr	r2
   1b548:	8009883a 	mov	r4,r16
   1b54c:	000e1340 	call	e134 <_exit>

0001b550 <memcmp>:
   1b550:	30800130 	cmpltui	r2,r6,4
   1b554:	10000b1e 	bne	r2,zero,1b584 <memcmp+0x34>
   1b558:	2144b03a 	or	r2,r4,r5
   1b55c:	108000cc 	andi	r2,r2,3
   1b560:	1000171e 	bne	r2,zero,1b5c0 <memcmp+0x70>
   1b564:	20c00017 	ldw	r3,0(r4)
   1b568:	28800017 	ldw	r2,0(r5)
   1b56c:	1880141e 	bne	r3,r2,1b5c0 <memcmp+0x70>
   1b570:	31bfff04 	addi	r6,r6,-4
   1b574:	30800128 	cmpgeui	r2,r6,4
   1b578:	21000104 	addi	r4,r4,4
   1b57c:	29400104 	addi	r5,r5,4
   1b580:	103ff81e 	bne	r2,zero,1b564 <memcmp+0x14>
   1b584:	30bfffc4 	addi	r2,r6,-1
   1b588:	30000b26 	beq	r6,zero,1b5b8 <memcmp+0x68>
   1b58c:	11800044 	addi	r6,r2,1
   1b590:	218d883a 	add	r6,r4,r6
   1b594:	00000106 	br	1b59c <memcmp+0x4c>
   1b598:	21800726 	beq	r4,r6,1b5b8 <memcmp+0x68>
   1b59c:	20800003 	ldbu	r2,0(r4)
   1b5a0:	28c00003 	ldbu	r3,0(r5)
   1b5a4:	21000044 	addi	r4,r4,1
   1b5a8:	29400044 	addi	r5,r5,1
   1b5ac:	10fffa26 	beq	r2,r3,1b598 <memcmp+0x48>
   1b5b0:	10c5c83a 	sub	r2,r2,r3
   1b5b4:	f800283a 	ret
   1b5b8:	0005883a 	mov	r2,zero
   1b5bc:	f800283a 	ret
   1b5c0:	30bfffc4 	addi	r2,r6,-1
   1b5c4:	003ff106 	br	1b58c <memcmp+0x3c>

0001b5c8 <__register_exitproc>:
   1b5c8:	008000b4 	movhi	r2,2
   1b5cc:	10f81717 	ldw	r3,-8100(r2)
   1b5d0:	18805217 	ldw	r2,328(r3)
   1b5d4:	10001726 	beq	r2,zero,1b634 <__register_exitproc+0x6c>
   1b5d8:	10c00117 	ldw	r3,4(r2)
   1b5dc:	1a000808 	cmpgei	r8,r3,32
   1b5e0:	40001b1e 	bne	r8,zero,1b650 <__register_exitproc+0x88>
   1b5e4:	20000b26 	beq	r4,zero,1b614 <__register_exitproc+0x4c>
   1b5e8:	181090ba 	slli	r8,r3,2
   1b5ec:	02400044 	movi	r9,1
   1b5f0:	48d2983a 	sll	r9,r9,r3
   1b5f4:	1211883a 	add	r8,r2,r8
   1b5f8:	41802215 	stw	r6,136(r8)
   1b5fc:	11806217 	ldw	r6,392(r2)
   1b600:	21000098 	cmpnei	r4,r4,2
   1b604:	324cb03a 	or	r6,r6,r9
   1b608:	11806215 	stw	r6,392(r2)
   1b60c:	41c04215 	stw	r7,264(r8)
   1b610:	20000b26 	beq	r4,zero,1b640 <__register_exitproc+0x78>
   1b614:	19000084 	addi	r4,r3,2
   1b618:	200890ba 	slli	r4,r4,2
   1b61c:	18c00044 	addi	r3,r3,1
   1b620:	10c00115 	stw	r3,4(r2)
   1b624:	1105883a 	add	r2,r2,r4
   1b628:	11400015 	stw	r5,0(r2)
   1b62c:	0005883a 	mov	r2,zero
   1b630:	f800283a 	ret
   1b634:	18805304 	addi	r2,r3,332
   1b638:	18805215 	stw	r2,328(r3)
   1b63c:	003fe606 	br	1b5d8 <__register_exitproc+0x10>
   1b640:	11006317 	ldw	r4,396(r2)
   1b644:	2252b03a 	or	r9,r4,r9
   1b648:	12406315 	stw	r9,396(r2)
   1b64c:	003ff106 	br	1b614 <__register_exitproc+0x4c>
   1b650:	00bfffc4 	movi	r2,-1
   1b654:	f800283a 	ret

0001b658 <__call_exitprocs>:
   1b658:	defff704 	addi	sp,sp,-36
   1b65c:	008000b4 	movhi	r2,2
   1b660:	dcc00315 	stw	r19,12(sp)
   1b664:	14f81717 	ldw	r19,-8100(r2)
   1b668:	dc800215 	stw	r18,8(sp)
   1b66c:	dfc00815 	stw	ra,32(sp)
   1b670:	9c805217 	ldw	r18,328(r19)
   1b674:	ddc00715 	stw	r23,28(sp)
   1b678:	dd800615 	stw	r22,24(sp)
   1b67c:	dd400515 	stw	r21,20(sp)
   1b680:	dd000415 	stw	r20,16(sp)
   1b684:	dc400115 	stw	r17,4(sp)
   1b688:	dc000015 	stw	r16,0(sp)
   1b68c:	90001026 	beq	r18,zero,1b6d0 <__call_exitprocs+0x78>
   1b690:	202b883a 	mov	r21,r4
   1b694:	282d883a 	mov	r22,r5
   1b698:	05000044 	movi	r20,1
   1b69c:	94000117 	ldw	r16,4(r18)
   1b6a0:	847fffc4 	addi	r17,r16,-1
   1b6a4:	88000a16 	blt	r17,zero,1b6d0 <__call_exitprocs+0x78>
   1b6a8:	84000044 	addi	r16,r16,1
   1b6ac:	802090ba 	slli	r16,r16,2
   1b6b0:	9421883a 	add	r16,r18,r16
   1b6b4:	b0001126 	beq	r22,zero,1b6fc <__call_exitprocs+0xa4>
   1b6b8:	80804017 	ldw	r2,256(r16)
   1b6bc:	15800f26 	beq	r2,r22,1b6fc <__call_exitprocs+0xa4>
   1b6c0:	8c7fffc4 	addi	r17,r17,-1
   1b6c4:	88bfffd8 	cmpnei	r2,r17,-1
   1b6c8:	843fff04 	addi	r16,r16,-4
   1b6cc:	103ff91e 	bne	r2,zero,1b6b4 <__call_exitprocs+0x5c>
   1b6d0:	dfc00817 	ldw	ra,32(sp)
   1b6d4:	ddc00717 	ldw	r23,28(sp)
   1b6d8:	dd800617 	ldw	r22,24(sp)
   1b6dc:	dd400517 	ldw	r21,20(sp)
   1b6e0:	dd000417 	ldw	r20,16(sp)
   1b6e4:	dcc00317 	ldw	r19,12(sp)
   1b6e8:	dc800217 	ldw	r18,8(sp)
   1b6ec:	dc400117 	ldw	r17,4(sp)
   1b6f0:	dc000017 	ldw	r16,0(sp)
   1b6f4:	dec00904 	addi	sp,sp,36
   1b6f8:	f800283a 	ret
   1b6fc:	90800117 	ldw	r2,4(r18)
   1b700:	81800017 	ldw	r6,0(r16)
   1b704:	10bfffc4 	addi	r2,r2,-1
   1b708:	14401726 	beq	r2,r17,1b768 <__call_exitprocs+0x110>
   1b70c:	80000015 	stw	zero,0(r16)
   1b710:	303feb26 	beq	r6,zero,1b6c0 <__call_exitprocs+0x68>
   1b714:	a446983a 	sll	r3,r20,r17
   1b718:	90806217 	ldw	r2,392(r18)
   1b71c:	95c00117 	ldw	r23,4(r18)
   1b720:	1884703a 	and	r2,r3,r2
   1b724:	1000081e 	bne	r2,zero,1b748 <__call_exitprocs+0xf0>
   1b728:	303ee83a 	callr	r6
   1b72c:	90c00117 	ldw	r3,4(r18)
   1b730:	98805217 	ldw	r2,328(r19)
   1b734:	1dc0011e 	bne	r3,r23,1b73c <__call_exitprocs+0xe4>
   1b738:	90bfe126 	beq	r18,r2,1b6c0 <__call_exitprocs+0x68>
   1b73c:	103fe426 	beq	r2,zero,1b6d0 <__call_exitprocs+0x78>
   1b740:	1025883a 	mov	r18,r2
   1b744:	003fd506 	br	1b69c <__call_exitprocs+0x44>
   1b748:	90806317 	ldw	r2,396(r18)
   1b74c:	81002017 	ldw	r4,128(r16)
   1b750:	1886703a 	and	r3,r3,r2
   1b754:	1800061e 	bne	r3,zero,1b770 <__call_exitprocs+0x118>
   1b758:	200b883a 	mov	r5,r4
   1b75c:	a809883a 	mov	r4,r21
   1b760:	303ee83a 	callr	r6
   1b764:	003ff106 	br	1b72c <__call_exitprocs+0xd4>
   1b768:	94400115 	stw	r17,4(r18)
   1b76c:	003fe806 	br	1b710 <__call_exitprocs+0xb8>
   1b770:	303ee83a 	callr	r6
   1b774:	003fed06 	br	1b72c <__call_exitprocs+0xd4>
